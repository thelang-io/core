/*!
 * Copyright (c) 2018 Aaron Delasy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

obj TokenizerState {
  mut idx: int
  mut pos: int
  mut ch: char
  mut handled: bool
}

obj Tokenizer {
  mut reader: ref Reader
  mut state: TokenizerState
  mut data: Token[]
  mut errors: str[]

  fn next (mut self: ref Self, withIgnored := false) Token {
    if self.data.len < self.state.idx {
      return self.data[self.state.idx++]
    } elif !self.data.empty() && self.data[-1].type == TK_EOF {
      RaiseError("Tried to tokenize on eof")
    }

    loop {
      tok := self._getToken()

      self.data.push(tok)
      self.state.idx++

      if withIgnored || (
        tok.type != TK_WHITESPACE &&
        tok.type != TK_COMMENT_BLOCK &&
        tok.type != TK_COMMENT_LINE
      ) {
        return tok
      }
    }
  }

  fn _getToken (mut self: ref Self) Token {
    if self.reader.eof() {
      return Token{
        type: TK_EOF,
        val: "",
        start: self.state.pos,
        end: self.state.pos
      }
    }

    self.state.ch = self.reader.next()
    self.state.handled = false
    mut tok: Token?

    if (tok = self._maybeWhitespace()) != nil {
      return tok
    } elif (tok = self._maybeCommentBlock()) != nil {
      return tok
    } elif (tok = self._maybeCommentLine()) != nil {
      return tok
    } elif (tok = self._maybeOp()) != nil {
      return tok
    } elif (tok = self._maybeKeyword()) != nil {
      return tok
    } elif (tok = self._maybeNumber()) != nil {
      return tok
    } elif (tok = self._maybeString()) != nil {
      return tok
    } elif (tok = self._maybeChar()) != nil {
      return tok
    } else {
      self._raise(E0000(self.state.ch), self.state.pos)
      return self._wrapToken(TK_UNKNOWN)
    }
  }

  fn _maybeChar (mut self: ref Self) Token? {
    if self.state.ch != '\'' {
      return nil
    }

    if self.reader.eof() {
      self._raise(E0002(), self.state.pos)
      return self._wrapToken(TK_LIT_CHAR)
    }

    ch1 := self.reader.next()

    if ch1 == '\n' {
      self._raise(E0002(), self.state.pos)
      return self._wrapToken(TK_LIT_CHAR)
    } elif ch1 == '\'' {
      self._raise(E0004(), self.state.pos)
      return self._wrapToken(TK_LIT_CHAR)
    } elif ch1 == '\\' {
      if self.reader.eof() {
        self._raise(E0002(), self.state.pos)
        return self._wrapToken(TK_LIT_CHAR)
      }

      ch2 := self.reader.next()

      if !Token_isCharEsc(ch2) {
        self._raise(E0005(), self.state.pos)
      }
    }

    if !self.reader.lookahead('\'') {
      loop {
        if self.reader.eof() {
          self._raise(E0002(), self.state.pos)
          break
        }

        pos3 := self.reader.pos
        ch3 := self.reader.next()

        if ch3 == '\'' {
          self._raise(E0007(), self.state.pos)
          break
        } elif ch3 == '\n' {
          self.reader.seek(pos3)
          self._raise(E0002(), self.state.pos)

          break
        }
      }
    }

    return self._wrapToken(TK_LIT_CHAR)
  }

  fn _maybeCommentBlock (mut self: ref Self) Token? {
    if self.state.ch != '/' || !self.reader.lookahead('*') {
      return nil
    }

    loop {
      if self.reader.eof() {
        self._raise(E0001(), self.state.pos)
        break
      }

      ch := self.reader.next()

      if ch == '*' && self.reader.lookahead('/') {
        break
      }
    }

    return self._wrapToken(TK_COMMENT_BLOCK)
  }

  fn _maybeCommentLine (mut self: ref Self) Token? {
    if self.state.ch != '/' || !self.reader.lookahead('/') {
      return nil
    }

    self.reader.walk(Token_isNotNewLine)
    return self._wrapToken(TK_COMMENT_LINE)
  }

  fn _maybeKeyword (mut self: ref Tokenizer) Token? {
    if !Token_isIdStart(self.state.ch) {
      return nil
    }

    self.reader.walk(Token_isId)
    val := self.reader.slice(self.state.pos, self.reader.pos)

    if val == "break" {
      return self._wrapToken(TK_KW_BREAK)
    } elif val == "catch" {
      return self._wrapToken(TK_KW_CATCH)
    } elif val == "continue" {
      return self._wrapToken(TK_KW_CONTINUE)
    } elif val == "elif" {
      return self._wrapToken(TK_KW_ELIF)
    } elif val == "else" {
      return self._wrapToken(TK_KW_ELSE)
    } elif val == "enum" {
      return self._wrapToken(TK_KW_ENUM)
    } elif val == "export" {
      return self._wrapToken(TK_KW_EXPORT)
    } elif val == "false" {
      return self._wrapToken(TK_KW_FALSE)
    } elif val == "fn" {
      return self._wrapToken(TK_KW_FN)
    } elif val == "if" {
      return self._wrapToken(TK_KW_IF)
    } elif val == "import" {
      return self._wrapToken(TK_KW_IMPORT)
    } elif val == "is" {
      return self._wrapToken(TK_KW_IS)
    } elif val == "loop" {
      return self._wrapToken(TK_KW_LOOP)
    } elif val == "main" {
      return self._wrapToken(TK_KW_MAIN)
    } elif val == "mut" {
      return self._wrapToken(TK_KW_MUT)
    } elif val == "nil" {
      return self._wrapToken(TK_KW_NIL)
    } elif val == "obj" {
      return self._wrapToken(TK_KW_OBJ)
    } elif val == "ref" {
      return self._wrapToken(TK_KW_REF)
    } elif val == "return" {
      return self._wrapToken(TK_KW_RETURN)
    } elif val == "throw" {
      return self._wrapToken(TK_KW_THROW)
    } elif val == "true" {
      return self._wrapToken(TK_KW_TRUE)
    } elif val == "try" {
      return self._wrapToken(TK_KW_TRY)
    } elif val == "union" {
      return self._wrapToken(TK_KW_UNION)
    }

    return self._wrapToken(TK_ID)
  }

  fn _maybeNumber (mut self: ref Self) Token? {
    if !self.state.ch.isDigit() {
      return nil
    }

    if self.state.ch == '0' {
      if self.reader.eof() {
        return self._wrapToken(TK_LIT_INT_DEC)
      }

      pos := self.reader.pos
      ch := self.reader.next()

      if Token_isIntDec(ch) {
        self.reader.walk(Token_isId)
        self._raise(E0008(), self.state.pos)

        return self._wrapToken(TK_LIT_INT_DEC)
      } elif ch == 'B' || ch == 'b' {
        return self._wrapInt(TK_LIT_INT_BIN, E0009("binary"), Token_isIntBin)
      } elif ch == 'O' || ch == 'o' {
        return self._wrapInt(TK_LIT_INT_OCT, E0009("octal"), Token_isIntOct)
      } elif ch == 'X' || ch == 'x' {
        return self._wrapInt(TK_LIT_INT_HEX, E0009("hexadecimal"), Token_isIntHex)
      }

      self.reader.seek(pos)
    } else {
      self.reader.walk(Token_isIntDec)
    }

    return self._wrapInt(TK_LIT_INT_DEC, E0009("decimal"), Token_isIntDec)
  }

  fn _maybeOp (mut self: ref Self) Token? {
    if self.state.ch == '&' {
      if self.reader.lookahead('&') {
        if self.reader.lookahead('=') {
          return self._wrapToken(TK_OP_AMP_AMP_EQ)
        } else {
          return self._wrapToken(TK_OP_AMP_AMP)
        }
      } elif self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_AMP_EQ)
      } else {
        return self._wrapToken(TK_OP_AMP)
      }
    } elif self.state.ch == '@' {
      return self._wrapToken(TK_OP_AT)
    } elif self.state.ch == '`' {
      return self._wrapToken(TK_OP_BACKTICK)
    } elif self.state.ch == '\\' {
      return self._wrapToken(TK_OP_BACKSLASH)
    } elif self.state.ch == '^' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_CARET_EQ)
      } else {
        return self._wrapToken(TK_OP_CARET)
      }
    } elif self.state.ch == ':' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_COLON_EQ)
      } else {
        return self._wrapToken(TK_OP_COLON)
      }
    } elif self.state.ch == ',' {
      return self._wrapToken(TK_OP_COMMA)
    } elif self.state.ch == '.' {
      pos := self.reader.pos

      if self.reader.lookahead('.') && self.reader.lookahead('.') {
        return self._wrapToken(TK_OP_ELLIPSIS)
      }

      self.reader.seek(pos)
      return self._wrapToken(TK_OP_DOT)
    } elif self.state.ch == '$' {
      return self._wrapToken(TK_OP_DOLLAR)
    } elif self.state.ch == '=' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_EQ_EQ)
      } else {
        return self._wrapToken(TK_OP_EQ)
      }
    } elif self.state.ch == '!' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_EXCL_EQ)
      } else {
        return self._wrapToken(TK_OP_EXCL)
      }
    } elif self.state.ch == '>' {
      if self.reader.lookahead('>') {
        if self.reader.lookahead('=') {
          return self._wrapToken(TK_OP_RSHIFT_EQ)
        } else {
          return self._wrapToken(TK_OP_RSHIFT)
        }
      } elif self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_GT_EQ)
      } else {
        return self._wrapToken(TK_OP_GT)
      }
    } elif self.state.ch == '#' {
      return self._wrapToken(TK_OP_HASH)
    } elif self.state.ch == '{' {
      return self._wrapToken(TK_OP_LBRACE)
    } elif self.state.ch == '[' {
      return self._wrapToken(TK_OP_LBRACK)
    } elif self.state.ch == '(' {
      return self._wrapToken(TK_OP_LPAR)
    } elif self.state.ch == '<' {
      if self.reader.lookahead('<') {
        if self.reader.lookahead('=') {
          return self._wrapToken(TK_OP_LSHIFT_EQ)
        } else {
          return self._wrapToken(TK_OP_LSHIFT)
        }
      } elif self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_LT_EQ)
      } else {
        return self._wrapToken(TK_OP_LT)
      }
    } elif self.state.ch == '-' {
      if self.reader.lookahead('-') {
        return self._wrapToken(TK_OP_MINUS_MINUS)
      } elif self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_MINUS_EQ)
      } elif self.reader.lookahead('>') {
        return self._wrapToken(TK_OP_ARROW)
      } else {
        return self._wrapToken(TK_OP_MINUS)
      }
    } elif self.state.ch == '|' {
      if self.reader.lookahead('|') {
        if self.reader.lookahead('=') {
          return self._wrapToken(TK_OP_PIPE_PIPE_EQ)
        } else {
          return self._wrapToken(TK_OP_PIPE_PIPE)
        }
      } elif self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_PIPE_EQ)
      } else {
        return self._wrapToken(TK_OP_PIPE)
      }
    } elif self.state.ch == '%' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_PERCENT_EQ)
      } else {
        return self._wrapToken(TK_OP_PERCENT)
      }
    } elif self.state.ch == '+' {
      if self.reader.lookahead('+') {
        return self._wrapToken(TK_OP_PLUS_PLUS)
      } elif self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_PLUS_EQ)
      } else {
        return self._wrapToken(TK_OP_PLUS)
      }
    } elif self.state.ch == '?' {
      return self._wrapToken(TK_OP_QN)
    } elif self.state.ch == '}' {
      return self._wrapToken(TK_OP_RBRACE)
    } elif self.state.ch == ']' {
      return self._wrapToken(TK_OP_RBRACK)
    } elif self.state.ch == ')' {
      return self._wrapToken(TK_OP_RPAR)
    } elif self.state.ch == ';' {
      return self._wrapToken(TK_OP_SEMI)
    } elif self.state.ch == '/' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_SLASH_EQ)
      } else {
        return self._wrapToken(TK_OP_SLASH)
      }
    } elif self.state.ch == '*' {
      if self.reader.lookahead('=') {
        return self._wrapToken(TK_OP_STAR_EQ)
      } else {
        return self._wrapToken(TK_OP_STAR)
      }
    } elif self.state.ch == '~' {
      return self._wrapToken(TK_OP_TILDE)
    }

    return nil
  }

  fn _maybeString (mut self: ref Self) Token? {
    if self.state.ch != '"' {
      return nil
    }

    loop {
      if self.reader.eof() {
        self._raise(E0003(), self.state.pos)
        break
      }

      pos1 := self.reader.pos
      ch1 := self.reader.next()

      if ch1 == '"' {
        break
      } elif ch1 == '\\' {
        ch2 := self.reader.next()

        if !Token_isStrEsc(ch2) {
          self._raise(E0006(), pos1)
        }
      }
    }

    return self._wrapToken(TK_LIT_STR)
  }

  fn _maybeWhitespace (mut self: ref Self) Token? {
    if !self.state.ch.isSpace() {
      return nil
    }

    self.reader.walk(Token_isWhitespace)
    return self._wrapToken(TK_WHITESPACE)
  }

  fn _raise (mut self: ref Self, message: str, start: int) {
    if self.state.handled {
      return
    }

    startLoc := Location_locate(self.reader.content, start)
    endLoc := Location_locate(self.reader.content, self.reader.pos)
    lines := self.reader.content.lines()

    mut errorLines: str[]
    mut errorLinesNums: int[]

    if startLoc.line != 1 {
      errorLines.push(lines[startLoc.line - 2])
      errorLinesNums.push(startLoc.line - 1)
    }

    errorLines.push(lines[startLoc.line - 1])
    errorLinesNums.push(startLoc.line)

    if startLoc.line == endLoc.line && startLoc.col == endLoc.col {
      mut x: u32 = startLoc.col - 1
      errorLines.push(' '.repeat(x) + "^")
    } elif startLoc.line == endLoc.line {
      mut x1: u32 = startLoc.col - 1
      mut x2: u32 = endLoc.col - startLoc.col
      errorLines.push(' '.repeat(x1) + '~'.repeat(x2))
    } else {
      errorLine := lines[startLoc.line - 1]
      mut x1: u32 = startLoc.col - 1
      mut x2: u32 = errorLine.len - startLoc.col
      errorLines.push(' '.repeat(x1) + '~'.repeat(x2))
    }

    errorLinesNums.push(startLoc.line)

    if startLoc.line != lines.len && !lines[startLoc.line].empty() {
      errorLines.push(lines[startLoc.line])
      errorLinesNums.push(startLoc.line + 1)
    }

    gutterLen := errorLinesNums[-1].str().len + 1

    mut error := self.reader.path + ":" + startLoc.line.str() + ":" +
      startLoc.col.str() + ": SyntaxError: " + message + os_EOL

    mut prevLineNum := 0

    loop i := 0; i < errorLinesNums.len; i++ {
      errorLineNum := errorLinesNums[i]

      if prevLineNum == errorLineNum {
        mut x: u32 = gutterLen
        error += ' '.repeat(x)
      } else {
        errorLineNumLen := errorLineNum.str().len
        mut x: u32 = gutterLen - errorLineNumLen
        error += errorLineNum.str() + ' '.repeat(x)
      }

      error += "| " + errorLines[i] + os_EOL
      prevLineNum = errorLineNum
    }

    self.errors.push(error)
    self.state.handled = true
  }

  fn _wrapFloat (mut self: ref Self, type: int, errorMessage: str) Token {
    if self.reader.eof() {
      return self._wrapToken(type)
    }

    pos1 := self.reader.pos
    ch1 := self.reader.next()

    if Token_isId(ch1) && ch1 != 'E' && ch1 != 'e' {
      self.reader.walk(Token_isId)
      self._raise(errorMessage, self.state.pos)

      return self._wrapToken(type)
    } elif ch1 != '.' && ch1 != 'E' && ch1 != 'e' {
      self.reader.seek(pos1)
      return self._wrapToken(type)
    }

    mut expStartPos := pos1

    if ch1 == '.' {
      if self.reader.eof() {
        self._raise(E0010(), self.state.pos)
        return self._wrapToken(TK_LIT_FLOAT)
      }

      pos2 := self.reader.pos
      ch2 := self.reader.next()

      if ch2 == '.' {
        self.reader.seek(pos1)
        return self._wrapToken(type)
      } elif !Token_isIntDec(ch2) {
        self.reader.walk(Token_isId)
        self._raise(E0010(), self.state.pos)

        return self._wrapToken(TK_LIT_FLOAT)
      }

      self.reader.walk(Token_isIntDec)

      if self.reader.eof() {
        return self._wrapTokenFloat(type)
      }

      pos3 := self.reader.pos
      ch3 := self.reader.next()

      if Token_isId(ch3) && ch3 != 'E' && ch3 != 'e' {
        self.reader.walk(Token_isId)
        self._raise(E0010(), self.state.pos)

        return self._wrapToken(TK_LIT_FLOAT)
      } elif ch3 != 'E' && ch3 != 'e' {
        self.reader.seek(pos3)
        return self._wrapTokenFloat(type)
      }

      expStartPos = pos3
    }

    if self.reader.eof() {
      self._raise(E0011(), expStartPos)
      return self._wrapToken(TK_LIT_FLOAT)
    }

    ch4 := self.reader.next()

    if !Token_isIntDec(ch4) && ch4 != '+' && ch4 != '-' {
      self.reader.walk(Token_isId)
      self._raise(E0011(), expStartPos)

      return self._wrapToken(TK_LIT_FLOAT)
    }

    if ch4 == '+' || ch4 == '-' {
      if self.reader.eof() {
        self._raise(E0011(), expStartPos)
        return self._wrapToken(TK_LIT_FLOAT)
      }

      ch5 := self.reader.next()

      if !Token_isIntDec(ch5) {
        self.reader.walk(Token_isId)
        self._raise(E0011(), expStartPos)

        return self._wrapToken(TK_LIT_FLOAT)
      }
    }

    self.reader.walk(Token_isIntDec)
    return self._wrapTokenFloat(type)
  }

  fn _wrapInt (
    mut self: ref Self,
    type: int,
    errorMessage: str,
    check: (char) -> bool
  ) Token {
    if type != TK_LIT_INT_DEC {
      if self.reader.eof() {
        self._raise(errorMessage, self.state.pos)
        return self._wrapToken(type)
      }

      ch := self.reader.next()

      if type != TK_LIT_INT_DEC && !check(ch) {
        self.reader.walk(Token_isId)
        self._raise(errorMessage, self.state.pos)

        return self._wrapToken(type)
      }

      self.reader.walk(check)
    }

    return self._wrapFloat(type, errorMessage)
  }

  fn _wrapToken (mut self: ref Self, type: int) Token {
    start := self.state.pos
    self.state.pos = self.reader.pos
    self.state.handled = true

    return Token{
      type: type,
      val: self.reader.slice(start, self.state.pos),
      start: start,
      end: self.state.pos
    }
  }

  fn _wrapTokenFloat (mut self: ref Self, type: int) Token {
    if !self.reader.eof() {
      pos := self.reader.pos
      ch := self.reader.next()

      if Token_isId(ch) {
        self.reader.walk(Token_isId)
        self._raise(E0010(), self.state.pos)

        return self._wrapToken(TK_LIT_FLOAT)
      }

      self.reader.seek(pos)
    }

    if type == TK_LIT_INT_BIN {
      self._raise(E0012("binary"), self.state.pos)
    } elif type == TK_LIT_INT_HEX {
      self._raise(E0012("hexadecimal"), self.state.pos)
    } elif type == TK_LIT_INT_OCT {
      self._raise(E0012("octal"), self.state.pos)
    }

    return self._wrapToken(TK_LIT_FLOAT)
  }
}

fn Tokenizer_init (mut reader: ref Reader) Tokenizer {
  return Tokenizer{
    reader: reader,
    state: TokenizerState{
      idx: 0,
      pos: 0,
      ch: '\0',
      handled: false
    },
    data: [],
    errors: []
  }
}
