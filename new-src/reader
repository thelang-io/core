/*!
 * Copyright (c) 2018 Aaron Delasy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

obj Reader {
  path: str
  content: str
  mut pos: int

  fn eof (self: Self) bool {
    return self.pos >= self.content.len
  }

  fn lookahead (mut self: ref Self, check: char) bool {
    if (
      check == '\n' &&
      os_name() == "Windows" &&
      self.content.slice(self.pos, self.pos + 2) == "\r\n"
    ) {
      self.pos += 2
      return true
    } elif (
      self.pos < self.content.len &&
      self.content[self.pos] == check
    ) {
      self.pos += 1
      return true
    }

    return false
  }

  fn next (mut self: ref Self) char {
    if self.eof() {
      RaiseError("Tried to read on eof")
    } elif (
      os_name() == "Windows" &&
      self.content.slice(self.pos, self.pos + 2) == "\r\n"
    ) {
      self.pos++
    }

    return self.content[self.pos++]
  }

  fn seek (mut self: ref Self, pos: int) {
    self.pos = pos
  }

  fn slice (self: Self, start: int, end: int) str {
    return self.content.slice(start, end)
  }

  fn walk (mut self: ref Self, match: (char) -> bool) {
    loop !self.eof() {
      pos := self.pos
      ch := self.next()

      if !match(ch) {
        self.seek(pos)
        break
      }
    }
  }
}

fn Reader_init (p: str) Reader {
  path := fs_realpathSync(p)

  if !fs_isFileSync(path) {
    RaiseError("Path \"" + path + "\" is not a file")
  }

  content := fs_readFileSync(path).str()
  return Reader{path: path, content: content}
}
