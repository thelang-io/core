/** Allows storing a collection of multiple characters under a single variable. */
obj String {
  /** Whether string has characters. */
  empty: bool
  /** Number of characters. */
  len: int
  /** Representation of string with characters lowercased. */
  lower: Self
  /** Representation of string with first character lowercased. */
  lowerFirst: Self
  /** Representation of string with characters uppercased. */
  upper: Self
  /** Representation of string with first character uppercased. */
  upperFirst: Self

  /**
   * Accesses element by index and return its reference.
   *
   * @name [idx: int]
   * @return ref char
   */

  /**
   * Checks whether calling string contains `search` substring.
   *
   * @param search - Substring to check if exists.
   */
  fn contains (self: ref Self, search: Self) bool

  /**
   * Searches for substring and returns its position, otherwise `-1` is returned.
   *
   * @param search - Substring to search for.
   */
  fn find (self: ref Self, search: Self) Self

  /**
   * Splits string by lines. Delimited by any of: `\r`, `\n`, `\r\n`.
   *
   * @param keepLineBreaks - Whether resulting array should contain line endings. The default is false.
   */
  fn lines (self: ref Self, keepLineBreaks := false) Self[]

  /**
   * Returns a copy of calling string with `search` replaced with `replacement`.
   *
   * @param search - Substring to search for.
   * @param replacement - Substring to replace with.
   * @param all - Whether should replace all occurrences of `search`.
   */
  fn replace (self: ref Self, search: Self, replacement: Self, all := true) Self

  /**
   * Extracts string slice from `start` to `end` (`end` not included).
   *
   * @param start - Index at which to start extraction. The default is zero.
   *   - If value is negative then string length is added to it.
   *   - If value is less than string length then 0 value is used.
   *   - If value is greater than string length then nothing is extracted.
   * @param end - Index at which to end extraction. The default is string length.
   *   - If value is negative then string length is added to it.
   *   - If value is less than string length then 0 value is used.
   *   - If value is greater than string length then string length is used.
   *   - If value positioned before or equals `start` then nothing is extracted.
   *
   * @todo Change start and end params to int type
   */
  fn slice (self: ref Self, start := 0, end := self.len) Self

  /**
   * Splits string into array of string delimited with `delimiter`.
   *
   * @param delimiter - Delimiter to split with.
   */
  fn split (self: ref Self, delimiter := "") Self[]

  /** Converts a string to `buffer_Buffer` object. */
  fn toBuffer (self: ref Self) buffer_Buffer

  /** Returns a string with whitespaces removed from both ends. */
  fn trim (self: ref Self) Self
}
