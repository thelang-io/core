/*!
 * Copyright (c) Aaron Delasy
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

#ifndef FOUNDATION_HPP
#define FOUNDATION_HPP

#include <string>

auto foundationCode = std::string(
  "#include <math.h>\n"
  "#include <stdbool.h>\n"
  "#include <stdint.h>\n"
  "#include <stdio.h>\n"
  "#include <stdlib.h>\n"
  "#include <string.h>\n"

  "struct builtin_bool {\n"
  "  bool v;\n"
  "};\n"
  "struct builtin_byte {\n"
  "  uint8_t v;\n"
  "};\n"
  "struct builtin_char {\n"
  "  int8_t v;\n"
  "};\n"
  "struct builtin_float {\n"
  "  double v;\n"
  "};\n"
  "struct builtin_f32 {\n"
  "  float v;\n"
  "};\n"
  "struct builtin_f64 {\n"
  "  double v;\n"
  "};\n"
  "struct builtin_fn {\n"
  "  void *(*f) (void *, void *);\n"
  "  void *t;\n"
  "};\n"
  "struct builtin_int {\n"
  "  int32_t v;\n"
  "};\n"
  "struct builtin_i8 {\n"
  "  int8_t v;\n"
  "};\n"
  "struct builtin_i16 {\n"
  "  int16_t v;\n"
  "};\n"
  "struct builtin_i32 {\n"
  "  int32_t v;\n"
  "};\n"
  "struct builtin_i64 {\n"
  "  int64_t v;\n"
  "};\n"
  "struct builtin_str {\n"
  "  uint8_t *c;\n"
  "  size_t l;\n"
  "};\n"
  "struct builtin_u8 {\n"
  "  uint8_t v;\n"
  "};\n"
  "struct builtin_u16 {\n"
  "  uint16_t v;\n"
  "};\n"
  "struct builtin_u32 {\n"
  "  uint32_t v;\n"
  "};\n"
  "struct builtin_u64 {\n"
  "  uint64_t v;\n"
  "};\n"

  "struct builtin_bool *builtin_bool_init (bool);\n"
  "struct builtin_bool *builtin_bool_copy (const struct builtin_bool *);\n"
  "void builtin_bool_deinit (struct builtin_bool **);\n"
  "char *builtin_bool_to_cstr (const struct builtin_bool *);\n"
  "struct builtin_str *builtin_bool_str (const struct builtin_bool *);\n"

  "struct builtin_byte *builtin_byte_init (uint8_t);\n"
  "struct builtin_byte *builtin_byte_copy (const struct builtin_byte *);\n"
  "void builtin_byte_deinit (struct builtin_byte **);\n"
  "char *builtin_byte_to_cstr (const struct builtin_byte *);\n"
  "struct builtin_str *builtin_byte_str (const struct builtin_byte *);\n"

  "struct builtin_char *builtin_char_init (int8_t);\n"
  "struct builtin_char *builtin_char_copy (const struct builtin_char *);\n"
  "void builtin_char_deinit (struct builtin_char **);\n"
  "char *builtin_char_to_cstr (const struct builtin_char *);\n"
  "struct builtin_str *builtin_char_str (const struct builtin_char *);\n"

  "struct builtin_float *builtin_float_init (double);\n"
  "struct builtin_float *builtin_float_copy (const struct builtin_float *);\n"
  "void builtin_float_deinit (struct builtin_float **);\n"
  "char *builtin_float_to_cstr (const struct builtin_float *);\n"
  "struct builtin_str *builtin_float_str (const struct builtin_float *);\n"

  "struct builtin_f32 *builtin_f32_init (float);\n"
  "struct builtin_f32 *builtin_f32_copy (const struct builtin_f32 *);\n"
  "void builtin_f32_deinit (struct builtin_f32 **);\n"
  "char *builtin_f32_to_cstr (const struct builtin_f32 *);\n"
  "struct builtin_str *builtin_f32_str (const struct builtin_f32 *);\n"

  "struct builtin_f64 *builtin_f64_init (double);\n"
  "struct builtin_f64 *builtin_f64_copy (const struct builtin_f64 *);\n"
  "void builtin_f64_deinit (struct builtin_f64 **);\n"
  "char *builtin_f64_to_cstr (const struct builtin_f64 *);\n"
  "struct builtin_str *builtin_f64_str (const struct builtin_f64 *);\n"

  "struct builtin_fn *builtin_fn_init (void * (void *, void *));\n"
  "void builtin_fn_deinit (struct builtin_fn **);\n"
  "void *builtin_fn_call (const struct builtin_fn *, void *);\n"

  "struct builtin_int *builtin_int_init (int32_t);\n"
  "struct builtin_int *builtin_int_copy (const struct builtin_int *);\n"
  "void builtin_int_deinit (struct builtin_int **);\n"
  "char *builtin_int_to_cstr (const struct builtin_int *);\n"
  "struct builtin_str *builtin_int_str (const struct builtin_int *);\n"

  "struct builtin_i8 *builtin_i8_init (int8_t);\n"
  "struct builtin_i8 *builtin_i8_copy (const struct builtin_i8 *);\n"
  "void builtin_i8_deinit (struct builtin_i8 **);\n"
  "char *builtin_i8_to_cstr (const struct builtin_i8 *);\n"
  "struct builtin_str *builtin_i8_str (const struct builtin_i8 *);\n"

  "struct builtin_i16 *builtin_i16_init (int16_t);\n"
  "struct builtin_i16 *builtin_i16_copy (const struct builtin_i16 *);\n"
  "void builtin_i16_deinit (struct builtin_i16 **);\n"
  "char *builtin_i16_to_cstr (const struct builtin_i16 *);\n"
  "struct builtin_str *builtin_i16_str (const struct builtin_i16 *);\n"

  "struct builtin_i32 *builtin_i32_init (int32_t);\n"
  "struct builtin_i32 *builtin_i32_copy (const struct builtin_i32 *);\n"
  "void builtin_i32_deinit (struct builtin_i32 **);\n"
  "char *builtin_i32_to_cstr (const struct builtin_i32 *);\n"
  "struct builtin_str *builtin_i32_str (const struct builtin_i32 *);\n"

  "struct builtin_i64 *builtin_i64_init (int64_t);\n"
  "struct builtin_i64 *builtin_i64_copy (const struct builtin_i64 *);\n"
  "void builtin_i64_deinit (struct builtin_i64 **);\n"
  "char *builtin_i64_to_cstr (const struct builtin_i64 *);\n"
  "struct builtin_str *builtin_i64_str (const struct builtin_i64 *);\n"

  "struct builtin_str *builtin_str_init (const char *);\n"
  "struct builtin_str *builtin_str_copy (const struct builtin_str *);\n"
  "void builtin_str_deinit (struct builtin_str **);\n"
  "char *builtin_str_to_cstr (const struct builtin_str *);\n"
  "struct builtin_str *builtin_str_concat (const struct builtin_str *, const struct builtin_str *);\n"

  "struct builtin_u8 *builtin_u8_init (uint8_t);\n"
  "struct builtin_u8 *builtin_u8_copy (const struct builtin_u8 *);\n"
  "void builtin_u8_deinit (struct builtin_u8 **);\n"
  "char *builtin_u8_to_cstr (const struct builtin_u8 *);\n"
  "struct builtin_str *builtin_u8_str (const struct builtin_u8 *);\n"

  "struct builtin_u16 *builtin_u16_init (uint16_t);\n"
  "struct builtin_u16 *builtin_u16_copy (const struct builtin_u16 *);\n"
  "void builtin_u16_deinit (struct builtin_u16 **);\n"
  "char *builtin_u16_to_cstr (const struct builtin_u16 *);\n"
  "struct builtin_str *builtin_u16_str (const struct builtin_u16 *);\n"

  "struct builtin_u32 *builtin_u32_init (uint32_t);\n"
  "struct builtin_u32 *builtin_u32_copy (const struct builtin_u32 *);\n"
  "void builtin_u32_deinit (struct builtin_u32 **);\n"
  "char *builtin_u32_to_cstr (const struct builtin_u32 *);\n"
  "struct builtin_str *builtin_u32_str (const struct builtin_u32 *);\n"

  "struct builtin_u64 *builtin_u64_init (uint64_t);\n"
  "struct builtin_u64 *builtin_u64_copy (const struct builtin_u64 *);\n"
  "void builtin_u64_deinit (struct builtin_u64 **);\n"
  "char *builtin_u64_to_cstr (const struct builtin_u64 *);\n"
  "struct builtin_str *builtin_u64_str (const struct builtin_u64 *);\n"

  "struct builtin_bool *builtin_bool_init (bool v) {\n"
  "  struct builtin_bool *r = malloc(sizeof(struct builtin_bool));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_bool_init\\n\", sizeof(struct builtin_bool));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = v;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_bool *builtin_bool_copy (const struct builtin_bool *n) {\n"
  "  struct builtin_bool *r = malloc(sizeof(struct builtin_bool));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_bool_copy\\n\", sizeof(struct builtin_bool));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = n->v;\n"
  "  return r;\n"
  "}\n"

  "void builtin_bool_deinit (struct builtin_bool **p) {\n"
  "  free(*p);\n"
  "  *p = NULL;\n"
  "}\n"

  "char *builtin_bool_to_cstr (const struct builtin_bool *n) {\n"
  "  size_t l0 = n->v ? 4 : 5;\n"
  "  size_t l1 = l0 + 1;\n"
  "  char *r = malloc(l1);\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_bool_to_cstr\\n\", l1);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  memcpy(r, n->v ? \"true\" : \"false\", l0);\n"
  "  r[l0] = 0;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_str *builtin_bool_str (const struct builtin_bool *n) {\n"
  "  char *s = builtin_bool_to_cstr(n);\n"
  "  struct builtin_str *r = builtin_str_init(s);\n"
  "  free(s);\n"
  "  return r;\n"
  "}\n"

  "struct builtin_char *builtin_char_init (int8_t v) {\n"
  "  struct builtin_char *r = malloc(sizeof(struct builtin_char));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_char_init\\n\", sizeof(struct builtin_char));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = v;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_char *builtin_char_copy (const struct builtin_char *n) {\n"
  "  struct builtin_char *r = malloc(sizeof(struct builtin_char));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_char_copy\\n\", sizeof(struct builtin_char));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = n->v;\n"
  "  return r;\n"
  "}\n"

  "void builtin_char_deinit (struct builtin_char **p) {\n"
  "  free(*p);\n"
  "  *p = NULL;\n"
  "}\n"

  "char *builtin_char_to_cstr (const struct builtin_char *n) {\n"
  "  char *r = malloc(2);\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_char_to_cstr\\n\", (size_t) 2);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r[0] = (char) n->v;\n"
  "  r[1] = 0;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_str *builtin_char_str (const struct builtin_char *n) {\n"
  "  char *s = builtin_char_to_cstr(n);\n"
  "  struct builtin_str *r = builtin_str_init(s);\n"
  "  free(s);\n"
  "  return r;\n"
  "}\n"

  "struct builtin_float *builtin_float_init (double v) {\n"
  "  struct builtin_float *r = malloc(sizeof(struct builtin_float));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_float_init\\n\", sizeof(struct builtin_float));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = v;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_float *builtin_float_copy (const struct builtin_float *n) {\n"
  "  struct builtin_float *r = malloc(sizeof(struct builtin_float));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_float_copy\\n\", sizeof(struct builtin_float));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = n->v;\n"
  "  return r;\n"
  "}\n"

  "void builtin_float_deinit (struct builtin_float **p) {\n"
  "  free(*p);\n"
  "  *p = NULL;\n"
  "}\n"

  "char *builtin_float_to_cstr (const struct builtin_float *n) {\n"
  "  size_t l = snprintf(NULL, 0, \"%g\", n->v) + 1;"
  "  char *r = malloc(l);\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_float_str\\n\", l);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  snprintf(r, l, \"%g\", n->v);\n"
  "  return r;\n"
  "}\n"

  "struct builtin_str *builtin_float_str (const struct builtin_float *n) {\n"
  "  char *s = builtin_float_to_cstr(n);\n"
  "  struct builtin_str *r = builtin_str_init(s);\n"
  "  free(s);\n"
  "  return r;\n"
  "}\n"

  "struct builtin_int *builtin_int_init (int32_t v) {\n"
  "  struct builtin_int *r = malloc(sizeof(struct builtin_int));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_int_init\\n\", sizeof(struct builtin_int));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = v;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_int *builtin_int_copy (const struct builtin_int *n) {\n"
  "  struct builtin_int *r = malloc(sizeof(struct builtin_int));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_int_copy\\n\", sizeof(struct builtin_int));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->v = n->v;\n"
  "  return r;\n"
  "}\n"

  "void builtin_int_deinit (struct builtin_int **p) {\n"
  "  free(*p);\n"
  "  *p = NULL;\n"
  "}\n"

  "char *builtin_int_to_cstr (const struct builtin_int *n) {\n"
  "  size_t l = snprintf(NULL, 0, \"%d\", n->v) + 1;"
  "  char *r = malloc(l);\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_int_str\\n\", l);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  snprintf(r, l, \"%d\", n->v);\n"
  "  return r;\n"
  "}\n"

  "struct builtin_str *builtin_int_str (const struct builtin_int *n) {\n"
  "  char *s = builtin_int_to_cstr(n);\n"
  "  struct builtin_str *r = builtin_str_init(s);\n"
  "  free(s);\n"
  "  return r;\n"
  "}\n"

  "struct builtin_fn *builtin_fn_init (void *(*f) (void *, void *)) {\n"
  "  struct builtin_fn *r = malloc(sizeof(struct builtin_fn));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_fn_init\\n\", sizeof(struct builtin_fn));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->f = f;\n"
  "  r->t = NULL;\n"
  "  return r;\n"
  "}\n"

  "void builtin_fn_deinit (struct builtin_fn **p) {\n"
  "  free(*p);\n"
  "  *p = NULL;\n"
  "}\n"

  "void *builtin_fn_call (const struct builtin_fn *n, void *p) {\n"
  "  return n->f(n->t, p);\n"
  "}\n"

  "struct builtin_str *builtin_str_init (const char *c) {\n"
  "  struct builtin_str *r = malloc(sizeof(struct builtin_str));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_str_init\\n\", sizeof(struct builtin_str));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  size_t l = strlen(c);\n"
  "  r->c = malloc(l);\n"
  "  if (r->c == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_str_init\\n\", l);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  memcpy(r->c, c, l);\n"
  "  r->l = l;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_str *builtin_str_copy (const struct builtin_str *n) {\n"
  "  struct builtin_str *r = malloc(sizeof(struct builtin_str));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_str_copy\\n\", sizeof(struct builtin_str));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  r->c = malloc(n->l);\n"
  "  if (r->c == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_str_copy\\n\", n->l);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  memcpy(r->c, n->c, n->l);\n"
  "  r->l = n->l;\n"
  "  return r;\n"
  "}\n"

  "void builtin_str_deinit (struct builtin_str **p) {\n"
  "  free((*p)->c);\n"
  "  free(*p);\n"
  "  *p = NULL;\n"
  "}\n"

  "char *builtin_str_to_cstr (const struct builtin_str *n) {\n"
  "  size_t l = n->l + 1;\n"
  "  char *r = malloc(l);\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_str_to_cstr\\n\", l);\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  memcpy(r, n->c, n->l);\n"
  "  r[n->l] = 0;\n"
  "  return r;\n"
  "}\n"

  "struct builtin_str *builtin_str_concat (const struct builtin_str *a, const struct builtin_str *b) {\n"
  "  struct builtin_str *r = malloc(sizeof(struct builtin_str));\n"
  "  if (r == NULL) {\n"
  "    fprintf(stderr, \"Error: Failed to allocate %zu bytes in builtin_str_concat\\n\", sizeof(struct builtin_str));\n"
  "    exit(EXIT_FAILURE);\n"
  "  }\n"
  "  size_t l = a->l + b->l;\n"
  "  r->c = malloc(l);\n"
  "  memcpy(r->c, a->c, a->l);\n"
  "  memcpy(&r->c[a->l], b->c, b->l);\n"
  "  r->l = l;\n"
  "  return r;\n"
  "}\n"
);

#endif
