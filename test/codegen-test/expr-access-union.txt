======= stdin =======
main {
  a: (int | str) = 1
  mut b := a
  b = a
  mut c: (int | str) = "test"
  c = b
  e := true ? a : b
  f := true ? c : (b = c)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2
#define TYPE_str 3

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_union_intUSstrUE;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_union_intUSstrUE {
  int t;
  union {
    int32_t v2;
    struct str v3;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int, ...);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE);
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_realloc (struct __THE_1_union_intUSstrUE, struct __THE_1_union_intUSstrUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int t, ...) {
  struct __THE_1_union_intUSstrUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v2 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v3 = va_arg(args, struct str);
  va_end(args);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE n) {
  struct __THE_1_union_intUSstrUE r = {n.t};
  if (n.t == TYPE_int) r.v2 = n.v2;
  if (n.t == TYPE_str) r.v3 = str_copy(n.v3);
  return r;
}
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v3);
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_realloc (struct __THE_1_union_intUSstrUE n1, struct __THE_1_union_intUSstrUE n2) {
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n1);
  return n2;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct __THE_1_union_intUSstrUE __THE_0_a_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  struct __THE_1_union_intUSstrUE __THE_0_b_0 = __THE_1_union_intUSstrUE_copy(__THE_0_a_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_b_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_b_0, __THE_1_union_intUSstrUE_copy(__THE_0_a_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  struct __THE_1_union_intUSstrUE __THE_0_c_0 = __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test"));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  __THE_0_c_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_c_0, __THE_1_union_intUSstrUE_copy(__THE_0_b_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_union_intUSstrUE __THE_0_e_0 = true ? __THE_1_union_intUSstrUE_copy(__THE_0_a_0) : __THE_1_union_intUSstrUE_copy(__THE_0_b_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const struct __THE_1_union_intUSstrUE __THE_0_f_0 = true ? __THE_1_union_intUSstrUE_copy(__THE_0_c_0) : (__THE_1_union_intUSstrUE_copy(__THE_0_b_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_b_0, __THE_1_union_intUSstrUE_copy(__THE_0_c_0))));
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_f_0);
L5:
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_e_0);
L4:
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_c_0);
L3:
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_b_0);
L2:
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_a_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
