======= stdin =======
obj Test1 {
  fn test () Test2 {
    return Test2{}
  }
}

obj Test2 {
  fn test () Test1 {
    return Test1{}
  }
}

main {
  test1 := Test1{}
  test2 := Test2{}

  print(test1, test1.test())
  print(test2, test2.test())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001;

struct __THE_1_Test1_0 {
  void *_;
};
struct __THE_1_Test2_0 {
  void *_;
};
struct __THE_1_fn$1000 {
  struct __THE_1_Test2_0 *(*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001 {
  struct __THE_1_Test1_0 *(*f) (void *);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc ();
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct str __THE_1_Test1_0_str (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc ();
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct str __THE_1_Test2_0_str (struct __THE_1_Test2_0 *);
struct __THE_1_Test2_0 *__THE_1_Test1SDtest_0 (void *);
struct __THE_1_Test1_0 *__THE_1_Test2SDtest_0 (void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc () {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {(void *) 0};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *n) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  free(n);
}
struct str __THE_1_Test1_0_str (struct __THE_1_Test1_0 *n) {
  struct str r = str_alloc("Test1{");
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) n);
  return str_concat_cstr(r, "}");
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc () {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {(void *) 0};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *n) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  free(n);
}
struct str __THE_1_Test2_0_str (struct __THE_1_Test2_0 *n) {
  struct str r = str_alloc("Test2{");
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n);
  return str_concat_cstr(r, "}");
}
struct __THE_1_Test2_0 *__THE_1_Test1SDtest_0 (void *px) {
  return __THE_1_Test2_0_alloc();
}
struct __THE_1_Test1_0 *__THE_1_Test2SDtest_0 (void *px) {
  return __THE_1_Test1_0_alloc();
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_Test1SDtest_0 = (struct __THE_1_fn$1000) {&__THE_1_Test1SDtest_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_Test2SDtest_0 = (struct __THE_1_fn$1001) {&__THE_1_Test2SDtest_0, NULL, 0};
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc();
  const struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc();
  print(stdout, "szsz", __THE_1_Test1_0_str(__THE_1_Test1_0_copy(__THE_0_test1_0)), " ", __THE_1_Test2_0_str(__THE_0_Test1SDtest_0.f(__THE_0_Test1SDtest_0.x)), THE_EOL);
  print(stdout, "szsz", __THE_1_Test2_0_str(__THE_1_Test2_0_copy(__THE_0_test2_0)), " ", __THE_1_Test1_0_str(__THE_0_Test2SDtest_0.f(__THE_0_Test2SDtest_0.x)), THE_EOL);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
Test1{} Test2{}
Test2{} Test1{}
