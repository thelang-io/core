======= stdin =======
obj TestObj { a: int }
fn fn1 () {}
fn fn2 () {}
fn fn3 () {}

main {
  int1 := 1
  int2 := 2
  int3 := 3

  refInt1 := ref int1
  refInt2 := ref int2
  refInt3 := ref int3

  testArrayInt := [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
  testFn := [fn1, fn2, fn3]
  testObj := [TestObj{a: 1}, TestObj{a: 2}, TestObj{a: 3}]
  testStr := ["test1", "test2", "test3"]
  testRefInt := [refInt1, refInt2, refInt3]
  testInt := [1, 2, 3]

  testArrayInt.join()
  testFn.join()
  testObj.join()
  testStr.join()
  testRefInt.join()
  testInt.join()

  testArrayInt.join("_")
  testFn.join("_")
  testObj.join("_")
  testStr.join("_")
  testRefInt.join("_")
  testInt.join("_")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_str;
struct __THE_1_TestObj_0;
struct __THE_1_fn$1000;
struct __THE_1_array_int;
struct __THE_1_array_array_int;
struct __THE_1_array_fn$1000;
struct __THE_1_array_TestObj;
struct __THE_1_array_ref_int;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_array_int {
  struct __THE_1_array_int *d;
  size_t l;
};
struct __THE_1_array_fn$1000 {
  struct __THE_1_fn$1000 *d;
  size_t l;
};
struct __THE_1_array_TestObj {
  struct __THE_1_TestObj_0 **d;
  size_t l;
};
struct __THE_1_array_ref_int {
  int32_t **d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str int_str (int32_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str);
void __THE_1_array_str_free (struct __THE_1_array_str);
struct str __THE_1_array_str_join (struct __THE_1_array_str, unsigned char, struct str);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
struct str __THE_1_TestObj_0_str (struct __THE_1_TestObj_0 *);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct str __THE_1_fn$1000_str (struct __THE_1_fn$1000);
void __THE_1_fn1_0 (void *);
void __THE_1_fn2_0 (void *);
void __THE_1_fn3_0 (void *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct str __THE_1_array_int_join (struct __THE_1_array_int, unsigned char, struct str);
struct str __THE_1_array_int_str (struct __THE_1_array_int);
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t, ...);
struct __THE_1_array_array_int __THE_1_array_array_int_copy (const struct __THE_1_array_array_int);
void __THE_1_array_array_int_free (struct __THE_1_array_array_int);
struct str __THE_1_array_array_int_join (struct __THE_1_array_array_int, unsigned char, struct str);
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_alloc (size_t, ...);
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_copy (const struct __THE_1_array_fn$1000);
void __THE_1_array_fn$1000_free (struct __THE_1_array_fn$1000);
struct str __THE_1_array_fn$1000_join (struct __THE_1_array_fn$1000, unsigned char, struct str);
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t, ...);
struct __THE_1_array_TestObj __THE_1_array_TestObj_copy (const struct __THE_1_array_TestObj);
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj);
struct str __THE_1_array_TestObj_join (struct __THE_1_array_TestObj, unsigned char, struct str);
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t, ...);
struct __THE_1_array_ref_int __THE_1_array_ref_int_copy (const struct __THE_1_array_ref_int);
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int);
struct str __THE_1_array_ref_int_join (struct __THE_1_array_ref_int, unsigned char, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str n) {
  if (n.l == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) d[i] = str_copy(n.d[i]);
  return (struct __THE_1_array_str) {d, n.l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
struct str __THE_1_array_str_join (struct __THE_1_array_str n, unsigned char o1, struct str n1) {
  struct str x = o1 == 0 ? str_alloc(",") : n1;
  struct str r = str_alloc("");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_str(r, str_copy(x));
    r = str_concat_str(r, str_copy(n.d[i]));
  }
  str_free((struct str) x);
  __THE_1_array_str_free((struct __THE_1_array_str) n);
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *n) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *n) {
  free(n);
}
struct str __THE_1_TestObj_0_str (struct __THE_1_TestObj_0 *n) {
  struct str r = str_alloc("TestObj{");
  r = str_concat_cstr(r, "a: ");
  r = str_concat_str(r, int_str(n->__THE_0_a));
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n);
  return str_concat_cstr(r, "}");
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct str __THE_1_fn$1000_str (struct __THE_1_fn$1000 n) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n);
  return str_alloc("[Function]");
}
void __THE_1_fn1_0 (void *px) {
}
void __THE_1_fn2_0 (void *px) {
}
void __THE_1_fn3_0 (void *px) {
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct str __THE_1_array_int_join (struct __THE_1_array_int n, unsigned char o1, struct str n1) {
  struct str x = o1 == 0 ? str_alloc(",") : n1;
  struct str r = str_alloc("");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_str(r, str_copy(x));
    r = str_concat_str(r, int_str(n.d[i]));
  }
  str_free((struct str) x);
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return r;
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(x * sizeof(struct __THE_1_array_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_int);
  va_end(args);
  return (struct __THE_1_array_array_int) {d, x};
}
struct __THE_1_array_array_int __THE_1_array_array_int_copy (const struct __THE_1_array_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(n.l * sizeof(struct __THE_1_array_int));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_int_copy(n.d[i]);
  return (struct __THE_1_array_array_int) {d, n.l};
}
void __THE_1_array_array_int_free (struct __THE_1_array_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_int_free((struct __THE_1_array_int) n.d[i]);
  free(n.d);
}
struct str __THE_1_array_array_int_join (struct __THE_1_array_array_int n, unsigned char o1, struct str n1) {
  struct str x = o1 == 0 ? str_alloc(",") : n1;
  struct str r = str_alloc("");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_str(r, str_copy(x));
    r = str_concat_str(r, __THE_1_array_int_str(__THE_1_array_int_copy(n.d[i])));
  }
  str_free((struct str) x);
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) n);
  return r;
}
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_fn$1000) {NULL, 0};
  struct __THE_1_fn$1000 *d = alloc(x * sizeof(struct __THE_1_fn$1000));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_fn$1000);
  va_end(args);
  return (struct __THE_1_array_fn$1000) {d, x};
}
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_copy (const struct __THE_1_array_fn$1000 n) {
  if (n.l == 0) return (struct __THE_1_array_fn$1000) {NULL, 0};
  struct __THE_1_fn$1000 *d = alloc(n.l * sizeof(struct __THE_1_fn$1000));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_fn$1000_copy(n.d[i]);
  return (struct __THE_1_array_fn$1000) {d, n.l};
}
void __THE_1_array_fn$1000_free (struct __THE_1_array_fn$1000 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_fn$1000_free((struct __THE_1_fn$1000) n.d[i]);
  free(n.d);
}
struct str __THE_1_array_fn$1000_join (struct __THE_1_array_fn$1000 n, unsigned char o1, struct str n1) {
  struct str x = o1 == 0 ? str_alloc(",") : n1;
  struct str r = str_alloc("");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_str(r, str_copy(x));
    r = str_concat_str(r, __THE_1_fn$1000_str(__THE_1_fn$1000_copy(n.d[i])));
  }
  str_free((struct str) x);
  __THE_1_array_fn$1000_free((struct __THE_1_array_fn$1000) n);
  return r;
}
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_TestObj) {NULL, 0};
  struct __THE_1_TestObj_0 **d = alloc(x * sizeof(struct __THE_1_TestObj_0 *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_TestObj_0 *);
  va_end(args);
  return (struct __THE_1_array_TestObj) {d, x};
}
struct __THE_1_array_TestObj __THE_1_array_TestObj_copy (const struct __THE_1_array_TestObj n) {
  if (n.l == 0) return (struct __THE_1_array_TestObj) {NULL, 0};
  struct __THE_1_TestObj_0 **d = alloc(n.l * sizeof(struct __THE_1_TestObj_0 *));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_TestObj_0_copy(n.d[i]);
  return (struct __THE_1_array_TestObj) {d, n.l};
}
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n.d[i]);
  free(n.d);
}
struct str __THE_1_array_TestObj_join (struct __THE_1_array_TestObj n, unsigned char o1, struct str n1) {
  struct str x = o1 == 0 ? str_alloc(",") : n1;
  struct str r = str_alloc("");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_str(r, str_copy(x));
    r = str_concat_str(r, __THE_1_TestObj_0_str(__THE_1_TestObj_0_copy(n.d[i])));
  }
  str_free((struct str) x);
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) n);
  return r;
}
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_ref_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_ref_int) {d, x};
}
struct __THE_1_array_ref_int __THE_1_array_ref_int_copy (const struct __THE_1_array_ref_int n) {
  if (n.l == 0) return (struct __THE_1_array_ref_int) {NULL, 0};
  int32_t **d = alloc(n.l * sizeof(int32_t *));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_ref_int) {d, n.l};
}
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int n) {
  free(n.d);
}
struct str __THE_1_array_ref_int_join (struct __THE_1_array_ref_int n, unsigned char o1, struct str n1) {
  struct str x = o1 == 0 ? str_alloc(",") : n1;
  struct str r = str_alloc("");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_str(r, str_copy(x));
    r = str_concat_str(r, int_str(*n.d[i]));
  }
  str_free((struct str) x);
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) n);
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1000 __THE_0_fn1_0 = (struct __THE_1_fn$1000) {&__THE_1_fn1_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_fn2_0 = (struct __THE_1_fn$1000) {&__THE_1_fn2_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_fn3_0 = (struct __THE_1_fn$1000) {&__THE_1_fn3_0, NULL, 0};
  const int32_t __THE_0_int1_0 = 1;
  const int32_t __THE_0_int2_0 = 2;
  const int32_t __THE_0_int3_0 = 3;
  const int32_t *__THE_0_refInt1_0 = &__THE_0_int1_0;
  const int32_t *__THE_0_refInt2_0 = &__THE_0_int2_0;
  const int32_t *__THE_0_refInt3_0 = &__THE_0_int3_0;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct __THE_1_array_array_int __THE_0_testArrayInt_0 = __THE_1_array_array_int_alloc(3, __THE_1_array_int_alloc(3, 0, 1, 2), __THE_1_array_int_alloc(3, 3, 4, 5), __THE_1_array_int_alloc(3, 6, 7, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  const struct __THE_1_array_fn$1000 __THE_0_testFn_0 = __THE_1_array_fn$1000_alloc(3, __THE_1_fn$1000_copy(__THE_0_fn1_0), __THE_1_fn$1000_copy(__THE_0_fn2_0), __THE_1_fn$1000_copy(__THE_0_fn3_0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  const struct __THE_1_array_TestObj __THE_0_testObj_0 = __THE_1_array_TestObj_alloc(3, __THE_1_TestObj_0_alloc(1), __THE_1_TestObj_0_alloc(2), __THE_1_TestObj_0_alloc(3));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  const struct __THE_1_array_str __THE_0_testStr_0 = __THE_1_array_str_alloc(3, str_alloc("test1"), str_alloc("test2"), str_alloc("test3"));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L5;
  const struct __THE_1_array_ref_int __THE_0_testRefInt_0 = __THE_1_array_ref_int_alloc(3, __THE_0_refInt1_0, __THE_0_refInt2_0, __THE_0_refInt3_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L6;
  const struct __THE_1_array_int __THE_0_testInt_0 = __THE_1_array_int_alloc(3, 1, 2, 3);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 22, 3), __THE_1_array_array_int_join(__THE_1_array_array_int_copy(__THE_0_testArrayInt_0), 0, (struct str) {})));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 23, 3), __THE_1_array_fn$1000_join(__THE_1_array_fn$1000_copy(__THE_0_testFn_0), 0, (struct str) {})));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 24, 3), __THE_1_array_TestObj_join(__THE_1_array_TestObj_copy(__THE_0_testObj_0), 0, (struct str) {})));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 25, 3), __THE_1_array_str_join(__THE_1_array_str_copy(__THE_0_testStr_0), 0, (struct str) {})));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 26, 3), __THE_1_array_ref_int_join(__THE_1_array_ref_int_copy(__THE_0_testRefInt_0), 0, (struct str) {})));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 27, 3), __THE_1_array_int_join(__THE_1_array_int_copy(__THE_0_testInt_0), 0, (struct str) {})));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 29, 3), __THE_1_array_array_int_join(__THE_1_array_array_int_copy(__THE_0_testArrayInt_0), 1, str_alloc("_"))));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 30, 3), __THE_1_array_fn$1000_join(__THE_1_array_fn$1000_copy(__THE_0_testFn_0), 1, str_alloc("_"))));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 31, 3), __THE_1_array_TestObj_join(__THE_1_array_TestObj_copy(__THE_0_testObj_0), 1, str_alloc("_"))));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 32, 3), __THE_1_array_str_join(__THE_1_array_str_copy(__THE_0_testStr_0), 1, str_alloc("_"))));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 33, 3), __THE_1_array_ref_int_join(__THE_1_array_ref_int_copy(__THE_0_testRefInt_0), 1, str_alloc("_"))));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  str_free((struct str) (error_stack_pos(&err_state, 34, 3), __THE_1_array_int_join(__THE_1_array_int_copy(__THE_0_testInt_0), 1, str_alloc("_"))));
L7:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_testInt_0);
L6:
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) __THE_0_testRefInt_0);
L5:
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_testStr_0);
L4:
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) __THE_0_testObj_0);
L3:
  __THE_1_array_fn$1000_free((struct __THE_1_array_fn$1000) __THE_0_testFn_0);
L2:
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) __THE_0_testArrayInt_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
