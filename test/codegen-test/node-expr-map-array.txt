======= stdin =======
main {
  { "key1": [1, 2, 3], "key2": [3, 4, 5], "key3": [5, 6, 7] }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_int;
struct __THE_1_pair_strMSarray_intME;
struct __THE_1_map_strMSarray_intME;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_pair_strMSarray_intME {
  struct str f;
  struct __THE_1_array_int s;
};
struct __THE_1_map_strMSarray_intME {
  struct __THE_1_pair_strMSarray_intME *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_map_strMSarray_intME __THE_1_map_strMSarray_intME_alloc (int, ...);
void __THE_1_map_strMSarray_intME_free (struct __THE_1_map_strMSarray_intME);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_map_strMSarray_intME __THE_1_map_strMSarray_intME_alloc (int x, ...) {
  struct __THE_1_pair_strMSarray_intME *d = alloc(x * sizeof(struct __THE_1_pair_strMSarray_intME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSarray_intME) {va_arg(args, struct str), va_arg(args, struct __THE_1_array_int)};
  va_end(args);
  return (struct __THE_1_map_strMSarray_intME) {d, x, x};
}
void __THE_1_map_strMSarray_intME_free (struct __THE_1_map_strMSarray_intME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_array_int_free((struct __THE_1_array_int) n.d[i].s);
  }
  free(n.d);
}

int main () {
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) __THE_1_map_strMSarray_intME_alloc(3, str_alloc("key1"), __THE_1_array_int_alloc(3, 1, 2, 3), str_alloc("key2"), __THE_1_array_int_alloc(3, 3, 4, 5), str_alloc("key3"), __THE_1_array_int_alloc(3, 5, 6, 7)));
}
======= flags =======
======= stdout =======
