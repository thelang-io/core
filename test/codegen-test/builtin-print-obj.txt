======= stdin =======
obj Test {
  t: bool
  b: byte
  c: char
  f1: f32
  f2: f64
  f: float
  i1: i8
  i2: i16
  i3: i32
  i4: i64
  i: int
  u1: u8
  u2: u16
  u3: u32
  u4: u64
}

main {
  v1: Test
  v2 := Test{}

  v3 := Test{
    t: true,
    b: 1,
    c: 'c',
    f1: 2,
    f2: 3,
    f: 4,
    i1: 5,
    i2: 6,
    i3: 7,
    i4: 8,
    i: 9,
    u1: 10,
    u2: 11,
    u3: 12,
    u4: 13
  }

  print(v1, v2, v3)
  print(v1)
  print(v2)
  print(v3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test_0;

struct __THE_1_Test_0 {
  const bool __THE_0_t;
  const unsigned char __THE_0_b;
  const char __THE_0_c;
  const float __THE_0_f1;
  const double __THE_0_f2;
  const double __THE_0_f;
  const int8_t __THE_0_i1;
  const int16_t __THE_0_i2;
  const int32_t __THE_0_i3;
  const int64_t __THE_0_i4;
  const int32_t __THE_0_i;
  const uint8_t __THE_0_u1;
  const uint16_t __THE_0_u2;
  const uint32_t __THE_0_u3;
  const uint64_t __THE_0_u4;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
struct str bool_str (bool);
struct str byte_str (unsigned char);
struct str char_str (char);
void error_alloc (err_state_t *, size_t);
struct str f32_str (float);
struct str f64_str (double);
struct str float_str (double);
struct str i16_str (int16_t);
struct str i32_str (int32_t);
struct str i64_str (int64_t);
struct str i8_str (int8_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str u16_str (uint16_t);
struct str u32_str (uint32_t);
struct str u64_str (uint64_t);
struct str u8_str (uint8_t);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (bool, unsigned char, char, float, double, double, int8_t, int16_t, int32_t, int64_t, int32_t, uint8_t, uint16_t, uint32_t, uint64_t);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct str __THE_1_Test_0_str (struct __THE_1_Test_0 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str bool_str (bool t) {
  return str_alloc(t ? "true" : "false");
}
struct str byte_str (unsigned char x) {
  char buf[8];
  sprintf(buf, "%u", x);
  return str_alloc(buf);
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str f32_str (float f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str f64_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str i16_str (int16_t d) {
  char buf[24];
  sprintf(buf, "%" PRId16, d);
  return str_alloc(buf);
}
struct str i32_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str i64_str (int64_t d) {
  char buf[24];
  sprintf(buf, "%" PRId64, d);
  return str_alloc(buf);
}
struct str i8_str (int8_t d) {
  char buf[24];
  sprintf(buf, "%" PRId8, d);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str u16_str (uint16_t d) {
  char buf[24];
  sprintf(buf, "%" PRIu16, d);
  return str_alloc(buf);
}
struct str u32_str (uint32_t d) {
  char buf[24];
  sprintf(buf, "%" PRIu32, d);
  return str_alloc(buf);
}
struct str u64_str (uint64_t d) {
  char buf[24];
  sprintf(buf, "%" PRIu64, d);
  return str_alloc(buf);
}
struct str u8_str (uint8_t d) {
  char buf[24];
  sprintf(buf, "%" PRIu8, d);
  return str_alloc(buf);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (bool __THE_0_t, unsigned char __THE_0_b, char __THE_0_c, float __THE_0_f1, double __THE_0_f2, double __THE_0_f, int8_t __THE_0_i1, int16_t __THE_0_i2, int32_t __THE_0_i3, int64_t __THE_0_i4, int32_t __THE_0_i, uint8_t __THE_0_u1, uint16_t __THE_0_u2, uint32_t __THE_0_u3, uint64_t __THE_0_u4) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_t, __THE_0_b, __THE_0_c, __THE_0_f1, __THE_0_f2, __THE_0_f, __THE_0_i1, __THE_0_i2, __THE_0_i3, __THE_0_i4, __THE_0_i, __THE_0_u1, __THE_0_u2, __THE_0_u3, __THE_0_u4};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *n) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {n->__THE_0_t, n->__THE_0_b, n->__THE_0_c, n->__THE_0_f1, n->__THE_0_f2, n->__THE_0_f, n->__THE_0_i1, n->__THE_0_i2, n->__THE_0_i3, n->__THE_0_i4, n->__THE_0_i, n->__THE_0_u1, n->__THE_0_u2, n->__THE_0_u3, n->__THE_0_u4};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
struct str __THE_1_Test_0_str (struct __THE_1_Test_0 *n) {
  struct str r = str_alloc("Test{");
  r = str_concat_cstr(r, "t: ");
  r = str_concat_str(r, bool_str(n->__THE_0_t));
  r = str_concat_cstr(r, ", b: ");
  r = str_concat_str(r, byte_str(n->__THE_0_b));
  r = str_concat_cstr(r, ", c: ");
  r = str_concat_str(r, char_str(n->__THE_0_c));
  r = str_concat_cstr(r, ", f1: ");
  r = str_concat_str(r, f32_str(n->__THE_0_f1));
  r = str_concat_cstr(r, ", f2: ");
  r = str_concat_str(r, f64_str(n->__THE_0_f2));
  r = str_concat_cstr(r, ", f: ");
  r = str_concat_str(r, float_str(n->__THE_0_f));
  r = str_concat_cstr(r, ", i1: ");
  r = str_concat_str(r, i8_str(n->__THE_0_i1));
  r = str_concat_cstr(r, ", i2: ");
  r = str_concat_str(r, i16_str(n->__THE_0_i2));
  r = str_concat_cstr(r, ", i3: ");
  r = str_concat_str(r, i32_str(n->__THE_0_i3));
  r = str_concat_cstr(r, ", i4: ");
  r = str_concat_str(r, i64_str(n->__THE_0_i4));
  r = str_concat_cstr(r, ", i: ");
  r = str_concat_str(r, int_str(n->__THE_0_i));
  r = str_concat_cstr(r, ", u1: ");
  r = str_concat_str(r, u8_str(n->__THE_0_u1));
  r = str_concat_cstr(r, ", u2: ");
  r = str_concat_str(r, u16_str(n->__THE_0_u2));
  r = str_concat_cstr(r, ", u3: ");
  r = str_concat_str(r, u32_str(n->__THE_0_u3));
  r = str_concat_cstr(r, ", u4: ");
  r = str_concat_str(r, u64_str(n->__THE_0_u4));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) n);
  return str_concat_cstr(r, "}");
}

int main () {
  const struct __THE_1_Test_0 *__THE_0_v1_0 = __THE_1_Test_0_alloc(false, 0, '\0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  const struct __THE_1_Test_0 *__THE_0_v2_0 = __THE_1_Test_0_alloc(false, 0, '\0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  const struct __THE_1_Test_0 *__THE_0_v3_0 = __THE_1_Test_0_alloc(true, 1, 'c', 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
  print(stdout, "szszsz", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_v1_0)), " ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_v2_0)), " ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_v3_0)), THE_EOL);
  print(stdout, "sz", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_v1_0)), THE_EOL);
  print(stdout, "sz", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_v2_0)), THE_EOL);
  print(stdout, "sz", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_v3_0)), THE_EOL);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_v3_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_v2_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_v1_0);
}
======= flags =======
======= stdout =======
Test{t: false, b: 0, c: , f1: 0.000000, f2: 0.000000, f: 0.000000, i1: 0, i2: 0, i3: 0, i4: 0, i: 0, u1: 0, u2: 0, u3: 0, u4: 0} Test{t: false, b: 0, c: , f1: 0.000000, f2: 0.000000, f: 0.000000, i1: 0, i2: 0, i3: 0, i4: 0, i: 0, u1: 0, u2: 0, u3: 0, u4: 0} Test{t: true, b: 1, c: c, f1: 2.000000, f2: 3.000000, f: 4.000000, i1: 5, i2: 6, i3: 7, i4: 8, i: 9, u1: 10, u2: 11, u3: 12, u4: 13}
Test{t: false, b: 0, c: , f1: 0.000000, f2: 0.000000, f: 0.000000, i1: 0, i2: 0, i3: 0, i4: 0, i: 0, u1: 0, u2: 0, u3: 0, u4: 0}
Test{t: false, b: 0, c: , f1: 0.000000, f2: 0.000000, f: 0.000000, i1: 0, i2: 0, i3: 0, i4: 0, i: 0, u1: 0, u2: 0, u3: 0, u4: 0}
Test{t: true, b: 1, c: c, f1: 2.000000, f2: 3.000000, f: 4.000000, i1: 5, i2: 6, i3: 7, i4: 8, i: 9, u1: 10, u2: 11, u3: 12, u4: 13}
