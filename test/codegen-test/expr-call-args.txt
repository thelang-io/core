======= stdin =======
obj Test {
  i: int
}

fn job () {}

fn test1 (
  t: bool,
  b: byte,
  c: char,
  f1: f32,
  f2: f64,
  f: float,
  i1: i8,
  i2: i16,
  i3: i32,
  i4: i64,
  i: int,
  s: str,
  u1: u8,
  u2: u16,
  u3: u32,
  u4: u64,
  v1: Test,
  v2: () -> void
) {}

fn test2 (
  t := true,
  b: byte = 1,
  c: char = 'c',
  f1: f32 = 2,
  f2: f64 = 3,
  f: float = 4,
  i1: i8 = 5,
  i2: i16 = 6,
  i3: i32 = 7,
  i4: i64 = 8,
  i: int = 9,
  s: str = "test",
  u1: u8 = 10,
  u2: u16 = 11,
  u3: u32 = 12,
  u4: u64 = 13,
  v1 := Test{i: 0},
  v2 := job
) {}

main {
  test1(
    true,
    1,
    'c',
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    "test",
    10,
    11,
    12,
    13,
    Test{i: 0},
    job
  )

  test2()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test_0;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_test2_0X;

struct __THE_1_Test_0 {
  const int32_t __THE_0_i;
};
struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  bool n0;
  unsigned char n1;
  char n2;
  float n3;
  double n4;
  double n5;
  int8_t n6;
  int16_t n7;
  int32_t n8;
  int64_t n9;
  int32_t n10;
  struct str n11;
  uint8_t n12;
  uint16_t n13;
  uint32_t n14;
  uint64_t n15;
  struct __THE_1_Test_0 *n16;
  struct __THE_1_fn$1000 n17;
};
struct __THE_1_fn$1002 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  unsigned char o0;
  bool n0;
  unsigned char o1;
  unsigned char n1;
  unsigned char o2;
  char n2;
  unsigned char o3;
  float n3;
  unsigned char o4;
  double n4;
  unsigned char o5;
  double n5;
  unsigned char o6;
  int8_t n6;
  unsigned char o7;
  int16_t n7;
  unsigned char o8;
  int32_t n8;
  unsigned char o9;
  int64_t n9;
  unsigned char o10;
  int32_t n10;
  unsigned char o11;
  struct str n11;
  unsigned char o12;
  uint8_t n12;
  unsigned char o13;
  uint16_t n13;
  unsigned char o14;
  uint32_t n14;
  unsigned char o15;
  uint64_t n15;
  unsigned char o16;
  struct __THE_1_Test_0 *n16;
  unsigned char o17;
  struct __THE_1_fn$1000 n17;
};
struct __THE_1_test2_0X {
  const struct __THE_1_fn$1000 *__THE_0_job_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
void *xalloc (void *, size_t);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_job_0 (void *);
void __THE_1_test1_0 (void *, void *);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
void __THE_1_test2_0 (void *, void *);
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_test2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_i) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_i};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_job_0 (void *px) {
}
void __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_fn$1001P *p = pp;
  const bool __THE_0_t_0 = p->n0;
  const unsigned char __THE_0_b_0 = p->n1;
  const char __THE_0_c_0 = p->n2;
  const float __THE_0_f1_0 = p->n3;
  const double __THE_0_f2_0 = p->n4;
  const double __THE_0_f_0 = p->n5;
  const int8_t __THE_0_i1_0 = p->n6;
  const int16_t __THE_0_i2_0 = p->n7;
  const int32_t __THE_0_i3_0 = p->n8;
  const int64_t __THE_0_i4_0 = p->n9;
  const int32_t __THE_0_i_0 = p->n10;
  const struct str __THE_0_s_0 = p->n11;
  const uint8_t __THE_0_u1_0 = p->n12;
  const uint16_t __THE_0_u2_0 = p->n13;
  const uint32_t __THE_0_u3_0 = p->n14;
  const uint64_t __THE_0_u4_0 = p->n15;
  const struct __THE_1_Test_0 *__THE_0_v1_0 = p->n16;
  const struct __THE_1_fn$1000 __THE_0_v2_0 = p->n17;
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_v2_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_v1_0);
  str_free((struct str) __THE_0_s_0);
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test2_0 (void *px, void *pp) {
  struct __THE_1_fn$1002P *p = pp;
  struct __THE_1_test2_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_job_0 = x->__THE_0_job_0;
  const bool __THE_0_t_0 = p->o0 == 1 ? p->n0 : true;
  const unsigned char __THE_0_b_0 = p->o1 == 1 ? p->n1 : 1;
  const char __THE_0_c_0 = p->o2 == 1 ? p->n2 : 'c';
  const float __THE_0_f1_0 = p->o3 == 1 ? p->n3 : 2;
  const double __THE_0_f2_0 = p->o4 == 1 ? p->n4 : 3;
  const double __THE_0_f_0 = p->o5 == 1 ? p->n5 : 4;
  const int8_t __THE_0_i1_0 = p->o6 == 1 ? p->n6 : 5;
  const int16_t __THE_0_i2_0 = p->o7 == 1 ? p->n7 : 6;
  const int32_t __THE_0_i3_0 = p->o8 == 1 ? p->n8 : 7;
  const int64_t __THE_0_i4_0 = p->o9 == 1 ? p->n9 : 8;
  const int32_t __THE_0_i_0 = p->o10 == 1 ? p->n10 : 9;
  const struct str __THE_0_s_0 = p->o11 == 1 ? p->n11 : str_alloc("test");
  const uint8_t __THE_0_u1_0 = p->o12 == 1 ? p->n12 : 10;
  const uint16_t __THE_0_u2_0 = p->o13 == 1 ? p->n13 : 11;
  const uint32_t __THE_0_u3_0 = p->o14 == 1 ? p->n14 : 12;
  const uint64_t __THE_0_u4_0 = p->o15 == 1 ? p->n15 : 13;
  const struct __THE_1_Test_0 *__THE_0_v1_0 = p->o16 == 1 ? p->n16 : __THE_1_Test_0_alloc(0);
  const struct __THE_1_fn$1000 __THE_0_v2_0 = p->o17 == 1 ? p->n17 : __THE_1_fn$1000_copy(*__THE_0_job_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_v2_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_v1_0);
  str_free((struct str) __THE_0_s_0);
}
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test2_0X);
  struct __THE_1_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_job_0 = (struct __THE_1_fn$1000) {&__THE_1_job_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_test1_0 = (struct __THE_1_fn$1001) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_test2_0;
  __THE_1_test2_0_alloc((struct __THE_1_fn$1002 *) &__THE_0_test2_0, (struct __THE_1_test2_0X) {&__THE_0_job_0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {true, 1, 'c', 2, 3, 4, 5, 6, 7, 8, 9, str_alloc("test"), 10, 11, 12, 13, __THE_1_Test_0_alloc(0), __THE_1_fn$1000_copy(__THE_0_job_0)}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {0, false, 0, 0, 0, '\0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (struct str) {}, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)));
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_test2_0);
}
======= flags =======
======= stdout =======
