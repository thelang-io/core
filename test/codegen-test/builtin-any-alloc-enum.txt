======= stdin =======
enum Color {
  Red,
  Green,
  Blue
}

main {
  testEnum := Color.Green
  anyRawEnum: any = Color.Red
  anyEnum: any = testEnum
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>

#define TYPE_Color_0 1

enum __THE_1_Color_0 {
  __THE_0_ColorSDRed_0,
  __THE_0_ColorSDGreen_0,
  __THE_0_ColorSDBlue_0
};

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};

struct __THE_1_any_Color_0;

struct __THE_1_any_Color_0 {
  enum __THE_1_Color_0 d;
};

void *alloc (size_t);
void any_free (struct any);
struct any __THE_1_any_Color_0_alloc (enum __THE_1_Color_0);
struct any __THE_1_any_Color_0_copy (const struct any);
void __THE_1_any_Color_0_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any __THE_1_any_Color_0_alloc (enum __THE_1_Color_0 d) {
  size_t l = sizeof(struct __THE_1_any_Color_0);
  struct __THE_1_any_Color_0 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_Color_0, r, l, &__THE_1_any_Color_0_copy, &__THE_1_any_Color_0_free};
}
struct any __THE_1_any_Color_0_copy (const struct any n) {
  struct __THE_1_any_Color_0 *o = n.d;
  struct __THE_1_any_Color_0 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_Color_0_free (struct any _n) {
  struct __THE_1_any_Color_0 *n = _n.d;
  free(n);
}

int main () {
  const enum __THE_1_Color_0 __THE_0_testEnum_0 = __THE_0_ColorSDGreen_0;
  const struct any __THE_0_anyRawEnum_0 = __THE_1_any_Color_0_alloc(__THE_0_ColorSDRed_0);
  const struct any __THE_0_anyEnum_0 = __THE_1_any_Color_0_alloc(__THE_0_testEnum_0);
  any_free((struct any) __THE_0_anyEnum_0);
  any_free((struct any) __THE_0_anyRawEnum_0);
}
======= flags =======
======= stdout =======
