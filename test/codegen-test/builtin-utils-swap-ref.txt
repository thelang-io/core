======= stdin =======
fn printRefs (a: int, b: int) { print(a, b) }

main {
  refA := 1
  refB := 2
  mut a := ref refA
  mut b := ref refB

  printRefs(a, b)
  utils_swap(ref a, ref b)
  printRefs(a, b)
  utils_swap(ref a, ref b)
  printRefs(a, b)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;

struct __THE_1_fn$1000 {
  void (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t n0;
  int32_t n1;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
void str_free (struct str);
void utils_swap (void *, void *, size_t);
void __THE_1_printRefs_0 (void *, struct __THE_1_fn$1000P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}
void utils_swap (void *a, void *b, size_t l) {
  void *t = alloc(l);
  memcpy(t, a, l);
  memcpy(a, b, l);
  memcpy(b, t, l);
  free(t);
}
void __THE_1_printRefs_0 (void *px, struct __THE_1_fn$1000P p) {
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  print(stdout, "iziz", __THE_0_a_0, " ", __THE_0_b_0, THE_EOL);
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_printRefs_0 = (struct __THE_1_fn$1000) {&__THE_1_printRefs_0, NULL, 0};
  const int32_t __THE_0_refA_0 = 1;
  const int32_t __THE_0_refB_0 = 2;
  int32_t *__THE_0_a_0 = &__THE_0_refA_0;
  int32_t *__THE_0_b_0 = &__THE_0_refB_0;
  __THE_0_printRefs_0.f(__THE_0_printRefs_0.x, (struct __THE_1_fn$1000P) {*__THE_0_a_0, *__THE_0_b_0});
  utils_swap(&__THE_0_a_0, &__THE_0_b_0, sizeof(int32_t *));
  __THE_0_printRefs_0.f(__THE_0_printRefs_0.x, (struct __THE_1_fn$1000P) {*__THE_0_a_0, *__THE_0_b_0});
  utils_swap(&__THE_0_a_0, &__THE_0_b_0, sizeof(int32_t *));
  __THE_0_printRefs_0.f(__THE_0_printRefs_0.x, (struct __THE_1_fn$1000P) {*__THE_0_a_0, *__THE_0_b_0});
}
======= flags =======
======= stdout =======
1 2
2 1
1 2
