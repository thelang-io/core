======= stdin =======
main {
  t: bool = true
  b: byte = 27
  c: char = 'b'
  f1: f32 = 28
  f2: f64 = 29
  f: float = 30
  i1: i8 = 31
  i2: i16 = 32
  i3: i32 = 33
  i4: i64 = 34
  i: int = 35
  u1: u8 = 36
  u2: u16 = 37
  u3: u32 = 38
  u4: u64 = 39

  print(t, b, c, f1, f2, f, i1, i2, i3, i4, i, u1, u2, u3, u4)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

void print (FILE *, const char *, ...);
void str_free (struct str);

void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  const bool __THE_0_t_0 = true;
  const unsigned char __THE_0_b_0 = 27;
  const char __THE_0_c_0 = 'b';
  const float __THE_0_f1_0 = 28;
  const double __THE_0_f2_0 = 29;
  const double __THE_0_f_0 = 30;
  const int8_t __THE_0_i1_0 = 31;
  const int16_t __THE_0_i2_0 = 32;
  const int32_t __THE_0_i3_0 = 33;
  const int64_t __THE_0_i4_0 = 34;
  const int32_t __THE_0_i_0 = 35;
  const uint8_t __THE_0_u1_0 = 36;
  const uint16_t __THE_0_u2_0 = 37;
  const uint32_t __THE_0_u3_0 = 38;
  const uint64_t __THE_0_u4_0 = 39;
  print(stdout, "tzbzczezgzfzhzjzkzlzizvzwzuzyz", __THE_0_t_0, " ", __THE_0_b_0, " ", __THE_0_c_0, " ", __THE_0_f1_0, " ", __THE_0_f2_0, " ", __THE_0_f_0, " ", __THE_0_i1_0, " ", __THE_0_i2_0, " ", __THE_0_i3_0, " ", __THE_0_i4_0, " ", __THE_0_i_0, " ", __THE_0_u1_0, " ", __THE_0_u2_0, " ", __THE_0_u3_0, " ", __THE_0_u4_0, THE_EOL);
}
======= flags =======
======= stdout =======
true 27 b 28.000000 29.000000 30.000000 31 32 33 34 35 36 37 38 39
