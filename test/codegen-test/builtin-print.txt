======= stdin =======
obj Test1 {
  buf: buffer_Buffer
  a: any
  t: bool
  b: byte
  c: char
  f1: f32
  f2: f64
  f: float
  i1: i8
  i2: i16
  i3: i32
  i4: i64
  i: int
  p: ref int
  s: str
  u1: u8
  u2: u16
  u3: u32
  u4: u64
  v1: Test2
  v2: fn () void
}

obj Test2 {
  buf: buffer_Buffer
  a: any
  t: bool
  b: byte
  c: char
  f1: f32
  f2: f64
  f: float
  i1: i8
  i2: i16
  i3: i32
  i4: i64
  i: int
  p: ref int
  s: str
  u1: u8
  u2: u16
  u3: u32
  u4: u64
}

fn test () {}

fn testAnon () fn () void { return test }

main {
  mut a := 1
  mut va: any

  v1 := Test1{
    buf: "".toBuffer(),
    a: va,
    t: true,
    b: 1,
    c: 'c',
    f1: 2,
    f2: 3,
    f: 4,
    i1: 5,
    i2: 6,
    i3: 7,
    i4: 8,
    i: 9,
    p: ref a,
    s: "test",
    u1: 10,
    u2: 11,
    u3: 12,
    u4: 13,
    v1: Test2{
      buf: "\n".toBuffer(),
      a: va,
      t: false,
      b: 14,
      c: 'a',
      f1: 15,
      f2: 16,
      f: 17,
      i1: 18,
      i2: 19,
      i3: 20,
      i4: 21,
      i: 22,
      p: ref a,
      s: "string",
      u1: 23,
      u2: 24,
      u3: 25,
      u4: 26
    },
    v2: test
  }

  buf: buffer_Buffer = "Aaron".toBuffer()
  t: bool = true
  b: byte = 27
  c: char = 'b'
  f1: f32 = 28
  f2: f64 = 29
  f: float = 30
  i1: i8 = 31
  i2: i16 = 32
  i3: i32 = 33
  i4: i64 = 34
  i: int = 35
  p: ref int = ref a
  s: str = "tester"
  u1: u8 = 36
  u2: u16 = 37
  u3: u32 = 38
  u4: u64 = 39

  print(buf, va, t, b, c, f1, f2, f, i1, i2, i3, i4, i, p, s, u1, u2, u3, u4, v1, v1.v2, test, testAnon())
  print("Tony", "Andrew", "Dan", separator: ", ", terminator: "--\n")

  separator := ","
  terminator := ","

  print("Max", "Lester", "Bonny", separator: separator, terminator: terminator)
  print()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$0;
struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_fn$1;
struct __THE_1_testAnon_0X;

struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_Test1_0 {
  const struct buffer __THE_0_buf;
  const struct any __THE_0_a;
  const bool __THE_0_t;
  const unsigned char __THE_0_b;
  const char __THE_0_c;
  const float __THE_0_f1;
  const double __THE_0_f2;
  const double __THE_0_f;
  const int8_t __THE_0_i1;
  const int16_t __THE_0_i2;
  const int32_t __THE_0_i3;
  const int64_t __THE_0_i4;
  const int32_t __THE_0_i;
  const int32_t *__THE_0_p;
  const struct str __THE_0_s;
  const uint8_t __THE_0_u1;
  const uint16_t __THE_0_u2;
  const uint32_t __THE_0_u3;
  const uint64_t __THE_0_u4;
  const struct __THE_1_Test2_0 *__THE_0_v1;
  const struct __THE_1_fn$0 __THE_0_v2;
};
struct __THE_1_Test2_0 {
  const struct buffer __THE_0_buf;
  const struct any __THE_0_a;
  const bool __THE_0_t;
  const unsigned char __THE_0_b;
  const char __THE_0_c;
  const float __THE_0_f1;
  const double __THE_0_f2;
  const double __THE_0_f;
  const int8_t __THE_0_i1;
  const int16_t __THE_0_i2;
  const int32_t __THE_0_i3;
  const int64_t __THE_0_i4;
  const int32_t __THE_0_i;
  const int32_t *__THE_0_p;
  const struct str __THE_0_s;
  const uint8_t __THE_0_u1;
  const uint16_t __THE_0_u2;
  const uint32_t __THE_0_u3;
  const uint64_t __THE_0_u4;
};
struct __THE_1_fn$1 {
  struct __THE_1_fn$0 (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_testAnon_0X {
  const struct __THE_1_fn$0 *__THE_0_test_0;
};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
struct str any_str (struct any);
struct str bool_str (bool);
struct buffer buffer_copy (const struct buffer);
void buffer_free (struct buffer);struct str buffer_str (struct buffer);
struct str byte_str (unsigned char);
struct str char_str (char);
struct str f32_str (float);
struct str f64_str (double);
struct str float_str (double);
struct str i8_str (int8_t);
struct str i16_str (int16_t);
struct str i32_str (int32_t);
struct str i64_str (int64_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct buffer str_to_buffer (struct str);
struct str u8_str (uint8_t);
struct str u16_str (uint16_t);
struct str u32_str (uint32_t);
struct str u64_str (uint64_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct str any_str (struct any n) {
  if (n.d != NULL) n._free(n);
  return str_alloc("any");
}
struct str bool_str (bool t) {
  return str_alloc(t ? "true" : "false");
}
struct buffer buffer_copy (const struct buffer o) {
  unsigned char *d = alloc(o.l);
  memcpy(d, o.d, o.l);
  return (struct buffer) {d, o.l};
}
void buffer_free (struct buffer o) {
  free(o.d);
}
struct str buffer_str (struct buffer b) {
  size_t l = 8 + (b.l * 3);
  char *d = alloc(l);
  memcpy(d, "[Buffer", 7);
  for (size_t i = 0; i < b.l; i++) sprintf(d + 7 + (i * 3), " %02x", b.d[i]);
  d[l - 1] = ']';
  free(b.d);
  return (struct str) {d, l};
}
struct str byte_str (unsigned char x) {
  char buf[512];
  sprintf(buf, "%u", x);
  return str_alloc(buf);
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
struct str f32_str (float f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str f64_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str i8_str (int8_t d) {
  char buf[512];
  sprintf(buf, "%" PRId8, d);
  return str_alloc(buf);
}
struct str i16_str (int16_t d) {
  char buf[512];
  sprintf(buf, "%" PRId16, d);
  return str_alloc(buf);
}
struct str i32_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str i64_str (int64_t d) {
  char buf[512];
  sprintf(buf, "%" PRId64, d);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = realloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = realloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct buffer str_to_buffer (struct str s) {
  return (struct buffer) {(unsigned char *) s.d, s.l};
}
struct str u8_str (uint8_t d) {
  char buf[512];
  sprintf(buf, "%" PRIu8, d);
  return str_alloc(buf);
}
struct str u16_str (uint16_t d) {
  char buf[512];
  sprintf(buf, "%" PRIu16, d);
  return str_alloc(buf);
}
struct str u32_str (uint32_t d) {
  char buf[512];
  sprintf(buf, "%" PRIu32, d);
  return str_alloc(buf);
}
struct str u64_str (uint64_t d) {
  char buf[512];
  sprintf(buf, "%" PRIu64, d);
  return str_alloc(buf);
}

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
struct str __THE_1_fn$0_str (struct __THE_1_fn$0);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct buffer, struct any, bool, unsigned char, char, float, double, double, int8_t, int16_t, int32_t, int64_t, int32_t, int32_t *, struct str, uint8_t, uint16_t, uint32_t, uint64_t, struct __THE_1_Test2_0 *, struct __THE_1_fn$0);
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct str __THE_1_Test1_0_str (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct buffer, struct any, bool, unsigned char, char, float, double, double, int8_t, int16_t, int32_t, int64_t, int32_t, int32_t *, struct str, uint8_t, uint16_t, uint32_t, uint64_t);
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct str __THE_1_Test2_0_str (struct __THE_1_Test2_0 *);
void __THE_1_test_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_testAnon_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_testAnon_0X);
struct __THE_1_fn$0 __THE_1_testAnon_0 (void *);

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
struct str __THE_1_fn$0_str (struct __THE_1_fn$0 n) {
  return str_alloc("[Function]");
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct buffer __THE_0_buf, struct any __THE_0_a, bool __THE_0_t, unsigned char __THE_0_b, char __THE_0_c, float __THE_0_f1, double __THE_0_f2, double __THE_0_f, int8_t __THE_0_i1, int16_t __THE_0_i2, int32_t __THE_0_i3, int64_t __THE_0_i4, int32_t __THE_0_i, int32_t *__THE_0_p, struct str __THE_0_s, uint8_t __THE_0_u1, uint16_t __THE_0_u2, uint32_t __THE_0_u3, uint64_t __THE_0_u4, struct __THE_1_Test2_0 *__THE_0_v1, struct __THE_1_fn$0 __THE_0_v2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_buf, __THE_0_a, __THE_0_t, __THE_0_b, __THE_0_c, __THE_0_f1, __THE_0_f2, __THE_0_f, __THE_0_i1, __THE_0_i2, __THE_0_i3, __THE_0_i4, __THE_0_i, __THE_0_p, __THE_0_s, __THE_0_u1, __THE_0_u2, __THE_0_u3, __THE_0_u4, __THE_0_v1, __THE_0_v2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *o) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {buffer_copy(o->__THE_0_buf), any_copy(o->__THE_0_a), o->__THE_0_t, o->__THE_0_b, o->__THE_0_c, o->__THE_0_f1, o->__THE_0_f2, o->__THE_0_f, o->__THE_0_i1, o->__THE_0_i2, o->__THE_0_i3, o->__THE_0_i4, o->__THE_0_i, o->__THE_0_p, str_copy(o->__THE_0_s), o->__THE_0_u1, o->__THE_0_u2, o->__THE_0_u3, o->__THE_0_u4, __THE_1_Test2_0_copy(o->__THE_0_v1), __THE_1_fn$0_copy(o->__THE_0_v2)};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  buffer_free((struct buffer) o->__THE_0_buf);
  any_free((struct any) o->__THE_0_a);
  str_free((struct str) o->__THE_0_s);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) o->__THE_0_v1);
  __THE_1_fn$0_free((struct __THE_1_fn$0) o->__THE_0_v2);
  free(o);
}
struct str __THE_1_Test1_0_str (struct __THE_1_Test1_0 *o) {
  struct str r = str_alloc("Test1{");
  r = str_concat_cstr(r, "buf: ");
  r = str_concat_str(r, buffer_str(buffer_copy(o->__THE_0_buf)));
  r = str_concat_cstr(r, ", a: ");
  r = str_concat_str(r, any_str(any_copy(o->__THE_0_a)));
  r = str_concat_cstr(r, ", t: ");
  r = str_concat_str(r, bool_str(o->__THE_0_t));
  r = str_concat_cstr(r, ", b: ");
  r = str_concat_str(r, byte_str(o->__THE_0_b));
  r = str_concat_cstr(r, ", c: ");
  r = str_concat_str(r, char_str(o->__THE_0_c));
  r = str_concat_cstr(r, ", f1: ");
  r = str_concat_str(r, f32_str(o->__THE_0_f1));
  r = str_concat_cstr(r, ", f2: ");
  r = str_concat_str(r, f64_str(o->__THE_0_f2));
  r = str_concat_cstr(r, ", f: ");
  r = str_concat_str(r, float_str(o->__THE_0_f));
  r = str_concat_cstr(r, ", i1: ");
  r = str_concat_str(r, i8_str(o->__THE_0_i1));
  r = str_concat_cstr(r, ", i2: ");
  r = str_concat_str(r, i16_str(o->__THE_0_i2));
  r = str_concat_cstr(r, ", i3: ");
  r = str_concat_str(r, i32_str(o->__THE_0_i3));
  r = str_concat_cstr(r, ", i4: ");
  r = str_concat_str(r, i64_str(o->__THE_0_i4));
  r = str_concat_cstr(r, ", i: ");
  r = str_concat_str(r, int_str(o->__THE_0_i));
  r = str_concat_cstr(r, ", p: ");
  r = str_concat_str(r, int_str(*o->__THE_0_p));
  r = str_concat_cstr(r, ", s: \"");
  r = str_concat_str(r, str_escape(o->__THE_0_s));
  r = str_concat_cstr(r, "\"");
  r = str_concat_cstr(r, ", u1: ");
  r = str_concat_str(r, u8_str(o->__THE_0_u1));
  r = str_concat_cstr(r, ", u2: ");
  r = str_concat_str(r, u16_str(o->__THE_0_u2));
  r = str_concat_cstr(r, ", u3: ");
  r = str_concat_str(r, u32_str(o->__THE_0_u3));
  r = str_concat_cstr(r, ", u4: ");
  r = str_concat_str(r, u64_str(o->__THE_0_u4));
  r = str_concat_cstr(r, ", v1: ");
  r = str_concat_str(r, __THE_1_Test2_0_str(__THE_1_Test2_0_copy(o->__THE_0_v1)));
  r = str_concat_cstr(r, ", v2: ");
  r = str_concat_str(r, __THE_1_fn$0_str(__THE_1_fn$0_copy(o->__THE_0_v2)));
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) o);
  return str_concat_cstr(r, "}");
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct buffer __THE_0_buf, struct any __THE_0_a, bool __THE_0_t, unsigned char __THE_0_b, char __THE_0_c, float __THE_0_f1, double __THE_0_f2, double __THE_0_f, int8_t __THE_0_i1, int16_t __THE_0_i2, int32_t __THE_0_i3, int64_t __THE_0_i4, int32_t __THE_0_i, int32_t *__THE_0_p, struct str __THE_0_s, uint8_t __THE_0_u1, uint16_t __THE_0_u2, uint32_t __THE_0_u3, uint64_t __THE_0_u4) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_buf, __THE_0_a, __THE_0_t, __THE_0_b, __THE_0_c, __THE_0_f1, __THE_0_f2, __THE_0_f, __THE_0_i1, __THE_0_i2, __THE_0_i3, __THE_0_i4, __THE_0_i, __THE_0_p, __THE_0_s, __THE_0_u1, __THE_0_u2, __THE_0_u3, __THE_0_u4};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *o) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {buffer_copy(o->__THE_0_buf), any_copy(o->__THE_0_a), o->__THE_0_t, o->__THE_0_b, o->__THE_0_c, o->__THE_0_f1, o->__THE_0_f2, o->__THE_0_f, o->__THE_0_i1, o->__THE_0_i2, o->__THE_0_i3, o->__THE_0_i4, o->__THE_0_i, o->__THE_0_p, str_copy(o->__THE_0_s), o->__THE_0_u1, o->__THE_0_u2, o->__THE_0_u3, o->__THE_0_u4};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *o) {
  buffer_free((struct buffer) o->__THE_0_buf);
  any_free((struct any) o->__THE_0_a);
  str_free((struct str) o->__THE_0_s);
  free(o);
}
struct str __THE_1_Test2_0_str (struct __THE_1_Test2_0 *o) {
  struct str r = str_alloc("Test2{");
  r = str_concat_cstr(r, "buf: ");
  r = str_concat_str(r, buffer_str(buffer_copy(o->__THE_0_buf)));
  r = str_concat_cstr(r, ", a: ");
  r = str_concat_str(r, any_str(any_copy(o->__THE_0_a)));
  r = str_concat_cstr(r, ", t: ");
  r = str_concat_str(r, bool_str(o->__THE_0_t));
  r = str_concat_cstr(r, ", b: ");
  r = str_concat_str(r, byte_str(o->__THE_0_b));
  r = str_concat_cstr(r, ", c: ");
  r = str_concat_str(r, char_str(o->__THE_0_c));
  r = str_concat_cstr(r, ", f1: ");
  r = str_concat_str(r, f32_str(o->__THE_0_f1));
  r = str_concat_cstr(r, ", f2: ");
  r = str_concat_str(r, f64_str(o->__THE_0_f2));
  r = str_concat_cstr(r, ", f: ");
  r = str_concat_str(r, float_str(o->__THE_0_f));
  r = str_concat_cstr(r, ", i1: ");
  r = str_concat_str(r, i8_str(o->__THE_0_i1));
  r = str_concat_cstr(r, ", i2: ");
  r = str_concat_str(r, i16_str(o->__THE_0_i2));
  r = str_concat_cstr(r, ", i3: ");
  r = str_concat_str(r, i32_str(o->__THE_0_i3));
  r = str_concat_cstr(r, ", i4: ");
  r = str_concat_str(r, i64_str(o->__THE_0_i4));
  r = str_concat_cstr(r, ", i: ");
  r = str_concat_str(r, int_str(o->__THE_0_i));
  r = str_concat_cstr(r, ", p: ");
  r = str_concat_str(r, int_str(*o->__THE_0_p));
  r = str_concat_cstr(r, ", s: \"");
  r = str_concat_str(r, str_escape(o->__THE_0_s));
  r = str_concat_cstr(r, "\"");
  r = str_concat_cstr(r, ", u1: ");
  r = str_concat_str(r, u8_str(o->__THE_0_u1));
  r = str_concat_cstr(r, ", u2: ");
  r = str_concat_str(r, u16_str(o->__THE_0_u2));
  r = str_concat_cstr(r, ", u3: ");
  r = str_concat_str(r, u32_str(o->__THE_0_u3));
  r = str_concat_cstr(r, ", u4: ");
  r = str_concat_str(r, u64_str(o->__THE_0_u4));
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) o);
  return str_concat_cstr(r, "}");
}
void __THE_1_test_0 (void *px) {
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_testAnon_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_testAnon_0X x) {
  size_t l = sizeof(struct __THE_1_testAnon_0X);
  struct __THE_1_testAnon_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_testAnon_0;
  n->x = r;
  n->l = l;
}
struct __THE_1_fn$0 __THE_1_testAnon_0 (void *px) {
  struct __THE_1_testAnon_0X *x = px;
  const struct __THE_1_fn$0 *__THE_0_test_0 = x->__THE_0_test_0;
  return __THE_1_fn$0_copy(*__THE_0_test_0);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test_0 = (struct __THE_1_fn$0) {&__THE_1_test_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_testAnon_0;
  __THE_1_testAnon_0_alloc((struct __THE_1_fn$1 *) &__THE_0_testAnon_0, (struct __THE_1_testAnon_0X) {&__THE_0_test_0});
  int32_t __THE_0_a_0 = 1;
  struct any __THE_0_va_0 = {0, NULL, 0, NULL, NULL};
  const struct __THE_1_Test1_0 *__THE_0_v1_0 = __THE_1_Test1_0_alloc(str_to_buffer(str_alloc("")), any_copy(__THE_0_va_0), true, 1, 'c', 2, 3, 4, 5, 6, 7, 8, 9, &__THE_0_a_0, str_alloc("test"), 10, 11, 12, 13, __THE_1_Test2_0_alloc(str_to_buffer(str_alloc("\n")), any_copy(__THE_0_va_0), false, 14, 'a', 15, 16, 17, 18, 19, 20, 21, 22, &__THE_0_a_0, str_alloc("string"), 23, 24, 25, 26), __THE_1_fn$0_copy(__THE_0_test_0));
  const struct buffer __THE_0_buf_0 = str_to_buffer(str_alloc("Aaron"));
  const bool __THE_0_t_0 = true;
  const unsigned char __THE_0_b_0 = 27;
  const char __THE_0_c_0 = 'b';
  const float __THE_0_f1_0 = 28;
  const double __THE_0_f2_0 = 29;
  const double __THE_0_f_0 = 30;
  const int8_t __THE_0_i1_0 = 31;
  const int16_t __THE_0_i2_0 = 32;
  const int32_t __THE_0_i3_0 = 33;
  const int64_t __THE_0_i4_0 = 34;
  const int32_t __THE_0_i_0 = 35;
  const int32_t *__THE_0_p_0 = &__THE_0_a_0;
  const struct str __THE_0_s_0 = str_alloc("tester");
  const uint8_t __THE_0_u1_0 = 36;
  const uint16_t __THE_0_u2_0 = 37;
  const uint32_t __THE_0_u3_0 = 38;
  const uint64_t __THE_0_u4_0 = 39;
  print(stdout, "szsztzbzczezgzfzhzjzkzlzizpzszvzwzuzyzszszszsz", buffer_str(buffer_copy(__THE_0_buf_0)), " ", any_str(any_copy(__THE_0_va_0)), " ", __THE_0_t_0, " ", __THE_0_b_0, " ", __THE_0_c_0, " ", __THE_0_f1_0, " ", __THE_0_f2_0, " ", __THE_0_f_0, " ", __THE_0_i1_0, " ", __THE_0_i2_0, " ", __THE_0_i3_0, " ", __THE_0_i4_0, " ", __THE_0_i_0, " ", __THE_0_p_0, " ", str_copy(__THE_0_s_0), " ", __THE_0_u1_0, " ", __THE_0_u2_0, " ", __THE_0_u3_0, " ", __THE_0_u4_0, " ", __THE_1_Test1_0_str(__THE_1_Test1_0_copy(__THE_0_v1_0)), " ", __THE_1_fn$0_str(__THE_1_fn$0_copy(__THE_0_v1_0->__THE_0_v2)), " ", __THE_1_fn$0_str(__THE_1_fn$0_copy(__THE_0_test_0)), " ", __THE_1_fn$0_str(__THE_0_testAnon_0.f(__THE_0_testAnon_0.x)), THE_EOL);
  print(stdout, "zzzzzz", "Tony", ", ", "Andrew", ", ", "Dan", "--\n");
  const struct str __THE_0_separator_0 = str_alloc(",");
  const struct str __THE_0_terminator_0 = str_alloc(",");
  print(stdout, "zszszs", "Max", str_copy(__THE_0_separator_0), "Lester", str_copy(__THE_0_separator_0), "Bonny", str_copy(__THE_0_terminator_0));
  print(stdout, "z", THE_EOL);
  str_free((struct str) __THE_0_terminator_0);
  str_free((struct str) __THE_0_separator_0);
  str_free((struct str) __THE_0_s_0);
  buffer_free((struct buffer) __THE_0_buf_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_v1_0);
  any_free((struct any) __THE_0_va_0);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_testAnon_0);
}
======= flags =======
======= stdout =======
[Buffer 41 61 72 6f 6e] any true 27 b 28.000000 29.000000 30.000000 31 32 33 34 35 {{ \w+ }} tester 36 37 38 39 Test1{buf: [Buffer], a: any, t: true, b: 1, c: c, f1: 2.000000, f2: 3.000000, f: 4.000000, i1: 5, i2: 6, i3: 7, i4: 8, i: 9, p: 1, s: "test", u1: 10, u2: 11, u3: 12, u4: 13, v1: Test2{buf: [Buffer 0a], a: any, t: false, b: 14, c: a, f1: 15.000000, f2: 16.000000, f: 17.000000, i1: 18, i2: 19, i3: 20, i4: 21, i: 22, p: 1, s: "string", u1: 23, u2: 24, u3: 25, u4: 26}, v2: [Function]} [Function] [Function] [Function]
Tony, Andrew, Dan--{{ \s+ }}Max,Lester,Bonny,
