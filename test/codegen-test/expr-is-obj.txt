======= stdin =======
obj Test { a: int }

main {
  a: any = Test{}
  if a is Test { print("Test " + a.str()) }
  else { print("any") }

  b: any = 3.14
  if b is Test { print("Test " + b.str()) }
  else { print("any") }

  c: Test | float = Test{}
  if c is Test { print("Test " + c.str()) }
  else { print("float " + c.str()) }

  d: Test | float = 3.14
  if d is Test { print("Test " + d.str()) }
  else { print("float " + d.str()) }

  mut e: any = Test{}
  if (e = Test{}) is Test { print("Test " + e.str()) }
  else { print("any") }

  mut f: any = 3.14
  if (f = 3.14) is Test { print("Test " + f.str()) }
  else { print("any") }

  mut g: Test | float = Test{}
  if (g = Test{}) is Test { print("Test " + g.str()) }
  else { print("float " + g.str()) }

  mut h: Test | float = 3.14
  if (h = 3.14) is Test { print("Test " + h.str()) }
  else { print("float " + h.str()) }

  print((a is Test) ? "Test " + a.str() : "any")
  print((b is Test) ? "Test " + b.str() : "any")
  print((c is Test) ? "Test " + c.str() : "float " + c.str())
  print((d is Test) ? "Test " + d.str() : "float " + d.str())
  print(((e = Test{}) is Test) ? "Test " + e.str() : "any")
  print(((f = 3.14) is Test) ? "Test " + f.str() : "any")
  print(((g = Test{}) is Test) ? "Test " + g.str() : "float " + g.str())
  print(((h = 3.14) is Test) ? "Test " + h.str() : "float " + h.str())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_Test_0 1
#define TYPE_float 2

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test_0;
struct __THE_1_any_Test_0;
struct __THE_1_any_float;
struct __THE_1_union_TestUSfloatUE;

struct __THE_1_Test_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_any_Test_0 {
  struct __THE_1_Test_0 *d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_union_TestUSfloatUE {
  int t;
  union {
    struct __THE_1_Test_0 *v1;
    double v2;
  };
};

void *alloc (size_t);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str cstr_concat_str (const char *, struct str);
struct str float_str (double);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct str __THE_1_Test_0_str (struct __THE_1_Test_0 *);
struct any __THE_1_any_Test_0_alloc (struct __THE_1_Test_0 *);
struct any __THE_1_any_Test_0_copy (const struct any);
void __THE_1_any_Test_0_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct __THE_1_union_TestUSfloatUE __THE_1_union_TestUSfloatUE_alloc (int, ...);
void __THE_1_union_TestUSfloatUE_free (struct __THE_1_union_TestUSfloatUE);
struct __THE_1_union_TestUSfloatUE __THE_1_union_TestUSfloatUE_realloc (struct __THE_1_union_TestUSfloatUE, struct __THE_1_union_TestUSfloatUE);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *n) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
struct str __THE_1_Test_0_str (struct __THE_1_Test_0 *n) {
  struct str r = str_alloc("Test{");
  r = str_concat_cstr(r, "a: ");
  r = str_concat_str(r, int_str(n->__THE_0_a));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) n);
  return str_concat_cstr(r, "}");
}
struct any __THE_1_any_Test_0_alloc (struct __THE_1_Test_0 *d) {
  size_t l = sizeof(struct __THE_1_any_Test_0);
  struct __THE_1_any_Test_0 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_Test_0, r, l, &__THE_1_any_Test_0_copy, &__THE_1_any_Test_0_free};
}
struct any __THE_1_any_Test_0_copy (const struct any n) {
  struct __THE_1_any_Test_0 *o = n.d;
  struct __THE_1_any_Test_0 *r = alloc(n.l);
  r->d = __THE_1_Test_0_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_Test_0_free (struct any _n) {
  struct __THE_1_any_Test_0 *n = _n.d;
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) n->d);
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct __THE_1_union_TestUSfloatUE __THE_1_union_TestUSfloatUE_alloc (int t, ...) {
  struct __THE_1_union_TestUSfloatUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_Test_0) r.v1 = va_arg(args, struct __THE_1_Test_0 *);
  if (t == TYPE_float) r.v2 = va_arg(args, double);
  va_end(args);
  return r;
}
void __THE_1_union_TestUSfloatUE_free (struct __THE_1_union_TestUSfloatUE n) {
  if (n.t == TYPE_Test_0) __THE_1_Test_0_free((struct __THE_1_Test_0 *) n.v1);
}
struct __THE_1_union_TestUSfloatUE __THE_1_union_TestUSfloatUE_realloc (struct __THE_1_union_TestUSfloatUE n1, struct __THE_1_union_TestUSfloatUE n2) {
  __THE_1_union_TestUSfloatUE_free((struct __THE_1_union_TestUSfloatUE) n1);
  return n2;
}

int main () {
  const struct any __THE_0_a_0 = __THE_1_any_Test_0_alloc(__THE_1_Test_0_alloc(0));
  if (__THE_0_a_0.t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_a_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct any __THE_0_b_0 = __THE_1_any_float_alloc(3.14);
  if (__THE_0_b_0.t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_b_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct __THE_1_union_TestUSfloatUE __THE_0_c_0 = __THE_1_union_TestUSfloatUE_alloc(TYPE_Test_0, __THE_1_Test_0_alloc(0));
  if (__THE_0_c_0.t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_c_0.v1))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_c_0.v2)), THE_EOL);
  }
  const struct __THE_1_union_TestUSfloatUE __THE_0_d_0 = __THE_1_union_TestUSfloatUE_alloc(TYPE_float, 3.14);
  if (__THE_0_d_0.t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_d_0.v1))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_d_0.v2)), THE_EOL);
  }
  struct any __THE_0_e_0 = __THE_1_any_Test_0_alloc(__THE_1_Test_0_alloc(0));
  if ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_Test_0_alloc(__THE_1_Test_0_alloc(0)))).t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_e_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct any __THE_0_f_0 = __THE_1_any_float_alloc(3.14);
  if ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_f_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct __THE_1_union_TestUSfloatUE __THE_0_g_0 = __THE_1_union_TestUSfloatUE_alloc(TYPE_Test_0, __THE_1_Test_0_alloc(0));
  if ((__THE_0_g_0 = __THE_1_union_TestUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_TestUSfloatUE_alloc(TYPE_Test_0, __THE_1_Test_0_alloc(0)))).t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_g_0.v1))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_g_0.v2)), THE_EOL);
  }
  struct __THE_1_union_TestUSfloatUE __THE_0_h_0 = __THE_1_union_TestUSfloatUE_alloc(TYPE_float, 3.14);
  if ((__THE_0_h_0 = __THE_1_union_TestUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_TestUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_Test_0) {
    print(stdout, "sz", cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_h_0.v1))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_h_0.v2)), THE_EOL);
  }
  print(stdout, "sz", (__THE_0_a_0.t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_a_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_b_0.t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_b_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_c_0.t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_c_0.v1))) : cstr_concat_str("float ", float_str(__THE_0_c_0.v2)), THE_EOL);
  print(stdout, "sz", (__THE_0_d_0.t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_d_0.v1))) : cstr_concat_str("float ", float_str(__THE_0_d_0.v2)), THE_EOL);
  print(stdout, "sz", ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_Test_0_alloc(__THE_1_Test_0_alloc(0)))).t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_e_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(((struct __THE_1_any_Test_0 *) __THE_0_f_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_g_0 = __THE_1_union_TestUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_TestUSfloatUE_alloc(TYPE_Test_0, __THE_1_Test_0_alloc(0)))).t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_g_0.v1))) : cstr_concat_str("float ", float_str(__THE_0_g_0.v2)), THE_EOL);
  print(stdout, "sz", ((__THE_0_h_0 = __THE_1_union_TestUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_TestUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_Test_0) ? cstr_concat_str("Test ", __THE_1_Test_0_str(__THE_1_Test_0_copy(__THE_0_h_0.v1))) : cstr_concat_str("float ", float_str(__THE_0_h_0.v2)), THE_EOL);
  __THE_1_union_TestUSfloatUE_free((struct __THE_1_union_TestUSfloatUE) __THE_0_h_0);
  __THE_1_union_TestUSfloatUE_free((struct __THE_1_union_TestUSfloatUE) __THE_0_g_0);
  any_free((struct any) __THE_0_f_0);
  any_free((struct any) __THE_0_e_0);
  __THE_1_union_TestUSfloatUE_free((struct __THE_1_union_TestUSfloatUE) __THE_0_d_0);
  __THE_1_union_TestUSfloatUE_free((struct __THE_1_union_TestUSfloatUE) __THE_0_c_0);
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
Test Test{a: 0}
any
Test Test{a: 0}
float 3.140000
Test Test{a: 0}
any
Test Test{a: 0}
float 3.140000
Test Test{a: 0}
any
Test Test{a: 0}
float 3.140000
Test Test{a: 0}
any
Test Test{a: 0}
float 3.140000
