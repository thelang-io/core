======= stdin =======
fn test1 (items: str[]) {
  print("test1: ", terminator: "")

  if items.len > 1 {
    name := items.slice(2)
    print("return 1")
    return
  } elif items.len > 0 {
    name := items.slice(1)
    print("return 2")
    return
  }

  print("return 3")
}

fn test2 (items: str[]) {
  print("test2: ", terminator: "")

  loop i := 1; i < items.len; i++ {
    item := items[i]
    print("loop" + i.str() + ": ", terminator: "")

    if item.len > 1 {
      name := item.slice(2)
      print("return 1")
      return
    } elif item.len > 0 {
      name := item.slice(1)
      print("return 2")
      return
    }

    value := ""
    print("continue, ", terminator: "")
  }

  print("return 3")
}

fn test3 (items: str[]) {
  print("test3: ", terminator: "")

  if items.len > 1 {
    name := items.slice(2)
    print("return 1")
    return;
    print("return 5")
  } elif items.len > 0 {
    name := items.slice(1)
    print("return 2")
    return;
    print("return 6")
  }

  print("return 4")
  return;
  print("return 3")
}

fn test4 (items: str[]) {
  print("test4: ", terminator: "")

  loop i := 1; i < items.len; i++ {
    item := items[i]
    print("loop" + i.str() + ": ", terminator: "")

    if item.len > 1 {
      name := item.slice(2)
      print("return 1")
      return;
      print("return 5")
    } elif item.len > 0 {
      name := item.slice(1)
      print("return 2")
      return;
      print("return 6")
    }

    value := ""
    print("continue, ", terminator: "")
  }

  print("return 4")
  return;
  print("return 3")
}

main {
  test1([])
  test1(["1"])
  test1(["10"])
  test1(["1", "2"])
  test1(["10", "20"])
  test1(["1", "2", "3"])
  test1(["10", "20", "30"])

  test2([])
  test2(["1"])
  test2(["10"])
  test2(["1", "2"])
  test2(["10", "20"])
  test2(["1", "2", "3"])
  test2(["10", "20", "30"])

  test3([])
  test3(["1"])
  test3(["10"])
  test3(["1", "2"])
  test3(["10", "20"])
  test3(["1", "2", "3"])
  test3(["10", "20", "30"])

  test4([])
  test4(["1"])
  test4(["10"])
  test4(["1", "2"])
  test4(["10", "20"])
  test4(["1", "2", "3"])
  test4(["10", "20", "30"])
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_str;
struct __THE_1_fn_sFP3array_strFRvoidFE;
struct __THE_1_fn_sFP3array_strFRvoidFEP;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_fn_sFP3array_strFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3array_strFRvoidFEP {
  err_state_t *err_state;
  int line;
  int col;
  struct __THE_1_array_str n0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
void error_assign (err_state_t *, int, void *, void (*f) (void *), int, int);
void error_buf_decrease (err_state_t *);
err_buf_t *error_buf_increase (err_state_t *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void error_stack_str (err_state_t *);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
size_t str_len (struct str);
struct str str_slice (struct str, unsigned char, int32_t, unsigned char, int32_t);
void *xalloc (void *, size_t);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
struct str *__THE_1_array_str_at (err_state_t *, int, int, struct __THE_1_array_str, int32_t);
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str);
void __THE_1_array_str_free (struct __THE_1_array_str);
size_t __THE_1_array_str_len (struct __THE_1_array_str);
struct __THE_1_array_str __THE_1_array_str_slice (struct __THE_1_array_str, unsigned int, int32_t, unsigned int, int32_t);
void __THE_1_test1_0 (void *, void *);
void __THE_1_test2_0 (void *, void *);
void __THE_1_test3_0 (void *, void *);
void __THE_1_test4_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_assign (err_state_t *fn_err_state, int id, void *ctx, void (*f) (void *), int line, int col) {
  fn_err_state->id = id;
  fn_err_state->ctx = ctx;
  fn_err_state->_free = f;
  error_stack_pos(fn_err_state, line, col);
  error_stack_str(fn_err_state);
}
void error_buf_decrease (err_state_t *fn_err_state) {
  err_buf_t *buf = fn_err_state->buf_last;
  fn_err_state->buf_last = buf->prev;
  free(buf);
}
err_buf_t *error_buf_increase (err_state_t *fn_err_state) {
  err_buf_t *buf = alloc(sizeof(err_buf_t));
  buf->next = NULL;
  buf->prev = fn_err_state->buf_last;
  if (fn_err_state->buf_first == NULL) fn_err_state->buf_first = buf;
  if (fn_err_state->buf_last != NULL) fn_err_state->buf_last->next = buf;
  fn_err_state->buf_last = buf;
  return fn_err_state->buf_last;
}
void error_stack_pop (err_state_t *fn_err_state) {
  err_stack_t *stack = fn_err_state->stack_last;
  fn_err_state->stack_last = stack->prev;
  free(stack);
}
void error_stack_pos (err_state_t *fn_err_state, int line, int col) {
  if (line != 0) fn_err_state->stack_last->line = line;
  if (col != 0) fn_err_state->stack_last->col = col;
}
void error_stack_push (err_state_t *fn_err_state, const char *file, const char *name, int line, int col) {
  error_stack_pos(fn_err_state, line, col);
  err_stack_t *stack = alloc(sizeof(err_stack_t));
  stack->file = file;
  stack->name = name;
  stack->next = NULL;
  stack->prev = fn_err_state->stack_last;
  if (fn_err_state->stack_first == NULL) fn_err_state->stack_first = stack;
  if (fn_err_state->stack_last != NULL) fn_err_state->stack_last->next = stack;
  fn_err_state->stack_last = stack;
}
void error_stack_str (err_state_t *fn_err_state) {
  struct str *stack = (struct str *) &((struct error_Error *) fn_err_state->ctx)->__THE_0_stack;
  struct str message = ((struct error_Error *) fn_err_state->ctx)->__THE_0_message;
  stack->l = message.l;
  stack->d = re_alloc(stack->d, stack->l);
  memcpy(stack->d, message.d, stack->l);
  int i = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    size_t z;
    char *fmt;
    if (it->col == 0 && it->line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it->name, it->file);
    } else if (it->col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it->name, it->file, it->line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it->name, it->file, it->line, it->col);
    }
    stack->d = re_alloc(stack->d, stack->l + z + 1);
    if (it->col == 0 && it->line == 0) {
      sprintf(&stack->d[stack->l], fmt, it->name, it->file);
    } else if (it->col == 0) {
      sprintf(&stack->d[stack->l], fmt, it->name, it->file, it->line);
    } else {
      sprintf(&stack->d[stack->l], fmt, it->name, it->file, it->line, it->col);
    }
    stack->l += z;
    i++;
  }
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
size_t str_len (struct str s) {
  size_t l = s.l;
  free(s.d);
  return l;
}
struct str str_slice (struct str s, unsigned char o1, int32_t n1, unsigned char o2, int32_t n2) {
  int32_t i1 = o1 == 0 ? 0 : (int32_t) (n1 < 0 ? (n1 < -((int32_t) s.l) ? 0 : n1 + s.l) : (n1 > s.l ? s.l : n1));
  int32_t i2 = o2 == 0 ? (int32_t) s.l : (int32_t) (n2 < 0 ? (n2 < -((int32_t) s.l) ? 0 : n2 + s.l) : (n2 > s.l ? s.l : n2));
  if (i1 >= i2 || i1 >= s.l) {
    free(s.d);
    return str_alloc("");
  }
  size_t l = i2 - i1;
  char *d = alloc(l);
  for (size_t i = 0; i1 < i2; i1++) d[i++] = s.d[i1];
  free(s.d);
  return (struct str) {d, l};
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
struct str *__THE_1_array_str_at (err_state_t *fn_err_state, int line, int col, struct __THE_1_array_str n, int32_t i) {
  if ((i >= 0 && i >= n.l) || (i < 0 && i < -((int32_t) n.l))) {
    const char *fmt = "index %" PRId32 " out of array bounds";
    size_t z = snprintf(NULL, 0, fmt, i);
    char *d = alloc(z + 1);
    sprintf(d, fmt, i);
    error_assign(fn_err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
  }
  return i < 0 ? &n.d[n.l + i] : &n.d[i];
}
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str n) {
  if (n.l == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) d[i] = str_copy(n.d[i]);
  return (struct __THE_1_array_str) {d, n.l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
size_t __THE_1_array_str_len (struct __THE_1_array_str n) {
  size_t l = n.l;
  __THE_1_array_str_free((struct __THE_1_array_str) n);
  return l;
}
struct __THE_1_array_str __THE_1_array_str_slice (struct __THE_1_array_str n, unsigned int o1, int32_t n1, unsigned int o2, int32_t n2) {
  int32_t i1 = o1 == 0 ? 0 : (int32_t) (n1 < 0 ? (n1 < -((int32_t) n.l) ? 0 : n1 + n.l) : (n1 > n.l ? n.l : n1));
  int32_t i2 = o2 == 0 ? (int32_t) n.l : (int32_t) (n2 < 0 ? (n2 < -((int32_t) n.l) ? 0 : n2 + n.l) : (n2 > n.l ? n.l : n2));
  if (i1 > i2 || i1 >= n.l) {
    __THE_1_array_str_free((struct __THE_1_array_str) n);
    return (struct __THE_1_array_str) {NULL, 0};
  }
  size_t l = i2 - i1;
  struct str *d = alloc(l * sizeof(struct str));
  for (size_t i = 0; i1 < i2; i1++) d[i++] = str_copy(n.d[i1]);
  __THE_1_array_str_free((struct __THE_1_array_str) n);
  return (struct __THE_1_array_str) {d, l};
}
void __THE_1_test1_0 (void *px, void *pp) {
  unsigned char r = 0;
  struct __THE_1_fn_sFP3array_strFRvoidFEP *p = pp;
  err_state_t *fn_err_state = p->err_state;
  error_stack_push(fn_err_state, "/test", "test1", p->line, p->col);
  const struct __THE_1_array_str __THE_0_items_0 = p->n0;
  if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L1;
  print(stdout, "z", "test1: ");
  if (__THE_1_array_str_len(__THE_1_array_str_copy(__THE_0_items_0)) > 1) {
    if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L2;
    const struct __THE_1_array_str __THE_0_name_0 = __THE_1_array_str_slice(__THE_1_array_str_copy(__THE_0_items_0), 1, 2, 0, 0);
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L3;
    print(stdout, "zz", "return 1", THE_EOL);
    r = 1;
L3:
    __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_name_0);
L2:
    error_buf_decrease(fn_err_state);
    if (fn_err_state->id != -1) goto L1;
    if (r == 1) goto L1;
  } else if (__THE_1_array_str_len(__THE_1_array_str_copy(__THE_0_items_0)) > 0) {
    if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L4;
    const struct __THE_1_array_str __THE_0_name_0 = __THE_1_array_str_slice(__THE_1_array_str_copy(__THE_0_items_0), 1, 1, 0, 0);
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L5;
    print(stdout, "zz", "return 2", THE_EOL);
    r = 1;
L5:
    __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_name_0);
L4:
    error_buf_decrease(fn_err_state);
    if (fn_err_state->id != -1) goto L1;
    if (r == 1) goto L1;
  }
  if (setjmp(fn_err_state->buf_last->buf) != 0) goto L1;
  print(stdout, "zz", "return 3", THE_EOL);
L1:
  error_buf_decrease(fn_err_state);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_items_0);
  free(pp);
  error_stack_pop(fn_err_state);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
}
void __THE_1_test2_0 (void *px, void *pp) {
  unsigned char r = 0;
  struct __THE_1_fn_sFP3array_strFRvoidFEP *p = pp;
  err_state_t *fn_err_state = p->err_state;
  error_stack_push(fn_err_state, "/test", "test2", p->line, p->col);
  const struct __THE_1_array_str __THE_0_items_0 = p->n0;
  if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L6;
  print(stdout, "z", "test2: ");
  for (int32_t __THE_0_i_0 = 1; __THE_0_i_0 < __THE_1_array_str_len(__THE_1_array_str_copy(__THE_0_items_0)); __THE_0_i_0++) {
    if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L7;
    const struct str *__THE_0_item_0 = __THE_1_array_str_at(fn_err_state, 21, 13, __THE_0_items_0, __THE_0_i_0);
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L7;
    print(stdout, "s", str_concat_cstr(cstr_concat_str("loop", int_str(__THE_0_i_0)), ": "));
    if (str_len(str_copy(*__THE_0_item_0)) > 1) {
      if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L8;
      const struct str __THE_0_name_0 = str_slice(str_copy(*__THE_0_item_0), 1, 2, 0, 0);
      if (setjmp(fn_err_state->buf_last->buf) != 0) goto L9;
      print(stdout, "zz", "return 1", THE_EOL);
      r = 1;
L9:
      str_free((struct str) __THE_0_name_0);
L8:
      error_buf_decrease(fn_err_state);
      if (fn_err_state->id != -1) goto L7;
      if (r == 1) goto L7;
    } else if (str_len(str_copy(*__THE_0_item_0)) > 0) {
      if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L10;
      const struct str __THE_0_name_0 = str_slice(str_copy(*__THE_0_item_0), 1, 1, 0, 0);
      if (setjmp(fn_err_state->buf_last->buf) != 0) goto L11;
      print(stdout, "zz", "return 2", THE_EOL);
      r = 1;
L11:
      str_free((struct str) __THE_0_name_0);
L10:
      error_buf_decrease(fn_err_state);
      if (fn_err_state->id != -1) goto L7;
      if (r == 1) goto L7;
    }
    const struct str __THE_0_value_0 = str_alloc("");
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L12;
    print(stdout, "z", "continue, ");
L12:
    str_free((struct str) __THE_0_value_0);
L7:
    error_buf_decrease(fn_err_state);
    if (fn_err_state->id != -1) goto L6;
    if (r == 1) goto L6;
  }
  if (setjmp(fn_err_state->buf_last->buf) != 0) goto L6;
  print(stdout, "zz", "return 3", THE_EOL);
L6:
  error_buf_decrease(fn_err_state);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_items_0);
  free(pp);
  error_stack_pop(fn_err_state);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
}
void __THE_1_test3_0 (void *px, void *pp) {
  unsigned char r = 0;
  struct __THE_1_fn_sFP3array_strFRvoidFEP *p = pp;
  err_state_t *fn_err_state = p->err_state;
  error_stack_push(fn_err_state, "/test", "test3", p->line, p->col);
  const struct __THE_1_array_str __THE_0_items_0 = p->n0;
  if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L13;
  print(stdout, "z", "test3: ");
  if (__THE_1_array_str_len(__THE_1_array_str_copy(__THE_0_items_0)) > 1) {
    if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L14;
    const struct __THE_1_array_str __THE_0_name_0 = __THE_1_array_str_slice(__THE_1_array_str_copy(__THE_0_items_0), 1, 2, 0, 0);
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L15;
    print(stdout, "zz", "return 1", THE_EOL);
    r = 1;
    goto L15;
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L15;
    print(stdout, "zz", "return 5", THE_EOL);
L15:
    __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_name_0);
L14:
    error_buf_decrease(fn_err_state);
    if (fn_err_state->id != -1) goto L13;
    if (r == 1) goto L13;
  } else if (__THE_1_array_str_len(__THE_1_array_str_copy(__THE_0_items_0)) > 0) {
    if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L16;
    const struct __THE_1_array_str __THE_0_name_0 = __THE_1_array_str_slice(__THE_1_array_str_copy(__THE_0_items_0), 1, 1, 0, 0);
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L17;
    print(stdout, "zz", "return 2", THE_EOL);
    r = 1;
    goto L17;
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L17;
    print(stdout, "zz", "return 6", THE_EOL);
L17:
    __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_name_0);
L16:
    error_buf_decrease(fn_err_state);
    if (fn_err_state->id != -1) goto L13;
    if (r == 1) goto L13;
  }
  if (setjmp(fn_err_state->buf_last->buf) != 0) goto L13;
  print(stdout, "zz", "return 4", THE_EOL);
  goto L13;
  if (setjmp(fn_err_state->buf_last->buf) != 0) goto L13;
  print(stdout, "zz", "return 3", THE_EOL);
L13:
  error_buf_decrease(fn_err_state);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_items_0);
  free(pp);
  error_stack_pop(fn_err_state);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
}
void __THE_1_test4_0 (void *px, void *pp) {
  unsigned char r = 0;
  struct __THE_1_fn_sFP3array_strFRvoidFEP *p = pp;
  err_state_t *fn_err_state = p->err_state;
  error_stack_push(fn_err_state, "/test", "test4", p->line, p->col);
  const struct __THE_1_array_str __THE_0_items_0 = p->n0;
  if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L18;
  print(stdout, "z", "test4: ");
  for (int32_t __THE_0_i_0 = 1; __THE_0_i_0 < __THE_1_array_str_len(__THE_1_array_str_copy(__THE_0_items_0)); __THE_0_i_0++) {
    if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L19;
    const struct str *__THE_0_item_0 = __THE_1_array_str_at(fn_err_state, 65, 13, __THE_0_items_0, __THE_0_i_0);
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L19;
    print(stdout, "s", str_concat_cstr(cstr_concat_str("loop", int_str(__THE_0_i_0)), ": "));
    if (str_len(str_copy(*__THE_0_item_0)) > 1) {
      if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L20;
      const struct str __THE_0_name_0 = str_slice(str_copy(*__THE_0_item_0), 1, 2, 0, 0);
      if (setjmp(fn_err_state->buf_last->buf) != 0) goto L21;
      print(stdout, "zz", "return 1", THE_EOL);
      r = 1;
      goto L21;
      if (setjmp(fn_err_state->buf_last->buf) != 0) goto L21;
      print(stdout, "zz", "return 5", THE_EOL);
L21:
      str_free((struct str) __THE_0_name_0);
L20:
      error_buf_decrease(fn_err_state);
      if (fn_err_state->id != -1) goto L19;
      if (r == 1) goto L19;
    } else if (str_len(str_copy(*__THE_0_item_0)) > 0) {
      if (setjmp(error_buf_increase(fn_err_state)->buf) != 0) goto L22;
      const struct str __THE_0_name_0 = str_slice(str_copy(*__THE_0_item_0), 1, 1, 0, 0);
      if (setjmp(fn_err_state->buf_last->buf) != 0) goto L23;
      print(stdout, "zz", "return 2", THE_EOL);
      r = 1;
      goto L23;
      if (setjmp(fn_err_state->buf_last->buf) != 0) goto L23;
      print(stdout, "zz", "return 6", THE_EOL);
L23:
      str_free((struct str) __THE_0_name_0);
L22:
      error_buf_decrease(fn_err_state);
      if (fn_err_state->id != -1) goto L19;
      if (r == 1) goto L19;
    }
    const struct str __THE_0_value_0 = str_alloc("");
    if (setjmp(fn_err_state->buf_last->buf) != 0) goto L24;
    print(stdout, "z", "continue, ");
L24:
    str_free((struct str) __THE_0_value_0);
L19:
    error_buf_decrease(fn_err_state);
    if (fn_err_state->id != -1) goto L18;
    if (r == 1) goto L18;
  }
  if (setjmp(fn_err_state->buf_last->buf) != 0) goto L18;
  print(stdout, "zz", "return 4", THE_EOL);
  goto L18;
  if (setjmp(fn_err_state->buf_last->buf) != 0) goto L18;
  print(stdout, "zz", "return 3", THE_EOL);
L18:
  error_buf_decrease(fn_err_state);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_items_0);
  free(pp);
  error_stack_pop(fn_err_state);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn_sFP3array_strFRvoidFE __THE_0_test1_0 = (struct __THE_1_fn_sFP3array_strFRvoidFE) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn_sFP3array_strFRvoidFE __THE_0_test2_0 = (struct __THE_1_fn_sFP3array_strFRvoidFE) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn_sFP3array_strFRvoidFE __THE_0_test3_0 = (struct __THE_1_fn_sFP3array_strFRvoidFE) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn_sFP3array_strFRvoidFE __THE_0_test4_0 = (struct __THE_1_fn_sFP3array_strFRvoidFE) {&__THE_1_test4_0, NULL, 0};
  if (setjmp(error_buf_increase(&err_state)->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 90, 3, __THE_1_array_str_alloc(0)}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 91, 3, __THE_1_array_str_alloc(1, str_alloc("1"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 92, 3, __THE_1_array_str_alloc(1, str_alloc("10"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 93, 3, __THE_1_array_str_alloc(2, str_alloc("1"), str_alloc("2"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 94, 3, __THE_1_array_str_alloc(2, str_alloc("10"), str_alloc("20"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 95, 3, __THE_1_array_str_alloc(3, str_alloc("1"), str_alloc("2"), str_alloc("3"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 96, 3, __THE_1_array_str_alloc(3, str_alloc("10"), str_alloc("20"), str_alloc("30"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 98, 3, __THE_1_array_str_alloc(0)}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 99, 3, __THE_1_array_str_alloc(1, str_alloc("1"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 100, 3, __THE_1_array_str_alloc(1, str_alloc("10"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 101, 3, __THE_1_array_str_alloc(2, str_alloc("1"), str_alloc("2"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 102, 3, __THE_1_array_str_alloc(2, str_alloc("10"), str_alloc("20"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 103, 3, __THE_1_array_str_alloc(3, str_alloc("1"), str_alloc("2"), str_alloc("3"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 104, 3, __THE_1_array_str_alloc(3, str_alloc("10"), str_alloc("20"), str_alloc("30"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 106, 3, __THE_1_array_str_alloc(0)}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 107, 3, __THE_1_array_str_alloc(1, str_alloc("1"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 108, 3, __THE_1_array_str_alloc(1, str_alloc("10"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 109, 3, __THE_1_array_str_alloc(2, str_alloc("1"), str_alloc("2"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 110, 3, __THE_1_array_str_alloc(2, str_alloc("10"), str_alloc("20"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 111, 3, __THE_1_array_str_alloc(3, str_alloc("1"), str_alloc("2"), str_alloc("3"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 112, 3, __THE_1_array_str_alloc(3, str_alloc("10"), str_alloc("20"), str_alloc("30"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 114, 3, __THE_1_array_str_alloc(0)}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 115, 3, __THE_1_array_str_alloc(1, str_alloc("1"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 116, 3, __THE_1_array_str_alloc(1, str_alloc("10"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 117, 3, __THE_1_array_str_alloc(2, str_alloc("1"), str_alloc("2"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 118, 3, __THE_1_array_str_alloc(2, str_alloc("10"), str_alloc("20"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 119, 3, __THE_1_array_str_alloc(3, str_alloc("1"), str_alloc("2"), str_alloc("3"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
  if (setjmp(err_state.buf_last->buf) != 0) goto L25;
  __THE_0_test4_0.f(__THE_0_test4_0.x, xalloc(&(struct __THE_1_fn_sFP3array_strFRvoidFEP) {&err_state, 120, 3, __THE_1_array_str_alloc(3, str_alloc("10"), str_alloc("20"), str_alloc("30"))}, sizeof(struct __THE_1_fn_sFP3array_strFRvoidFEP)));
L25:
  error_buf_decrease(&err_state);
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
test1: return 3
test1: return 2
test1: return 2
test1: return 1
test1: return 1
test1: return 1
test1: return 1
test2: return 3
test2: return 3
test2: return 3
test2: loop1: return 2
test2: loop1: return 1
test2: loop1: return 2
test2: loop1: return 1
test3: return 4
test3: return 2
test3: return 2
test3: return 1
test3: return 1
test3: return 1
test3: return 1
test4: return 4
test4: return 4
test4: return 4
test4: loop1: return 2
test4: loop1: return 1
test4: loop1: return 2
test4: loop1: return 1
