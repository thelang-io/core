======= stdin =======
enum Color {
  Red,
  Green,
  Blue
}

obj Human {
  name: str
  hairColor: Color
  incomeType: IncomeType
}

enum IncomeType {
  Active,
  Passive
}

fn printIncomeType (n: IncomeType) {
  print(n, n.rawValue)
}

fn printColor (n: Color) {
  print(n, n.rawValue)
}

fn printHuman (n: Human) {
  print(
    "Name:", n.name,
    "Hair:", n.hairColor.rawValue,
    "Income Type:", n.incomeType.rawValue
  )
}

main {
  danny := Human{name: "Danny", hairColor: .Blue, incomeType: .Passive}
  tricia := Human{name: "Tricia", hairColor: .Red, incomeType: .Active}

  printHuman(danny)
  printHuman(tricia)
  printColor(danny.hairColor)
  printColor(tricia.hairColor)
  printIncomeType(danny.incomeType)
  printIncomeType(tricia.incomeType)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Color_0 {
  __THE_0_ColorSDRed_0,
  __THE_0_ColorSDGreen_0,
  __THE_0_ColorSDBlue_0
};
enum __THE_1_IncomeType_0 {
  __THE_0_IncomeTypeSDActive_0,
  __THE_0_IncomeTypeSDPassive_0
};

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Human_0;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1002;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Human_0 {
  const struct str __THE_0_name;
  const enum __THE_1_Color_0 __THE_0_hairColor;
  const enum __THE_1_IncomeType_0 __THE_0_incomeType;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
  enum __THE_1_IncomeType_0 n0;
};
struct __THE_1_fn$1000 {
  void (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int line;
  int col;
  enum __THE_1_Color_0 n0;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int line;
  int col;
  struct __THE_1_Human_0 *n0;
};
struct __THE_1_fn$1002 {
  void (*f) (void *, struct __THE_1_fn$1002P);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
struct str enum_str (int);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str __THE_1_Color_0_rawValue (enum __THE_1_Color_0);
struct __THE_1_Human_0 *__THE_1_Human_0_alloc (struct str, enum __THE_1_Color_0, enum __THE_1_IncomeType_0);
struct __THE_1_Human_0 *__THE_1_Human_0_copy (const struct __THE_1_Human_0 *);
void __THE_1_Human_0_free (struct __THE_1_Human_0 *);
struct str __THE_1_IncomeType_0_rawValue (enum __THE_1_IncomeType_0);
void __THE_1_printIncomeType_0 (void *, struct __THE_1_fn$1000P);
void __THE_1_printColor_0 (void *, struct __THE_1_fn$1001P);
void __THE_1_printHuman_0 (void *, struct __THE_1_fn$1002P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str enum_str (int d) {
  char buf[24];
  sprintf(buf, "%d", d);
  return str_alloc(buf);
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str __THE_1_Color_0_rawValue (enum __THE_1_Color_0 n) {
  if (n == __THE_0_ColorSDRed_0) return str_alloc("Red");
  if (n == __THE_0_ColorSDGreen_0) return str_alloc("Green");
  if (n == __THE_0_ColorSDBlue_0) return str_alloc("Blue");
}
struct __THE_1_Human_0 *__THE_1_Human_0_alloc (struct str __THE_0_name, enum __THE_1_Color_0 __THE_0_hairColor, enum __THE_1_IncomeType_0 __THE_0_incomeType) {
  struct __THE_1_Human_0 *r = alloc(sizeof(struct __THE_1_Human_0));
  struct __THE_1_Human_0 s = {__THE_0_name, __THE_0_hairColor, __THE_0_incomeType};
  memcpy(r, &s, sizeof(struct __THE_1_Human_0));
  return r;
}
struct __THE_1_Human_0 *__THE_1_Human_0_copy (const struct __THE_1_Human_0 *n) {
  struct __THE_1_Human_0 *r = alloc(sizeof(struct __THE_1_Human_0));
  struct __THE_1_Human_0 s = {str_copy(n->__THE_0_name), n->__THE_0_hairColor, n->__THE_0_incomeType};
  memcpy(r, &s, sizeof(struct __THE_1_Human_0));
  return r;
}
void __THE_1_Human_0_free (struct __THE_1_Human_0 *n) {
  str_free((struct str) n->__THE_0_name);
  free(n);
}
struct str __THE_1_IncomeType_0_rawValue (enum __THE_1_IncomeType_0 n) {
  if (n == __THE_0_IncomeTypeSDActive_0) return str_alloc("Active");
  if (n == __THE_0_IncomeTypeSDPassive_0) return str_alloc("Passive");
}
void __THE_1_printIncomeType_0 (void *px, struct __THE_1_fn$1000P p) {
  error_stack_push(&err_state, "/test", "printIncomeType", p.line, p.col);
  const enum __THE_1_IncomeType_0 __THE_0_n_0 = p.n0;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  print(stdout, "szsz", enum_str(__THE_0_n_0), " ", __THE_1_IncomeType_0_rawValue(__THE_0_n_0), THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_printColor_0 (void *px, struct __THE_1_fn$1001P p) {
  error_stack_push(&err_state, "/test", "printColor", p.line, p.col);
  const enum __THE_1_Color_0 __THE_0_n_0 = p.n0;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  print(stdout, "szsz", enum_str(__THE_0_n_0), " ", __THE_1_Color_0_rawValue(__THE_0_n_0), THE_EOL);
L2:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_printHuman_0 (void *px, struct __THE_1_fn$1002P p) {
  error_stack_push(&err_state, "/test", "printHuman", p.line, p.col);
  const struct __THE_1_Human_0 *__THE_0_n_0 = p.n0;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
  print(stdout, "zzszzzszzzsz", "Name:", " ", str_copy(__THE_0_n_0->__THE_0_name), " ", "Hair:", " ", __THE_1_Color_0_rawValue(__THE_0_n_0->__THE_0_hairColor), " ", "Income Type:", " ", __THE_1_IncomeType_0_rawValue(__THE_0_n_0->__THE_0_incomeType), THE_EOL);
L3:
  err_state.buf_idx--;
  __THE_1_Human_0_free((struct __THE_1_Human_0 *) __THE_0_n_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_printIncomeType_0 = (struct __THE_1_fn$1000) {&__THE_1_printIncomeType_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_printColor_0 = (struct __THE_1_fn$1001) {&__THE_1_printColor_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_printHuman_0 = (struct __THE_1_fn$1002) {&__THE_1_printHuman_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
  const struct __THE_1_Human_0 *__THE_0_danny_0 = __THE_1_Human_0_alloc(str_alloc("Danny"), __THE_0_ColorSDBlue_0, __THE_0_IncomeTypeSDPassive_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const struct __THE_1_Human_0 *__THE_0_tricia_0 = __THE_1_Human_0_alloc(str_alloc("Tricia"), __THE_0_ColorSDRed_0, __THE_0_IncomeTypeSDActive_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_printHuman_0.f(__THE_0_printHuman_0.x, (struct __THE_1_fn$1002P) {38, 3, __THE_1_Human_0_copy(__THE_0_danny_0)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_printHuman_0.f(__THE_0_printHuman_0.x, (struct __THE_1_fn$1002P) {39, 3, __THE_1_Human_0_copy(__THE_0_tricia_0)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_printColor_0.f(__THE_0_printColor_0.x, (struct __THE_1_fn$1001P) {40, 3, __THE_0_danny_0->__THE_0_hairColor});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_printColor_0.f(__THE_0_printColor_0.x, (struct __THE_1_fn$1001P) {41, 3, __THE_0_tricia_0->__THE_0_hairColor});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_printIncomeType_0.f(__THE_0_printIncomeType_0.x, (struct __THE_1_fn$1000P) {42, 3, __THE_0_danny_0->__THE_0_incomeType});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_printIncomeType_0.f(__THE_0_printIncomeType_0.x, (struct __THE_1_fn$1000P) {43, 3, __THE_0_tricia_0->__THE_0_incomeType});
L6:
  __THE_1_Human_0_free((struct __THE_1_Human_0 *) __THE_0_tricia_0);
L5:
  __THE_1_Human_0_free((struct __THE_1_Human_0 *) __THE_0_danny_0);
L4:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
Name: Danny Hair: Blue Income Type: Passive
Name: Tricia Hair: Red Income Type: Active
2 Blue
0 Red
1 Passive
0 Active
