======= stdin =======
main {
  if 1 > 2 {
    fn x (a: int) {}
    x(1)
  } else {
    fn x (b: str) {}
    x("test")
  }
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;

struct __THE_1_fn$0P {
  int32_t n0;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct str n0;
};
struct __THE_1_fn$1 {
  void (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};

void __THE_1_mainSDx_0 (void *, struct __THE_1_fn$0P);
void __THE_1_mainSDx_1 (void *, struct __THE_1_fn$1P);

void __THE_1_mainSDx_0 (void *px, struct __THE_1_fn$0P p) {
  const int32_t __THE_0_a_0 = p.n0;
}
void __THE_1_mainSDx_1 (void *px, struct __THE_1_fn$1P p) {
  const struct str __THE_0_b_0 = p.n0;
  str_free((struct str) __THE_0_b_0);
}

int main () {
  if (1 > 2) {
    const struct __THE_1_fn$0 __THE_0_mainSDx_0 = (struct __THE_1_fn$0) {&__THE_1_mainSDx_0, NULL, 0};
    __THE_0_mainSDx_0.f(__THE_0_mainSDx_0.x, (struct __THE_1_fn$0P) {1});
  } else {
    const struct __THE_1_fn$1 __THE_0_mainSDx_1 = (struct __THE_1_fn$1) {&__THE_1_mainSDx_1, NULL, 0};
    __THE_0_mainSDx_1.f(__THE_0_mainSDx_1.x, (struct __THE_1_fn$1P) {str_alloc("test")});
  }
}
======= flags =======
======= stdout =======
