======= stdin =======
obj Test1 {
  test2: Test2
}

obj Test2 {
  s: str
}

fn testCall () str {
  return "call"
}

main {
  mut test := "test"
  mut refTest := ref test
  mut test2 := Test2{s: "hello"}
  mut test1 := Test1{test2: test2}

  "test".len
  ;("test" + "test").len
  ;("test" + test).len
  ;(test + "test").len
  ;(test = "test2").len
  test.len
  test2.s.len
  test1.test2.s.len
  testCall().len
  ;(ref test).len
  refTest.len

  fn testCtx () {
    ;("test" + test).len
    ;(test + "test").len
    ;(test = "test2").len
    test.len
    test2.s.len
    test1.test2.s.len
    testCall().len
    ;(ref test).len
    refTest.len
  }

  testCtx()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001;
struct __THE_1_mainSDtestCtx_0X;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Test1_0 {
  const struct __THE_1_Test2_0 *__THE_0_test2;
};
struct __THE_1_Test2_0 {
  const struct str __THE_0_s;
};
struct __THE_1_fn$1000 {
  struct str (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  struct __THE_1_Test1_0 **__THE_0_test1_0;
  struct __THE_1_Test2_0 **__THE_0_test2_0;
  struct str **__THE_0_refTest_0;
  struct str *__THE_0_test_0;
  const struct __THE_1_fn$1000 *__THE_0_testCall_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
size_t str_len (struct str);
struct str str_realloc (struct str, struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str);
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct str __THE_1_testCall_0 (void *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_mainSDtestCtx_0 (void *);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_mainSDtestCtx_0X);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
size_t str_len (struct str s) {
  size_t l = s.l;
  free(s.d);
  return l;
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *__THE_0_test2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_test2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n->__THE_0_test2);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str __THE_0_s) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_s};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *n) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {str_copy(n->__THE_0_s)};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  str_free((struct str) n->__THE_0_s);
  free(n);
}
struct str __THE_1_testCall_0 (void *px) {
  struct str v;
  error_stack_push(&err_state, "/test", "testCall");
  v = str_alloc("call");
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  error_stack_push(&err_state, "/test", "testCtx");
  struct __THE_1_mainSDtestCtx_0X *x = px;
  struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  struct __THE_1_Test2_0 **__THE_0_test2_0 = x->__THE_0_test2_0;
  struct str **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  struct str *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$1000 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L6;
  (error_stack_pos(&err_state, 32, 6), str_len(cstr_concat_str("test", str_copy(*__THE_0_test_0))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 33, 6), str_len(str_concat_cstr(str_copy(*__THE_0_test_0), "test")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 34, 6), str_len(str_copy(*__THE_0_test_0 = str_realloc(*__THE_0_test_0, str_alloc("test2")))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 35, 5), str_len(str_copy(*__THE_0_test_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 36, 5), str_len(str_copy((*__THE_0_test2_0)->__THE_0_s)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 37, 5), str_len(str_copy((*__THE_0_test1_0)->__THE_0_test2->__THE_0_s)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 38, 5), str_len((error_stack_pos(&err_state, 38, 5), (*__THE_0_testCall_0).f((*__THE_0_testCall_0).x))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 39, 6), str_len(str_copy(*__THE_0_test_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 40, 5), str_len(str_copy(**__THE_0_refTest_0)));
L6:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1000 __THE_0_testCall_0 = (struct __THE_1_fn$1000) {&__THE_1_testCall_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  struct str __THE_0_test_0 = str_alloc("test");
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  struct str *__THE_0_refTest_0 = &__THE_0_test_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc(str_alloc("hello"));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_1_Test2_0_copy(__THE_0_test2_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 19, 3), str_len(str_alloc("test")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 20, 4), str_len(str_alloc("testtest")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 21, 4), str_len(cstr_concat_str("test", str_copy(__THE_0_test_0))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 22, 4), str_len(str_concat_cstr(str_copy(__THE_0_test_0), "test")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 23, 4), str_len(str_copy(__THE_0_test_0 = str_realloc(__THE_0_test_0, str_alloc("test2")))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 24, 3), str_len(str_copy(__THE_0_test_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 25, 3), str_len(str_copy(__THE_0_test2_0->__THE_0_s)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 26, 3), str_len(str_copy(__THE_0_test1_0->__THE_0_test2->__THE_0_s)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 27, 3), str_len((error_stack_pos(&err_state, 27, 3), __THE_0_testCall_0.f(__THE_0_testCall_0.x))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 28, 4), str_len(str_copy(__THE_0_test_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  (error_stack_pos(&err_state, 29, 3), str_len(str_copy(*__THE_0_refTest_0)));
  const struct __THE_1_fn$1001 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test1_0, &__THE_0_test2_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 43, 3), __THE_0_mainSDtestCtx_0.f(__THE_0_mainSDtestCtx_0.x));
L7:
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_mainSDtestCtx_0);
L5:
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
L4:
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
L3:
  str_free((struct str) __THE_0_test_0);
L2:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
