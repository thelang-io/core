======= stdin =======
main {
  print("0".toI8())
  print("1".toI8())
  print("10".toI8())
  print("100".toI8())
  print("127".toI8())
  print("-0".toI8())
  print("-1".toI8())
  print("-10".toI8())
  print("-100".toI8())
  print("-128".toI8())

  print("0000".toI8(2))
  print("0001".toI8(2))
  print("1010".toI8(2))
  print("01100100".toI8(2))
  print("01111111".toI8(2))
  print("-0000".toI8(2))
  print("-0001".toI8(2))
  print("-1010".toI8(2))
  print("-01100100".toI8(2))
  print("-10000000".toI8(2))

  print("0".toI8(8))
  print("1".toI8(8))
  print("12".toI8(8))
  print("144".toI8(8))
  print("177".toI8(8))
  print("-0".toI8(8))
  print("-1".toI8(8))
  print("-12".toI8(8))
  print("-144".toI8(8))
  print("-200".toI8(8))

  print("0".toI8(10))
  print("1".toI8(10))
  print("10".toI8(10))
  print("100".toI8(10))
  print("127".toI8(10))
  print("-0".toI8(10))
  print("-1".toI8(10))
  print("-10".toI8(10))
  print("-100".toI8(10))
  print("-128".toI8(10))

  print("0".toI8(16))
  print("1".toI8(16))
  print("A".toI8(16))
  print("64".toI8(16))
  print("7F".toI8(16))
  print("-0".toI8(16))
  print("-1".toI8(16))
  print("-A".toI8(16))
  print("-64".toI8(16))
  print("-80".toI8(16))

  print("0".toI8(36))
  print("1".toI8(36))
  print("A".toI8(36))
  print("2S".toI8(36))
  print("3J".toI8(36))
  print("-0".toI8(36))
  print("-1".toI8(36))
  print("-A".toI8(36))
  print("-2S".toI8(36))
  print("-3K".toI8(36))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_assign (err_state_t *, int, void *, void (*f) (void *), int, int);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void error_stack_str (err_state_t *);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
int8_t str_toI8 (struct str, unsigned char, int32_t, int, int);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_assign (err_state_t *state, int id, void *ctx, void (*f) (void *), int line, int col) {
  state->id = id;
  state->ctx = ctx;
  state->_free = f;
  error_stack_pos(state, line, col);
  error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
void error_stack_str (err_state_t *state) {
  struct str *stack = (struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack;
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  stack->l = message.l;
  stack->d = re_alloc(stack->d, stack->l);
  memcpy(stack->d, message.d, stack->l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    stack->d = re_alloc(stack->d, stack->l + z + 1);
    if (it.col == 0 && it.line == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line, it.col);
    }
    stack->l += z;
  }
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
int8_t str_toI8 (struct str self, unsigned char o1, int32_t n1, int line, int col) {
  if (o1 == 1 && (n1 < 2 || n1 > 36) && n1 != 0) {
    const char *fmt = "radix %" PRId32 " is invalid, must be >= 2 and <= 36, or 0";
    size_t z = snprintf(NULL, 0, fmt, n1);
    char *d = alloc(z + 1);
    sprintf(d, fmt, n1);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  long r = strtol(c, &e, o1 == 0 ? 10 : n1);
  if (errno == ERANGE || r < INT8_MIN || INT8_MAX < r) {
    const char *fmt = "value `%s` out of range";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  } else if (errno != 0 || e == c || *e != 0) {
    const char *fmt = "value `%s` has invalid syntax";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  free(c);
  free(self.d);
  return (int8_t) r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0"), 0, 0, 2, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("1"), 0, 0, 3, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("10"), 0, 0, 4, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("100"), 0, 0, 5, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("127"), 0, 0, 6, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0"), 0, 0, 7, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-1"), 0, 0, 8, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-10"), 0, 0, 9, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-100"), 0, 0, 10, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-128"), 0, 0, 11, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0000"), 1, 2, 13, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0001"), 1, 2, 14, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("1010"), 1, 2, 15, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("01100100"), 1, 2, 16, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("01111111"), 1, 2, 17, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0000"), 1, 2, 18, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0001"), 1, 2, 19, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-1010"), 1, 2, 20, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-01100100"), 1, 2, 21, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-10000000"), 1, 2, 22, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0"), 1, 8, 24, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("1"), 1, 8, 25, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("12"), 1, 8, 26, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("144"), 1, 8, 27, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("177"), 1, 8, 28, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0"), 1, 8, 29, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-1"), 1, 8, 30, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-12"), 1, 8, 31, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-144"), 1, 8, 32, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-200"), 1, 8, 33, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0"), 1, 10, 35, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("1"), 1, 10, 36, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("10"), 1, 10, 37, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("100"), 1, 10, 38, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("127"), 1, 10, 39, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0"), 1, 10, 40, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-1"), 1, 10, 41, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-10"), 1, 10, 42, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-100"), 1, 10, 43, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-128"), 1, 10, 44, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0"), 1, 16, 46, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("1"), 1, 16, 47, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("A"), 1, 16, 48, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("64"), 1, 16, 49, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("7F"), 1, 16, 50, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0"), 1, 16, 51, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-1"), 1, 16, 52, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-A"), 1, 16, 53, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-64"), 1, 16, 54, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-80"), 1, 16, 55, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("0"), 1, 36, 57, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("1"), 1, 36, 58, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("A"), 1, 36, 59, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("2S"), 1, 36, 60, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("3J"), 1, 36, 61, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-0"), 1, 36, 62, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-1"), 1, 36, 63, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-A"), 1, 36, 64, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-2S"), 1, 36, 65, 9), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "hz", str_toI8(str_alloc("-3K"), 1, 36, 66, 9), THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
0
1
10
100
127
0
-1
-10
-100
-128
0
1
10
100
127
0
-1
-10
-100
-128
0
1
10
100
127
0
-1
-10
-100
-128
0
1
10
100
127
0
-1
-10
-100
-128
0
1
10
100
127
0
-1
-10
-100
-128
0
1
10
100
127
0
-1
-10
-100
-128
