======= stdin =======
main {
  "".toBuffer();
  "0".toBuffer();
  "test".toBuffer();
  "test in test".toBuffer();
  ("multiline " + os_EOL + " test").toBuffer();
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void buffer_free (struct buffer);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct buffer str_toBuffer (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void buffer_free (struct buffer o) {
  free(o.d);
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct buffer str_toBuffer (struct str s) {
  return (struct buffer) {(unsigned char *) s.d, s.l};
}

int main () {
  buffer_free((struct buffer) str_toBuffer(str_alloc("")));
  buffer_free((struct buffer) str_toBuffer(str_alloc("0")));
  buffer_free((struct buffer) str_toBuffer(str_alloc("test")));
  buffer_free((struct buffer) str_toBuffer(str_alloc("test in test")));
  buffer_free((struct buffer) str_toBuffer(str_concat_cstr(cstr_concat_str("multiline ", str_alloc(THE_EOL)), " test")));
}
======= flags =======
======= stdout =======
