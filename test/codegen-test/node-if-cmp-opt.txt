======= stdin =======
main {
  a: int? = 1
  b: int? = nil

  if a == nil {
  } elif a != nil {
  } else {
  }

  if b == nil {
  } elif b != nil {
  } else {
  }
}
======= code =======
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);

int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}

int main () {
  const int32_t *__THE_0_a_0 = __THE_1_opt_int_alloc(1);
  const int32_t *__THE_0_b_0 = NULL;
  if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_a_0), NULL)) {
  } else if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_a_0), NULL)) {
  } else {
  }
  if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_b_0), NULL)) {
  } else if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_b_0), NULL)) {
  } else {
  }
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
