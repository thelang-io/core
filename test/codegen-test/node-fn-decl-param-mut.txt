======= stdin =======
fn test1 (mut a: int) int {
  a = 2
  return a
}
fn test2 (mut a: int, mut b := 2) int {
  a = b
  return a + b
}
fn test3 (mut a: int, mut b := 2, mut c: float = 3) int {
  c = b
  return a + b + c
}

main {
  test1(1)
  test2(2, 3)
  test3(4, 5, 6)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000 {
  int32_t (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t n0;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int32_t n0;
  unsigned char o1;
  int32_t n1;
};
struct __THE_1_fn$1002 {
  int32_t (*f) (void *, struct __THE_1_fn$1002P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int32_t n0;
  unsigned char o1;
  int32_t n1;
  unsigned char o2;
  double n2;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void error_stack_pop (err_state_t *);
void error_stack_push (err_state_t *, char *, char *);
void str_free (struct str);
void error_Error_free (struct error_Error *);
int32_t __THE_1_test1_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_test2_0 (void *, struct __THE_1_fn$1001P);
int32_t __THE_1_test3_0 (void *, struct __THE_1_fn$1002P);

void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
void str_free (struct str s) {
  free(s.d);
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
int32_t __THE_1_test1_0 (void *px, struct __THE_1_fn$1000P p) {
  int32_t __THE_0_a_0 = p.n0;
  __THE_0_a_0 = 2;
  return __THE_0_a_0;
}
int32_t __THE_1_test2_0 (void *px, struct __THE_1_fn$1001P p) {
  int32_t __THE_0_a_0 = p.n0;
  int32_t __THE_0_b_0 = p.o1 == 1 ? p.n1 : 2;
  __THE_0_a_0 = __THE_0_b_0;
  return __THE_0_a_0 + __THE_0_b_0;
}
int32_t __THE_1_test3_0 (void *px, struct __THE_1_fn$1002P p) {
  int32_t __THE_0_a_0 = p.n0;
  int32_t __THE_0_b_0 = p.o1 == 1 ? p.n1 : 2;
  double __THE_0_c_0 = p.o2 == 1 ? p.n2 : 3;
  __THE_0_c_0 = __THE_0_b_0;
  return __THE_0_a_0 + __THE_0_b_0 + __THE_0_c_0;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_test2_0 = (struct __THE_1_fn$1001) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_test3_0 = (struct __THE_1_fn$1002) {&__THE_1_test3_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {1});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1001P) {2, 1, 3});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1002P) {4, 1, 5, 1, 6});
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
