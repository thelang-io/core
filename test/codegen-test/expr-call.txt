======= stdin =======
obj Human {
  name: str
  age: int
}

fn b () int {
  return 1
}

fn d () int {
  return 2
}

main {
  print(true)
  print(3)
  print("Hello, World!")
  print("Spider", "Snake", "Wolf", separator: ",", terminator: "")
  print()
  print(Human{name: "Bruce\nWayne", age: 32})

  mut a: int
  mut c: int

  a = b()
  a = c = d()
  a + b()
  a + b() + d()
  false ? 1 : b()
  !d()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Human_0;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Human_0 {
  const struct str __THE_0_name;
  const int32_t __THE_0_age;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
};
struct __THE_1_fn$1000 {
  int32_t (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_escape (const struct str);
void str_free (struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_Human_0 *__THE_1_Human_0_alloc (struct str, int32_t);
void __THE_1_Human_0_free (struct __THE_1_Human_0 *);
struct str __THE_1_Human_0_str (struct __THE_1_Human_0 *);
int32_t __THE_1_b_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_d_0 (void *, struct __THE_1_fn$1000P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_Human_0 *__THE_1_Human_0_alloc (struct str __THE_0_name, int32_t __THE_0_age) {
  struct __THE_1_Human_0 *r = alloc(sizeof(struct __THE_1_Human_0));
  struct __THE_1_Human_0 s = {__THE_0_name, __THE_0_age};
  memcpy(r, &s, sizeof(struct __THE_1_Human_0));
  return r;
}
void __THE_1_Human_0_free (struct __THE_1_Human_0 *n) {
  str_free((struct str) n->__THE_0_name);
  free(n);
}
struct str __THE_1_Human_0_str (struct __THE_1_Human_0 *n) {
  struct str r = str_alloc("Human{");
  r = str_concat_cstr(r, "name: \"");
  r = str_concat_str(r, str_escape(n->__THE_0_name));
  r = str_concat_cstr(r, "\"");
  r = str_concat_cstr(r, ", age: ");
  r = str_concat_str(r, int_str(n->__THE_0_age));
  __THE_1_Human_0_free((struct __THE_1_Human_0 *) n);
  return str_concat_cstr(r, "}");
}
int32_t __THE_1_b_0 (void *px, struct __THE_1_fn$1000P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "b", p.line, p.col);
  v = 1;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_d_0 (void *px, struct __THE_1_fn$1000P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "d", p.line, p.col);
  v = 2;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_b_0 = (struct __THE_1_fn$1000) {&__THE_1_b_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_d_0 = (struct __THE_1_fn$1000) {&__THE_1_d_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
  print(stdout, "tz", true, THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  print(stdout, "iz", 3, THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  print(stdout, "zz", "Hello, World!", THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  print(stdout, "zzzzz", "Spider", ",", "Snake", ",", "Wolf");
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  print(stdout, "z", THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  print(stdout, "sz", __THE_1_Human_0_str(__THE_1_Human_0_alloc(str_alloc("Bruce\nWayne"), 32)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  int32_t __THE_0_a_0 = 0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  int32_t __THE_0_c_0 = 0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_a_0 = __THE_0_b_0.f(__THE_0_b_0.x, (struct __THE_1_fn$1000P) {25, 7});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_a_0 = __THE_0_c_0 = __THE_0_d_0.f(__THE_0_d_0.x, (struct __THE_1_fn$1000P) {26, 11});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_a_0 + __THE_0_b_0.f(__THE_0_b_0.x, (struct __THE_1_fn$1000P) {27, 7});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_a_0 + __THE_0_b_0.f(__THE_0_b_0.x, (struct __THE_1_fn$1000P) {28, 7}) + __THE_0_d_0.f(__THE_0_d_0.x, (struct __THE_1_fn$1000P) {28, 13});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  false ? 1 : __THE_0_b_0.f(__THE_0_b_0.x, (struct __THE_1_fn$1000P) {29, 15});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  !__THE_0_d_0.f(__THE_0_d_0.x, (struct __THE_1_fn$1000P) {30, 4});
L3:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
true
3
Hello, World!
Spider,Snake,Wolf
Human{name: "Bruce\nWayne", age: 32}
