======= stdin =======
type StatementBody = str | int

obj Statement {
  body: StatementBody
  fn asStr (self: ref Self) ref str { return ref (self.body as str) }
}

main {
  statement := Statement{body: "test"}
  statement.asStr()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_str 2
#define TYPE_int 3

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_strUSintUE;
struct __THE_1_test_Statement_0;
struct __THE_1_fn_sFSref_test_Statement_0FRref_strFE;
struct __THE_1_fn_sFSref_test_Statement_0FRref_strFEP;

struct __THE_1_union_strUSintUE {
  int t;
  union {
    struct str v2;
    int32_t v3;
  };
};
struct __THE_1_test_Statement_0 {
  const struct __THE_1_union_strUSintUE __THE_0_body;
};
struct __THE_1_fn_sFSref_test_Statement_0FRref_strFE {
  struct str *(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSref_test_Statement_0FRref_strFEP {
  const struct __THE_1_test_Statement_0 **self;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
void *xalloc (void *, size_t);
struct __THE_1_union_strUSintUE __THE_1_union_strUSintUE_alloc (int, ...);
void __THE_1_union_strUSintUE_free (struct __THE_1_union_strUSintUE);
struct __THE_1_test_Statement_0 *__THE_1_test_Statement_0_alloc (struct __THE_1_union_strUSintUE);
void __THE_1_test_Statement_0_free (struct __THE_1_test_Statement_0 *);
struct str *__THE_1_test_StatementSDasStr_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_union_strUSintUE __THE_1_union_strUSintUE_alloc (int t, ...) {
  struct __THE_1_union_strUSintUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_str) r.v2 = va_arg(args, struct str);
  if (t == TYPE_int) r.v3 = va_arg(args, int32_t);
  va_end(args);
  return r;
}
void __THE_1_union_strUSintUE_free (struct __THE_1_union_strUSintUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v2);
}
struct __THE_1_test_Statement_0 *__THE_1_test_Statement_0_alloc (struct __THE_1_union_strUSintUE __THE_0_body) {
  struct __THE_1_test_Statement_0 *r = alloc(sizeof(struct __THE_1_test_Statement_0));
  struct __THE_1_test_Statement_0 s = {__THE_0_body};
  memcpy(r, &s, sizeof(struct __THE_1_test_Statement_0));
  return r;
}
void __THE_1_test_Statement_0_free (struct __THE_1_test_Statement_0 *n) {
  __THE_1_union_strUSintUE_free((struct __THE_1_union_strUSintUE) n->__THE_0_body);
  free(n);
}
struct str *__THE_1_test_StatementSDasStr_0 (void *px, void *pp) {
  struct str *v;
  struct __THE_1_fn_sFSref_test_Statement_0FRref_strFEP *p = pp;
  const struct __THE_1_test_Statement_0 **__THE_0_self_0 = p->self;
  v = (&(*__THE_0_self_0)->__THE_0_body.v2);
  free(pp);
  return v;
}

int main () {
  const struct __THE_1_fn_sFSref_test_Statement_0FRref_strFE __THE_0_test_StatementSDasStr_0 = (struct __THE_1_fn_sFSref_test_Statement_0FRref_strFE) {&__THE_1_test_StatementSDasStr_0, NULL, 0};
  const struct __THE_1_test_Statement_0 *__THE_0_statement_0 = __THE_1_test_Statement_0_alloc(__THE_1_union_strUSintUE_alloc(TYPE_str, str_alloc("test")));
  __THE_0_test_StatementSDasStr_0.f(__THE_0_test_StatementSDasStr_0.x, xalloc(&(struct __THE_1_fn_sFSref_test_Statement_0FRref_strFEP) {&__THE_0_statement_0}, sizeof(struct __THE_1_fn_sFSref_test_Statement_0FRref_strFEP)));
  __THE_1_test_Statement_0_free((struct __THE_1_test_Statement_0 *) __THE_0_statement_0);
}
======= flags =======
======= stdout =======
