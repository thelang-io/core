======= stdin =======
main {
  a: any
  b: any = 2

  ref a;
  ref b;
  true ? a : ref a;
  false ? ref b : b;
  false ? ref a : ref b;
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define TYPE_int 1

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};

struct any_int;

struct any_int {
  int32_t d;
};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
struct any any_int_alloc (int32_t);
struct any any_int_copy (const struct any);
void any_int_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_int_alloc (int32_t d) {
  size_t l = sizeof(struct any_int);
  struct any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &any_int_copy, &any_int_free};
}
struct any any_int_copy (const struct any n) {
  struct any_int *o = n.d;
  struct any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_int_free (struct any _n) {
  struct any_int *n = _n.d;
  free(n);
}

int main () {
  const struct any __THE_0_a_0 = {0, NULL, 0, NULL, NULL};
  const struct any __THE_0_b_0 = any_int_alloc(2);
  &__THE_0_a_0;
  &__THE_0_b_0;
  any_free((struct any) (true ? any_copy(__THE_0_a_0) : any_copy(__THE_0_a_0)));
  any_free((struct any) (false ? any_copy(__THE_0_b_0) : any_copy(__THE_0_b_0)));
  false ? &__THE_0_a_0 : &__THE_0_b_0;
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
