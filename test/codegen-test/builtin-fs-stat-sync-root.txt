======= stdin =======
main {
  fs_statSync("test/fixtures")
  fs_statSync("test/fixtures/test.txt")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif

struct str {
  char *d;
  size_t l;
};

struct fs_Stats;

struct fs_Stats {
  const int32_t __THE_0_dev;
  const uint16_t __THE_0_mode;
  const uint16_t __THE_0_nlink;
  const uint64_t __THE_0_ino;
  const int32_t __THE_0_uid;
  const int32_t __THE_0_gid;
  const int32_t __THE_0_rdev;
  const int32_t __THE_0_atime;
  const int32_t __THE_0_atimeNs;
  const int32_t __THE_0_mtime;
  const int32_t __THE_0_mtimeNs;
  const int32_t __THE_0_ctime;
  const int32_t __THE_0_ctimeNs;
  const int32_t __THE_0_birthtime;
  const int32_t __THE_0_birthtimeNs;
  const int64_t __THE_0_size;
  const int64_t __THE_0_blocks;
  const int32_t __THE_0_blksize;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct fs_Stats *fs_statSync (struct str);
struct fs_Stats *fs_Stats_alloc (int32_t, uint16_t, uint16_t, uint64_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int64_t, int64_t, int32_t);
void fs_Stats_free (struct fs_Stats *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct fs_Stats *fs_statSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  struct fs_Stats *r;
  #ifdef THE_OS_WINDOWS
    HANDLE h = CreateFileA(c, FILE_READ_ATTRIBUTES, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);
    if (h == INVALID_HANDLE_VALUE) {
      fprintf(stderr, "Error: failed to create handle" THE_EOL);
      exit(EXIT_FAILURE);
    }
    IO_STATUS_BLOCK iosb;
    FILE_ALL_INFORMATION fi;
    FILE_FS_VOLUME_INFORMATION vi;
    if (NT_ERROR(pNtQueryInformationFile(h, &iosb, &fi, sizeof(fi), FileAllInformation))) {
      fprintf(stderr, "Error: failed to query file information" THE_EOL);
      exit(EXIT_FAILURE);
    } else if (NT_ERROR(pNtQueryVolumeInformationFile(h, &iosb, &vi, sizeof(vi), FileFsVolumeInformation))) {
      fprintf(stderr, "Error: failed to query file volume information" THE_EOL);
      exit(EXIT_FAILURE);
    }
    int32_t st_dev = iosb.Status == STATUS_NOT_IMPLEMENTED ? 0 : vi.VolumeSerialNumber;
    uint16_t st_mode = fi.BasicInformation.FileAttributes & FILE_ATTRIBUTE_DIRECTORY ? _S_IFDIR : _S_IFREG;
    if (fi.BasicInformation.FileAttributes & FILE_ATTRIBUTE_READONLY) {
      st_mode |= _S_IREAD | (_S_IREAD >> 3) | (_S_IREAD >> 6);
    } else {
      st_mode |= (_S_IREAD | _S_IWRITE) | ((_S_IREAD | _S_IWRITE) >> 3) | ((_S_IREAD | _S_IWRITE) >> 6);
    }
    uint16_t st_nlink = fi.StandardInformation.NumberOfLinks;
    uint64_t st_ino = fi.InternalInformation.IndexNumber.QuadPart;
    int32_t st_atim_tv_sec = (fi.BasicInformation.LastAccessTime.QuadPart - 116444736e9) / 1e7;
    int32_t st_atim_tv_nsec = (fi.BasicInformation.LastAccessTime.QuadPart - 116444736e9 - (st_atim_tv_sec * 1e7)) * 1e2;
    int32_t st_ctim_tv_sec = (fi.BasicInformation.ChangeTime.QuadPart - 116444736e9) / 1e7;
    int32_t st_ctim_tv_nsec = (fi.BasicInformation.ChangeTime.QuadPart - 116444736e9 - (st_ctim_tv_sec * 1e7)) * 1e2;
    int32_t st_mtim_tv_sec = (fi.BasicInformation.LastWriteTime.QuadPart - 116444736e9) / 1e7;
    int32_t st_mtim_tv_nsec = (fi.BasicInformation.LastWriteTime.QuadPart - 116444736e9 - (st_mtim_tv_sec * 1e7)) * 1e2;
    int32_t st_birthtim_tv_sec = (fi.BasicInformation.CreationTime.QuadPart - 116444736e9) / 1e7;
    int32_t st_birthtim_tv_nsec = (fi.BasicInformation.CreationTime.QuadPart - 116444736e9 - (st_birthtim_tv_sec * 1e7)) * 1e2;
    int64_t st_size = fi.BasicInformation.FileAttributes & FILE_ATTRIBUTE_DIRECTORY ? 0 : fi.StandardInformation.EndOfFile.QuadPart;
    int64_t st_blocks = fi.StandardInformation.AllocationSize.QuadPart >> 9;
    int32_t st_blksize = 4096;
    CloseHandle(h);
    r = fs_Stats_alloc(st_dev, st_mode, st_nlink, st_ino, 0, 0, 0, st_atim_tv_sec, st_atim_tv_nsec, st_mtim_tv_sec, st_mtim_tv_nsec, st_ctim_tv_sec, st_ctim_tv_nsec, st_ctim_tv_sec, st_ctim_tv_nsec, st_size, st_blocks, st_blksize);
  #else
    struct stat sb;
    if (stat(c, &sb) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    #ifdef THE_OS_MACOS
      r = fs_Stats_alloc(sb.st_dev, sb.st_mode, sb.st_nlink, sb.st_ino, sb.st_uid, sb.st_gid, sb.st_rdev, sb.st_atimespec.tv_sec, sb.st_atimespec.tv_nsec, sb.st_mtimespec.tv_sec, sb.st_mtimespec.tv_nsec, sb.st_ctimespec.tv_sec, sb.st_ctimespec.tv_nsec, sb.st_birthtimespec.tv_sec, sb.st_birthtimespec.tv_nsec, sb.st_size, sb.st_blocks, sb.st_blksize);
    #else
      r = fs_Stats_alloc(sb.st_dev, sb.st_mode, sb.st_nlink, sb.st_ino, sb.st_uid, sb.st_gid, sb.st_rdev, sb.st_atim.tv_sec, sb.st_atim.tv_nsec, sb.st_mtim.tv_sec, sb.st_mtim.tv_nsec, sb.st_ctim.tv_sec, sb.st_ctim.tv_nsec, sb.st_ctim.tv_sec, sb.st_ctim.tv_nsec, sb.st_size, sb.st_blocks, sb.st_blksize);
    #endif
  #endif
  free(c);
  str_free(s);
  return r;
}
struct fs_Stats *fs_Stats_alloc (int32_t __THE_0_dev, uint16_t __THE_0_mode, uint16_t __THE_0_nlink, uint64_t __THE_0_ino, int32_t __THE_0_uid, int32_t __THE_0_gid, int32_t __THE_0_rdev, int32_t __THE_0_atime, int32_t __THE_0_atimeNs, int32_t __THE_0_mtime, int32_t __THE_0_mtimeNs, int32_t __THE_0_ctime, int32_t __THE_0_ctimeNs, int32_t __THE_0_birthtime, int32_t __THE_0_birthtimeNs, int64_t __THE_0_size, int64_t __THE_0_blocks, int32_t __THE_0_blksize) {
  struct fs_Stats *r = alloc(sizeof(struct fs_Stats));
  struct fs_Stats s = {__THE_0_dev, __THE_0_mode, __THE_0_nlink, __THE_0_ino, __THE_0_uid, __THE_0_gid, __THE_0_rdev, __THE_0_atime, __THE_0_atimeNs, __THE_0_mtime, __THE_0_mtimeNs, __THE_0_ctime, __THE_0_ctimeNs, __THE_0_birthtime, __THE_0_birthtimeNs, __THE_0_size, __THE_0_blocks, __THE_0_blksize};
  memcpy(r, &s, sizeof(struct fs_Stats));
  return r;
}
void fs_Stats_free (struct fs_Stats *o) {
  free(o);
}

int main () {
  fs_Stats_free((struct fs_Stats *) fs_statSync(str_alloc("test/fixtures")));
  fs_Stats_free((struct fs_Stats *) fs_statSync(str_alloc("test/fixtures/test.txt")));
}
======= flags =======
======= stdout =======
