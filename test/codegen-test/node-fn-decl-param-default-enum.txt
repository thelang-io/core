======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}

fn test1 (a: Test, b := Test.Red, c := Test.Blue) Test {
  return a == b ? c == Test.Red ? c : b : a
}

main {
  test1(Test.Red)
  test1(Test.Red, Test.Green)
  test1(Test.Red, Test.Green, Test.Blue)
  test1(Test.Red, b: Test.Green)
  test1(Test.Red, c: Test.Blue)
  test1(Test.Red, b: Test.Green, c: Test.Blue)
  test1(Test.Red, c: Test.Blue, b: Test.Green)

  mut a := Test.Red

  fn test2 (a2: Test, b := Test.Red, c := Test.Green) {
    a = test1(a2, b, c)
  }

  test2(Test.Red)
  test2(Test.Red, Test.Green)
  test2(Test.Red, Test.Green, Test.Blue)
  test2(Test.Red, b: Test.Green)
  test2(Test.Red, c: Test.Blue)
  test2(Test.Red, b: Test.Green, c: Test.Blue)
  test2(Test.Red, c: Test.Blue, b: Test.Green)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_mainSDtest2_0X;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000 {
  enum __THE_1_Test_0 (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  enum __THE_1_Test_0 n0;
  unsigned char o1;
  enum __THE_1_Test_0 n1;
  unsigned char o2;
  enum __THE_1_Test_0 n2;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  enum __THE_1_Test_0 n0;
  unsigned char o1;
  enum __THE_1_Test_0 n1;
  unsigned char o2;
  enum __THE_1_Test_0 n2;
};
struct __THE_1_mainSDtest2_0X {
  enum __THE_1_Test_0 *__THE_0_a_0;
  const struct __THE_1_fn$1000 *__THE_0_test1_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
struct str error_stack_str (err_state_t *);
struct error_Error *error_Error_alloc (struct str, struct str);
enum __THE_1_Test_0 __THE_1_test1_0 (void *, struct __THE_1_fn$1000P);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_mainSDtest2_0 (void *, struct __THE_1_fn$1001P);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_mainSDtest2_0X);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
enum __THE_1_Test_0 __THE_1_test1_0 (void *px, struct __THE_1_fn$1000P p) {
  const enum __THE_1_Test_0 __THE_0_a_0 = p.n0;
  const enum __THE_1_Test_0 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_0_TestSDRed_0;
  const enum __THE_1_Test_0 __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_0_TestSDBlue_0;
  return __THE_0_a_0 == __THE_0_b_0 ? __THE_0_c_0 == __THE_0_TestSDRed_0 ? __THE_0_c_0 : __THE_0_b_0 : __THE_0_a_0;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest2_0 (void *px, struct __THE_1_fn$1001P p) {
  struct __THE_1_mainSDtest2_0X *x = px;
  enum __THE_1_Test_0 *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1000 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const enum __THE_1_Test_0 __THE_0_a2_0 = p.n0;
  const enum __THE_1_Test_0 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_0_TestSDRed_0;
  const enum __THE_1_Test_0 __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_0_TestSDGreen_0;
  *__THE_0_a_0 = (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$1000P) {__THE_0_a2_0, 1, __THE_0_b_0, 1, __THE_0_c_0});
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 0, 0, 0, 0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 0, 0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 1, __THE_0_TestSDBlue_0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 0, 0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 0, 0, 1, __THE_0_TestSDBlue_0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 1, __THE_0_TestSDBlue_0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 1, __THE_0_TestSDBlue_0});
  enum __THE_1_Test_0 __THE_0_a_0 = __THE_0_TestSDRed_0;
  const struct __THE_1_fn$1001 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 0, 0, 0, 0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 0, 0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 1, __THE_0_TestSDBlue_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 0, 0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 0, 0, 1, __THE_0_TestSDBlue_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 1, __THE_0_TestSDBlue_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1001P) {__THE_0_TestSDRed_0, 1, __THE_0_TestSDGreen_0, 1, __THE_0_TestSDBlue_0});
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_mainSDtest2_0);
}
======= flags =======
======= stdout =======
