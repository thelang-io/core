======= stdin =======
main {
  testInt := 1
  testStr := "test"
  testRefInt := ref testInt
  testRefStr := ref testStr
  g1: (ref int) | (ref str) = testRefInt
  g2: (ref int) | (ref str) = testRefStr
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_ref_int 1
#define TYPE_ref_str 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_ref_intUSref_strUE;

struct __THE_1_union_ref_intUSref_strUE {
  int t;
  union {
    int32_t *v1;
    struct str *v2;
  };
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_union_ref_intUSref_strUE __THE_1_union_ref_intUSref_strUE_alloc (int, ...);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_union_ref_intUSref_strUE __THE_1_union_ref_intUSref_strUE_alloc (int t, ...) {
  struct __THE_1_union_ref_intUSref_strUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_ref_int) r.v1 = va_arg(args, int32_t *);
  if (t == TYPE_ref_str) r.v2 = va_arg(args, struct str *);
  va_end(args);
  return r;
}

int main () {
  const int32_t __THE_0_testInt_0 = 1;
  const struct str __THE_0_testStr_0 = str_alloc("test");
  const int32_t *__THE_0_testRefInt_0 = &__THE_0_testInt_0;
  const struct str *__THE_0_testRefStr_0 = &__THE_0_testStr_0;
  const struct __THE_1_union_ref_intUSref_strUE __THE_0_g1_0 = __THE_1_union_ref_intUSref_strUE_alloc(TYPE_ref_int, __THE_0_testRefInt_0);
  const struct __THE_1_union_ref_intUSref_strUE __THE_0_g2_0 = __THE_1_union_ref_intUSref_strUE_alloc(TYPE_ref_str, __THE_0_testRefStr_0);
  str_free((struct str) __THE_0_testStr_0);
}
======= flags =======
======= stdout =======
