======= stdin =======
type Alias = str

main {
  testAlias: Alias = "test"
  anyAlias: any = testAlias
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_str 1

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct str {
  char *d;
  size_t l;
};

struct any_str;

struct any_str {
  struct str d;
};

void *alloc (size_t);
void any_free (struct any);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct any any_str_alloc (struct str);
struct any any_str_copy (const struct any);
void any_str_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct any any_str_alloc (struct str d) {
  size_t l = sizeof(struct any_str);
  struct any_str *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_str, r, l, &any_str_copy, &any_str_free};
}
struct any any_str_copy (const struct any n) {
  struct any_str *o = n.d;
  struct any_str *r = alloc(n.l);
  r->d = str_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_str_free (struct any _n) {
  struct any_str *n = _n.d;
  str_free((struct str) n->d);
  free(n);
}

int main () {
  const struct str __THE_0_testAlias_0 = str_alloc("test");
  const struct any __THE_0_anyAlias_0 = any_str_alloc(str_copy(__THE_0_testAlias_0));
  any_free((struct any) __THE_0_anyAlias_0);
  str_free((struct str) __THE_0_testAlias_0);
}
======= flags =======
======= stdout =======
