======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}
main {
  a := { "key1": Test.Red, "key2": .Green, "key3": .Blue }
  b: Test[str] = { "key1": .Red, "key2": .Green, "key3": .Blue }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSTestME;
struct __THE_1_map_strMSTestME;

struct __THE_1_pair_strMSTestME {
  struct str f;
  enum __THE_1_Test_0 s;
};
struct __THE_1_map_strMSTestME {
  struct __THE_1_pair_strMSTestME *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_map_strMSTestME __THE_1_map_strMSTestME_alloc (int, ...);
void __THE_1_map_strMSTestME_free (struct __THE_1_map_strMSTestME);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map_strMSTestME __THE_1_map_strMSTestME_alloc (int x, ...) {
  struct __THE_1_pair_strMSTestME *d = alloc(x * sizeof(struct __THE_1_pair_strMSTestME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSTestME) {va_arg(args, struct str), va_arg(args, enum __THE_1_Test_0)};
  va_end(args);
  return (struct __THE_1_map_strMSTestME) {d, x, x};
}
void __THE_1_map_strMSTestME_free (struct __THE_1_map_strMSTestME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}

int main () {
  const struct __THE_1_map_strMSTestME __THE_0_a_0 = __THE_1_map_strMSTestME_alloc(3, str_alloc("key1"), __THE_0_TestSDRed_0, str_alloc("key2"), __THE_0_TestSDGreen_0, str_alloc("key3"), __THE_0_TestSDBlue_0);
  const struct __THE_1_map_strMSTestME __THE_0_b_0 = __THE_1_map_strMSTestME_alloc(3, str_alloc("key1"), __THE_0_TestSDRed_0, str_alloc("key2"), __THE_0_TestSDGreen_0, str_alloc("key3"), __THE_0_TestSDBlue_0);
  __THE_1_map_strMSTestME_free((struct __THE_1_map_strMSTestME) __THE_0_b_0);
  __THE_1_map_strMSTestME_free((struct __THE_1_map_strMSTestME) __THE_0_a_0);
}
======= flags =======
======= stdout =======
