======= stdin =======
obj Test1 { a: int }
obj Test2 { b: str }
main {
  g1: Test1 | Test2 = Test1{}
  g2: Test1 | Test2 = Test2{}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_Test1_0 1
#define TYPE_Test2_0 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_union_Test1USTest2UE;

struct __THE_1_Test1_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_Test2_0 {
  const struct str __THE_0_b;
};
struct __THE_1_union_Test1USTest2UE {
  int t;
  union {
    struct __THE_1_Test1_0 *v1;
    struct __THE_1_Test2_0 *v2;
  };
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct __THE_1_union_Test1USTest2UE __THE_1_union_Test1USTest2UE_alloc (int, ...);
void __THE_1_union_Test1USTest2UE_free (struct __THE_1_union_Test1USTest2UE);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str __THE_0_b) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_b};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  str_free((struct str) n->__THE_0_b);
  free(n);
}
struct __THE_1_union_Test1USTest2UE __THE_1_union_Test1USTest2UE_alloc (int t, ...) {
  struct __THE_1_union_Test1USTest2UE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_Test1_0) r.v1 = va_arg(args, struct __THE_1_Test1_0 *);
  if (t == TYPE_Test2_0) r.v2 = va_arg(args, struct __THE_1_Test2_0 *);
  va_end(args);
  return r;
}
void __THE_1_union_Test1USTest2UE_free (struct __THE_1_union_Test1USTest2UE n) {
  if (n.t == TYPE_Test1_0) __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) n.v1);
  if (n.t == TYPE_Test2_0) __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n.v2);
}

int main () {
  const struct __THE_1_union_Test1USTest2UE __THE_0_g1_0 = __THE_1_union_Test1USTest2UE_alloc(TYPE_Test1_0, __THE_1_Test1_0_alloc(0));
  const struct __THE_1_union_Test1USTest2UE __THE_0_g2_0 = __THE_1_union_Test1USTest2UE_alloc(TYPE_Test2_0, __THE_1_Test2_0_alloc(str_alloc("")));
  __THE_1_union_Test1USTest2UE_free((struct __THE_1_union_Test1USTest2UE) __THE_0_g2_0);
  __THE_1_union_Test1USTest2UE_free((struct __THE_1_union_Test1USTest2UE) __THE_0_g1_0);
}
======= flags =======
======= stdout =======
