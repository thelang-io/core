======= stdin =======
main {
  result1 := "".contains("")
  result2 := "t".contains("")
  result3 := "test on test".contains("")
  result4 := "".contains("t")
  result5 := "t".contains("t")
  result6 := "test on test".contains("t")
  result7 := "".contains("test")
  result8 := "t".contains("test")
  result9 := "test on test".contains("test")
  result10 := "".contains("v")
  result11 := "t".contains("v")
  result12 := "test on test".contains("v")
  result13 := "".contains("veto")
  result14 := "t".contains("veto")
  result15 := "test on test".contains("veto")
  print(
    result1, result2, result3, result4, result5,
    result6, result7, result8, result9, result10,
    result11, result12, result13, result14, result15
  )
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
bool str_contains (struct str, struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
bool str_contains (struct str self, struct str n1) {
  bool r = n1.l == 0;
  if (!r && self.l == n1.l) {
    r = memcmp(self.d, n1.d, n1.l) == 0;
  } else if (!r && self.l > n1.l) {
    for (size_t i = 0; i < self.l - n1.l; i++) {
      if (memcmp(&self.d[i], n1.d, n1.l) == 0) {
        r = true;
        break;
      }
    }
  }
  free(self.d);
  free(n1.d);
  return r;
}

int main () {
  const bool __THE_0_result1_0 = str_contains(str_alloc(""), str_alloc(""));
  const bool __THE_0_result2_0 = str_contains(str_alloc("t"), str_alloc(""));
  const bool __THE_0_result3_0 = str_contains(str_alloc("test on test"), str_alloc(""));
  const bool __THE_0_result4_0 = str_contains(str_alloc(""), str_alloc("t"));
  const bool __THE_0_result5_0 = str_contains(str_alloc("t"), str_alloc("t"));
  const bool __THE_0_result6_0 = str_contains(str_alloc("test on test"), str_alloc("t"));
  const bool __THE_0_result7_0 = str_contains(str_alloc(""), str_alloc("test"));
  const bool __THE_0_result8_0 = str_contains(str_alloc("t"), str_alloc("test"));
  const bool __THE_0_result9_0 = str_contains(str_alloc("test on test"), str_alloc("test"));
  const bool __THE_0_result10_0 = str_contains(str_alloc(""), str_alloc("v"));
  const bool __THE_0_result11_0 = str_contains(str_alloc("t"), str_alloc("v"));
  const bool __THE_0_result12_0 = str_contains(str_alloc("test on test"), str_alloc("v"));
  const bool __THE_0_result13_0 = str_contains(str_alloc(""), str_alloc("veto"));
  const bool __THE_0_result14_0 = str_contains(str_alloc("t"), str_alloc("veto"));
  const bool __THE_0_result15_0 = str_contains(str_alloc("test on test"), str_alloc("veto"));
  print(stdout, "tztztztztztztztztztztztztztztz", __THE_0_result1_0, " ", __THE_0_result2_0, " ", __THE_0_result3_0, " ", __THE_0_result4_0, " ", __THE_0_result5_0, " ", __THE_0_result6_0, " ", __THE_0_result7_0, " ", __THE_0_result8_0, " ", __THE_0_result9_0, " ", __THE_0_result10_0, " ", __THE_0_result11_0, " ", __THE_0_result12_0, " ", __THE_0_result13_0, " ", __THE_0_result14_0, " ", __THE_0_result15_0, THE_EOL);
}
======= flags =======
======= stdout =======
true true true false true true false false true false false false false false false
