======= stdin =======
type Alias = str
main {
  a: Alias = ""
  b: Alias = "test"

  c := true ? a : b
  d := false ? b : a
  f := false ? a : ""
  e := false ? "test" : b
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  const struct str __THE_0_a_0 = str_alloc("");
  const struct str __THE_0_b_0 = str_alloc("test");
  const struct str __THE_0_c_0 = true ? str_copy(__THE_0_a_0) : str_copy(__THE_0_b_0);
  const struct str __THE_0_d_0 = false ? str_copy(__THE_0_b_0) : str_copy(__THE_0_a_0);
  const struct str __THE_0_f_0 = false ? str_copy(__THE_0_a_0) : str_alloc("");
  const struct str __THE_0_e_0 = false ? str_alloc("test") : str_copy(__THE_0_b_0);
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_f_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
