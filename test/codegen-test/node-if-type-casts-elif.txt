======= stdin =======
fn printTest (test: str | int | char | bool) {
  if test is str {
    print("test is str:", (test + " test").trimStart())
  } elif test is int {
    print("test is int:", test + 1)
  } elif test is char {
    print("test is char:", test.byte)
  } else {
    print("test is bool:", test == false ? "false" : "true")
  }
}

main {
  mut test: str | int | char | bool = ""
  printTest(test)
  test = "string"
  printTest(test)
  test = 0
  printTest(test)
  test = 10
  printTest(test)
  test = '\0'
  printTest(test)
  test = '\n'
  printTest(test)
  test = true
  printTest(test)
  test = false
  printTest(test)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <ctype.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_str 1
#define TYPE_int 2
#define TYPE_char 3
#define TYPE_bool 4

struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_strUSintUScharUSboolUE;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;

struct __THE_1_union_strUSintUScharUSboolUE {
  int t;
  union {
    struct str v1;
    int32_t v2;
    char v3;
    bool v4;
  };
};
struct __THE_1_fn$1000 {
  void (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  struct __THE_1_union_strUSintUScharUSboolUE n0;
};

void *alloc (size_t);
unsigned char char_byte (char);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_trimStart (struct str);
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_alloc (int, ...);
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_copy (const struct __THE_1_union_strUSintUScharUSboolUE);
void __THE_1_union_strUSintUScharUSboolUE_free (struct __THE_1_union_strUSintUScharUSboolUE);
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_realloc (struct __THE_1_union_strUSintUScharUSboolUE, struct __THE_1_union_strUSintUScharUSboolUE);
void __THE_1_printTest_0 (void *, struct __THE_1_fn$1000P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
unsigned char char_byte (char c) {
  return (unsigned char) c;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_trimStart (struct str s) {
  if (s.l == 0) return s;
  size_t i = 0;
  while (i < s.l && isspace(s.d[i])) i++;
  if (i >= s.l) {
    free(s.d);
    s = (struct str) {NULL, 0};
  } else {
    memmove(s.d, &s.d[i], s.l - i);
    s.l -= i;
    s.d = re_alloc(s.d, s.l);
  }
  return s;
}
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_alloc (int t, ...) {
  struct __THE_1_union_strUSintUScharUSboolUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_str) r.v1 = va_arg(args, struct str);
  if (t == TYPE_int) r.v2 = va_arg(args, int32_t);
  if (t == TYPE_char) r.v3 = va_arg(args, int);
  if (t == TYPE_bool) r.v4 = va_arg(args, int);
  va_end(args);
  return r;
}
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_copy (const struct __THE_1_union_strUSintUScharUSboolUE n) {
  struct __THE_1_union_strUSintUScharUSboolUE r = {n.t};
  if (n.t == TYPE_str) r.v1 = str_copy(n.v1);
  if (n.t == TYPE_int) r.v2 = n.v2;
  if (n.t == TYPE_char) r.v3 = n.v3;
  if (n.t == TYPE_bool) r.v4 = n.v4;
  return r;
}
void __THE_1_union_strUSintUScharUSboolUE_free (struct __THE_1_union_strUSintUScharUSboolUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v1);
}
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_realloc (struct __THE_1_union_strUSintUScharUSboolUE n1, struct __THE_1_union_strUSintUScharUSboolUE n2) {
  __THE_1_union_strUSintUScharUSboolUE_free((struct __THE_1_union_strUSintUScharUSboolUE) n1);
  return n2;
}
void __THE_1_printTest_0 (void *px, struct __THE_1_fn$1000P p) {
  const struct __THE_1_union_strUSintUScharUSboolUE __THE_0_test_0 = p.n0;
  if (__THE_0_test_0.t == TYPE_str) {
    print(stdout, "zzsz", "test is str:", " ", str_trimStart(str_concat_cstr(str_copy(__THE_0_test_0.v1), " test")), THE_EOL);
  } else if (__THE_0_test_0.t == TYPE_int) {
    print(stdout, "zziz", "test is int:", " ", __THE_0_test_0.v2 + 1, THE_EOL);
  } else if (__THE_0_test_0.t == TYPE_char) {
    print(stdout, "zzbz", "test is char:", " ", char_byte(__THE_0_test_0.v3), THE_EOL);
  } else {
    print(stdout, "zzsz", "test is bool:", " ", __THE_0_test_0.v4 == false ? str_alloc("false") : str_alloc("true"), THE_EOL);
  }
  __THE_1_union_strUSintUScharUSboolUE_free((struct __THE_1_union_strUSintUScharUSboolUE) __THE_0_test_0);
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_printTest_0 = (struct __THE_1_fn$1000) {&__THE_1_printTest_0, NULL, 0};
  struct __THE_1_union_strUSintUScharUSboolUE __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_str, str_alloc(""));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_str, str_alloc("string")));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_int, 0));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_int, 10));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_char, '\0'));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_char, '\n'));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_bool, true));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_bool, false));
  __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)});
  __THE_1_union_strUSintUScharUSboolUE_free((struct __THE_1_union_strUSintUScharUSboolUE) __THE_0_test_0);
}
======= flags =======
======= stdout =======
test is str: test
test is str: string test
test is int: 1
test is int: 11
test is char: 0
test is char: 10
test is bool: true
test is bool: false
