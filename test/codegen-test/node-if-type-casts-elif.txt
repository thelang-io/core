======= stdin =======
fn printTest (test: str | int | char | bool) {
  if test is str {
    print("test is str:", (test + " test").trimStart())
  } elif test is int {
    print("test is int:", test + 1)
  } elif test is char {
    print("test is char:", test.byte)
  } else {
    print("test is bool:", test == false ? "false" : "true")
  }
}

main {
  mut test: str | int | char | bool = ""
  printTest(test)
  test = "string"
  printTest(test)
  test = 0
  printTest(test)
  test = 10
  printTest(test)
  test = '\0'
  printTest(test)
  test = '\n'
  printTest(test)
  test = true
  printTest(test)
  test = false
  printTest(test)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <ctype.h>
#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1
#define TYPE_str 2
#define TYPE_int 3
#define TYPE_char 4
#define TYPE_bool 5

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_union_strUSintUScharUSboolUE;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_union_strUSintUScharUSboolUE {
  int t;
  union {
    struct str v2;
    int32_t v3;
    char v4;
    bool v5;
  };
};
struct __THE_1_fn$1000 {
  void (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  struct __THE_1_union_strUSintUScharUSboolUE n0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
unsigned char char_byte (char);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_trimStart (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_alloc (int, ...);
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_copy (const struct __THE_1_union_strUSintUScharUSboolUE);
void __THE_1_union_strUSintUScharUSboolUE_free (struct __THE_1_union_strUSintUScharUSboolUE);
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_realloc (struct __THE_1_union_strUSintUScharUSboolUE, struct __THE_1_union_strUSintUScharUSboolUE);
void __THE_1_printTest_0 (void *, struct __THE_1_fn$1000P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
unsigned char char_byte (char c) {
  return (unsigned char) c;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_trimStart (struct str s) {
  if (s.l == 0) return s;
  size_t i = 0;
  while (i < s.l && isspace(s.d[i])) i++;
  if (i >= s.l) {
    free(s.d);
    s = (struct str) {NULL, 0};
  } else {
    memmove(s.d, &s.d[i], s.l - i);
    s.l -= i;
    s.d = re_alloc(s.d, s.l);
  }
  return s;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_alloc (int t, ...) {
  struct __THE_1_union_strUSintUScharUSboolUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_str) r.v2 = va_arg(args, struct str);
  if (t == TYPE_int) r.v3 = va_arg(args, int32_t);
  if (t == TYPE_char) r.v4 = va_arg(args, int);
  if (t == TYPE_bool) r.v5 = va_arg(args, int);
  va_end(args);
  return r;
}
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_copy (const struct __THE_1_union_strUSintUScharUSboolUE n) {
  struct __THE_1_union_strUSintUScharUSboolUE r = {n.t};
  if (n.t == TYPE_str) r.v2 = str_copy(n.v2);
  if (n.t == TYPE_int) r.v3 = n.v3;
  if (n.t == TYPE_char) r.v4 = n.v4;
  if (n.t == TYPE_bool) r.v5 = n.v5;
  return r;
}
void __THE_1_union_strUSintUScharUSboolUE_free (struct __THE_1_union_strUSintUScharUSboolUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v2);
}
struct __THE_1_union_strUSintUScharUSboolUE __THE_1_union_strUSintUScharUSboolUE_realloc (struct __THE_1_union_strUSintUScharUSboolUE n1, struct __THE_1_union_strUSintUScharUSboolUE n2) {
  __THE_1_union_strUSintUScharUSboolUE_free((struct __THE_1_union_strUSintUScharUSboolUE) n1);
  return n2;
}
void __THE_1_printTest_0 (void *px, struct __THE_1_fn$1000P p) {
  error_stack_push(&err_state, "/test", "printTest");
  const struct __THE_1_union_strUSintUScharUSboolUE __THE_0_test_0 = p.n0;
  if (__THE_0_test_0.t == TYPE_str) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
    (error_stack_pos(&err_state, 3, 5), print(stdout, "zzsz", "test is str:", " ", (error_stack_pos(&err_state, 3, 27), str_trimStart(str_concat_cstr(str_copy(__THE_0_test_0.v2), " test"))), THE_EOL));
L2:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L1;
  } else if (__THE_0_test_0.t == TYPE_int) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
    (error_stack_pos(&err_state, 5, 5), print(stdout, "zziz", "test is int:", " ", __THE_0_test_0.v3 + 1, THE_EOL));
L3:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L1;
  } else if (__THE_0_test_0.t == TYPE_char) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
    (error_stack_pos(&err_state, 7, 5), print(stdout, "zzbz", "test is char:", " ", (error_stack_pos(&err_state, 7, 28), char_byte(__THE_0_test_0.v4)), THE_EOL));
L4:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L1;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
    (error_stack_pos(&err_state, 9, 5), print(stdout, "zzsz", "test is bool:", " ", __THE_0_test_0.v5 == false ? str_alloc("false") : str_alloc("true"), THE_EOL));
L5:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L1;
  }
L1:
  __THE_1_union_strUSintUScharUSboolUE_free((struct __THE_1_union_strUSintUScharUSboolUE) __THE_0_test_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1000 __THE_0_printTest_0 = (struct __THE_1_fn$1000) {&__THE_1_printTest_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L6;
  struct __THE_1_union_strUSintUScharUSboolUE __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_str, str_alloc(""));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 15, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_str, str_alloc("string")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 17, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_int, 0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 19, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_int, 10));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 21, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_char, '\0'));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 23, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_char, '\n'));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 25, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_bool, true));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 27, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0 = __THE_1_union_strUSintUScharUSboolUE_realloc(__THE_0_test_0, __THE_1_union_strUSintUScharUSboolUE_alloc(TYPE_bool, false));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  (error_stack_pos(&err_state, 29, 3), __THE_0_printTest_0.f(__THE_0_printTest_0.x, (struct __THE_1_fn$1000P) {__THE_1_union_strUSintUScharUSboolUE_copy(__THE_0_test_0)}));
L7:
  __THE_1_union_strUSintUScharUSboolUE_free((struct __THE_1_union_strUSintUScharUSboolUE) __THE_0_test_0);
L6:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
test is str: test
test is str: string test
test is int: 1
test is int: 11
test is char: 0
test is char: 10
test is bool: true
test is bool: false
