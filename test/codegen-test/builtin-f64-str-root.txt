======= stdin =======
obj Test1 {
  f: f64
}

fn testCall () f64 {
  return 1.23
}

main {
  test: f64 = 2.34
  refTest := ref test
  test1 := Test1{f: 3.14}
  mut test2: f64 = 4.56

  test.str()
  test1.f.str()
  ;(test2 = 5.67).str()
  ;(test + test2).str()
  testCall().str()
  ;(1 > 2 ? test : test2).str()
  ;(ref test).str()
  refTest.str()
  ;(-test).str()

  fn testCtx () {
    test.str()
    test1.f.str()
    ;(test2 = 3.14).str()
    testCall().str()
    ;(ref test).str()
    refTest.str()
  }

  testCtx()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_fn$0;
struct __THE_1_fn$1;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  const double __THE_0_f;
};
struct __THE_1_fn$0 {
  double (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  double *__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0;
  const double **__THE_0_refTest_0;
  const double *__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0;
};

void *alloc (size_t);
struct str f64_str (double);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str f64_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (double);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
double __THE_1_testCall_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtestCtx_0X);
void __THE_1_mainSDtestCtx_0 (void *);

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (double __THE_0_f) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_f};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  free(o);
}
double __THE_1_testCall_0 (void *px) {
  return 1.23;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  double *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const double **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const double *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  str_free((struct str) f64_str(*__THE_0_test_0));
  str_free((struct str) f64_str((*__THE_0_test1_0)->__THE_0_f));
  str_free((struct str) f64_str(*__THE_0_test2_0 = 3.14));
  str_free((struct str) f64_str((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x)));
  str_free((struct str) f64_str(*__THE_0_test_0));
  str_free((struct str) f64_str(**__THE_0_refTest_0));
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testCall_0 = (struct __THE_1_fn$0) {&__THE_1_testCall_0, NULL, 0};
  const double __THE_0_test_0 = 2.34;
  const double *__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(3.14);
  double __THE_0_test2_0 = 4.56;
  str_free((struct str) f64_str(__THE_0_test_0));
  str_free((struct str) f64_str(__THE_0_test1_0->__THE_0_f));
  str_free((struct str) f64_str(__THE_0_test2_0 = 5.67));
  str_free((struct str) f64_str(__THE_0_test_0 + __THE_0_test2_0));
  str_free((struct str) f64_str(__THE_0_testCall_0.f(__THE_0_testCall_0.x)));
  str_free((struct str) f64_str(1 > 2 ? __THE_0_test_0 : __THE_0_test2_0));
  str_free((struct str) f64_str(__THE_0_test_0));
  str_free((struct str) f64_str(*__THE_0_refTest_0));
  str_free((struct str) f64_str(-__THE_0_test_0));
  const struct __THE_1_fn$1 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_0_mainSDtestCtx_0.f(__THE_0_mainSDtestCtx_0.x);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtestCtx_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
