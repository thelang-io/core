======= stdin =======
main {
  testUnion: char | str = 'a'

  a: any = testUnion
  if a is (char | str) { print("(char | str) " + a.str()) }
  else { print("any") }

  b: any = 3.14
  if b is (char | str) { print("(char | str) " + b.str()) }
  else { print("any") }

  c: (char | str) | float = testUnion
  if c is (char | str) { print("(char | str) " + c.str()) }
  else { print("float " + c.str()) }

  d: (char | str) | float = 3.14
  if d is (char | str) { print("(char | str) " + d.str()) }
  else { print("float " + d.str()) }

  mut e: any = testUnion
  if (e = testUnion) is (char | str) { print("(char | str) " + e.str()) }
  else { print("any") }

  mut f: any = 3.14
  if (f = 3.14) is (char | str) { print("(char | str) " + f.str()) }
  else { print("any") }

  mut g: (char | str) | float = testUnion
  if (g = testUnion) is (char | str) { print("(char | str) " + g.str()) }
  else { print("float " + g.str()) }

  mut h: (char | str) | float = 3.14
  if (h = 3.14) is (char | str) { print("(char | str) " + h.str()) }
  else { print("float " + h.str()) }

  print((a is (char | str)) ? "(char | str) " + a.str() : "any")
  print((b is (char | str)) ? "(char | str) " + b.str() : "any")
  print((c is (char | str)) ? "(char | str) " + c.str() : "float " + c.str())
  print((d is (char | str)) ? "(char | str) " + d.str() : "float " + d.str())
  print(((e = testUnion) is (char | str)) ? "(char | str) " + e.str() : "any")
  print(((f = 3.14) is (char | str)) ? "(char | str) " + f.str() : "any")
  print(((g = testUnion) is (char | str)) ? "(char | str) " + g.str() : "float " + g.str())
  print(((h = 3.14) is (char | str)) ? "(char | str) " + h.str() : "float " + h.str())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1
#define TYPE_char 2
#define TYPE_str 3
#define TYPE_union_charUSstrUE 4
#define TYPE_float 5

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_union_charUSstrUE;
struct __THE_1_any_union_charUSstrUE;
struct __THE_1_any_float;
struct __THE_1_union_union_charUSstrUEUSfloatUE;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_union_charUSstrUE {
  int t;
  union {
    char v2;
    struct str v3;
  };
};
struct __THE_1_any_union_charUSstrUE {
  struct __THE_1_union_charUSstrUE d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_union_union_charUSstrUEUSfloatUE {
  int t;
  union {
    struct __THE_1_union_charUSstrUE v4;
    double v5;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str char_str (char);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str float_str (double);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_union_charUSstrUE __THE_1_union_charUSstrUE_alloc (int, ...);
struct __THE_1_union_charUSstrUE __THE_1_union_charUSstrUE_copy (const struct __THE_1_union_charUSstrUE);
void __THE_1_union_charUSstrUE_free (struct __THE_1_union_charUSstrUE);
struct str __THE_1_union_charUSstrUE_str (struct __THE_1_union_charUSstrUE);
struct any __THE_1_any_union_charUSstrUE_alloc (struct __THE_1_union_charUSstrUE);
struct any __THE_1_any_union_charUSstrUE_copy (const struct any);
void __THE_1_any_union_charUSstrUE_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_1_union_union_charUSstrUEUSfloatUE_alloc (int, ...);
void __THE_1_union_union_charUSstrUEUSfloatUE_free (struct __THE_1_union_union_charUSstrUEUSfloatUE);
struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_1_union_union_charUSstrUEUSfloatUE_realloc (struct __THE_1_union_union_charUSstrUEUSfloatUE, struct __THE_1_union_union_charUSstrUEUSfloatUE);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_union_charUSstrUE __THE_1_union_charUSstrUE_alloc (int t, ...) {
  struct __THE_1_union_charUSstrUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_char) r.v2 = va_arg(args, int);
  if (t == TYPE_str) r.v3 = va_arg(args, struct str);
  va_end(args);
  return r;
}
struct __THE_1_union_charUSstrUE __THE_1_union_charUSstrUE_copy (const struct __THE_1_union_charUSstrUE n) {
  struct __THE_1_union_charUSstrUE r = {n.t};
  if (n.t == TYPE_char) r.v2 = n.v2;
  if (n.t == TYPE_str) r.v3 = str_copy(n.v3);
  return r;
}
void __THE_1_union_charUSstrUE_free (struct __THE_1_union_charUSstrUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v3);
}
struct str __THE_1_union_charUSstrUE_str (struct __THE_1_union_charUSstrUE n) {
  struct str r;
  if (n.t == TYPE_char) r = char_str(n.v2);
  if (n.t == TYPE_str) r = str_copy(n.v3);
  __THE_1_union_charUSstrUE_free((struct __THE_1_union_charUSstrUE) n);
  return r;
}
struct any __THE_1_any_union_charUSstrUE_alloc (struct __THE_1_union_charUSstrUE d) {
  size_t l = sizeof(struct __THE_1_any_union_charUSstrUE);
  struct __THE_1_any_union_charUSstrUE *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_union_charUSstrUE, r, l, &__THE_1_any_union_charUSstrUE_copy, &__THE_1_any_union_charUSstrUE_free};
}
struct any __THE_1_any_union_charUSstrUE_copy (const struct any n) {
  struct __THE_1_any_union_charUSstrUE *o = n.d;
  struct __THE_1_any_union_charUSstrUE *r = alloc(n.l);
  r->d = __THE_1_union_charUSstrUE_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_union_charUSstrUE_free (struct any _n) {
  struct __THE_1_any_union_charUSstrUE *n = _n.d;
  __THE_1_union_charUSstrUE_free((struct __THE_1_union_charUSstrUE) n->d);
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_1_union_union_charUSstrUEUSfloatUE_alloc (int t, ...) {
  struct __THE_1_union_union_charUSstrUEUSfloatUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_union_charUSstrUE) r.v4 = va_arg(args, struct __THE_1_union_charUSstrUE);
  if (t == TYPE_float) r.v5 = va_arg(args, double);
  va_end(args);
  return r;
}
void __THE_1_union_union_charUSstrUEUSfloatUE_free (struct __THE_1_union_union_charUSstrUEUSfloatUE n) {
  if (n.t == TYPE_union_charUSstrUE) __THE_1_union_charUSstrUE_free((struct __THE_1_union_charUSstrUE) n.v4);
}
struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_1_union_union_charUSstrUEUSfloatUE_realloc (struct __THE_1_union_union_charUSstrUEUSfloatUE n1, struct __THE_1_union_union_charUSstrUEUSfloatUE n2) {
  __THE_1_union_union_charUSstrUEUSfloatUE_free((struct __THE_1_union_union_charUSstrUEUSfloatUE) n1);
  return n2;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct __THE_1_union_charUSstrUE __THE_0_testUnion_0 = __THE_1_union_charUSstrUE_alloc(TYPE_char, 'a');
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  const struct any __THE_0_a_0 = __THE_1_any_union_charUSstrUE_alloc(__THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0));
  if (__THE_0_a_0.t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 5, 50), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_a_0.d)->d)))), THE_EOL);
L4:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L3;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
    print(stdout, "zz", "any", THE_EOL);
L5:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L3;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  const struct any __THE_0_b_0 = __THE_1_any_float_alloc(3.14);
  if (__THE_0_b_0.t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L7;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 9, 50), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_b_0.d)->d)))), THE_EOL);
L7:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L6;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L8;
    print(stdout, "zz", "any", THE_EOL);
L8:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L6;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L6;
  const struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_0_c_0 = __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_union_charUSstrUE, __THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0));
  if (__THE_0_c_0.t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L10;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 13, 50), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_c_0.v4)))), THE_EOL);
L10:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L9;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L11;
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 14, 27), float_str(__THE_0_c_0.v5))), THE_EOL);
L11:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L9;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L9;
  const struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_0_d_0 = __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_float, 3.14);
  if (__THE_0_d_0.t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L13;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 17, 50), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_d_0.v4)))), THE_EOL);
L13:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L12;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L14;
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 18, 27), float_str(__THE_0_d_0.v5))), THE_EOL);
L14:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L12;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L12;
  struct any __THE_0_e_0 = __THE_1_any_union_charUSstrUE_alloc(__THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0));
  if ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_union_charUSstrUE_alloc(__THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0)))).t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L16;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 21, 64), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_e_0.d)->d)))), THE_EOL);
L16:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L15;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L17;
    print(stdout, "zz", "any", THE_EOL);
L17:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L15;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L15;
  struct any __THE_0_f_0 = __THE_1_any_float_alloc(3.14);
  if ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L19;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 25, 59), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_f_0.d)->d)))), THE_EOL);
L19:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L18;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L20;
    print(stdout, "zz", "any", THE_EOL);
L20:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L18;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L18;
  struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_0_g_0 = __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_union_charUSstrUE, __THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0));
  if ((__THE_0_g_0 = __THE_1_union_union_charUSstrUEUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_union_charUSstrUE, __THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0)))).t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L22;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 29, 64), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_g_0.v4)))), THE_EOL);
L22:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L21;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L23;
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 30, 27), float_str(__THE_0_g_0.v5))), THE_EOL);
L23:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L21;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L21;
  struct __THE_1_union_union_charUSstrUEUSfloatUE __THE_0_h_0 = __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_float, 3.14);
  if ((__THE_0_h_0 = __THE_1_union_union_charUSstrUEUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_union_charUSstrUE) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L25;
    print(stdout, "sz", cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 33, 59), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_h_0.v4)))), THE_EOL);
L25:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L24;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L26;
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 34, 27), float_str(__THE_0_h_0.v5))), THE_EOL);
L26:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L24;
  }
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", (__THE_0_a_0.t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 36, 49), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_a_0.d)->d)))) : str_alloc("any"), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", (__THE_0_b_0.t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 37, 49), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_b_0.d)->d)))) : str_alloc("any"), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", (__THE_0_c_0.t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 38, 49), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_c_0.v4)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 38, 70), float_str(__THE_0_c_0.v5))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", (__THE_0_d_0.t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 39, 49), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_d_0.v4)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 39, 70), float_str(__THE_0_d_0.v5))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_union_charUSstrUE_alloc(__THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0)))).t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 40, 63), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_e_0.d)->d)))) : str_alloc("any"), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 41, 58), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(((struct __THE_1_any_union_charUSstrUE *) __THE_0_f_0.d)->d)))) : str_alloc("any"), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", ((__THE_0_g_0 = __THE_1_union_union_charUSstrUEUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_union_charUSstrUE, __THE_1_union_charUSstrUE_copy(__THE_0_testUnion_0)))).t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 42, 63), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_g_0.v4)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 42, 84), float_str(__THE_0_g_0.v5))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  print(stdout, "sz", ((__THE_0_h_0 = __THE_1_union_union_charUSstrUEUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_union_charUSstrUEUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_union_charUSstrUE) ? cstr_concat_str("(char | str) ", (error_stack_pos(&err_state, 43, 58), __THE_1_union_charUSstrUE_str(__THE_1_union_charUSstrUE_copy(__THE_0_h_0.v4)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 43, 79), float_str(__THE_0_h_0.v5))), THE_EOL);
L24:
  __THE_1_union_union_charUSstrUEUSfloatUE_free((struct __THE_1_union_union_charUSstrUEUSfloatUE) __THE_0_h_0);
L21:
  __THE_1_union_union_charUSstrUEUSfloatUE_free((struct __THE_1_union_union_charUSstrUEUSfloatUE) __THE_0_g_0);
L18:
  any_free((struct any) __THE_0_f_0);
L15:
  any_free((struct any) __THE_0_e_0);
L12:
  __THE_1_union_union_charUSstrUEUSfloatUE_free((struct __THE_1_union_union_charUSstrUEUSfloatUE) __THE_0_d_0);
L9:
  __THE_1_union_union_charUSstrUEUSfloatUE_free((struct __THE_1_union_union_charUSstrUEUSfloatUE) __THE_0_c_0);
L6:
  any_free((struct any) __THE_0_b_0);
L3:
  any_free((struct any) __THE_0_a_0);
L2:
  __THE_1_union_charUSstrUE_free((struct __THE_1_union_charUSstrUE) __THE_0_testUnion_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
(char | str) a
any
(char | str) a
float 3.140000
(char | str) a
any
(char | str) a
float 3.140000
(char | str) a
any
(char | str) a
float 3.140000
(char | str) a
any
(char | str) a
float 3.140000
