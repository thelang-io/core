======= stdin =======
obj Animal {
  mut name: str
  mut age: int
}

fn get (d: ref Animal) ref Animal {
  return d
}

main {
  t := Animal{name: "some"}
  b: (ref Animal)? = get(ref t)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_test_Animal_0;
struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FE;
struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FEP;

struct __THE_1_test_Animal_0 {
  struct str __THE_0_name;
  int32_t __THE_0_age;
};
struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FE {
  struct __THE_1_test_Animal_0 **(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FEP {
  struct __THE_1_test_Animal_0 **n0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
void *xalloc (void *, size_t);
struct __THE_1_test_Animal_0 *__THE_1_test_Animal_0_alloc (struct str, int32_t);
void __THE_1_test_Animal_0_free (struct __THE_1_test_Animal_0 *);
struct __THE_1_test_Animal_0 **__THE_1_test_get_0 (void *, void *);
struct __THE_1_test_Animal_0 ***__THE_1_opt_ref_test_Animal_0_alloc (struct __THE_1_test_Animal_0 **);
void __THE_1_opt_ref_test_Animal_0_free (struct __THE_1_test_Animal_0 ***);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_test_Animal_0 *__THE_1_test_Animal_0_alloc (struct str __THE_0_name, int32_t __THE_0_age) {
  struct __THE_1_test_Animal_0 *r = alloc(sizeof(struct __THE_1_test_Animal_0));
  struct __THE_1_test_Animal_0 s = {__THE_0_name, __THE_0_age};
  memcpy(r, &s, sizeof(struct __THE_1_test_Animal_0));
  return r;
}
void __THE_1_test_Animal_0_free (struct __THE_1_test_Animal_0 *n) {
  str_free((struct str) n->__THE_0_name);
  free(n);
}
struct __THE_1_test_Animal_0 **__THE_1_test_get_0 (void *px, void *pp) {
  struct __THE_1_test_Animal_0 **v;
  struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FEP *p = pp;
  const struct __THE_1_test_Animal_0 **__THE_0_d_0 = p->n0;
  v = __THE_0_d_0;
  free(pp);
  return v;
}
struct __THE_1_test_Animal_0 ***__THE_1_opt_ref_test_Animal_0_alloc (struct __THE_1_test_Animal_0 **n) {
  struct __THE_1_test_Animal_0 ***r = alloc(sizeof(struct __THE_1_test_Animal_0 **));
  *r = n;
  return r;
}
void __THE_1_opt_ref_test_Animal_0_free (struct __THE_1_test_Animal_0 ***n) {
  if (n == NULL) return;
  free(n);
}

int main () {
  const struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FE __THE_0_test_get_0 = (struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FE) {&__THE_1_test_get_0, NULL, 0};
  const struct __THE_1_test_Animal_0 *__THE_0_t_0 = __THE_1_test_Animal_0_alloc(str_alloc("some"), 0);
  const struct __THE_1_test_Animal_0 ***__THE_0_b_0 = __THE_1_opt_ref_test_Animal_0_alloc(__THE_0_test_get_0.f(__THE_0_test_get_0.x, xalloc(&(struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FEP) {&__THE_0_t_0}, sizeof(struct __THE_1_fn_sFP3ref_test_Animal_0FRref_test_Animal_0FEP))));
  __THE_1_opt_ref_test_Animal_0_free((struct __THE_1_test_Animal_0 ***) __THE_0_b_0);
  __THE_1_test_Animal_0_free((struct __THE_1_test_Animal_0 *) __THE_0_t_0);
}
======= flags =======
======= stdout =======
