======= stdin =======
main {
  "-2147483649".toInt()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
int32_t str_toInt (struct str, unsigned char, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
int32_t str_toInt (struct str self, unsigned char o1, int32_t n1) {
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  long r = strtol(c, &e, o1 == 0 ? 10 : n1);
  if (errno == ERANGE || r < INT32_MIN || INT32_MAX < r) {
    fprintf(stderr, "Error: value `%s` out of range" THE_EOL, c);
    exit(EXIT_FAILURE);
  } else if (errno != 0 || self.l == 0 || e == c || *e != 0) {
    fprintf(stderr, "Error: value `%s` has invalid syntax" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  free(self.d);
  return (int32_t) r;
}

int main () {
  str_toInt(str_alloc("-2147483649"), 0, 0);
}
======= flags =======
======= stderr =======
Error: value `-2147483649` out of range
