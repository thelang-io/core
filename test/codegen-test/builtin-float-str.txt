======= stdin =======
obj Test1 {
  f: float
}

fn testCall () float {
  return 1.23
}

main {
  test := 2.34
  refTest := ref test
  test1 := Test1{f: 3.14}
  mut test2 := 4.56

  v01 := test.str()
  v02 := test1.f.str()
  v03 := (test2 = 5.67).str()
  v04 := (6.78 + 7.89).str()
  v05 := testCall().str()
  v06 := (1 > 2 ? 8.90 : 9.01).str()
  v07 := (3.14).str()
  v08 := (ref test).str()
  v09 := refTest.str()
  v10 := (-3.14).str()

  fn testCtx () {
    v101 := test.str()
    v102 := test1.f.str()
    v103 := (test2 = 3.14).str()
    v104 := testCall().str()
    v105 := (ref test).str()
    v106 := refTest.str()
  }
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

void *alloc (size_t);
struct str float_str (double);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
void str_free (struct str s) {
  free(s.c);
}

struct __THE_1_Test1_0;
struct __THE_1_fn$0;
struct __THE_1_fn$1;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  double __THE_0_f;
};
struct __THE_1_fn$0 {
  double (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  double *__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0;
  const double **__THE_0_refTest_0;
  const double *__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0;
};

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (double);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
double __THE_1_testCall_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtestCtx_0 (void *);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtestCtx_0X);

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (double __THE_0_f) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  r->__THE_0_f = __THE_0_f;
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  free(o);
}
double __THE_1_testCall_0 (void *px) {
  return 1.23;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  double *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const double **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const double *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  const struct str __THE_0_v101_0 = float_str(*__THE_0_test_0);
  const struct str __THE_0_v102_0 = float_str((*__THE_0_test1_0)->__THE_0_f);
  const struct str __THE_0_v103_0 = float_str(*__THE_0_test2_0 = 3.14);
  const struct str __THE_0_v104_0 = float_str((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x));
  const struct str __THE_0_v105_0 = float_str(*__THE_0_test_0);
  const struct str __THE_0_v106_0 = float_str(**__THE_0_refTest_0);
  str_free((struct str) __THE_0_v106_0);
  str_free((struct str) __THE_0_v105_0);
  str_free((struct str) __THE_0_v104_0);
  str_free((struct str) __THE_0_v103_0);
  str_free((struct str) __THE_0_v102_0);
  str_free((struct str) __THE_0_v101_0);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testCall_0 = (struct __THE_1_fn$0) {&__THE_1_testCall_0, NULL, 0};
  const double __THE_0_test_0 = 2.34;
  const double *__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(3.14);
  double __THE_0_test2_0 = 4.56;
  const struct str __THE_0_v01_0 = float_str(__THE_0_test_0);
  const struct str __THE_0_v02_0 = float_str(__THE_0_test1_0->__THE_0_f);
  const struct str __THE_0_v03_0 = float_str(__THE_0_test2_0 = 5.67);
  const struct str __THE_0_v04_0 = float_str(6.78 + 7.89);
  const struct str __THE_0_v05_0 = float_str(__THE_0_testCall_0.f(__THE_0_testCall_0.x));
  const struct str __THE_0_v06_0 = float_str(1 > 2 ? 8.90 : 9.01);
  const struct str __THE_0_v07_0 = float_str(3.14);
  const struct str __THE_0_v08_0 = float_str(__THE_0_test_0);
  const struct str __THE_0_v09_0 = float_str(*__THE_0_refTest_0);
  const struct str __THE_0_v10_0 = float_str(-3.14);
  const struct __THE_1_fn$1 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtestCtx_0);
  str_free((struct str) __THE_0_v10_0);
  str_free((struct str) __THE_0_v09_0);
  str_free((struct str) __THE_0_v08_0);
  str_free((struct str) __THE_0_v07_0);
  str_free((struct str) __THE_0_v06_0);
  str_free((struct str) __THE_0_v05_0);
  str_free((struct str) __THE_0_v04_0);
  str_free((struct str) __THE_0_v03_0);
  str_free((struct str) __THE_0_v02_0);
  str_free((struct str) __THE_0_v01_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
