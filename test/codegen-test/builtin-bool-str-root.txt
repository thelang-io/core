======= stdin =======
obj Test1 {
  b: bool
}

fn testCall () bool {
  return true
}

main {
  test := true
  refTest := ref test
  test1 := Test1{b: true}
  mut test2 := true

  test.str()
  test1.b.str()
  ;(test2 = false).str()
  ;(1 > 2).str()
  testCall().str()
  ;(1 > 2 ? true : false).str()
  true.str()
  false.str()
  ;(ref test).str()
  refTest.str()
  ;(!1).str()
  ;(!!1).str()

  fn testCtx () {
    test.str()
    test1.b.str()
    ;(test2 = false).str()
    testCall().str()
    ;(ref test).str()
    refTest.str()
  }

  testCtx()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_fn$0;
struct __THE_1_fn$1;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  const bool __THE_0_b;
};
struct __THE_1_fn$0 {
  bool (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  bool *__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0;
  const bool **__THE_0_refTest_0;
  const bool *__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0;
};

void *alloc (size_t);
struct str bool_str (bool);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str bool_str (bool t) {
  return str_alloc(t ? "true" : "false");
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (bool);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
bool __THE_1_testCall_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtestCtx_0X);
void __THE_1_mainSDtestCtx_0 (void *);

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (bool __THE_0_b) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_b};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  free(o);
}
bool __THE_1_testCall_0 (void *px) {
  return true;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  bool *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const bool **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const bool *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  str_free((struct str) bool_str(*__THE_0_test_0));
  str_free((struct str) bool_str((*__THE_0_test1_0)->__THE_0_b));
  str_free((struct str) bool_str(*__THE_0_test2_0 = false));
  str_free((struct str) bool_str((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x)));
  str_free((struct str) bool_str(*__THE_0_test_0));
  str_free((struct str) bool_str(**__THE_0_refTest_0));
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testCall_0 = (struct __THE_1_fn$0) {&__THE_1_testCall_0, NULL, 0};
  const bool __THE_0_test_0 = true;
  const bool *__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(true);
  bool __THE_0_test2_0 = true;
  str_free((struct str) bool_str(__THE_0_test_0));
  str_free((struct str) bool_str(__THE_0_test1_0->__THE_0_b));
  str_free((struct str) bool_str(__THE_0_test2_0 = false));
  str_free((struct str) bool_str(1 > 2));
  str_free((struct str) bool_str(__THE_0_testCall_0.f(__THE_0_testCall_0.x)));
  str_free((struct str) bool_str(1 > 2 ? true : false));
  str_free((struct str) bool_str(true));
  str_free((struct str) bool_str(false));
  str_free((struct str) bool_str(__THE_0_test_0));
  str_free((struct str) bool_str(*__THE_0_refTest_0));
  str_free((struct str) bool_str(!1));
  str_free((struct str) bool_str(!!1));
  const struct __THE_1_fn$1 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_0_mainSDtestCtx_0.f(__THE_0_mainSDtestCtx_0.x);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtestCtx_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
