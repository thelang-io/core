======= stdin =======
async fn testFn () {}

main {
  optFn: (async () -> void)?
  optFnNilInit: (async () -> void)? = nil
  optFnValCopy: (async () -> void)? = testFn
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

struct threadpool;
struct threadpool_job;
struct threadpool_thread;

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
typedef struct threadpool {
  bool active;
  pthread_cond_t cond1;
  pthread_cond_t cond2;
  struct threadpool_job *jobs;
  struct threadpool_job *jobs_tail;
  pthread_mutex_t lock1;
  pthread_mutex_t lock2;
  pthread_mutex_t lock3;
  struct threadpool_thread *threads;
  int working_threads;
  int alive_threads;
} threadpool_t;
typedef void (*threadpool_func_t) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
typedef struct threadpool_job {
  struct threadpool_job *parent;
  threadpool_func_t func;
  void *ctx;
  void *params;
  void *ret;
  int step;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  pthread_t id;
  struct threadpool *tp;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn$1000;

struct __THE_1_fn$1000 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void threadpool_insert (threadpool_t *, threadpool_job_t *);
void threadpool_job_deinit (threadpool_job_t *);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_testFn_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
struct __THE_1_fn$1000 *__THE_1_opt_fn$1000_alloc (struct __THE_1_fn$1000);
void __THE_1_opt_fn$1000_free (struct __THE_1_fn$1000 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void threadpool_insert (threadpool_t *self, threadpool_job_t *job) {
  pthread_mutex_lock(&self->lock2);
  if (self->jobs == NULL) {
    self->jobs = job;
    self->jobs_tail = job;
  } else {
    self->jobs_tail->next = job;
    self->jobs_tail = self->jobs_tail->next;
  }
  pthread_mutex_lock(&self->lock3);
  pthread_cond_signal(&self->cond2);
  pthread_mutex_unlock(&self->lock3);
  pthread_mutex_unlock(&self->lock2);
}
void threadpool_job_deinit (threadpool_job_t *self) {
  free(self);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_testFn_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  if (job->parent != NULL) threadpool_insert(tp, job->parent);
  threadpool_job_deinit(job);
}
struct __THE_1_fn$1000 *__THE_1_opt_fn$1000_alloc (struct __THE_1_fn$1000 n) {
  struct __THE_1_fn$1000 *r = alloc(sizeof(struct __THE_1_fn$1000));
  *r = n;
  return r;
}
void __THE_1_opt_fn$1000_free (struct __THE_1_fn$1000 *n) {
  if (n == NULL) return;
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) *n);
  free(n);
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_testFn_0 = (struct __THE_1_fn$1000) {&__THE_1_testFn_0, NULL, 0};
  const struct __THE_1_fn$1000 *__THE_0_optFn_0 = NULL;
  const struct __THE_1_fn$1000 *__THE_0_optFnNilInit_0 = NULL;
  const struct __THE_1_fn$1000 *__THE_0_optFnValCopy_0 = __THE_1_opt_fn$1000_alloc(__THE_1_fn$1000_copy(__THE_0_testFn_0));
  __THE_1_opt_fn$1000_free((struct __THE_1_fn$1000 *) __THE_0_optFnValCopy_0);
  __THE_1_opt_fn$1000_free((struct __THE_1_fn$1000 *) __THE_0_optFnNilInit_0);
  __THE_1_opt_fn$1000_free((struct __THE_1_fn$1000 *) __THE_0_optFn_0);
}
======= flags =======
======= stdout =======
