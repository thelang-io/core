======= stdin =======
fn test1 () {
  return
}
fn test2 () int {
  return 1
}
main {
  g1: (() -> void) | (() -> int) = test1
  g2: (() -> void) | (() -> int) = test2
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_fn_sFRvoidFE 2
#define TYPE_fn_sFRintFE 3

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn_sFRvoidFE;
struct __THE_1_fn_sFRintFE;
struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE;

struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFRintFE {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE {
  int t;
  union {
    struct __THE_1_fn_sFRvoidFE v2;
    struct __THE_1_fn_sFRintFE v3;
  };
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_fn_sFRvoidFE __THE_1_fn_sFRvoidFE_copy (const struct __THE_1_fn_sFRvoidFE);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_test_test1_0 (void *);
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_copy (const struct __THE_1_fn_sFRintFE);
void __THE_1_fn_sFRintFE_free (struct __THE_1_fn_sFRintFE);
int32_t __THE_1_test_test2_0 (void *);
struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_alloc (int, ...);
void __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_free (struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_fn_sFRvoidFE __THE_1_fn_sFRvoidFE_copy (const struct __THE_1_fn_sFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test_test1_0 (void *px) {
  return;
}
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_copy (const struct __THE_1_fn_sFRintFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFRintFE) {n.f, x, n.l};
}
void __THE_1_fn_sFRintFE_free (struct __THE_1_fn_sFRintFE n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test_test2_0 (void *px) {
  return 1;
}
struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_alloc (int t, ...) {
  struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_fn_sFRvoidFE) r.v2 = va_arg(args, struct __THE_1_fn_sFRvoidFE);
  if (t == TYPE_fn_sFRintFE) r.v3 = va_arg(args, struct __THE_1_fn_sFRintFE);
  va_end(args);
  return r;
}
void __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_free (struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE n) {
  if (n.t == TYPE_fn_sFRvoidFE) __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) n.v2);
  if (n.t == TYPE_fn_sFRintFE) __THE_1_fn_sFRintFE_free((struct __THE_1_fn_sFRintFE) n.v3);
}

int main () {
  const struct __THE_1_fn_sFRvoidFE __THE_0_test_test1_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_test_test1_0, NULL, 0};
  const struct __THE_1_fn_sFRintFE __THE_0_test_test2_0 = (struct __THE_1_fn_sFRintFE) {&__THE_1_test_test2_0, NULL, 0};
  const struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE __THE_0_g1_0 = __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_alloc(TYPE_fn_sFRvoidFE, __THE_1_fn_sFRvoidFE_copy(__THE_0_test_test1_0));
  const struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE __THE_0_g2_0 = __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_alloc(TYPE_fn_sFRintFE, __THE_1_fn_sFRintFE_copy(__THE_0_test_test2_0));
  __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_free((struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE) __THE_0_g2_0);
  __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE_free((struct __THE_1_union_fn_sFRvoidFEUSfn_sFRintFEUE) __THE_0_g1_0);
}
======= flags =======
======= stdout =======
