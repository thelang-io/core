======= stdin =======
obj Object { a: int }
main {
  a := Object{}
  b := Object{a: 1}

  c := true ? a : b
  d := false ? b : a
  f := false ? a : Object{a: 2}
  e := false ? Object{a: 3} : b
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_Object_0;

struct __THE_1_Object_0 {
  const int32_t __THE_0_a;
};

void *alloc (size_t);
struct __THE_1_Object_0 *__THE_1_Object_0_alloc (int32_t);
struct __THE_1_Object_0 *__THE_1_Object_0_copy (const struct __THE_1_Object_0 *);
void __THE_1_Object_0_free (struct __THE_1_Object_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_Object_0 *__THE_1_Object_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Object_0 *r = alloc(sizeof(struct __THE_1_Object_0));
  struct __THE_1_Object_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Object_0));
  return r;
}
struct __THE_1_Object_0 *__THE_1_Object_0_copy (const struct __THE_1_Object_0 *n) {
  struct __THE_1_Object_0 *r = alloc(sizeof(struct __THE_1_Object_0));
  struct __THE_1_Object_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Object_0));
  return r;
}
void __THE_1_Object_0_free (struct __THE_1_Object_0 *n) {
  free(n);
}

int main () {
  const struct __THE_1_Object_0 *__THE_0_a_0 = __THE_1_Object_0_alloc(0);
  const struct __THE_1_Object_0 *__THE_0_b_0 = __THE_1_Object_0_alloc(1);
  const struct __THE_1_Object_0 *__THE_0_c_0 = true ? __THE_1_Object_0_copy(__THE_0_a_0) : __THE_1_Object_0_copy(__THE_0_b_0);
  const struct __THE_1_Object_0 *__THE_0_d_0 = false ? __THE_1_Object_0_copy(__THE_0_b_0) : __THE_1_Object_0_copy(__THE_0_a_0);
  const struct __THE_1_Object_0 *__THE_0_f_0 = false ? __THE_1_Object_0_copy(__THE_0_a_0) : __THE_1_Object_0_alloc(2);
  const struct __THE_1_Object_0 *__THE_0_e_0 = false ? __THE_1_Object_0_alloc(3) : __THE_1_Object_0_copy(__THE_0_b_0);
  __THE_1_Object_0_free((struct __THE_1_Object_0 *) __THE_0_e_0);
  __THE_1_Object_0_free((struct __THE_1_Object_0 *) __THE_0_f_0);
  __THE_1_Object_0_free((struct __THE_1_Object_0 *) __THE_0_d_0);
  __THE_1_Object_0_free((struct __THE_1_Object_0 *) __THE_0_c_0);
  __THE_1_Object_0_free((struct __THE_1_Object_0 *) __THE_0_b_0);
  __THE_1_Object_0_free((struct __THE_1_Object_0 *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
