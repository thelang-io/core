======= stdin =======
main {
  fs_realpathSync("test" + path_SEP + "fixtures" + path_SEP + "throw-builtin-fs-realpath-sync-non-existing.txt")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
char *str_cstr (const struct str);
void str_free (struct str);
struct str fs_realpathSync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct str fs_realpathSync (struct str s) {
  char *c = str_cstr(s);
  char *d = NULL;
  #ifdef THE_OS_WINDOWS
    HANDLE h = CreateFile(c, 0, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS, NULL);
    if (h == INVALID_HANDLE_VALUE) {
      fprintf(stderr, "Error: failed to create handle to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    size_t l = GetFinalPathNameByHandle(h, NULL, 0, VOLUME_NAME_DOS);
    if (l == 0) {
      fprintf(stderr, "Error: not enough memory to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    char *r = alloc(l + 1);
    if (GetFinalPathNameByHandle(h, r, MAX_PATH, VOLUME_NAME_DOS) == 0) {
      fprintf(stderr, "Error: failed to get real path by handle of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    if (memcmp(r, "\\\\?\\UNC\\", 8) == 0) {
      l -= 6;
      d = alloc(l);
      memcpy(d, &r[6], l);
      d[0] = '\\';
    } else if (memcmp(r, "\\\\?\\", 4) == 0) {
      l -= 4;
      d = alloc(l);
      memcpy(d, &r[4], l);
    }
    free(r);
    CloseHandle(h);
  #else
    d = realpath(c, NULL);
    size_t l = d == NULL ? 0 : strlen(d);
  #endif
  if (d == NULL) {
    fprintf(stderr, "Error: failed to get real path of file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free((struct str) s);
  return (struct str) {d, l};
}

int main () {
  str_free((struct str) fs_realpathSync(str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "throw-builtin-fs-realpath-sync-non-existing.txt")));
}
======= flags =======
======= stderr =======
Error: failed {{ (to create handle )? }}to get real path of file `test/fixtures/throw-builtin-fs-realpath-sync-non-existing.txt`
