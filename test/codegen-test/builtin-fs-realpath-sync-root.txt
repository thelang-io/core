======= stdin =======
main {
  fs_realpathSync("test/fixtures/test.txt")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct str fs_realpathSync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str fs_realpathSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  char *d = realpath(c, NULL);
  if (d == NULL) {
    fprintf(stderr, "Error: failed to get real path of file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free((struct str) s);
  return (struct str) {d, strlen(d)};
}

int main () {
  str_free((struct str) fs_realpathSync(str_alloc("test/fixtures/test.txt")));
}
======= flags =======
======= stdout =======
