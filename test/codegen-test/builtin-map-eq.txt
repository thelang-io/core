======= stdin =======
obj TestObj { a: int }

main {
  intA := 1;
  intB := 2;
  optIntA: int? = intA;
  optIntB: int? = nil;

  print("{ \"key1\": [1, 2], \"key2\": [3, 4] } == { \"key1\": [1, 2], \"key2\": [3, 4] }:", { "key1": [1, 2], "key2": [3, 4] } == { "key1": [1, 2], "key2": [3, 4] })
  print("{ \"key1\": [1, 2], \"key2\": [3, 4] } != { \"key1\": [0, 1], \"key2\": [2, 3] }:", { "key1": [1, 2], "key2": [3, 4] } != { "key1": [0, 1], "key2": [2, 3] })
  print("{ \"key\": true } == { \"key\": true }:", { "key": true } == { "key": true })
  print("{ \"key\": false } != { \"key\": true }:", { "key": false } != { "key": true })
  print("{ \"key\": 'a' } == { \"key\": 'a' }:", { "key": 'a' } == { "key": 'a' })
  print("{ \"key\": 'a' } != { \"key\": 'c' }:", { "key": 'a' } != { "key": 'c' })
  print("{ \"key\": 3.14 } == { \"key\": 3.14 }:", { "key": 3.14 } == { "key": 3.14 })
  print("{ \"key\": 3.14 } != { \"key\": 2.16 }:", { "key": 3.14 } != { "key": 2.16 })
  print("{ \"key\": 1 } == { \"key\": 1 }:", { "key": 1 } == { "key": 1 })
  print("{ \"key\": 1 } != { \"key\": 0 }:", { "key": 1 } != { "key": 0 })
  print("{ \"key\": TestObj{a: 1} } == { \"key\": TestObj{a: 1} }:", { "key": TestObj{a: 1} } == { "key": TestObj{a: 1} })
  print("{ \"key\": TestObj{a: 1} } != { \"key\": TestObj{a: 2} }:", { "key": TestObj{a: 1} } != { "key": TestObj{a: 2} })
  print("{ \"key\": optIntA } == { \"key\": optIntA }:", { "key": optIntA } == { "key": optIntA })
  print("{ \"key\": optIntA } != { \"key\": optIntB }:", { "key": optIntA } != { "key": optIntB })
  print("{ \"key\": ref intA } == { \"key\": ref intA }:", { "key": ref intA } == { "key": ref intA })
  print("{ \"key\": ref intA } != { \"key\": ref intB }:", { "key": ref intA } != { "key": ref intB })
  print("{ \"key\": \"test1\" } == { \"key\": \"test1\" }:", { "key": "test1" } == { "key": "test1" })
  print("{ \"key\": \"test1\" } != { \"key\": \"test2\" }:", { "key": "test1" } != { "key": "test2" })
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_pair_strMSstrME;
struct __THE_1_map_strMSstrME;
struct __THE_1_TestObj_0;
struct __THE_1_array_int;
struct __THE_1_pair_strMSarray_intME;
struct __THE_1_map_strMSarray_intME;
struct __THE_1_pair_strMSboolME;
struct __THE_1_map_strMSboolME;
struct __THE_1_pair_strMScharME;
struct __THE_1_map_strMScharME;
struct __THE_1_pair_strMSfloatME;
struct __THE_1_map_strMSfloatME;
struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_pair_strMSTestObjME;
struct __THE_1_map_strMSTestObjME;
struct __THE_1_pair_strMSopt_intME;
struct __THE_1_map_strMSopt_intME;
struct __THE_1_pair_strMSref_intME;
struct __THE_1_map_strMSref_intME;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_pair_strMSstrME {
  struct str f;
  struct str s;
};
struct __THE_1_map_strMSstrME {
  struct __THE_1_pair_strMSstrME *d;
  size_t c;
  size_t l;
};
struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_pair_strMSarray_intME {
  struct str f;
  struct __THE_1_array_int s;
};
struct __THE_1_map_strMSarray_intME {
  struct __THE_1_pair_strMSarray_intME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSboolME {
  struct str f;
  bool s;
};
struct __THE_1_map_strMSboolME {
  struct __THE_1_pair_strMSboolME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMScharME {
  struct str f;
  char s;
};
struct __THE_1_map_strMScharME {
  struct __THE_1_pair_strMScharME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSfloatME {
  struct str f;
  double s;
};
struct __THE_1_map_strMSfloatME {
  struct __THE_1_pair_strMSfloatME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSTestObjME {
  struct str f;
  struct __THE_1_TestObj_0 *s;
};
struct __THE_1_map_strMSTestObjME {
  struct __THE_1_pair_strMSTestObjME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSopt_intME {
  struct str f;
  int32_t *s;
};
struct __THE_1_map_strMSopt_intME {
  struct __THE_1_pair_strMSopt_intME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSref_intME {
  struct str f;
  int32_t *s;
};
struct __THE_1_map_strMSref_intME {
  struct __THE_1_pair_strMSref_intME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_alloc (int, ...);
bool __THE_1_map_strMSstrME_eq (struct __THE_1_map_strMSstrME, struct __THE_1_map_strMSstrME);
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME);
bool __THE_1_map_strMSstrME_ne (struct __THE_1_map_strMSstrME, struct __THE_1_map_strMSstrME);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
bool __THE_1_TestObj_0_ne (struct __THE_1_TestObj_0 *, struct __THE_1_TestObj_0 *);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
bool __THE_1_array_int_ne (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_map_strMSarray_intME __THE_1_map_strMSarray_intME_alloc (int, ...);
bool __THE_1_map_strMSarray_intME_eq (struct __THE_1_map_strMSarray_intME, struct __THE_1_map_strMSarray_intME);
void __THE_1_map_strMSarray_intME_free (struct __THE_1_map_strMSarray_intME);
bool __THE_1_map_strMSarray_intME_ne (struct __THE_1_map_strMSarray_intME, struct __THE_1_map_strMSarray_intME);
struct __THE_1_map_strMSboolME __THE_1_map_strMSboolME_alloc (int, ...);
bool __THE_1_map_strMSboolME_eq (struct __THE_1_map_strMSboolME, struct __THE_1_map_strMSboolME);
void __THE_1_map_strMSboolME_free (struct __THE_1_map_strMSboolME);
bool __THE_1_map_strMSboolME_ne (struct __THE_1_map_strMSboolME, struct __THE_1_map_strMSboolME);
struct __THE_1_map_strMScharME __THE_1_map_strMScharME_alloc (int, ...);
bool __THE_1_map_strMScharME_eq (struct __THE_1_map_strMScharME, struct __THE_1_map_strMScharME);
void __THE_1_map_strMScharME_free (struct __THE_1_map_strMScharME);
bool __THE_1_map_strMScharME_ne (struct __THE_1_map_strMScharME, struct __THE_1_map_strMScharME);
struct __THE_1_map_strMSfloatME __THE_1_map_strMSfloatME_alloc (int, ...);
bool __THE_1_map_strMSfloatME_eq (struct __THE_1_map_strMSfloatME, struct __THE_1_map_strMSfloatME);
void __THE_1_map_strMSfloatME_free (struct __THE_1_map_strMSfloatME);
bool __THE_1_map_strMSfloatME_ne (struct __THE_1_map_strMSfloatME, struct __THE_1_map_strMSfloatME);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
bool __THE_1_map_strMSintME_eq (struct __THE_1_map_strMSintME, struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
bool __THE_1_map_strMSintME_ne (struct __THE_1_map_strMSintME, struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSTestObjME __THE_1_map_strMSTestObjME_alloc (int, ...);
bool __THE_1_map_strMSTestObjME_eq (struct __THE_1_map_strMSTestObjME, struct __THE_1_map_strMSTestObjME);
void __THE_1_map_strMSTestObjME_free (struct __THE_1_map_strMSTestObjME);
bool __THE_1_map_strMSTestObjME_ne (struct __THE_1_map_strMSTestObjME, struct __THE_1_map_strMSTestObjME);
struct __THE_1_map_strMSopt_intME __THE_1_map_strMSopt_intME_alloc (int, ...);
bool __THE_1_map_strMSopt_intME_eq (struct __THE_1_map_strMSopt_intME, struct __THE_1_map_strMSopt_intME);
void __THE_1_map_strMSopt_intME_free (struct __THE_1_map_strMSopt_intME);
bool __THE_1_map_strMSopt_intME_ne (struct __THE_1_map_strMSopt_intME, struct __THE_1_map_strMSopt_intME);
struct __THE_1_map_strMSref_intME __THE_1_map_strMSref_intME_alloc (int, ...);
bool __THE_1_map_strMSref_intME_eq (struct __THE_1_map_strMSref_intME, struct __THE_1_map_strMSref_intME);
void __THE_1_map_strMSref_intME_free (struct __THE_1_map_strMSref_intME);
bool __THE_1_map_strMSref_intME_ne (struct __THE_1_map_strMSref_intME, struct __THE_1_map_strMSref_intME);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_alloc (int x, ...) {
  struct __THE_1_pair_strMSstrME *d = alloc(x * sizeof(struct __THE_1_pair_strMSstrME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSstrME) {va_arg(args, struct str), va_arg(args, struct str)};
  va_end(args);
  return (struct __THE_1_map_strMSstrME) {d, x, x};
}
bool __THE_1_map_strMSstrME_eq (struct __THE_1_map_strMSstrME n1, struct __THE_1_map_strMSstrME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || str_ne_str(str_copy(n1.d[i].s), str_copy(n2.d[i].s))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n1);
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n2);
  return r;
}
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    str_free((struct str) n.d[i].s);
  }
  free(n.d);
}
bool __THE_1_map_strMSstrME_ne (struct __THE_1_map_strMSstrME n1, struct __THE_1_map_strMSstrME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || str_ne_str(str_copy(n1.d[i].s), str_copy(n2.d[i].s))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n1);
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n2);
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *n) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *n) {
  free(n);
}
bool __THE_1_TestObj_0_ne (struct __THE_1_TestObj_0 *n1, struct __THE_1_TestObj_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n1);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n2);
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
bool __THE_1_array_int_ne (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
struct __THE_1_map_strMSarray_intME __THE_1_map_strMSarray_intME_alloc (int x, ...) {
  struct __THE_1_pair_strMSarray_intME *d = alloc(x * sizeof(struct __THE_1_pair_strMSarray_intME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSarray_intME) {va_arg(args, struct str), va_arg(args, struct __THE_1_array_int)};
  va_end(args);
  return (struct __THE_1_map_strMSarray_intME) {d, x, x};
}
bool __THE_1_map_strMSarray_intME_eq (struct __THE_1_map_strMSarray_intME n1, struct __THE_1_map_strMSarray_intME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || __THE_1_array_int_ne(__THE_1_array_int_copy(n1.d[i].s), __THE_1_array_int_copy(n2.d[i].s))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) n1);
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) n2);
  return r;
}
void __THE_1_map_strMSarray_intME_free (struct __THE_1_map_strMSarray_intME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_array_int_free((struct __THE_1_array_int) n.d[i].s);
  }
  free(n.d);
}
bool __THE_1_map_strMSarray_intME_ne (struct __THE_1_map_strMSarray_intME n1, struct __THE_1_map_strMSarray_intME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || __THE_1_array_int_ne(__THE_1_array_int_copy(n1.d[i].s), __THE_1_array_int_copy(n2.d[i].s))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) n1);
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) n2);
  return r;
}
struct __THE_1_map_strMSboolME __THE_1_map_strMSboolME_alloc (int x, ...) {
  struct __THE_1_pair_strMSboolME *d = alloc(x * sizeof(struct __THE_1_pair_strMSboolME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSboolME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSboolME) {d, x, x};
}
bool __THE_1_map_strMSboolME_eq (struct __THE_1_map_strMSboolME n1, struct __THE_1_map_strMSboolME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) n1);
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) n2);
  return r;
}
void __THE_1_map_strMSboolME_free (struct __THE_1_map_strMSboolME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
bool __THE_1_map_strMSboolME_ne (struct __THE_1_map_strMSboolME n1, struct __THE_1_map_strMSboolME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) n1);
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) n2);
  return r;
}
struct __THE_1_map_strMScharME __THE_1_map_strMScharME_alloc (int x, ...) {
  struct __THE_1_pair_strMScharME *d = alloc(x * sizeof(struct __THE_1_pair_strMScharME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMScharME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMScharME) {d, x, x};
}
bool __THE_1_map_strMScharME_eq (struct __THE_1_map_strMScharME n1, struct __THE_1_map_strMScharME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) n1);
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) n2);
  return r;
}
void __THE_1_map_strMScharME_free (struct __THE_1_map_strMScharME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
bool __THE_1_map_strMScharME_ne (struct __THE_1_map_strMScharME n1, struct __THE_1_map_strMScharME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) n1);
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) n2);
  return r;
}
struct __THE_1_map_strMSfloatME __THE_1_map_strMSfloatME_alloc (int x, ...) {
  struct __THE_1_pair_strMSfloatME *d = alloc(x * sizeof(struct __THE_1_pair_strMSfloatME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSfloatME) {va_arg(args, struct str), va_arg(args, double)};
  va_end(args);
  return (struct __THE_1_map_strMSfloatME) {d, x, x};
}
bool __THE_1_map_strMSfloatME_eq (struct __THE_1_map_strMSfloatME n1, struct __THE_1_map_strMSfloatME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) n1);
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) n2);
  return r;
}
void __THE_1_map_strMSfloatME_free (struct __THE_1_map_strMSfloatME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
bool __THE_1_map_strMSfloatME_ne (struct __THE_1_map_strMSfloatME n1, struct __THE_1_map_strMSfloatME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) n1);
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) n2);
  return r;
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
bool __THE_1_map_strMSintME_eq (struct __THE_1_map_strMSintME n1, struct __THE_1_map_strMSintME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n1);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n2);
  return r;
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
bool __THE_1_map_strMSintME_ne (struct __THE_1_map_strMSintME n1, struct __THE_1_map_strMSintME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n1);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n2);
  return r;
}
struct __THE_1_map_strMSTestObjME __THE_1_map_strMSTestObjME_alloc (int x, ...) {
  struct __THE_1_pair_strMSTestObjME *d = alloc(x * sizeof(struct __THE_1_pair_strMSTestObjME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSTestObjME) {va_arg(args, struct str), va_arg(args, struct __THE_1_TestObj_0 *)};
  va_end(args);
  return (struct __THE_1_map_strMSTestObjME) {d, x, x};
}
bool __THE_1_map_strMSTestObjME_eq (struct __THE_1_map_strMSTestObjME n1, struct __THE_1_map_strMSTestObjME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || __THE_1_TestObj_0_ne(__THE_1_TestObj_0_copy(n1.d[i].s), __THE_1_TestObj_0_copy(n2.d[i].s))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSTestObjME_free((struct __THE_1_map_strMSTestObjME) n1);
  __THE_1_map_strMSTestObjME_free((struct __THE_1_map_strMSTestObjME) n2);
  return r;
}
void __THE_1_map_strMSTestObjME_free (struct __THE_1_map_strMSTestObjME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n.d[i].s);
  }
  free(n.d);
}
bool __THE_1_map_strMSTestObjME_ne (struct __THE_1_map_strMSTestObjME n1, struct __THE_1_map_strMSTestObjME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || __THE_1_TestObj_0_ne(__THE_1_TestObj_0_copy(n1.d[i].s), __THE_1_TestObj_0_copy(n2.d[i].s))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSTestObjME_free((struct __THE_1_map_strMSTestObjME) n1);
  __THE_1_map_strMSTestObjME_free((struct __THE_1_map_strMSTestObjME) n2);
  return r;
}
struct __THE_1_map_strMSopt_intME __THE_1_map_strMSopt_intME_alloc (int x, ...) {
  struct __THE_1_pair_strMSopt_intME *d = alloc(x * sizeof(struct __THE_1_pair_strMSopt_intME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSopt_intME) {va_arg(args, struct str), va_arg(args, int32_t *)};
  va_end(args);
  return (struct __THE_1_map_strMSopt_intME) {d, x, x};
}
bool __THE_1_map_strMSopt_intME_eq (struct __THE_1_map_strMSopt_intME n1, struct __THE_1_map_strMSopt_intME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || __THE_1_opt_int_ne(__THE_1_opt_int_copy(n1.d[i].s), __THE_1_opt_int_copy(n2.d[i].s))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSopt_intME_free((struct __THE_1_map_strMSopt_intME) n1);
  __THE_1_map_strMSopt_intME_free((struct __THE_1_map_strMSopt_intME) n2);
  return r;
}
void __THE_1_map_strMSopt_intME_free (struct __THE_1_map_strMSopt_intME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_opt_int_free((int32_t *) n.d[i].s);
  }
  free(n.d);
}
bool __THE_1_map_strMSopt_intME_ne (struct __THE_1_map_strMSopt_intME n1, struct __THE_1_map_strMSopt_intME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || __THE_1_opt_int_ne(__THE_1_opt_int_copy(n1.d[i].s), __THE_1_opt_int_copy(n2.d[i].s))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSopt_intME_free((struct __THE_1_map_strMSopt_intME) n1);
  __THE_1_map_strMSopt_intME_free((struct __THE_1_map_strMSopt_intME) n2);
  return r;
}
struct __THE_1_map_strMSref_intME __THE_1_map_strMSref_intME_alloc (int x, ...) {
  struct __THE_1_pair_strMSref_intME *d = alloc(x * sizeof(struct __THE_1_pair_strMSref_intME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSref_intME) {va_arg(args, struct str), va_arg(args, int32_t *)};
  va_end(args);
  return (struct __THE_1_map_strMSref_intME) {d, x, x};
}
bool __THE_1_map_strMSref_intME_eq (struct __THE_1_map_strMSref_intME n1, struct __THE_1_map_strMSref_intME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSref_intME_free((struct __THE_1_map_strMSref_intME) n1);
  __THE_1_map_strMSref_intME_free((struct __THE_1_map_strMSref_intME) n2);
  return r;
}
void __THE_1_map_strMSref_intME_free (struct __THE_1_map_strMSref_intME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
bool __THE_1_map_strMSref_intME_ne (struct __THE_1_map_strMSref_intME n1, struct __THE_1_map_strMSref_intME n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = true;
        break;
      }
    }
  }
  __THE_1_map_strMSref_intME_free((struct __THE_1_map_strMSref_intME) n1);
  __THE_1_map_strMSref_intME_free((struct __THE_1_map_strMSref_intME) n2);
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const int32_t __THE_0_intA_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int32_t __THE_0_intB_0 = 2;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int32_t *__THE_0_optIntA_0 = __THE_1_opt_int_alloc(__THE_0_intA_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  const int32_t *__THE_0_optIntB_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 9, 3), print(stdout, "zztz", "{ \"key1\": [1, 2], \"key2\": [3, 4] } == { \"key1\": [1, 2], \"key2\": [3, 4] }:", " ", __THE_1_map_strMSarray_intME_eq(__THE_1_map_strMSarray_intME_alloc(2, str_alloc("key1"), __THE_1_array_int_alloc(2, 1, 2), str_alloc("key2"), __THE_1_array_int_alloc(2, 3, 4)), __THE_1_map_strMSarray_intME_alloc(2, str_alloc("key1"), __THE_1_array_int_alloc(2, 1, 2), str_alloc("key2"), __THE_1_array_int_alloc(2, 3, 4))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 10, 3), print(stdout, "zztz", "{ \"key1\": [1, 2], \"key2\": [3, 4] } != { \"key1\": [0, 1], \"key2\": [2, 3] }:", " ", __THE_1_map_strMSarray_intME_ne(__THE_1_map_strMSarray_intME_alloc(2, str_alloc("key1"), __THE_1_array_int_alloc(2, 1, 2), str_alloc("key2"), __THE_1_array_int_alloc(2, 3, 4)), __THE_1_map_strMSarray_intME_alloc(2, str_alloc("key1"), __THE_1_array_int_alloc(2, 0, 1), str_alloc("key2"), __THE_1_array_int_alloc(2, 2, 3))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 11, 3), print(stdout, "zztz", "{ \"key\": true } == { \"key\": true }:", " ", __THE_1_map_strMSboolME_eq(__THE_1_map_strMSboolME_alloc(1, str_alloc("key"), true), __THE_1_map_strMSboolME_alloc(1, str_alloc("key"), true)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 12, 3), print(stdout, "zztz", "{ \"key\": false } != { \"key\": true }:", " ", __THE_1_map_strMSboolME_ne(__THE_1_map_strMSboolME_alloc(1, str_alloc("key"), false), __THE_1_map_strMSboolME_alloc(1, str_alloc("key"), true)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 13, 3), print(stdout, "zztz", "{ \"key\": 'a' } == { \"key\": 'a' }:", " ", __THE_1_map_strMScharME_eq(__THE_1_map_strMScharME_alloc(1, str_alloc("key"), 'a'), __THE_1_map_strMScharME_alloc(1, str_alloc("key"), 'a')), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 14, 3), print(stdout, "zztz", "{ \"key\": 'a' } != { \"key\": 'c' }:", " ", __THE_1_map_strMScharME_ne(__THE_1_map_strMScharME_alloc(1, str_alloc("key"), 'a'), __THE_1_map_strMScharME_alloc(1, str_alloc("key"), 'c')), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 15, 3), print(stdout, "zztz", "{ \"key\": 3.14 } == { \"key\": 3.14 }:", " ", __THE_1_map_strMSfloatME_eq(__THE_1_map_strMSfloatME_alloc(1, str_alloc("key"), 3.14), __THE_1_map_strMSfloatME_alloc(1, str_alloc("key"), 3.14)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 16, 3), print(stdout, "zztz", "{ \"key\": 3.14 } != { \"key\": 2.16 }:", " ", __THE_1_map_strMSfloatME_ne(__THE_1_map_strMSfloatME_alloc(1, str_alloc("key"), 3.14), __THE_1_map_strMSfloatME_alloc(1, str_alloc("key"), 2.16)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 17, 3), print(stdout, "zztz", "{ \"key\": 1 } == { \"key\": 1 }:", " ", __THE_1_map_strMSintME_eq(__THE_1_map_strMSintME_alloc(1, str_alloc("key"), 1), __THE_1_map_strMSintME_alloc(1, str_alloc("key"), 1)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 18, 3), print(stdout, "zztz", "{ \"key\": 1 } != { \"key\": 0 }:", " ", __THE_1_map_strMSintME_ne(__THE_1_map_strMSintME_alloc(1, str_alloc("key"), 1), __THE_1_map_strMSintME_alloc(1, str_alloc("key"), 0)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 19, 3), print(stdout, "zztz", "{ \"key\": TestObj{a: 1} } == { \"key\": TestObj{a: 1} }:", " ", __THE_1_map_strMSTestObjME_eq(__THE_1_map_strMSTestObjME_alloc(1, str_alloc("key"), __THE_1_TestObj_0_alloc(1)), __THE_1_map_strMSTestObjME_alloc(1, str_alloc("key"), __THE_1_TestObj_0_alloc(1))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 20, 3), print(stdout, "zztz", "{ \"key\": TestObj{a: 1} } != { \"key\": TestObj{a: 2} }:", " ", __THE_1_map_strMSTestObjME_ne(__THE_1_map_strMSTestObjME_alloc(1, str_alloc("key"), __THE_1_TestObj_0_alloc(1)), __THE_1_map_strMSTestObjME_alloc(1, str_alloc("key"), __THE_1_TestObj_0_alloc(2))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 21, 3), print(stdout, "zztz", "{ \"key\": optIntA } == { \"key\": optIntA }:", " ", __THE_1_map_strMSopt_intME_eq(__THE_1_map_strMSopt_intME_alloc(1, str_alloc("key"), __THE_1_opt_int_copy(__THE_0_optIntA_0)), __THE_1_map_strMSopt_intME_alloc(1, str_alloc("key"), __THE_1_opt_int_copy(__THE_0_optIntA_0))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 22, 3), print(stdout, "zztz", "{ \"key\": optIntA } != { \"key\": optIntB }:", " ", __THE_1_map_strMSopt_intME_ne(__THE_1_map_strMSopt_intME_alloc(1, str_alloc("key"), __THE_1_opt_int_copy(__THE_0_optIntA_0)), __THE_1_map_strMSopt_intME_alloc(1, str_alloc("key"), __THE_1_opt_int_copy(__THE_0_optIntB_0))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 23, 3), print(stdout, "zztz", "{ \"key\": ref intA } == { \"key\": ref intA }:", " ", __THE_1_map_strMSref_intME_eq(__THE_1_map_strMSref_intME_alloc(1, str_alloc("key"), &__THE_0_intA_0), __THE_1_map_strMSref_intME_alloc(1, str_alloc("key"), &__THE_0_intA_0)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 24, 3), print(stdout, "zztz", "{ \"key\": ref intA } != { \"key\": ref intB }:", " ", __THE_1_map_strMSref_intME_ne(__THE_1_map_strMSref_intME_alloc(1, str_alloc("key"), &__THE_0_intA_0), __THE_1_map_strMSref_intME_alloc(1, str_alloc("key"), &__THE_0_intB_0)), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 25, 3), print(stdout, "zztz", "{ \"key\": \"test1\" } == { \"key\": \"test1\" }:", " ", __THE_1_map_strMSstrME_eq(__THE_1_map_strMSstrME_alloc(1, str_alloc("key"), str_alloc("test1")), __THE_1_map_strMSstrME_alloc(1, str_alloc("key"), str_alloc("test1"))), THE_EOL));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  (error_stack_pos(&err_state, 26, 3), print(stdout, "zztz", "{ \"key\": \"test1\" } != { \"key\": \"test2\" }:", " ", __THE_1_map_strMSstrME_ne(__THE_1_map_strMSstrME_alloc(1, str_alloc("key"), str_alloc("test1")), __THE_1_map_strMSstrME_alloc(1, str_alloc("key"), str_alloc("test2"))), THE_EOL));
L3:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntB_0);
L2:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntA_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
{ "key1": [1, 2], "key2": [3, 4] } == { "key1": [1, 2], "key2": [3, 4] }: true
{ "key1": [1, 2], "key2": [3, 4] } != { "key1": [0, 1], "key2": [2, 3] }: true
{ "key": true } == { "key": true }: true
{ "key": false } != { "key": true }: true
{ "key": 'a' } == { "key": 'a' }: true
{ "key": 'a' } != { "key": 'c' }: true
{ "key": 3.14 } == { "key": 3.14 }: true
{ "key": 3.14 } != { "key": 2.16 }: true
{ "key": 1 } == { "key": 1 }: true
{ "key": 1 } != { "key": 0 }: true
{ "key": TestObj{a: 1} } == { "key": TestObj{a: 1} }: true
{ "key": TestObj{a: 1} } != { "key": TestObj{a: 2} }: true
{ "key": optIntA } == { "key": optIntA }: true
{ "key": optIntA } != { "key": optIntB }: true
{ "key": ref intA } == { "key": ref intA }: true
{ "key": ref intA } != { "key": ref intB }: true
{ "key": "test1" } == { "key": "test1" }: true
{ "key": "test1" } != { "key": "test2" }: true
