======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}

main {
  mut a := Test.Red

  fn test (newA: Test) {
    a = newA
  }

  test(.Green)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_mainSDtest_0X;

struct __THE_1_fn$1000 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  enum __THE_1_Test_0 n0;
};
struct __THE_1_mainSDtest_0X {
  enum __THE_1_Test_0 *__THE_0_a_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_mainSDtest_0 (void *, void *);
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest_0 (void *px, void *pp) {
  struct __THE_1_fn$1000P *p = pp;
  struct __THE_1_mainSDtest_0X *x = px;
  enum __THE_1_Test_0 *__THE_0_a_0 = x->__THE_0_a_0;
  const enum __THE_1_Test_0 __THE_0_newA_0 = p->n0;
  *__THE_0_a_0 = __THE_0_newA_0;
  free(pp);
}
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest_0X);
  struct __THE_1_mainSDtest_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest_0;
  n->x = r;
  n->l = l;
}

int main () {
  enum __THE_1_Test_0 __THE_0_a_0 = __THE_0_TestSDRed_0;
  const struct __THE_1_fn$1000 __THE_0_mainSDtest_0;
  __THE_1_mainSDtest_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest_0, (struct __THE_1_mainSDtest_0X) {&__THE_0_a_0});
  __THE_0_mainSDtest_0.f(__THE_0_mainSDtest_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_TestSDGreen_0}, sizeof(struct __THE_1_fn$1000P)));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest_0);
}
======= flags =======
======= stdout =======
