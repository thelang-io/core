======= stdin =======
obj Test1 {
  mut t: Test2
  i: int
}

obj Test2 {
  t1: char
  t2: float
  mut t3: int
}

main {
  z := Test2{t1: 'z', t2: 3.14, t3: -1}

  mut a := Test1{
    t: Test2{
      t1: 'z',
      t2: 3.14,
      t3: -1
    },
    i: 2
  }

  a.t = Test2{t1: 'a', t2: 2.16, t3: 1}
  a.t.t3 = 0

  b := Test1{t: z, i: 2}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;

struct __THE_1_Test1_0 {
  struct __THE_1_Test2_0 *__THE_0_t;
  const int32_t __THE_0_i;
};
struct __THE_1_Test2_0 {
  const char __THE_0_t1;
  const double __THE_0_t2;
  int32_t __THE_0_t3;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *, int32_t);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (char, double, int32_t);
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_realloc (struct __THE_1_Test2_0 *, struct __THE_1_Test2_0 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *__THE_0_t, int32_t __THE_0_i) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_t, __THE_0_i};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n->__THE_0_t);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (char __THE_0_t1, double __THE_0_t2, int32_t __THE_0_t3) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_t1, __THE_0_t2, __THE_0_t3};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *n) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {n->__THE_0_t1, n->__THE_0_t2, n->__THE_0_t3};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_realloc (struct __THE_1_Test2_0 *n1, struct __THE_1_Test2_0 *n2) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n1);
  return n2;
}

int main () {
  const struct __THE_1_Test2_0 *__THE_0_z_0 = __THE_1_Test2_0_alloc('z', 3.14, -1);
  struct __THE_1_Test1_0 *__THE_0_a_0 = __THE_1_Test1_0_alloc(__THE_1_Test2_0_alloc('z', 3.14, -1), 2);
  __THE_0_a_0->__THE_0_t = __THE_1_Test2_0_realloc(__THE_0_a_0->__THE_0_t, __THE_1_Test2_0_alloc('a', 2.16, 1));
  __THE_0_a_0->__THE_0_t->__THE_0_t3 = 0;
  const struct __THE_1_Test1_0 *__THE_0_b_0 = __THE_1_Test1_0_alloc(__THE_1_Test2_0_copy(__THE_0_z_0), 2);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_b_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_a_0);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_z_0);
}
======= flags =======
======= stdout =======
