======= stdin =======
main {
  g1: int[str] | str[str] = { "key1": 1, "key2": 2, "key3": 3 }
  g2: int[str] | str[str] = { "key1": "", "key2": "test1", "key3": "test2" }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_map_strMSintME 1
#define TYPE_map_strMSstrME 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_pair_strMSstrME;
struct __THE_1_map_strMSstrME;
struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE;

struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSstrME {
  struct str f;
  struct str s;
};
struct __THE_1_map_strMSstrME {
  struct __THE_1_pair_strMSstrME *d;
  size_t c;
  size_t l;
};
struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE {
  int t;
  union {
    struct __THE_1_map_strMSintME v1;
    struct __THE_1_map_strMSstrME v2;
  };
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_alloc (int, ...);
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME);
struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_alloc (int, ...);
void __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_free (struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_alloc (int x, ...) {
  struct __THE_1_pair_strMSstrME *d = alloc(x * sizeof(struct __THE_1_pair_strMSstrME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSstrME) {va_arg(args, struct str), va_arg(args, struct str)};
  va_end(args);
  return (struct __THE_1_map_strMSstrME) {d, x, x};
}
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    str_free((struct str) n.d[i].s);
  }
  free(n.d);
}
struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_alloc (int t, ...) {
  struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_map_strMSintME) r.v1 = va_arg(args, struct __THE_1_map_strMSintME);
  if (t == TYPE_map_strMSstrME) r.v2 = va_arg(args, struct __THE_1_map_strMSstrME);
  va_end(args);
  return r;
}
void __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_free (struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE n) {
  if (n.t == TYPE_map_strMSintME) __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n.v1);
  if (n.t == TYPE_map_strMSstrME) __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n.v2);
}

int main () {
  const struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE __THE_0_g1_0 = __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_alloc(TYPE_map_strMSintME, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3));
  const struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE __THE_0_g2_0 = __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_alloc(TYPE_map_strMSstrME, __THE_1_map_strMSstrME_alloc(3, str_alloc("key1"), str_alloc(""), str_alloc("key2"), str_alloc("test1"), str_alloc("key3"), str_alloc("test2")));
  __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_free((struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE) __THE_0_g2_0);
  __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE_free((struct __THE_1_union_map_strMSintMEUSmap_strMSstrMEUE) __THE_0_g1_0);
}
======= flags =======
======= stdout =======
