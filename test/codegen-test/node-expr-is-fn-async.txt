======= stdin =======
async fn test () {}

main {
  a: any = test
  if a is async () -> void { "async () -> void " + a.str(); }

  b: any = 3.14
  if b is async () -> void { "async () -> void " + b.str(); }

  c: (async () -> void) | float = test
  if c is async () -> void { "async () -> void " + c.str(); }
  else { "float " + c.str(); }

  d: (async () -> void) | float = 3.14
  if d is async () -> void { "async () -> void " + d.str(); }
  else { "float " + d.str(); }

  mut e: any = test
  if (e = test) is async () -> void { "async () -> void " + e.str(); }

  mut f: any = 3.14
  if (f = 3.14) is async () -> void { "async () -> void " + f.str(); }

  mut g: (async () -> void) | float = test
  if (g = test) is async () -> void { "async () -> void " + g.str(); }
  else { "float " + g.str(); }

  mut h: (async () -> void) | float = 3.14
  if (h = 3.14) is async () -> void { "async () -> void " + h.str(); }
  else { "float " + h.str(); }

  (a is async () -> void) ? "async () -> void " + a.str() : "any";
  (b is async () -> void) ? "async () -> void " + b.str() : "any";
  (c is async () -> void) ? "async () -> void " + c.str() : "float " + c.str();
  (d is async () -> void) ? "async () -> void " + d.str() : "float " + d.str();
  ((e = test) is async () -> void) ? "async () -> void " + e.str() : "any";
  ((f = 3.14) is async () -> void) ? "async () -> void " + f.str() : "any";
  ((g = test) is async () -> void) ? "async () -> void " + g.str() : "float " + g.str();
  ((h = 3.14) is async () -> void) ? "async () -> void " + h.str() : "float " + h.str();
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

#define TYPE_fn$1000 2
#define TYPE_float 3

struct threadpool_cond;
struct threadpool_mutex;
struct threadpool;
struct threadpool_job;
struct threadpool_thread;

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};
typedef struct threadpool_cond {
  #ifdef THE_OS_WINDOWS
    CONDITION_VARIABLE v;
  #else
    pthread_cond_t v;
  #endif
} threadpool_cond_t;
typedef struct threadpool_mutex {
  #ifdef THE_OS_WINDOWS
    CRITICAL_SECTION v;
  #else
    pthread_mutex_t v;
  #endif
} threadpool_mutex_t;
typedef struct threadpool {
  bool active;
  struct threadpool_cond cond1;
  struct threadpool_cond cond2;
  struct threadpool_job *jobs;
  struct threadpool_job *jobs_tail;
  struct threadpool_mutex lock1;
  struct threadpool_mutex lock2;
  struct threadpool_mutex lock3;
  struct threadpool_thread *threads;
  int working_threads;
  int alive_threads;
} threadpool_t;
typedef void (*threadpool_func_t) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
typedef struct threadpool_job {
  struct threadpool_job *parent;
  threadpool_func_t func;
  void *ctx;
  void *params;
  void *ret;
  int step;
  unsigned char init;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  #ifdef THE_OS_WINDOWS
    HANDLE id;
  #else
    pthread_t id;
  #endif
  struct threadpool *tp;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn$1000;
struct __THE_1_any_fn$1000;
struct __THE_1_any_float;
struct __THE_1_union_fn$1000USfloatUE;

struct __THE_1_fn$1000 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_any_fn$1000 {
  struct __THE_1_fn$1000 d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_union_fn$1000USfloatUE {
  int t;
  union {
    struct __THE_1_fn$1000 v2;
    double v3;
  };
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str float_str (double);
struct str str_alloc (const char *);
void str_free (struct str);
void threadpool_cond_signal (threadpool_cond_t *);
void threadpool_insert (threadpool_t *, threadpool_job_t *);
void threadpool_job_deinit (threadpool_job_t *);
void threadpool_mutex_lock (threadpool_mutex_t *);
void threadpool_mutex_unlock (threadpool_mutex_t *);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct str __THE_1_fn$1000_str (struct __THE_1_fn$1000);
void __THE_1_test_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
struct any __THE_1_any_fn$1000_alloc (struct __THE_1_fn$1000);
struct any __THE_1_any_fn$1000_copy (const struct any);
void __THE_1_any_fn$1000_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct __THE_1_union_fn$1000USfloatUE __THE_1_union_fn$1000USfloatUE_alloc (int, ...);
void __THE_1_union_fn$1000USfloatUE_free (struct __THE_1_union_fn$1000USfloatUE);
struct __THE_1_union_fn$1000USfloatUE __THE_1_union_fn$1000USfloatUE_realloc (struct __THE_1_union_fn$1000USfloatUE, struct __THE_1_union_fn$1000USfloatUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void threadpool_cond_signal (threadpool_cond_t *self) {
  #ifdef THE_OS_WINDOWS
    WakeConditionVariable(&self->v);
  #else
    pthread_cond_signal(&self->v);
  #endif
}
void threadpool_insert (threadpool_t *self, threadpool_job_t *job) {
  threadpool_mutex_lock(&self->lock2);
  if (self->jobs == NULL) {
    self->jobs = job;
    self->jobs_tail = job;
  } else {
    self->jobs_tail->next = job;
    self->jobs_tail = self->jobs_tail->next;
  }
  threadpool_mutex_lock(&self->lock3);
  threadpool_cond_signal(&self->cond2);
  threadpool_mutex_unlock(&self->lock3);
  threadpool_mutex_unlock(&self->lock2);
}
void threadpool_job_deinit (threadpool_job_t *self) {
  if (self->ctx != NULL) free(self->ctx);
  free(self);
}
void threadpool_mutex_lock (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    EnterCriticalSection(&self->v);
  #else
    pthread_mutex_lock(&self->v);
  #endif
}
void threadpool_mutex_unlock (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    LeaveCriticalSection(&self->v);
  #else
    pthread_mutex_unlock(&self->v);
  #endif
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct str __THE_1_fn$1000_str (struct __THE_1_fn$1000 n) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n);
  return str_alloc("[Function]");
}
void __THE_1_test_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  if (job->parent != NULL) threadpool_insert(tp, job->parent);
  threadpool_job_deinit(job);
}
struct any __THE_1_any_fn$1000_alloc (struct __THE_1_fn$1000 d) {
  size_t l = sizeof(struct __THE_1_any_fn$1000);
  struct __THE_1_any_fn$1000 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_fn$1000, r, l, &__THE_1_any_fn$1000_copy, &__THE_1_any_fn$1000_free};
}
struct any __THE_1_any_fn$1000_copy (const struct any n) {
  struct __THE_1_any_fn$1000 *o = n.d;
  struct __THE_1_any_fn$1000 *r = alloc(n.l);
  r->d = __THE_1_fn$1000_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_fn$1000_free (struct any _n) {
  struct __THE_1_any_fn$1000 *n = _n.d;
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n->d);
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct __THE_1_union_fn$1000USfloatUE __THE_1_union_fn$1000USfloatUE_alloc (int t, ...) {
  struct __THE_1_union_fn$1000USfloatUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_fn$1000) r.v2 = va_arg(args, struct __THE_1_fn$1000);
  if (t == TYPE_float) r.v3 = va_arg(args, double);
  va_end(args);
  return r;
}
void __THE_1_union_fn$1000USfloatUE_free (struct __THE_1_union_fn$1000USfloatUE n) {
  if (n.t == TYPE_fn$1000) __THE_1_fn$1000_free((struct __THE_1_fn$1000) n.v2);
}
struct __THE_1_union_fn$1000USfloatUE __THE_1_union_fn$1000USfloatUE_realloc (struct __THE_1_union_fn$1000USfloatUE n1, struct __THE_1_union_fn$1000USfloatUE n2) {
  __THE_1_union_fn$1000USfloatUE_free((struct __THE_1_union_fn$1000USfloatUE) n1);
  return n2;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test_0 = (struct __THE_1_fn$1000) {&__THE_1_test_0, NULL, 0};
  const struct any __THE_0_a_0 = __THE_1_any_fn$1000_alloc(__THE_1_fn$1000_copy(__THE_0_test_0));
  if (__THE_0_a_0.t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_a_0.d)->d))));
  }
  const struct any __THE_0_b_0 = __THE_1_any_float_alloc(3.14);
  if (__THE_0_b_0.t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_b_0.d)->d))));
  }
  const struct __THE_1_union_fn$1000USfloatUE __THE_0_c_0 = __THE_1_union_fn$1000USfloatUE_alloc(TYPE_fn$1000, __THE_1_fn$1000_copy(__THE_0_test_0));
  if (__THE_0_c_0.t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_c_0.v2))));
  } else {
    str_free((struct str) cstr_concat_str("float ", float_str(__THE_0_c_0.v3)));
  }
  const struct __THE_1_union_fn$1000USfloatUE __THE_0_d_0 = __THE_1_union_fn$1000USfloatUE_alloc(TYPE_float, 3.14);
  if (__THE_0_d_0.t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_d_0.v2))));
  } else {
    str_free((struct str) cstr_concat_str("float ", float_str(__THE_0_d_0.v3)));
  }
  struct any __THE_0_e_0 = __THE_1_any_fn$1000_alloc(__THE_1_fn$1000_copy(__THE_0_test_0));
  if ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_fn$1000_alloc(__THE_1_fn$1000_copy(__THE_0_test_0)))).t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_e_0.d)->d))));
  }
  struct any __THE_0_f_0 = __THE_1_any_float_alloc(3.14);
  if ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_f_0.d)->d))));
  }
  struct __THE_1_union_fn$1000USfloatUE __THE_0_g_0 = __THE_1_union_fn$1000USfloatUE_alloc(TYPE_fn$1000, __THE_1_fn$1000_copy(__THE_0_test_0));
  if ((__THE_0_g_0 = __THE_1_union_fn$1000USfloatUE_realloc(__THE_0_g_0, __THE_1_union_fn$1000USfloatUE_alloc(TYPE_fn$1000, __THE_1_fn$1000_copy(__THE_0_test_0)))).t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_g_0.v2))));
  } else {
    str_free((struct str) cstr_concat_str("float ", float_str(__THE_0_g_0.v3)));
  }
  struct __THE_1_union_fn$1000USfloatUE __THE_0_h_0 = __THE_1_union_fn$1000USfloatUE_alloc(TYPE_float, 3.14);
  if ((__THE_0_h_0 = __THE_1_union_fn$1000USfloatUE_realloc(__THE_0_h_0, __THE_1_union_fn$1000USfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_fn$1000) {
    str_free((struct str) cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_h_0.v2))));
  } else {
    str_free((struct str) cstr_concat_str("float ", float_str(__THE_0_h_0.v3)));
  }
  str_free((struct str) ((__THE_0_a_0.t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_a_0.d)->d))) : str_alloc("any")));
  str_free((struct str) ((__THE_0_b_0.t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_b_0.d)->d))) : str_alloc("any")));
  str_free((struct str) ((__THE_0_c_0.t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_c_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_c_0.v3))));
  str_free((struct str) ((__THE_0_d_0.t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_d_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_d_0.v3))));
  str_free((struct str) (((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_fn$1000_alloc(__THE_1_fn$1000_copy(__THE_0_test_0)))).t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_e_0.d)->d))) : str_alloc("any")));
  str_free((struct str) (((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(((struct __THE_1_any_fn$1000 *) __THE_0_f_0.d)->d))) : str_alloc("any")));
  str_free((struct str) (((__THE_0_g_0 = __THE_1_union_fn$1000USfloatUE_realloc(__THE_0_g_0, __THE_1_union_fn$1000USfloatUE_alloc(TYPE_fn$1000, __THE_1_fn$1000_copy(__THE_0_test_0)))).t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_g_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_g_0.v3))));
  str_free((struct str) (((__THE_0_h_0 = __THE_1_union_fn$1000USfloatUE_realloc(__THE_0_h_0, __THE_1_union_fn$1000USfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_fn$1000) ? cstr_concat_str("async () -> void ", __THE_1_fn$1000_str(__THE_1_fn$1000_copy(__THE_0_h_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_h_0.v3))));
  __THE_1_union_fn$1000USfloatUE_free((struct __THE_1_union_fn$1000USfloatUE) __THE_0_h_0);
  __THE_1_union_fn$1000USfloatUE_free((struct __THE_1_union_fn$1000USfloatUE) __THE_0_g_0);
  any_free((struct any) __THE_0_f_0);
  any_free((struct any) __THE_0_e_0);
  __THE_1_union_fn$1000USfloatUE_free((struct __THE_1_union_fn$1000USfloatUE) __THE_0_d_0);
  __THE_1_union_fn$1000USfloatUE_free((struct __THE_1_union_fn$1000USfloatUE) __THE_0_c_0);
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
U:-pthread
======= stdout =======
