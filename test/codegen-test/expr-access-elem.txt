======= stdin =======
main {
  test1 := "string1"
  test2 := "string" + test1[6].str()

  fn test3 () {
    test4 := "string" + test1[6].str()
  }

  test3()
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

void *alloc (size_t);
struct str char_str (char);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
struct str cstr_concat_str (const char *c, struct str s) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
void str_free (struct str s) {
  free(s.c);
}

struct __THE_1_fn$0;
struct __THE_1_mainSDtest3_0X;

struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest3_0X {
  const struct str *__THE_0_test1_0;
};

void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_mainSDtest3_0 (void *);
void __THE_1_mainSDtest3_0_alloc (struct __THE_1_fn$0 *, struct __THE_1_mainSDtest3_0X);

void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_mainSDtest3_0 (void *px) {
  struct __THE_1_mainSDtest3_0X *x = px;
  const struct str *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct str __THE_0_test4_0 = cstr_concat_str("string", char_str((*__THE_0_test1_0).c[6]));
  str_free((struct str) __THE_0_test4_0);
}
void __THE_1_mainSDtest3_0_alloc (struct __THE_1_fn$0 *n, struct __THE_1_mainSDtest3_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest3_0X);
  struct __THE_1_mainSDtest3_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest3_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct str __THE_0_test1_0 = str_alloc("string1");
  const struct str __THE_0_test2_0 = cstr_concat_str("string", char_str(__THE_0_test1_0.c[6]));
  const struct __THE_1_fn$0 __THE_0_mainSDtest3_0;
  __THE_1_mainSDtest3_0_alloc((struct __THE_1_fn$0 *) &__THE_0_mainSDtest3_0, (struct __THE_1_mainSDtest3_0X) {&__THE_0_test1_0});
  __THE_0_mainSDtest3_0.f(__THE_0_mainSDtest3_0.x);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_mainSDtest3_0);
  str_free((struct str) __THE_0_test2_0);
  str_free((struct str) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
