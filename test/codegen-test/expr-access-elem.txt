======= stdin =======
main {
  test1 := "string1"
  test2 := "string" + test1[6].str()

  fn test3 () {
    test4 := "string" + test1[6].str()
  }

  test3()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;
struct __THE_1_mainSDtest3_0X;

struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest3_0X {
  const struct str *__THE_0_test1_0;
};

void *alloc (size_t);
struct str char_str (char);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
void str_free (struct str);
char *str_at (struct str, int32_t);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_mainSDtest3_0 (void *);
void __THE_1_mainSDtest3_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest3_0X);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
char *str_at (struct str s, int32_t i) {
  if ((i >= 0 && i >= s.l) || (i < 0 && i < -((int32_t) s.l))) {
    fprintf(stderr, "Error: index %" PRId32 " out of string bounds" THE_EOL, i);
    exit(EXIT_FAILURE);
  }
  return i < 0 ? &s.d[s.l + i] : &s.d[i];
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest3_0 (void *px) {
  struct __THE_1_mainSDtest3_0X *x = px;
  const struct str *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct str __THE_0_test4_0 = cstr_concat_str("string", char_str(*str_at(*__THE_0_test1_0, 6)));
  str_free((struct str) __THE_0_test4_0);
}
void __THE_1_mainSDtest3_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest3_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest3_0X);
  struct __THE_1_mainSDtest3_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest3_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct str __THE_0_test1_0 = str_alloc("string1");
  const struct str __THE_0_test2_0 = cstr_concat_str("string", char_str(*str_at(__THE_0_test1_0, 6)));
  const struct __THE_1_fn$1000 __THE_0_mainSDtest3_0;
  __THE_1_mainSDtest3_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest3_0, (struct __THE_1_mainSDtest3_0X) {&__THE_0_test1_0});
  __THE_0_mainSDtest3_0.f(__THE_0_mainSDtest3_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest3_0);
  str_free((struct str) __THE_0_test2_0);
  str_free((struct str) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
