======= stdin =======
main {
  print("0".toF64())
  print("1".toF64())
  print("10".toF64())
  print("100".toF64())
  print("179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448".toF64())
  print("-0".toF64())
  print("-1".toF64())
  print("-10".toF64())
  print("-100".toF64())
  print("-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448".toF64())

  print("0.0".toF64())
  print("0.1".toF64())
  print("0.10".toF64())
  print("0.100".toF64())
  print("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507".toF64())
  print("-0.0".toF64())
  print("-0.1".toF64())
  print("-0.10".toF64())
  print("-0.100".toF64())
  print("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507".toF64())

  print("0e0".toF64())
  print("1E+1".toF64())
  print("10.E+10".toF64())
  print("100.E+100".toF64())
  print("1.79769E+308".toF64())
  print("1e-1".toF64())
  print("10.e-10".toF64())
  print("100.e-100".toF64())
  print("2.22507e-307".toF64())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <float.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
double str_toF64 (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
double str_toF64 (struct str self) {
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  double r = strtod(c, &e);
  if (errno == ERANGE || r < -DBL_MAX || DBL_MAX < r) {
    fprintf(stderr, "Error: value `%s` out of range" THE_EOL, c);
    exit(EXIT_FAILURE);
  } else if (errno != 0 || e == c || *e != 0) {
    fprintf(stderr, "Error: value `%s` has invalid syntax" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  free(self.d);
  return r;
}

int main () {
  print(stdout, "gz", str_toF64(str_alloc("0")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("1")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("10")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("100")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-0")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-1")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-10")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-100")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("0.0")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("0.1")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("0.10")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("0.100")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-0.0")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-0.1")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-0.10")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-0.100")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("0e0")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("1E+1")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("10.E+10")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("100.E+100")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("1.79769E+308")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("1e-1")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("10.e-10")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("100.e-100")), THE_EOL);
  print(stdout, "gz", str_toF64(str_alloc("2.22507e-307")), THE_EOL);
}
======= flags =======
======= stdout =======
0.000000
1.000000
10.000000
100.000000
179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448.000000
-0.000000
-1.000000
-10.000000
-100.000000
-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448.000000
0.000000
0.100000
0.100000
0.100000
0.000000
-0.000000
-0.100000
-0.100000
-0.100000
-0.000000
0.000000
10.000000
100000000000.000000
999999999999999977049513265245336628446842719924150006129995974731993452180789911303261294481511546880.000000
179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448.000000
0.100000
0.000000
0.000000
0.000000
