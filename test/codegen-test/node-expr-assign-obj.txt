======= stdin =======
obj Test1 {
  mut a: int
}

obj Test2 {
  mut a: Test1
}

main {
  mut o1 := Test1{a: 1}
  o1.a = 2
  o1 = Test1{a: 3}

  mut o2 := Test2{a: o1}
  o2.a = Test1{a: 4}
  o2 = Test2{a: Test1{a: 5}}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;

struct __THE_1_Test1_0 {
  int32_t __THE_0_a;
};
struct __THE_1_Test2_0 {
  struct __THE_1_Test1_0 *__THE_0_a;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t);
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_realloc (struct __THE_1_Test1_0 *, struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_realloc (struct __THE_1_Test2_0 *, struct __THE_1_Test2_0 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *n) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  free(n);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_realloc (struct __THE_1_Test1_0 *n1, struct __THE_1_Test1_0 *n2) {
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) n1);
  return n2;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *__THE_0_a) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) n->__THE_0_a);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_realloc (struct __THE_1_Test2_0 *n1, struct __THE_1_Test2_0 *n2) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n1);
  return n2;
}

int main () {
  struct __THE_1_Test1_0 *__THE_0_o1_0 = __THE_1_Test1_0_alloc(1);
  __THE_0_o1_0->__THE_0_a = 2;
  __THE_0_o1_0 = __THE_1_Test1_0_realloc(__THE_0_o1_0, __THE_1_Test1_0_alloc(3));
  struct __THE_1_Test2_0 *__THE_0_o2_0 = __THE_1_Test2_0_alloc(__THE_1_Test1_0_copy(__THE_0_o1_0));
  __THE_0_o2_0->__THE_0_a = __THE_1_Test1_0_realloc(__THE_0_o2_0->__THE_0_a, __THE_1_Test1_0_alloc(4));
  __THE_0_o2_0 = __THE_1_Test2_0_realloc(__THE_0_o2_0, __THE_1_Test2_0_alloc(__THE_1_Test1_0_alloc(5)));
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_o2_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_o1_0);
}
======= flags =======
======= stdout =======
