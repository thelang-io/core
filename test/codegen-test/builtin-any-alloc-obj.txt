======= stdin =======
obj TestObj {
  a: int
}

main {
  testObj := TestObj{a: 1}
  anyRawObj: any = TestObj{a: 1}
  anyObj: any = testObj
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_TestObj_0 1

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};

struct __THE_1_TestObj_0;
struct any_TestObj_0;

struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct any_TestObj_0 {
  struct __THE_1_TestObj_0 *d;
};

void *alloc (size_t);
void any_free (struct any);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
struct any any_TestObj_0_alloc (struct __THE_1_TestObj_0 *);
struct any any_TestObj_0_copy (const struct any);
void any_TestObj_0_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *o) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {o->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *o) {
  free(o);
}
struct any any_TestObj_0_alloc (struct __THE_1_TestObj_0 *d) {
  size_t l = sizeof(struct any_TestObj_0);
  struct any_TestObj_0 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_TestObj_0, r, l, &any_TestObj_0_copy, &any_TestObj_0_free};
}
struct any any_TestObj_0_copy (const struct any n) {
  struct any_TestObj_0 *o = n.d;
  struct any_TestObj_0 *r = alloc(n.l);
  r->d = __THE_1_TestObj_0_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_TestObj_0_free (struct any _n) {
  struct any_TestObj_0 *n = _n.d;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n->d);
  free(n);
}

int main () {
  const struct __THE_1_TestObj_0 *__THE_0_testObj_0 = __THE_1_TestObj_0_alloc(1);
  const struct any __THE_0_anyRawObj_0 = any_TestObj_0_alloc(__THE_1_TestObj_0_alloc(1));
  const struct any __THE_0_anyObj_0 = any_TestObj_0_alloc(__THE_1_TestObj_0_copy(__THE_0_testObj_0));
  any_free((struct any) __THE_0_anyObj_0);
  any_free((struct any) __THE_0_anyRawObj_0);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) __THE_0_testObj_0);
}
======= flags =======
======= stdout =======
