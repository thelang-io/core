======= stdin =======
obj TestObj {
  a: int
}

fn testFn () {}

main {
  testAny: any
  testArrayInt := [1]
  testBool := true
  testByte: byte = 1
  testChar := 'a'
  testF32: f32 = 3.14
  testF64: f64 = 3.14
  testFloat := 3.14
  testI8: i8 = 1
  testI16: i16 = 1
  testI32: i32 = 1
  testI64: i64 = 1
  testInt := 1
  testObj := TestObj{a: 1}
  testRefInt := ref testInt
  testStr := "test"
  testU8: u8 = 10
  testU16: u16 = 10
  testU32: u32 = 10
  testU64: u64 = 10

  optAny: any?
  optArrayInt: int[]?
  optBool: bool?
  optByte: byte?
  optChar: char?
  optF32: f32?
  optF64: f64?
  optFloat: float?
  optFn: (fn () void)?
  optI8: i8?
  optI16: i16?
  optI32: i32?
  optI64: i64?
  optInt: int?
  optObj: TestObj?
  optRefInt: (ref int)?
  optStr: str?
  optU8: u8?
  optU16: u16?
  optU32: u32?
  optU64: u64?

  optAnyNilInit: any? = nil
  optArrayIntNilInit: int[]? = nil
  optBoolNilInit: bool? = nil
  optByteNilInit: byte? = nil
  optCharNilInit: char? = nil
  optF32NilInit: f32? = nil
  optF64NilInit: f64? = nil
  optFloatNilInit: float? = nil
  optFnNilInit: (fn () void)? = nil
  optI8NilInit: i8? = nil
  optI16NilInit: i16? = nil
  optI32NilInit: i32? = nil
  optI64NilInit: i64? = nil
  optIntNilInit: int? = nil
  optObjNilInit: TestObj? = nil
  optRefIntNilInit: (ref int)? = nil
  optStrNilInit: str? = nil
  optU8NilInit: u8? = nil
  optU16NilInit: u16? = nil
  optU32NilInit: u32? = nil
  optU64NilInit: u64? = nil

  optAnyValInit: any? = 1
  optArrayIntValInit: int[]? = [1]
  optBoolValInit: bool? = true
  optByteValInit: byte? = 1
  optCharValInit: char? = 'a'
  optF32ValInit: f32? = 3.14
  optF64ValInit: f64? = 3.14
  optFloatValInit: float? = 3.14
  optI8ValInit: i8? = 1
  optI16ValInit: i16? = 1
  optI32ValInit: i32? = 1
  optI64ValInit: i64? = 1
  optIntValInit: int? = 1
  optIntFromRefValInit: int? = ref testInt
  optObjValInit: TestObj? = TestObj{a: 1}
  optRefIntValInit: (ref int)? = ref testInt
  optStrValInit: str? = "test"
  optU8ValInit: u8? = 10
  optU16ValInit: u16? = 10
  optU32ValInit: u32? = 10
  optU64ValInit: u64? = 10

  optAnyValCopy: any? = testAny
  optArrayIntValCopy: int[]? = testArrayInt
  optBoolValCopy: bool? = testBool
  optByteValCopy: byte? = testByte
  optCharValCopy: char? = testChar
  optF32ValCopy: f32? = testF32
  optF64ValCopy: f64? = testF64
  optFloatValCopy: float? = testFloat
  optFnValCopy: (fn () void)? = testFn
  optI8ValCopy: i8? = testI8
  optI16ValCopy: i16? = testI16
  optI32ValCopy: i32? = testI32
  optI64ValCopy: i64? = testI64
  optIntValCopy: int? = testInt
  optIntFromRefValCopy: int? = testRefInt
  optObjValCopy: TestObj? = testObj
  optRefIntValCopy: (ref int)? = testRefInt
  optStrValCopy: str? = testStr
  optU8ValCopy: u8? = testU8
  optU16ValCopy: u16? = testU16
  optU32ValCopy: u32? = testU32
  optU64ValCopy: u64? = testU64
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_ANY_int 1

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct str {
  char *d;
  size_t l;
};

struct __THE_1_TestObj_0;
struct __THE_1_fn$0;
struct __THE_1_array_int;
struct any_int;

struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct any_int {
  int32_t d;
};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_testFn_0 (void *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct any *__THE_1_opt_any_alloc (struct any);
void __THE_1_opt_any_free (struct any *);
struct __THE_1_array_int *__THE_1_opt_array_int_alloc (struct __THE_1_array_int);
void __THE_1_opt_array_int_free (struct __THE_1_array_int *);
bool *__THE_1_opt_bool_alloc (bool);
void __THE_1_opt_bool_free (bool *);
unsigned char *__THE_1_opt_byte_alloc (unsigned char);
void __THE_1_opt_byte_free (unsigned char *);
char *__THE_1_opt_char_alloc (char);
void __THE_1_opt_char_free (char *);
float *__THE_1_opt_f32_alloc (float);
void __THE_1_opt_f32_free (float *);
double *__THE_1_opt_f64_alloc (double);
void __THE_1_opt_f64_free (double *);
double *__THE_1_opt_float_alloc (double);
void __THE_1_opt_float_free (double *);
struct __THE_1_fn$0 *__THE_1_opt_fn$0_alloc (struct __THE_1_fn$0);
void __THE_1_opt_fn$0_free (struct __THE_1_fn$0 *);
int8_t *__THE_1_opt_i8_alloc (int8_t);
void __THE_1_opt_i8_free (int8_t *);
int16_t *__THE_1_opt_i16_alloc (int16_t);
void __THE_1_opt_i16_free (int16_t *);
int32_t *__THE_1_opt_i32_alloc (int32_t);
void __THE_1_opt_i32_free (int32_t *);
int64_t *__THE_1_opt_i64_alloc (int64_t);
void __THE_1_opt_i64_free (int64_t *);
int32_t *__THE_1_opt_int_alloc (int32_t);
void __THE_1_opt_int_free (int32_t *);
struct __THE_1_TestObj_0 **__THE_1_opt_TestObj_alloc (struct __THE_1_TestObj_0 *);
void __THE_1_opt_TestObj_free (struct __THE_1_TestObj_0 **);
int32_t **__THE_1_opt_ref_int_alloc (int32_t *);
void __THE_1_opt_ref_int_free (int32_t **);
struct str *__THE_1_opt_str_alloc (struct str);
void __THE_1_opt_str_free (struct str *);
uint8_t *__THE_1_opt_u8_alloc (uint8_t);
void __THE_1_opt_u8_free (uint8_t *);
uint16_t *__THE_1_opt_u16_alloc (uint16_t);
void __THE_1_opt_u16_free (uint16_t *);
uint32_t *__THE_1_opt_u32_alloc (uint32_t);
void __THE_1_opt_u32_free (uint32_t *);
uint64_t *__THE_1_opt_u64_alloc (uint64_t);
void __THE_1_opt_u64_free (uint64_t *);
struct any any_int_alloc (int32_t);
struct any any_int_copy (const struct any);
void any_int_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *o) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {o->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *o) {
  free(o);
}
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_testFn_0 (void *px) {
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct any *__THE_1_opt_any_alloc (struct any n) {
  struct any *r = alloc(sizeof(struct any));
  *r = n;
  return r;
}
void __THE_1_opt_any_free (struct any *n) {
  if (n == NULL) return;
  any_free((struct any) *n);
  free(n);
}
struct __THE_1_array_int *__THE_1_opt_array_int_alloc (struct __THE_1_array_int n) {
  struct __THE_1_array_int *r = alloc(sizeof(struct __THE_1_array_int));
  *r = n;
  return r;
}
void __THE_1_opt_array_int_free (struct __THE_1_array_int *n) {
  if (n == NULL) return;
  __THE_1_array_int_free((struct __THE_1_array_int) *n);
  free(n);
}
bool *__THE_1_opt_bool_alloc (bool n) {
  bool *r = alloc(sizeof(bool));
  *r = n;
  return r;
}
void __THE_1_opt_bool_free (bool *n) {
  if (n == NULL) return;
  free(n);
}
unsigned char *__THE_1_opt_byte_alloc (unsigned char n) {
  unsigned char *r = alloc(sizeof(unsigned char));
  *r = n;
  return r;
}
void __THE_1_opt_byte_free (unsigned char *n) {
  if (n == NULL) return;
  free(n);
}
char *__THE_1_opt_char_alloc (char n) {
  char *r = alloc(sizeof(char));
  *r = n;
  return r;
}
void __THE_1_opt_char_free (char *n) {
  if (n == NULL) return;
  free(n);
}
float *__THE_1_opt_f32_alloc (float n) {
  float *r = alloc(sizeof(float));
  *r = n;
  return r;
}
void __THE_1_opt_f32_free (float *n) {
  if (n == NULL) return;
  free(n);
}
double *__THE_1_opt_f64_alloc (double n) {
  double *r = alloc(sizeof(double));
  *r = n;
  return r;
}
void __THE_1_opt_f64_free (double *n) {
  if (n == NULL) return;
  free(n);
}
double *__THE_1_opt_float_alloc (double n) {
  double *r = alloc(sizeof(double));
  *r = n;
  return r;
}
void __THE_1_opt_float_free (double *n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_fn$0 *__THE_1_opt_fn$0_alloc (struct __THE_1_fn$0 n) {
  struct __THE_1_fn$0 *r = alloc(sizeof(struct __THE_1_fn$0));
  *r = n;
  return r;
}
void __THE_1_opt_fn$0_free (struct __THE_1_fn$0 *n) {
  if (n == NULL) return;
  __THE_1_fn$0_free((struct __THE_1_fn$0) *n);
  free(n);
}
int8_t *__THE_1_opt_i8_alloc (int8_t n) {
  int8_t *r = alloc(sizeof(int8_t));
  *r = n;
  return r;
}
void __THE_1_opt_i8_free (int8_t *n) {
  if (n == NULL) return;
  free(n);
}
int16_t *__THE_1_opt_i16_alloc (int16_t n) {
  int16_t *r = alloc(sizeof(int16_t));
  *r = n;
  return r;
}
void __THE_1_opt_i16_free (int16_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t *__THE_1_opt_i32_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
void __THE_1_opt_i32_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
int64_t *__THE_1_opt_i64_alloc (int64_t n) {
  int64_t *r = alloc(sizeof(int64_t));
  *r = n;
  return r;
}
void __THE_1_opt_i64_free (int64_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_TestObj_0 **__THE_1_opt_TestObj_alloc (struct __THE_1_TestObj_0 *n) {
  struct __THE_1_TestObj_0 **r = alloc(sizeof(struct __THE_1_TestObj_0 *));
  *r = n;
  return r;
}
void __THE_1_opt_TestObj_free (struct __THE_1_TestObj_0 **n) {
  if (n == NULL) return;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) *n);
  free(n);
}
int32_t **__THE_1_opt_ref_int_alloc (int32_t *n) {
  int32_t **r = alloc(sizeof(int32_t *));
  *r = n;
  return r;
}
void __THE_1_opt_ref_int_free (int32_t **n) {
  if (n == NULL) return;
  free(n);
}
struct str *__THE_1_opt_str_alloc (struct str n) {
  struct str *r = alloc(sizeof(struct str));
  *r = n;
  return r;
}
void __THE_1_opt_str_free (struct str *n) {
  if (n == NULL) return;
  str_free((struct str) *n);
  free(n);
}
uint8_t *__THE_1_opt_u8_alloc (uint8_t n) {
  uint8_t *r = alloc(sizeof(uint8_t));
  *r = n;
  return r;
}
void __THE_1_opt_u8_free (uint8_t *n) {
  if (n == NULL) return;
  free(n);
}
uint16_t *__THE_1_opt_u16_alloc (uint16_t n) {
  uint16_t *r = alloc(sizeof(uint16_t));
  *r = n;
  return r;
}
void __THE_1_opt_u16_free (uint16_t *n) {
  if (n == NULL) return;
  free(n);
}
uint32_t *__THE_1_opt_u32_alloc (uint32_t n) {
  uint32_t *r = alloc(sizeof(uint32_t));
  *r = n;
  return r;
}
void __THE_1_opt_u32_free (uint32_t *n) {
  if (n == NULL) return;
  free(n);
}
uint64_t *__THE_1_opt_u64_alloc (uint64_t n) {
  uint64_t *r = alloc(sizeof(uint64_t));
  *r = n;
  return r;
}
void __THE_1_opt_u64_free (uint64_t *n) {
  if (n == NULL) return;
  free(n);
}
struct any any_int_alloc (int32_t d) {
  size_t l = sizeof(struct any_int);
  struct any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ANY_int, r, l, &any_int_copy, &any_int_free};
}
struct any any_int_copy (const struct any n) {
  struct any_int *o = n.d;
  struct any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_int_free (struct any _n) {
  struct any_int *n = _n.d;
  free(n);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testFn_0 = (struct __THE_1_fn$0) {&__THE_1_testFn_0, NULL, 0};
  const struct any __THE_0_testAny_0 = {0, NULL, 0, NULL, NULL};
  const struct __THE_1_array_int __THE_0_testArrayInt_0 = __THE_1_array_int_alloc(1, 1);
  const bool __THE_0_testBool_0 = true;
  const unsigned char __THE_0_testByte_0 = 1;
  const char __THE_0_testChar_0 = 'a';
  const float __THE_0_testF32_0 = 3.14;
  const double __THE_0_testF64_0 = 3.14;
  const double __THE_0_testFloat_0 = 3.14;
  const int8_t __THE_0_testI8_0 = 1;
  const int16_t __THE_0_testI16_0 = 1;
  const int32_t __THE_0_testI32_0 = 1;
  const int64_t __THE_0_testI64_0 = 1;
  const int32_t __THE_0_testInt_0 = 1;
  const struct __THE_1_TestObj_0 *__THE_0_testObj_0 = __THE_1_TestObj_0_alloc(1);
  const int32_t *__THE_0_testRefInt_0 = &__THE_0_testInt_0;
  const struct str __THE_0_testStr_0 = str_alloc("test");
  const uint8_t __THE_0_testU8_0 = 10;
  const uint16_t __THE_0_testU16_0 = 10;
  const uint32_t __THE_0_testU32_0 = 10;
  const uint64_t __THE_0_testU64_0 = 10;
  const struct any *__THE_0_optAny_0 = NULL;
  const struct __THE_1_array_int *__THE_0_optArrayInt_0 = NULL;
  const bool *__THE_0_optBool_0 = NULL;
  const unsigned char *__THE_0_optByte_0 = NULL;
  const char *__THE_0_optChar_0 = NULL;
  const float *__THE_0_optF32_0 = NULL;
  const double *__THE_0_optF64_0 = NULL;
  const double *__THE_0_optFloat_0 = NULL;
  const struct __THE_1_fn$0 *__THE_0_optFn_0 = NULL;
  const int8_t *__THE_0_optI8_0 = NULL;
  const int16_t *__THE_0_optI16_0 = NULL;
  const int32_t *__THE_0_optI32_0 = NULL;
  const int64_t *__THE_0_optI64_0 = NULL;
  const int32_t *__THE_0_optInt_0 = NULL;
  const struct __THE_1_TestObj_0 **__THE_0_optObj_0 = NULL;
  const int32_t **__THE_0_optRefInt_0 = NULL;
  const struct str *__THE_0_optStr_0 = NULL;
  const uint8_t *__THE_0_optU8_0 = NULL;
  const uint16_t *__THE_0_optU16_0 = NULL;
  const uint32_t *__THE_0_optU32_0 = NULL;
  const uint64_t *__THE_0_optU64_0 = NULL;
  const struct any *__THE_0_optAnyNilInit_0 = NULL;
  const struct __THE_1_array_int *__THE_0_optArrayIntNilInit_0 = NULL;
  const bool *__THE_0_optBoolNilInit_0 = NULL;
  const unsigned char *__THE_0_optByteNilInit_0 = NULL;
  const char *__THE_0_optCharNilInit_0 = NULL;
  const float *__THE_0_optF32NilInit_0 = NULL;
  const double *__THE_0_optF64NilInit_0 = NULL;
  const double *__THE_0_optFloatNilInit_0 = NULL;
  const struct __THE_1_fn$0 *__THE_0_optFnNilInit_0 = NULL;
  const int8_t *__THE_0_optI8NilInit_0 = NULL;
  const int16_t *__THE_0_optI16NilInit_0 = NULL;
  const int32_t *__THE_0_optI32NilInit_0 = NULL;
  const int64_t *__THE_0_optI64NilInit_0 = NULL;
  const int32_t *__THE_0_optIntNilInit_0 = NULL;
  const struct __THE_1_TestObj_0 **__THE_0_optObjNilInit_0 = NULL;
  const int32_t **__THE_0_optRefIntNilInit_0 = NULL;
  const struct str *__THE_0_optStrNilInit_0 = NULL;
  const uint8_t *__THE_0_optU8NilInit_0 = NULL;
  const uint16_t *__THE_0_optU16NilInit_0 = NULL;
  const uint32_t *__THE_0_optU32NilInit_0 = NULL;
  const uint64_t *__THE_0_optU64NilInit_0 = NULL;
  const struct any *__THE_0_optAnyValInit_0 = __THE_1_opt_any_alloc(any_int_alloc(1));
  const struct __THE_1_array_int *__THE_0_optArrayIntValInit_0 = __THE_1_opt_array_int_alloc(__THE_1_array_int_alloc(1, 1));
  const bool *__THE_0_optBoolValInit_0 = __THE_1_opt_bool_alloc(true);
  const unsigned char *__THE_0_optByteValInit_0 = __THE_1_opt_byte_alloc(1);
  const char *__THE_0_optCharValInit_0 = __THE_1_opt_char_alloc('a');
  const float *__THE_0_optF32ValInit_0 = __THE_1_opt_f32_alloc(3.14);
  const double *__THE_0_optF64ValInit_0 = __THE_1_opt_f64_alloc(3.14);
  const double *__THE_0_optFloatValInit_0 = __THE_1_opt_float_alloc(3.14);
  const int8_t *__THE_0_optI8ValInit_0 = __THE_1_opt_i8_alloc(1);
  const int16_t *__THE_0_optI16ValInit_0 = __THE_1_opt_i16_alloc(1);
  const int32_t *__THE_0_optI32ValInit_0 = __THE_1_opt_i32_alloc(1);
  const int64_t *__THE_0_optI64ValInit_0 = __THE_1_opt_i64_alloc(1);
  const int32_t *__THE_0_optIntValInit_0 = __THE_1_opt_int_alloc(1);
  const int32_t *__THE_0_optIntFromRefValInit_0 = __THE_1_opt_int_alloc(__THE_0_testInt_0);
  const struct __THE_1_TestObj_0 **__THE_0_optObjValInit_0 = __THE_1_opt_TestObj_alloc(__THE_1_TestObj_0_alloc(1));
  const int32_t **__THE_0_optRefIntValInit_0 = __THE_1_opt_ref_int_alloc(&__THE_0_testInt_0);
  const struct str *__THE_0_optStrValInit_0 = __THE_1_opt_str_alloc(str_alloc("test"));
  const uint8_t *__THE_0_optU8ValInit_0 = __THE_1_opt_u8_alloc(10);
  const uint16_t *__THE_0_optU16ValInit_0 = __THE_1_opt_u16_alloc(10);
  const uint32_t *__THE_0_optU32ValInit_0 = __THE_1_opt_u32_alloc(10);
  const uint64_t *__THE_0_optU64ValInit_0 = __THE_1_opt_u64_alloc(10);
  const struct any *__THE_0_optAnyValCopy_0 = __THE_1_opt_any_alloc(any_copy(__THE_0_testAny_0));
  const struct __THE_1_array_int *__THE_0_optArrayIntValCopy_0 = __THE_1_opt_array_int_alloc(__THE_1_array_int_copy(__THE_0_testArrayInt_0));
  const bool *__THE_0_optBoolValCopy_0 = __THE_1_opt_bool_alloc(__THE_0_testBool_0);
  const unsigned char *__THE_0_optByteValCopy_0 = __THE_1_opt_byte_alloc(__THE_0_testByte_0);
  const char *__THE_0_optCharValCopy_0 = __THE_1_opt_char_alloc(__THE_0_testChar_0);
  const float *__THE_0_optF32ValCopy_0 = __THE_1_opt_f32_alloc(__THE_0_testF32_0);
  const double *__THE_0_optF64ValCopy_0 = __THE_1_opt_f64_alloc(__THE_0_testF64_0);
  const double *__THE_0_optFloatValCopy_0 = __THE_1_opt_float_alloc(__THE_0_testFloat_0);
  const struct __THE_1_fn$0 *__THE_0_optFnValCopy_0 = __THE_1_opt_fn$0_alloc(__THE_1_fn$0_copy(__THE_0_testFn_0));
  const int8_t *__THE_0_optI8ValCopy_0 = __THE_1_opt_i8_alloc(__THE_0_testI8_0);
  const int16_t *__THE_0_optI16ValCopy_0 = __THE_1_opt_i16_alloc(__THE_0_testI16_0);
  const int32_t *__THE_0_optI32ValCopy_0 = __THE_1_opt_i32_alloc(__THE_0_testI32_0);
  const int64_t *__THE_0_optI64ValCopy_0 = __THE_1_opt_i64_alloc(__THE_0_testI64_0);
  const int32_t *__THE_0_optIntValCopy_0 = __THE_1_opt_int_alloc(__THE_0_testInt_0);
  const int32_t *__THE_0_optIntFromRefValCopy_0 = __THE_1_opt_int_alloc(*__THE_0_testRefInt_0);
  const struct __THE_1_TestObj_0 **__THE_0_optObjValCopy_0 = __THE_1_opt_TestObj_alloc(__THE_1_TestObj_0_copy(__THE_0_testObj_0));
  const int32_t **__THE_0_optRefIntValCopy_0 = __THE_1_opt_ref_int_alloc(__THE_0_testRefInt_0);
  const struct str *__THE_0_optStrValCopy_0 = __THE_1_opt_str_alloc(str_copy(__THE_0_testStr_0));
  const uint8_t *__THE_0_optU8ValCopy_0 = __THE_1_opt_u8_alloc(__THE_0_testU8_0);
  const uint16_t *__THE_0_optU16ValCopy_0 = __THE_1_opt_u16_alloc(__THE_0_testU16_0);
  const uint32_t *__THE_0_optU32ValCopy_0 = __THE_1_opt_u32_alloc(__THE_0_testU32_0);
  const uint64_t *__THE_0_optU64ValCopy_0 = __THE_1_opt_u64_alloc(__THE_0_testU64_0);
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64ValCopy_0);
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32ValCopy_0);
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16ValCopy_0);
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8ValCopy_0);
  __THE_1_opt_str_free((struct str *) __THE_0_optStrValCopy_0);
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_optRefIntValCopy_0);
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) __THE_0_optObjValCopy_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntFromRefValCopy_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntValCopy_0);
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64ValCopy_0);
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32ValCopy_0);
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16ValCopy_0);
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8ValCopy_0);
  __THE_1_opt_fn$0_free((struct __THE_1_fn$0 *) __THE_0_optFnValCopy_0);
  __THE_1_opt_float_free((double *) __THE_0_optFloatValCopy_0);
  __THE_1_opt_f64_free((double *) __THE_0_optF64ValCopy_0);
  __THE_1_opt_f32_free((float *) __THE_0_optF32ValCopy_0);
  __THE_1_opt_char_free((char *) __THE_0_optCharValCopy_0);
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByteValCopy_0);
  __THE_1_opt_bool_free((bool *) __THE_0_optBoolValCopy_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayIntValCopy_0);
  __THE_1_opt_any_free((struct any *) __THE_0_optAnyValCopy_0);
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64ValInit_0);
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32ValInit_0);
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16ValInit_0);
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8ValInit_0);
  __THE_1_opt_str_free((struct str *) __THE_0_optStrValInit_0);
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_optRefIntValInit_0);
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) __THE_0_optObjValInit_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntFromRefValInit_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntValInit_0);
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64ValInit_0);
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32ValInit_0);
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16ValInit_0);
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8ValInit_0);
  __THE_1_opt_float_free((double *) __THE_0_optFloatValInit_0);
  __THE_1_opt_f64_free((double *) __THE_0_optF64ValInit_0);
  __THE_1_opt_f32_free((float *) __THE_0_optF32ValInit_0);
  __THE_1_opt_char_free((char *) __THE_0_optCharValInit_0);
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByteValInit_0);
  __THE_1_opt_bool_free((bool *) __THE_0_optBoolValInit_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayIntValInit_0);
  __THE_1_opt_any_free((struct any *) __THE_0_optAnyValInit_0);
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64NilInit_0);
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32NilInit_0);
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16NilInit_0);
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8NilInit_0);
  __THE_1_opt_str_free((struct str *) __THE_0_optStrNilInit_0);
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_optRefIntNilInit_0);
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) __THE_0_optObjNilInit_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntNilInit_0);
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64NilInit_0);
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32NilInit_0);
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16NilInit_0);
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8NilInit_0);
  __THE_1_opt_fn$0_free((struct __THE_1_fn$0 *) __THE_0_optFnNilInit_0);
  __THE_1_opt_float_free((double *) __THE_0_optFloatNilInit_0);
  __THE_1_opt_f64_free((double *) __THE_0_optF64NilInit_0);
  __THE_1_opt_f32_free((float *) __THE_0_optF32NilInit_0);
  __THE_1_opt_char_free((char *) __THE_0_optCharNilInit_0);
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByteNilInit_0);
  __THE_1_opt_bool_free((bool *) __THE_0_optBoolNilInit_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayIntNilInit_0);
  __THE_1_opt_any_free((struct any *) __THE_0_optAnyNilInit_0);
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64_0);
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32_0);
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16_0);
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8_0);
  __THE_1_opt_str_free((struct str *) __THE_0_optStr_0);
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_optRefInt_0);
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) __THE_0_optObj_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optInt_0);
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64_0);
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32_0);
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16_0);
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8_0);
  __THE_1_opt_fn$0_free((struct __THE_1_fn$0 *) __THE_0_optFn_0);
  __THE_1_opt_float_free((double *) __THE_0_optFloat_0);
  __THE_1_opt_f64_free((double *) __THE_0_optF64_0);
  __THE_1_opt_f32_free((float *) __THE_0_optF32_0);
  __THE_1_opt_char_free((char *) __THE_0_optChar_0);
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByte_0);
  __THE_1_opt_bool_free((bool *) __THE_0_optBool_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayInt_0);
  __THE_1_opt_any_free((struct any *) __THE_0_optAny_0);
  str_free((struct str) __THE_0_testStr_0);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) __THE_0_testObj_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_testArrayInt_0);
  any_free((struct any) __THE_0_testAny_0);
}
======= flags =======
======= stdout =======
