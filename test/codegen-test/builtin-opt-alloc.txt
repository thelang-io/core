======= stdin =======
main {
  testBool := true
  testByte: byte = 1
  testChar := 'a'
  testF32: f32 = 3.14
  testF64: f64 = 3.14
  testFloat := 3.14
  testI8: i8 = 1
  testI16: i16 = 1
  testI32: i32 = 1
  testI64: i64 = 1
  testInt := 1
  testU8: u8 = 10
  testU16: u16 = 10
  testU32: u32 = 10
  testU64: u64 = 10

  optBool: bool?
  optByte: byte?
  optChar: char?
  optF32: f32?
  optF64: f64?
  optFloat: float?
  optI8: i8?
  optI16: i16?
  optI32: i32?
  optI64: i64?
  optInt: int?
  optU8: u8?
  optU16: u16?
  optU32: u32?
  optU64: u64?

  optBoolNilInit: bool? = nil
  optByteNilInit: byte? = nil
  optCharNilInit: char? = nil
  optF32NilInit: f32? = nil
  optF64NilInit: f64? = nil
  optFloatNilInit: float? = nil
  optI8NilInit: i8? = nil
  optI16NilInit: i16? = nil
  optI32NilInit: i32? = nil
  optI64NilInit: i64? = nil
  optIntNilInit: int? = nil
  optU8NilInit: u8? = nil
  optU16NilInit: u16? = nil
  optU32NilInit: u32? = nil
  optU64NilInit: u64? = nil

  optBoolValInit: bool? = true
  optByteValInit: byte? = 1
  optCharValInit: char? = 'a'
  optF32ValInit: f32? = 3.14
  optF64ValInit: f64? = 3.14
  optFloatValInit: float? = 3.14
  optI8ValInit: i8? = 1
  optI16ValInit: i16? = 1
  optI32ValInit: i32? = 1
  optI64ValInit: i64? = 1
  optIntValInit: int? = 1
  optU8ValInit: u8? = 10
  optU16ValInit: u16? = 10
  optU32ValInit: u32? = 10
  optU64ValInit: u64? = 10

  optBoolValCopy: bool? = testBool
  optByteValCopy: byte? = testByte
  optCharValCopy: char? = testChar
  optF32ValCopy: f32? = testF32
  optF64ValCopy: f64? = testF64
  optFloatValCopy: float? = testFloat
  optI8ValCopy: i8? = testI8
  optI16ValCopy: i16? = testI16
  optI32ValCopy: i32? = testI32
  optI64ValCopy: i64? = testI64
  optIntValCopy: int? = testInt
  optU8ValCopy: u8? = testU8
  optU16ValCopy: u16? = testU16
  optU32ValCopy: u32? = testU32
  optU64ValCopy: u64? = testU64
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
bool *__THE_1_opt_bool_alloc (bool);
void __THE_1_opt_bool_free (bool *);
unsigned char *__THE_1_opt_byte_alloc (unsigned char);
void __THE_1_opt_byte_free (unsigned char *);
char *__THE_1_opt_char_alloc (char);
void __THE_1_opt_char_free (char *);
float *__THE_1_opt_f32_alloc (float);
void __THE_1_opt_f32_free (float *);
double *__THE_1_opt_f64_alloc (double);
void __THE_1_opt_f64_free (double *);
double *__THE_1_opt_float_alloc (double);
void __THE_1_opt_float_free (double *);
int8_t *__THE_1_opt_i8_alloc (int8_t);
void __THE_1_opt_i8_free (int8_t *);
int16_t *__THE_1_opt_i16_alloc (int16_t);
void __THE_1_opt_i16_free (int16_t *);
int32_t *__THE_1_opt_i32_alloc (int32_t);
void __THE_1_opt_i32_free (int32_t *);
int64_t *__THE_1_opt_i64_alloc (int64_t);
void __THE_1_opt_i64_free (int64_t *);
int32_t *__THE_1_opt_int_alloc (int32_t);
void __THE_1_opt_int_free (int32_t *);
uint8_t *__THE_1_opt_u8_alloc (uint8_t);
void __THE_1_opt_u8_free (uint8_t *);
uint16_t *__THE_1_opt_u16_alloc (uint16_t);
void __THE_1_opt_u16_free (uint16_t *);
uint32_t *__THE_1_opt_u32_alloc (uint32_t);
void __THE_1_opt_u32_free (uint32_t *);
uint64_t *__THE_1_opt_u64_alloc (uint64_t);
void __THE_1_opt_u64_free (uint64_t *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
bool *__THE_1_opt_bool_alloc (bool n) {
  bool *r = alloc(sizeof(bool));
  *r = n;
  return r;
}
void __THE_1_opt_bool_free (bool *n) {
  if (n == NULL) return;
  free(n);
}
unsigned char *__THE_1_opt_byte_alloc (unsigned char n) {
  unsigned char *r = alloc(sizeof(unsigned char));
  *r = n;
  return r;
}
void __THE_1_opt_byte_free (unsigned char *n) {
  if (n == NULL) return;
  free(n);
}
char *__THE_1_opt_char_alloc (char n) {
  char *r = alloc(sizeof(char));
  *r = n;
  return r;
}
void __THE_1_opt_char_free (char *n) {
  if (n == NULL) return;
  free(n);
}
float *__THE_1_opt_f32_alloc (float n) {
  float *r = alloc(sizeof(float));
  *r = n;
  return r;
}
void __THE_1_opt_f32_free (float *n) {
  if (n == NULL) return;
  free(n);
}
double *__THE_1_opt_f64_alloc (double n) {
  double *r = alloc(sizeof(double));
  *r = n;
  return r;
}
void __THE_1_opt_f64_free (double *n) {
  if (n == NULL) return;
  free(n);
}
double *__THE_1_opt_float_alloc (double n) {
  double *r = alloc(sizeof(double));
  *r = n;
  return r;
}
void __THE_1_opt_float_free (double *n) {
  if (n == NULL) return;
  free(n);
}
int8_t *__THE_1_opt_i8_alloc (int8_t n) {
  int8_t *r = alloc(sizeof(int8_t));
  *r = n;
  return r;
}
void __THE_1_opt_i8_free (int8_t *n) {
  if (n == NULL) return;
  free(n);
}
int16_t *__THE_1_opt_i16_alloc (int16_t n) {
  int16_t *r = alloc(sizeof(int16_t));
  *r = n;
  return r;
}
void __THE_1_opt_i16_free (int16_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t *__THE_1_opt_i32_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
void __THE_1_opt_i32_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
int64_t *__THE_1_opt_i64_alloc (int64_t n) {
  int64_t *r = alloc(sizeof(int64_t));
  *r = n;
  return r;
}
void __THE_1_opt_i64_free (int64_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
uint8_t *__THE_1_opt_u8_alloc (uint8_t n) {
  uint8_t *r = alloc(sizeof(uint8_t));
  *r = n;
  return r;
}
void __THE_1_opt_u8_free (uint8_t *n) {
  if (n == NULL) return;
  free(n);
}
uint16_t *__THE_1_opt_u16_alloc (uint16_t n) {
  uint16_t *r = alloc(sizeof(uint16_t));
  *r = n;
  return r;
}
void __THE_1_opt_u16_free (uint16_t *n) {
  if (n == NULL) return;
  free(n);
}
uint32_t *__THE_1_opt_u32_alloc (uint32_t n) {
  uint32_t *r = alloc(sizeof(uint32_t));
  *r = n;
  return r;
}
void __THE_1_opt_u32_free (uint32_t *n) {
  if (n == NULL) return;
  free(n);
}
uint64_t *__THE_1_opt_u64_alloc (uint64_t n) {
  uint64_t *r = alloc(sizeof(uint64_t));
  *r = n;
  return r;
}
void __THE_1_opt_u64_free (uint64_t *n) {
  if (n == NULL) return;
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const bool __THE_0_testBool_0 = true;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const unsigned char __THE_0_testByte_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const char __THE_0_testChar_0 = 'a';
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const float __THE_0_testF32_0 = 3.14;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const double __THE_0_testF64_0 = 3.14;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const double __THE_0_testFloat_0 = 3.14;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int8_t __THE_0_testI8_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int16_t __THE_0_testI16_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int32_t __THE_0_testI32_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int64_t __THE_0_testI64_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int32_t __THE_0_testInt_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint8_t __THE_0_testU8_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint16_t __THE_0_testU16_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint32_t __THE_0_testU32_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint64_t __THE_0_testU64_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const bool *__THE_0_optBool_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  const unsigned char *__THE_0_optByte_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  const char *__THE_0_optChar_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const float *__THE_0_optF32_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const double *__THE_0_optF64_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const double *__THE_0_optFloat_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  const int8_t *__THE_0_optI8_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const int16_t *__THE_0_optI16_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L9;
  const int32_t *__THE_0_optI32_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  const int64_t *__THE_0_optI64_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L11;
  const int32_t *__THE_0_optInt_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L12;
  const uint8_t *__THE_0_optU8_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L13;
  const uint16_t *__THE_0_optU16_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L14;
  const uint32_t *__THE_0_optU32_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L15;
  const uint64_t *__THE_0_optU64_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L16;
  const bool *__THE_0_optBoolNilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L17;
  const unsigned char *__THE_0_optByteNilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L18;
  const char *__THE_0_optCharNilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L19;
  const float *__THE_0_optF32NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L20;
  const double *__THE_0_optF64NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L21;
  const double *__THE_0_optFloatNilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L22;
  const int8_t *__THE_0_optI8NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L23;
  const int16_t *__THE_0_optI16NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L24;
  const int32_t *__THE_0_optI32NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L25;
  const int64_t *__THE_0_optI64NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L26;
  const int32_t *__THE_0_optIntNilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L27;
  const uint8_t *__THE_0_optU8NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L28;
  const uint16_t *__THE_0_optU16NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L29;
  const uint32_t *__THE_0_optU32NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L30;
  const uint64_t *__THE_0_optU64NilInit_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L31;
  const bool *__THE_0_optBoolValInit_0 = __THE_1_opt_bool_alloc(true);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L32;
  const unsigned char *__THE_0_optByteValInit_0 = __THE_1_opt_byte_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L33;
  const char *__THE_0_optCharValInit_0 = __THE_1_opt_char_alloc('a');
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L34;
  const float *__THE_0_optF32ValInit_0 = __THE_1_opt_f32_alloc(3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L35;
  const double *__THE_0_optF64ValInit_0 = __THE_1_opt_f64_alloc(3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L36;
  const double *__THE_0_optFloatValInit_0 = __THE_1_opt_float_alloc(3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L37;
  const int8_t *__THE_0_optI8ValInit_0 = __THE_1_opt_i8_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L38;
  const int16_t *__THE_0_optI16ValInit_0 = __THE_1_opt_i16_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L39;
  const int32_t *__THE_0_optI32ValInit_0 = __THE_1_opt_i32_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L40;
  const int64_t *__THE_0_optI64ValInit_0 = __THE_1_opt_i64_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L41;
  const int32_t *__THE_0_optIntValInit_0 = __THE_1_opt_int_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L42;
  const uint8_t *__THE_0_optU8ValInit_0 = __THE_1_opt_u8_alloc(10);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L43;
  const uint16_t *__THE_0_optU16ValInit_0 = __THE_1_opt_u16_alloc(10);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L44;
  const uint32_t *__THE_0_optU32ValInit_0 = __THE_1_opt_u32_alloc(10);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L45;
  const uint64_t *__THE_0_optU64ValInit_0 = __THE_1_opt_u64_alloc(10);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L46;
  const bool *__THE_0_optBoolValCopy_0 = __THE_1_opt_bool_alloc(__THE_0_testBool_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L47;
  const unsigned char *__THE_0_optByteValCopy_0 = __THE_1_opt_byte_alloc(__THE_0_testByte_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L48;
  const char *__THE_0_optCharValCopy_0 = __THE_1_opt_char_alloc(__THE_0_testChar_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L49;
  const float *__THE_0_optF32ValCopy_0 = __THE_1_opt_f32_alloc(__THE_0_testF32_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L50;
  const double *__THE_0_optF64ValCopy_0 = __THE_1_opt_f64_alloc(__THE_0_testF64_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L51;
  const double *__THE_0_optFloatValCopy_0 = __THE_1_opt_float_alloc(__THE_0_testFloat_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L52;
  const int8_t *__THE_0_optI8ValCopy_0 = __THE_1_opt_i8_alloc(__THE_0_testI8_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L53;
  const int16_t *__THE_0_optI16ValCopy_0 = __THE_1_opt_i16_alloc(__THE_0_testI16_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L54;
  const int32_t *__THE_0_optI32ValCopy_0 = __THE_1_opt_i32_alloc(__THE_0_testI32_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L55;
  const int64_t *__THE_0_optI64ValCopy_0 = __THE_1_opt_i64_alloc(__THE_0_testI64_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L56;
  const int32_t *__THE_0_optIntValCopy_0 = __THE_1_opt_int_alloc(__THE_0_testInt_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L57;
  const uint8_t *__THE_0_optU8ValCopy_0 = __THE_1_opt_u8_alloc(__THE_0_testU8_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L58;
  const uint16_t *__THE_0_optU16ValCopy_0 = __THE_1_opt_u16_alloc(__THE_0_testU16_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L59;
  const uint32_t *__THE_0_optU32ValCopy_0 = __THE_1_opt_u32_alloc(__THE_0_testU32_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L60;
  const uint64_t *__THE_0_optU64ValCopy_0 = __THE_1_opt_u64_alloc(__THE_0_testU64_0);
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64ValCopy_0);
L60:
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32ValCopy_0);
L59:
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16ValCopy_0);
L58:
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8ValCopy_0);
L57:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntValCopy_0);
L56:
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64ValCopy_0);
L55:
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32ValCopy_0);
L54:
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16ValCopy_0);
L53:
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8ValCopy_0);
L52:
  __THE_1_opt_float_free((double *) __THE_0_optFloatValCopy_0);
L51:
  __THE_1_opt_f64_free((double *) __THE_0_optF64ValCopy_0);
L50:
  __THE_1_opt_f32_free((float *) __THE_0_optF32ValCopy_0);
L49:
  __THE_1_opt_char_free((char *) __THE_0_optCharValCopy_0);
L48:
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByteValCopy_0);
L47:
  __THE_1_opt_bool_free((bool *) __THE_0_optBoolValCopy_0);
L46:
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64ValInit_0);
L45:
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32ValInit_0);
L44:
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16ValInit_0);
L43:
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8ValInit_0);
L42:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntValInit_0);
L41:
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64ValInit_0);
L40:
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32ValInit_0);
L39:
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16ValInit_0);
L38:
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8ValInit_0);
L37:
  __THE_1_opt_float_free((double *) __THE_0_optFloatValInit_0);
L36:
  __THE_1_opt_f64_free((double *) __THE_0_optF64ValInit_0);
L35:
  __THE_1_opt_f32_free((float *) __THE_0_optF32ValInit_0);
L34:
  __THE_1_opt_char_free((char *) __THE_0_optCharValInit_0);
L33:
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByteValInit_0);
L32:
  __THE_1_opt_bool_free((bool *) __THE_0_optBoolValInit_0);
L31:
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64NilInit_0);
L30:
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32NilInit_0);
L29:
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16NilInit_0);
L28:
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8NilInit_0);
L27:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntNilInit_0);
L26:
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64NilInit_0);
L25:
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32NilInit_0);
L24:
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16NilInit_0);
L23:
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8NilInit_0);
L22:
  __THE_1_opt_float_free((double *) __THE_0_optFloatNilInit_0);
L21:
  __THE_1_opt_f64_free((double *) __THE_0_optF64NilInit_0);
L20:
  __THE_1_opt_f32_free((float *) __THE_0_optF32NilInit_0);
L19:
  __THE_1_opt_char_free((char *) __THE_0_optCharNilInit_0);
L18:
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByteNilInit_0);
L17:
  __THE_1_opt_bool_free((bool *) __THE_0_optBoolNilInit_0);
L16:
  __THE_1_opt_u64_free((uint64_t *) __THE_0_optU64_0);
L15:
  __THE_1_opt_u32_free((uint32_t *) __THE_0_optU32_0);
L14:
  __THE_1_opt_u16_free((uint16_t *) __THE_0_optU16_0);
L13:
  __THE_1_opt_u8_free((uint8_t *) __THE_0_optU8_0);
L12:
  __THE_1_opt_int_free((int32_t *) __THE_0_optInt_0);
L11:
  __THE_1_opt_i64_free((int64_t *) __THE_0_optI64_0);
L10:
  __THE_1_opt_i32_free((int32_t *) __THE_0_optI32_0);
L9:
  __THE_1_opt_i16_free((int16_t *) __THE_0_optI16_0);
L8:
  __THE_1_opt_i8_free((int8_t *) __THE_0_optI8_0);
L7:
  __THE_1_opt_float_free((double *) __THE_0_optFloat_0);
L6:
  __THE_1_opt_f64_free((double *) __THE_0_optF64_0);
L5:
  __THE_1_opt_f32_free((float *) __THE_0_optF32_0);
L4:
  __THE_1_opt_char_free((char *) __THE_0_optChar_0);
L3:
  __THE_1_opt_byte_free((unsigned char *) __THE_0_optByte_0);
L2:
  __THE_1_opt_bool_free((bool *) __THE_0_optBool_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
