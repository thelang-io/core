======= stdin =======
main {
  mut a := "test1"

  fn test (newA: str) {
    a = newA
  }

  test("test2")
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
void str_free (struct str s) {
  free(s.c);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.c);
  return s2;
}

struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_mainSDtest_0X;

struct __THE_1_fn$0P {
  struct str n0;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest_0X {
  struct str *__THE_0_a_0;
};

void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_mainSDtest_0 (void *, struct __THE_1_fn$0P);
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *, struct __THE_1_mainSDtest_0X);

void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_mainSDtest_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_mainSDtest_0X *x = px;
  struct str *__THE_0_a_0 = x->__THE_0_a_0;
  const struct str __THE_0_newA_0 = p.n0;
  *__THE_0_a_0 = str_realloc(*__THE_0_a_0, str_copy(__THE_0_newA_0));
  str_free((struct str) __THE_0_newA_0);
}
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *n, struct __THE_1_mainSDtest_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest_0X);
  struct __THE_1_mainSDtest_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest_0;
  n->x = r;
  n->l = l;
}

int main () {
  struct str __THE_0_a_0 = str_alloc("test1");
  const struct __THE_1_fn$0 __THE_0_mainSDtest_0;
  __THE_1_mainSDtest_0_alloc((struct __THE_1_fn$0 *) &__THE_0_mainSDtest_0, (struct __THE_1_mainSDtest_0X) {&__THE_0_a_0});
  __THE_0_mainSDtest_0.f(__THE_0_mainSDtest_0.x, (struct __THE_1_fn$0P) {str_alloc("test2")});
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_mainSDtest_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
