======= stdin =======
obj Test {
  a: str
  b: str
}

main {
  Test{a: "test", b: "str"}
  Test{b: "skip"}
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_Test_0;

struct __THE_1_Test_0 {
  struct str __THE_0_a;
  struct str __THE_0_b;
};

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct str, struct str);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct str __THE_0_a, struct str __THE_0_b) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  r->__THE_0_b = __THE_0_b;
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  str_free((struct str) o->__THE_0_a);
  str_free((struct str) o->__THE_0_b);
  free(o);
}

int main () {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(str_alloc("test"), str_alloc("str")));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(str_alloc(""), str_alloc("skip")));
}
======= flags =======
======= stdout =======
