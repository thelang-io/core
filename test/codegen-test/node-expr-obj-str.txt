======= stdin =======
obj Test {
  a: str
  b: str
}

main {
  Test{a: "test", b: "str"}
  Test{b: "skip"}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test_0;

struct __THE_1_Test_0 {
  const struct str __THE_0_a;
  const struct str __THE_0_b;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct str, struct str);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct str __THE_0_a, struct str __THE_0_b) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a, __THE_0_b};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  str_free((struct str) n->__THE_0_a);
  str_free((struct str) n->__THE_0_b);
  free(n);
}

int main () {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(str_alloc("test"), str_alloc("str")));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(str_alloc(""), str_alloc("skip")));
}
======= flags =======
======= stdout =======
