======= stdin =======
main {
  a := "test"
  mut b := a
  b = a
  mut c := a + b
  c = a + b
  mut d := a + b + c
  d += a + b + c
  e := true ? a : b + c
  f := true ? c + d + e : (b += a + c)
}
======= code =======
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}

int main () {
  const struct str __THE_0_a_0 = str_alloc("test");
  struct str __THE_0_b_0 = str_copy(__THE_0_a_0);
  __THE_0_b_0 = str_realloc(__THE_0_b_0, str_copy(__THE_0_a_0));
  struct str __THE_0_c_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  __THE_0_c_0 = str_realloc(__THE_0_c_0, str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  struct str __THE_0_d_0 = str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0));
  __THE_0_d_0 = str_realloc(__THE_0_d_0, str_concat_str(str_copy(__THE_0_d_0), str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0))));
  const struct str __THE_0_e_0 = true ? str_copy(__THE_0_a_0) : str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_c_0));
  const struct str __THE_0_f_0 = true ? str_concat_str(str_concat_str(str_copy(__THE_0_c_0), str_copy(__THE_0_d_0)), str_copy(__THE_0_e_0)) : (str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_c_0))))));
  str_free((struct str) __THE_0_f_0);
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
