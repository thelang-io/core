======= stdin =======
main {
  fs_copyFileSync(
    "test" + path_SEP + "fixtures" + path_SEP + "test.txt",
    "test" + path_SEP + "fixtures" + path_SEP + "test.txt"
  )
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <fcntl.h>
  #include <unistd.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void fs_copyFileSync (struct str, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
char *str_cstr (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void fs_copyFileSync (struct str n1, struct str n2) {
  char *c1 = str_cstr(n1);
  char *c2 = str_cstr(n2);
  #ifdef THE_OS_WINDOWS
    if (CopyFile(c1, c2, 0) == 0) {
      fprintf(stderr, "Error: failed to copy file from `%s` to `%s`" THE_EOL, c1, c2);
      exit(EXIT_FAILURE);
    }
  #else
    int fd1 = open(c1, O_RDONLY);
    if (fd1 < 0) {
      fprintf(stderr, "Error: failed to open file descriptor of `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    struct stat sb1;
    if (fstat(fd1, &sb1) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    if ((sb1.st_mode & S_IFMT) != S_IFREG) {
      fprintf(stderr, "Error: cannot copy non-file `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    int fd2 = open(c2, O_WRONLY | O_CREAT);
    if (fd2 < 0) {
      fprintf(stderr, "Error: failed to open file descriptor of `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    struct stat sb2;
    if (fstat(fd2, &sb2) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    if (sb1.st_dev == sb2.st_dev && sb1.st_ino == sb2.st_ino) {
      fprintf(stderr, "Error: can't copy same file" THE_EOL);
      exit(EXIT_FAILURE);
    }
    if (sb2.st_size > 0 && ftruncate(fd2, 0) != 0) {
      fprintf(stderr, "Error: failed to truncate file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    if (fchmod(fd2, sb1.st_mode) != 0) {
      fprintf(stderr, "Error: failed to chmod file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    size_t bytes = sb1.st_size;
    size_t buf_len = 8192;
    char buf[buf_len];
    while (bytes != 0) {
      ssize_t read_bytes_raw = read(fd1, buf, bytes > buf_len ? buf_len : bytes);
      if (read_bytes_raw <= 0) {
        fprintf(stderr, "Error: failed to read data from file `%s`" THE_EOL, c1);
        exit(EXIT_FAILURE);
      }
      size_t read_bytes = read_bytes_raw;
      size_t written_bytes = 0;
      while (written_bytes != read_bytes) {
        ssize_t written_bytes_raw = write(fd2, &buf[written_bytes], read_bytes - written_bytes);
        if (written_bytes_raw <= 0) {
          fprintf(stderr, "Error: failed to write data to file `%s`" THE_EOL, c2);
          exit(EXIT_FAILURE);
        }
        written_bytes += (size_t) written_bytes_raw;
      }
      bytes -= written_bytes;
    }
    close(fd2);
    close(fd1);
  #endif
  free(c2);
  free(c1);
  str_free(n2);
  str_free(n1);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  fs_copyFileSync(str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt"), str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt"));
}
======= flags =======
======= stderr =======
Error: {{ (can't copy same file|failed to copy file from `test\\fixtures\\test\.txt` to `test\\fixtures\\test\.txt`) }}
