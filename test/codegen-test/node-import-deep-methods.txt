======= stdin =======
import TestObjWithMethods from "./fixtures/import-deep"

fn test () {
  t := TestObjWithMethods{}
  t.test1()
  t.test2()
}

main {
  test()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fixtures_export_obj_TestObjWithMethods_0;
struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFE;
struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFEP;
struct __THE_1_fn_sFRvoidFE;
struct __THE_1_test_test_0X;

struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFEP {
  const struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 **self;
};
struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_test_test_0X {
  const struct __THE_1_fn_sFRvoidFE *__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0;
  const struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFE *__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *__THE_1_fixtures_export_obj_TestObjWithMethods_0_alloc (int32_t);
void __THE_1_fixtures_export_obj_TestObjWithMethods_0_free (struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *);
void __THE_1_fixtures_export_obj_TestObjWithMethodsSDtest1_0 (void *, void *);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_fixtures_export_obj_TestObjWithMethodsSDtest2_0 (void *);
void __THE_1_test_test_0 (void *);
void __THE_1_test_test_0_alloc (struct __THE_1_fn_sFRvoidFE *, struct __THE_1_test_test_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *__THE_1_fixtures_export_obj_TestObjWithMethods_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *r = alloc(sizeof(struct __THE_1_fixtures_export_obj_TestObjWithMethods_0));
  struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_fixtures_export_obj_TestObjWithMethods_0));
  return r;
}
void __THE_1_fixtures_export_obj_TestObjWithMethods_0_free (struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *n) {
  free(n);
}
void __THE_1_fixtures_export_obj_TestObjWithMethodsSDtest1_0 (void *px, void *pp) {
  struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFEP *p = pp;
  const struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 **__THE_0_self_0 = p->self;
  free(pp);
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_fixtures_export_obj_TestObjWithMethodsSDtest2_0 (void *px) {
}
void __THE_1_test_test_0 (void *px) {
  struct __THE_1_test_test_0X *x = px;
  const struct __THE_1_fn_sFRvoidFE *__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0 = x->__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0;
  const struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFE *__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0 = x->__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0;
  const struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *__THE_0_t_0 = __THE_1_fixtures_export_obj_TestObjWithMethods_0_alloc(0);
  (*__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0).f((*__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0).x, xalloc(&(struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFEP) {&__THE_0_t_0}, sizeof(struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFEP)));
  (*__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0).f((*__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0).x);
  __THE_1_fixtures_export_obj_TestObjWithMethods_0_free((struct __THE_1_fixtures_export_obj_TestObjWithMethods_0 *) __THE_0_t_0);
}
void __THE_1_test_test_0_alloc (struct __THE_1_fn_sFRvoidFE *n, struct __THE_1_test_test_0X x) {
  size_t l = sizeof(struct __THE_1_test_test_0X);
  struct __THE_1_test_test_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_test_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFE __THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0 = (struct __THE_1_fn_sFSref_fixtures_export_obj_TestObjWithMethods_0FRvoidFE) {&__THE_1_fixtures_export_obj_TestObjWithMethodsSDtest1_0, NULL, 0};
  const struct __THE_1_fn_sFRvoidFE __THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_fixtures_export_obj_TestObjWithMethodsSDtest2_0, NULL, 0};
  const struct __THE_1_fn_sFRvoidFE __THE_0_test_test_0;
  __THE_1_test_test_0_alloc((struct __THE_1_fn_sFRvoidFE *) &__THE_0_test_test_0, (struct __THE_1_test_test_0X) {&__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest2_0, &__THE_0_fixtures_export_obj_TestObjWithMethodsSDtest1_0});
  __THE_0_test_test_0.f(__THE_0_test_test_0.x);
  __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) __THE_0_test_test_0);
}
======= flags =======
======= stdout =======
