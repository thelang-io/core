======= stdin =======
obj Test1 {
  mut a: int
  mut b: str

  mut refA: ref int
  mut refB: ref str

  fn1: (ref int) -> ref int
  refFn1: ref ((ref int) -> ref int)
  fn2: () -> int
  refFn2: ref (() -> int)
}

obj Test2 {
  test1: Test1
  refTest1: ref Test1
}

fn job1 (a: ref int) ref int {
  return a
}

fn job2 () int {
  return 2
}

main {
  mut a := 0
  mut b := "str"
  refA := ref a
  refB := ref b
  refJob1 := ref job1
  refJob2 := ref job2;

  ref a;
  ref b;
  ref job1;
  ref job2;

  mut test1 := Test1{a: a, b: b, refA: ref a, refB: ref b, fn1: job1, refFn1: ref job1, fn2: job2, refFn2: refJob2};
  mut refTest1 := ref test1;
  Test1{a: a, b: b, refA: ref a, refB: ref b, fn1: job1, refFn1: ref job1, fn2: job2, refFn2: refJob2};
  ref test1;

  mut test2 := Test2{test1: test1, refTest1: ref test1};
  Test2{test1: test1, refTest1: ref test1};
  Test1{a: refA, b: refB, refA: refA, refB: refB, fn1: refJob1, refFn1: refJob1, fn2: refJob2, refFn2: refJob2};
  Test2{test1: refTest1, refTest1: refTest1};

  ref test1.a;
  ref test1.b;
  test1.a + test1.refA;
  test1.refB + test1.b;
  a + test1.refA;
  test1.refB + b;
  a + test1.refA;
  test1.refB + b;

  refTest1.fn1(ref a) + test1.refFn1(refA);
  test1.fn2() + refTest1.refFn2();
  test1.fn1(ref a) + refTest1.refFn2();
  test1.fn2() + refTest1.refFn1(refA);
  test1.fn1(ref a) + test1.fn2();
  refTest1.refFn1(refA) + refTest1.refFn2();

  test2.refTest1.fn1(ref a) + test2.test1.refFn1(refA);
  test2.test1.fn2() + test2.refTest1.refFn2();
  test2.test1.fn1(ref a) + test2.refTest1.refFn2();
  test2.test1.fn2() + test2.refTest1.refFn1(refA);
  test2.test1.fn1(ref a) + test2.test1.fn2();
  test2.refTest1.refFn1(refA) + test2.refTest1.refFn2();
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_Test1_0;
struct __THE_1_Test2_0;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000 {
  int32_t *(*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t *n0;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_Test1_0 {
  int32_t __THE_0_a;
  struct str __THE_0_b;
  int32_t *__THE_0_refA;
  struct str *__THE_0_refB;
  const struct __THE_1_fn$1000 __THE_0_fn1;
  const struct __THE_1_fn$1000 *__THE_0_refFn1;
  const struct __THE_1_fn$1001 __THE_0_fn2;
  const struct __THE_1_fn$1001 *__THE_0_refFn2;
};
struct __THE_1_Test2_0 {
  const struct __THE_1_Test1_0 *__THE_0_test1;
  const struct __THE_1_Test1_0 **__THE_0_refTest1;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t, struct str, int32_t *, struct str *, struct __THE_1_fn$1000, struct __THE_1_fn$1000 *, struct __THE_1_fn$1001, struct __THE_1_fn$1001 *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *, struct __THE_1_Test1_0 **);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
int32_t *__THE_1_job1_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_job2_0 (void *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1001) {n.f, x, n.l};
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t __THE_0_a, struct str __THE_0_b, int32_t *__THE_0_refA, struct str *__THE_0_refB, struct __THE_1_fn$1000 __THE_0_fn1, struct __THE_1_fn$1000 *__THE_0_refFn1, struct __THE_1_fn$1001 __THE_0_fn2, struct __THE_1_fn$1001 *__THE_0_refFn2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_a, __THE_0_b, __THE_0_refA, __THE_0_refB, __THE_0_fn1, __THE_0_refFn1, __THE_0_fn2, __THE_0_refFn2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *n) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {n->__THE_0_a, str_copy(n->__THE_0_b), n->__THE_0_refA, n->__THE_0_refB, __THE_1_fn$1000_copy(n->__THE_0_fn1), n->__THE_0_refFn1, __THE_1_fn$1001_copy(n->__THE_0_fn2), n->__THE_0_refFn2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  str_free((struct str) n->__THE_0_b);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n->__THE_0_fn1);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) n->__THE_0_fn2);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *__THE_0_test1, struct __THE_1_Test1_0 **__THE_0_refTest1) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_test1, __THE_0_refTest1};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) n->__THE_0_test1);
  free(n);
}
int32_t *__THE_1_job1_0 (void *px, struct __THE_1_fn$1000P p) {
  int32_t *v;
  error_stack_push(&err_state, "/test", "job1");
  const int32_t *__THE_0_a_0 = p.n0;
  v = __THE_0_a_0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_job2_0 (void *px) {
  int32_t v;
  error_stack_push(&err_state, "/test", "job2");
  v = 2;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1000 __THE_0_job1_0 = (struct __THE_1_fn$1000) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_job2_0 = (struct __THE_1_fn$1001) {&__THE_1_job2_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
  int32_t __THE_0_a_0 = 0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  struct str __THE_0_b_0 = str_alloc("str");
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const int32_t *__THE_0_refA_0 = &__THE_0_a_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct str *__THE_0_refB_0 = &__THE_0_b_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_fn$1000 *__THE_0_refJob1_0 = &__THE_0_job1_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_fn$1001 *__THE_0_refJob2_0 = &__THE_0_job2_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  &__THE_0_a_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  &__THE_0_b_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  &__THE_0_job1_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  &__THE_0_job2_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_0_a_0, str_copy(__THE_0_b_0), &__THE_0_a_0, &__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_job1_0), &__THE_0_job1_0, __THE_1_fn$1001_copy(__THE_0_job2_0), __THE_0_refJob2_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  struct __THE_1_Test1_0 **__THE_0_refTest1_0 = &__THE_0_test1_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_1_Test1_0_alloc(__THE_0_a_0, str_copy(__THE_0_b_0), &__THE_0_a_0, &__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_job1_0), &__THE_0_job1_0, __THE_1_fn$1001_copy(__THE_0_job2_0), __THE_0_refJob2_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  &__THE_0_test1_0;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc(__THE_1_Test1_0_copy(__THE_0_test1_0), &__THE_0_test1_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_1_Test2_0_alloc(__THE_1_Test1_0_copy(__THE_0_test1_0), &__THE_0_test1_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_1_Test1_0_alloc(*__THE_0_refA_0, str_copy(*__THE_0_refB_0), __THE_0_refA_0, __THE_0_refB_0, __THE_1_fn$1000_copy(*__THE_0_refJob1_0), __THE_0_refJob1_0, __THE_1_fn$1001_copy(*__THE_0_refJob2_0), __THE_0_refJob2_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_1_Test2_0_alloc(__THE_1_Test1_0_copy(*__THE_0_refTest1_0), __THE_0_refTest1_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  &__THE_0_test1_0->__THE_0_a;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  &__THE_0_test1_0->__THE_0_b;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_test1_0->__THE_0_a + *__THE_0_test1_0->__THE_0_refA;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  str_free((struct str) str_concat_str(str_copy(*__THE_0_test1_0->__THE_0_refB), str_copy(__THE_0_test1_0->__THE_0_b)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_a_0 + *__THE_0_test1_0->__THE_0_refA;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  str_free((struct str) str_concat_str(str_copy(*__THE_0_test1_0->__THE_0_refB), str_copy(__THE_0_b_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_a_0 + *__THE_0_test1_0->__THE_0_refA;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  str_free((struct str) str_concat_str(str_copy(*__THE_0_test1_0->__THE_0_refB), str_copy(__THE_0_b_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 59, 3), *(*__THE_0_refTest1_0)->__THE_0_fn1.f((*__THE_0_refTest1_0)->__THE_0_fn1.x, (struct __THE_1_fn$1000P) {&__THE_0_a_0})) + (error_stack_pos(&err_state, 59, 25), *(*__THE_0_test1_0->__THE_0_refFn1).f((*__THE_0_test1_0->__THE_0_refFn1).x, (struct __THE_1_fn$1000P) {__THE_0_refA_0}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 60, 3), __THE_0_test1_0->__THE_0_fn2.f(__THE_0_test1_0->__THE_0_fn2.x)) + (error_stack_pos(&err_state, 60, 17), (*(*__THE_0_refTest1_0)->__THE_0_refFn2).f((*(*__THE_0_refTest1_0)->__THE_0_refFn2).x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 61, 3), *__THE_0_test1_0->__THE_0_fn1.f(__THE_0_test1_0->__THE_0_fn1.x, (struct __THE_1_fn$1000P) {&__THE_0_a_0})) + (error_stack_pos(&err_state, 61, 22), (*(*__THE_0_refTest1_0)->__THE_0_refFn2).f((*(*__THE_0_refTest1_0)->__THE_0_refFn2).x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 62, 3), __THE_0_test1_0->__THE_0_fn2.f(__THE_0_test1_0->__THE_0_fn2.x)) + (error_stack_pos(&err_state, 62, 17), *(*(*__THE_0_refTest1_0)->__THE_0_refFn1).f((*(*__THE_0_refTest1_0)->__THE_0_refFn1).x, (struct __THE_1_fn$1000P) {__THE_0_refA_0}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 63, 3), *__THE_0_test1_0->__THE_0_fn1.f(__THE_0_test1_0->__THE_0_fn1.x, (struct __THE_1_fn$1000P) {&__THE_0_a_0})) + (error_stack_pos(&err_state, 63, 22), __THE_0_test1_0->__THE_0_fn2.f(__THE_0_test1_0->__THE_0_fn2.x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 64, 3), *(*(*__THE_0_refTest1_0)->__THE_0_refFn1).f((*(*__THE_0_refTest1_0)->__THE_0_refFn1).x, (struct __THE_1_fn$1000P) {__THE_0_refA_0})) + (error_stack_pos(&err_state, 64, 27), (*(*__THE_0_refTest1_0)->__THE_0_refFn2).f((*(*__THE_0_refTest1_0)->__THE_0_refFn2).x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 66, 3), *(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_fn1.f((*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_fn1.x, (struct __THE_1_fn$1000P) {&__THE_0_a_0})) + (error_stack_pos(&err_state, 66, 31), *(*__THE_0_test2_0->__THE_0_test1->__THE_0_refFn1).f((*__THE_0_test2_0->__THE_0_test1->__THE_0_refFn1).x, (struct __THE_1_fn$1000P) {__THE_0_refA_0}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 67, 3), __THE_0_test2_0->__THE_0_test1->__THE_0_fn2.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn2.x)) + (error_stack_pos(&err_state, 67, 23), (*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 68, 3), *__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.x, (struct __THE_1_fn$1000P) {&__THE_0_a_0})) + (error_stack_pos(&err_state, 68, 28), (*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 69, 3), __THE_0_test2_0->__THE_0_test1->__THE_0_fn2.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn2.x)) + (error_stack_pos(&err_state, 69, 23), *(*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).x, (struct __THE_1_fn$1000P) {__THE_0_refA_0}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 70, 3), *__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.x, (struct __THE_1_fn$1000P) {&__THE_0_a_0})) + (error_stack_pos(&err_state, 70, 28), __THE_0_test2_0->__THE_0_test1->__THE_0_fn2.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn2.x));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  (error_stack_pos(&err_state, 71, 3), *(*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).x, (struct __THE_1_fn$1000P) {__THE_0_refA_0})) + (error_stack_pos(&err_state, 71, 33), (*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).x));
L6:
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
L5:
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
L4:
  str_free((struct str) __THE_0_b_0);
L3:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
