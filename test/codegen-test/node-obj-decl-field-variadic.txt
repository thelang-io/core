======= stdin =======
obj Test {
  fieldTest1: (int...) -> void
  fieldTest2: (int, int...) -> void
}
fn test1 (a: int...) {
  print(a)
}
fn test2 (a: int, b: int...) {
  print(a, b)
}
main {
  test := Test{
    fieldTest1: test1,
    fieldTest2: test2
  }

  test.fieldTest1()
  test.fieldTest1(1)
  test.fieldTest1(1, 2)
  test.fieldTest2(0)
  test.fieldTest2(1, 2)
  test.fieldTest2(2, 3, 4)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1003;
struct __THE_1_array_int;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1004;
struct __THE_1_fn$1004P;
struct __THE_1_Test_0;

struct __THE_1_fn$1003 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn$1003P {
  struct __THE_1_array_int n0;
};
struct __THE_1_fn$1004 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1004P {
  int32_t n0;
  struct __THE_1_array_int n1;
};
struct __THE_1_Test_0 {
  const struct __THE_1_fn$1003 __THE_0_fieldTest1;
  const struct __THE_1_fn$1004 __THE_0_fieldTest2;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void *xalloc (void *, size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct str __THE_1_array_int_str (struct __THE_1_array_int);
struct __THE_1_fn$1003 __THE_1_fn$1003_copy (const struct __THE_1_fn$1003);
void __THE_1_fn$1003_free (struct __THE_1_fn$1003);
struct __THE_1_fn$1004 __THE_1_fn$1004_copy (const struct __THE_1_fn$1004);
void __THE_1_fn$1004_free (struct __THE_1_fn$1004);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$1003, struct __THE_1_fn$1004);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
void __THE_1_test1_0 (void *, void *);
void __THE_1_test2_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}
struct __THE_1_fn$1003 __THE_1_fn$1003_copy (const struct __THE_1_fn$1003 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1003) {n.f, x, n.l};
}
void __THE_1_fn$1003_free (struct __THE_1_fn$1003 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1004 __THE_1_fn$1004_copy (const struct __THE_1_fn$1004 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1004) {n.f, x, n.l};
}
void __THE_1_fn$1004_free (struct __THE_1_fn$1004 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$1003 __THE_0_fieldTest1, struct __THE_1_fn$1004 __THE_0_fieldTest2) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_fieldTest1, __THE_0_fieldTest2};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  __THE_1_fn$1003_free((struct __THE_1_fn$1003) n->__THE_0_fieldTest1);
  __THE_1_fn$1004_free((struct __THE_1_fn$1004) n->__THE_0_fieldTest2);
  free(n);
}
void __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_fn$1003P *p = pp;
  const struct __THE_1_array_int __THE_0_a_0 = p->n0;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_a_0)), THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  free(pp);
}
void __THE_1_test2_0 (void *px, void *pp) {
  struct __THE_1_fn$1004P *p = pp;
  const int32_t __THE_0_a_0 = p->n0;
  const struct __THE_1_array_int __THE_0_b_0 = p->n1;
  print(stdout, "izsz", __THE_0_a_0, " ", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_b_0)), THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  free(pp);
}

int main () {
  const struct __THE_1_fn$1003 __THE_0_test1_0 = (struct __THE_1_fn$1003) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1004 __THE_0_test2_0 = (struct __THE_1_fn$1004) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_Test_0 *__THE_0_test_0 = __THE_1_Test_0_alloc(__THE_1_fn$1003_copy(__THE_0_test1_0), __THE_1_fn$1004_copy(__THE_0_test2_0));
  __THE_0_test_0->__THE_0_fieldTest1.f(__THE_0_test_0->__THE_0_fieldTest1.x, xalloc(&(struct __THE_1_fn$1003P) {__THE_1_array_int_alloc(0)}, sizeof(struct __THE_1_fn$1003P)));
  __THE_0_test_0->__THE_0_fieldTest1.f(__THE_0_test_0->__THE_0_fieldTest1.x, xalloc(&(struct __THE_1_fn$1003P) {__THE_1_array_int_alloc(1, 1)}, sizeof(struct __THE_1_fn$1003P)));
  __THE_0_test_0->__THE_0_fieldTest1.f(__THE_0_test_0->__THE_0_fieldTest1.x, xalloc(&(struct __THE_1_fn$1003P) {__THE_1_array_int_alloc(2, 1, 2)}, sizeof(struct __THE_1_fn$1003P)));
  __THE_0_test_0->__THE_0_fieldTest2.f(__THE_0_test_0->__THE_0_fieldTest2.x, xalloc(&(struct __THE_1_fn$1004P) {0, __THE_1_array_int_alloc(0)}, sizeof(struct __THE_1_fn$1004P)));
  __THE_0_test_0->__THE_0_fieldTest2.f(__THE_0_test_0->__THE_0_fieldTest2.x, xalloc(&(struct __THE_1_fn$1004P) {1, __THE_1_array_int_alloc(1, 2)}, sizeof(struct __THE_1_fn$1004P)));
  __THE_0_test_0->__THE_0_fieldTest2.f(__THE_0_test_0->__THE_0_fieldTest2.x, xalloc(&(struct __THE_1_fn$1004P) {2, __THE_1_array_int_alloc(2, 3, 4)}, sizeof(struct __THE_1_fn$1004P)));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test_0);
}
======= flags =======
======= stdout =======
[]
[1]
[1, 2]
0 []
1 [2]
2 [3, 4]
