======= stdin =======
main {
  test01: int[]
  test02: int[] = []
  mut test1 := [1]
  test2 := [1, 2]
  test3 := [1, 2, 3]

  print(test01.len)
  print(test02.len)
  print(test1.len)
  print(test2.len)
  print(test3.len)
  test1.push(2)
  print(test1.len)
  test1.push(3)
  print(test1.len)
}
======= code =======
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, size_t, ...);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free(n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, size_t x, ...) {
  if (x == 0) return;
  n->l += x;
  n->d = realloc(n->d, n->l * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = n->l - x; i < n->l; i++) n->d[i] = va_arg(args, int32_t);
  va_end(args);
}

int main () {
  const struct __THE_1_array_int __THE_0_test01_0 = __THE_1_array_int_alloc(0);
  const struct __THE_1_array_int __THE_0_test02_0 = __THE_1_array_int_alloc(0);
  struct __THE_1_array_int __THE_0_test1_0 = __THE_1_array_int_alloc(1, 1);
  const struct __THE_1_array_int __THE_0_test2_0 = __THE_1_array_int_alloc(2, 1, 2);
  const struct __THE_1_array_int __THE_0_test3_0 = __THE_1_array_int_alloc(3, 1, 2, 3);
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test01_0)), "\n");
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test02_0)), "\n");
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test1_0)), "\n");
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test2_0)), "\n");
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test3_0)), "\n");
  __THE_1_array_int_push(&__THE_0_test1_0, 1, 2);
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test1_0)), "\n");
  __THE_1_array_int_push(&__THE_0_test1_0, 1, 3);
  print(stdout, "iz", __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_test1_0)), "\n");
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test3_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test2_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test02_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test01_0);
}
======= flags =======
======= stdout =======
0
0
1
2
3
2
3
