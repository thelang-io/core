======= stdin =======
obj Test {
  a: int
}

fn test1 (a: Test, b := Test{a: 1}, c := Test{a: 2}) Test {
  return Test{a: a.a + b.a + c.a}
}

main {
  test1(Test{a: 1})
  test1(Test{a: 1}, Test{a: 2})
  test1(Test{a: 1}, Test{a: 2}, Test{a: 3})
  test1(Test{a: 1}, b: Test{a: 2})
  test1(Test{a: 1}, c: Test{a: 3})
  test1(Test{a: 1}, b: Test{a: 2}, c: Test{a: 3})
  test1(Test{a: 1}, c: Test{a: 3}, b: Test{a: 2})

  mut a := Test{a: 1}

  fn test2 (a2: Test, b := Test{a: 1}, c := Test{a: 2}) {
    a = test1(a2, b, c)
  }

  test2(Test{a: 1})
  test2(Test{a: 1}, Test{a: 2})
  test2(Test{a: 1}, Test{a: 2}, Test{a: 3})
  test2(Test{a: 1}, b: Test{a: 2})
  test2(Test{a: 1}, c: Test{a: 3})
  test2(Test{a: 1}, b: Test{a: 2}, c: Test{a: 3})
  test2(Test{a: 1}, c: Test{a: 3}, b: Test{a: 2})
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_Test_0;
struct __THE_1_fn$0;
struct __THE_1_fn$0P;
struct __THE_1_fn$1;
struct __THE_1_fn$1P;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_Test_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_fn$0 {
  struct __THE_1_Test_0 *(*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$0P {
  struct __THE_1_Test_0 *n0;
  unsigned char o1;
  struct __THE_1_Test_0 *n1;
  unsigned char o2;
  struct __THE_1_Test_0 *n2;
};
struct __THE_1_fn$1 {
  void (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct __THE_1_Test_0 *n0;
  unsigned char o1;
  struct __THE_1_Test_0 *n1;
  unsigned char o2;
  struct __THE_1_Test_0 *n2;
};
struct __THE_1_mainSDtest2_0X {
  struct __THE_1_Test_0 **__THE_0_a_0;
  const struct __THE_1_fn$0 *__THE_0_test1_0;
};

void *alloc (size_t);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *, struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_test1_0 (void *, struct __THE_1_fn$0P);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtest2_0X);
void __THE_1_mainSDtest2_0 (void *, struct __THE_1_fn$1P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *n) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *n1, struct __THE_1_Test_0 *n2) {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) n1);
  return n2;
}
struct __THE_1_Test_0 *__THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_Test_0 *v;
  const struct __THE_1_Test_0 *__THE_0_a_0 = p.n0;
  const struct __THE_1_Test_0 *__THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_Test_0_alloc(1);
  const struct __THE_1_Test_0 *__THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_Test_0_alloc(2);
  v = __THE_1_Test_0_alloc(__THE_0_a_0->__THE_0_a + __THE_0_b_0->__THE_0_a + __THE_0_c_0->__THE_0_a);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_c_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_b_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_a_0);
  return v;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest2_0 (void *px, struct __THE_1_fn$1P p) {
  struct __THE_1_mainSDtest2_0X *x = px;
  struct __THE_1_Test_0 **__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$0 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_Test_0 *__THE_0_a2_0 = p.n0;
  const struct __THE_1_Test_0 *__THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_Test_0_alloc(1);
  const struct __THE_1_Test_0 *__THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_Test_0_alloc(2);
  *__THE_0_a_0 = __THE_1_Test_0_realloc(*__THE_0_a_0, (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$0P) {__THE_1_Test_0_copy(__THE_0_a2_0), 1, __THE_1_Test_0_copy(__THE_0_b_0), 1, __THE_1_Test_0_copy(__THE_0_c_0)}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_c_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_b_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_a2_0);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 0, NULL, 0, NULL}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 0, NULL}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 1, __THE_1_Test_0_alloc(3)}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 0, NULL}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 0, NULL, 1, __THE_1_Test_0_alloc(3)}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 1, __THE_1_Test_0_alloc(3)}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 1, __THE_1_Test_0_alloc(3)}));
  struct __THE_1_Test_0 *__THE_0_a_0 = __THE_1_Test_0_alloc(1);
  const struct __THE_1_fn$1 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 0, NULL, 0, NULL});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 0, NULL});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 1, __THE_1_Test_0_alloc(3)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 0, NULL});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 0, NULL, 1, __THE_1_Test_0_alloc(3)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 1, __THE_1_Test_0_alloc(3)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(1), 1, __THE_1_Test_0_alloc(2), 1, __THE_1_Test_0_alloc(3)});
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtest2_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
