======= stdin =======
main {
  var1: any
  var2: any = 2
  var3: any = "test"

  a := [var1, var2, var3]
  b: any[] = [var1, var2, var3]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2
#define TYPE_str 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_any_int;
struct __THE_1_any_str;
struct __THE_1_array_any;

struct __THE_1_any_int {
  int32_t d;
};
struct __THE_1_any_str {
  struct str d;
};
struct __THE_1_array_any {
  struct any *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);
struct any __THE_1_any_str_alloc (struct str);
struct any __THE_1_any_str_copy (const struct any);
void __THE_1_any_str_free (struct any);
struct __THE_1_array_any __THE_1_array_any_alloc (size_t, ...);
void __THE_1_array_any_free (struct __THE_1_array_any);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}
struct any __THE_1_any_str_alloc (struct str d) {
  size_t l = sizeof(struct __THE_1_any_str);
  struct __THE_1_any_str *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_str, r, l, &__THE_1_any_str_copy, &__THE_1_any_str_free};
}
struct any __THE_1_any_str_copy (const struct any n) {
  struct __THE_1_any_str *o = n.d;
  struct __THE_1_any_str *r = alloc(n.l);
  r->d = str_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_str_free (struct any _n) {
  struct __THE_1_any_str *n = _n.d;
  str_free((struct str) n->d);
  free(n);
}
struct __THE_1_array_any __THE_1_array_any_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_any) {NULL, 0};
  struct any *d = alloc(x * sizeof(struct any));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct any);
  va_end(args);
  return (struct __THE_1_array_any) {d, x};
}
void __THE_1_array_any_free (struct __THE_1_array_any n) {
  for (size_t i = 0; i < n.l; i++) any_free((struct any) n.d[i]);
  free(n.d);
}

int main () {
  const struct any __THE_0_var1_0 = {0, NULL, 0, NULL, NULL};
  const struct any __THE_0_var2_0 = __THE_1_any_int_alloc(2);
  const struct any __THE_0_var3_0 = __THE_1_any_str_alloc(str_alloc("test"));
  const struct __THE_1_array_any __THE_0_a_0 = __THE_1_array_any_alloc(3, any_copy(__THE_0_var1_0), any_copy(__THE_0_var2_0), any_copy(__THE_0_var3_0));
  const struct __THE_1_array_any __THE_0_b_0 = __THE_1_array_any_alloc(3, any_copy(__THE_0_var1_0), any_copy(__THE_0_var2_0), any_copy(__THE_0_var3_0));
  __THE_1_array_any_free((struct __THE_1_array_any) __THE_0_b_0);
  __THE_1_array_any_free((struct __THE_1_array_any) __THE_0_a_0);
  any_free((struct any) __THE_0_var3_0);
  any_free((struct any) __THE_0_var2_0);
  any_free((struct any) __THE_0_var1_0);
}
======= flags =======
======= stdout =======
