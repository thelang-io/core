======= stdin =======
main {
  print(path_dirname(""))
  print(path_dirname("t"))
  print(path_dirname("test"))
  print(path_dirname(path_SEP))
  print(path_dirname("t" + path_SEP))
  print(path_dirname("test" + path_SEP))
  print(path_dirname(path_SEP + "t"))
  print(path_dirname(path_SEP + "test"))
  print(path_dirname("t" + path_SEP + "t"))
  print(path_dirname("t" + path_SEP + "test"))
  print(path_dirname("test" + path_SEP + "t"))
  print(path_dirname("test" + path_SEP + "test"))
  print(path_dirname(path_SEP + "t" + path_SEP + "t"))
  print(path_dirname(path_SEP + "t" + path_SEP + "test"))
  print(path_dirname(path_SEP + "test" + path_SEP + "t"))
  print(path_dirname(path_SEP + "test" + path_SEP + "test"))
  print(path_dirname(path_SEP + "t" + path_SEP + "t" + path_SEP))
  print(path_dirname(path_SEP + "t" + path_SEP + "test" + path_SEP))
  print(path_dirname(path_SEP + "test" + path_SEP + "t" + path_SEP))
  print(path_dirname(path_SEP + "test" + path_SEP + "test" + path_SEP))
  print(path_dirname(path_SEP + "t" + path_SEP + "t" + path_SEP + "t"))
  print(path_dirname(path_SEP + "t" + path_SEP + "test" + path_SEP + "test"))
  print(path_dirname(path_SEP + "test" + path_SEP + "t" + path_SEP + "t"))
  print(path_dirname(path_SEP + "test" + path_SEP + "test" + path_SEP + "test"))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str path_dirname (struct str);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str path_dirname (struct str s) {
  if (s.l == 0) {
    str_free(s);
    return str_alloc(".");
  }
  #ifdef THE_OS_WINDOWS
    char e = '\\';
  #else
    char e = '/';
  #endif
  size_t l = 0;
  unsigned char k = 0;
  for (size_t i = s.l - 1;; i--) {
    if (k == 1 && s.d[i] == e) {
      l = i;
      break;
    } else if (k == 0 && s.d[i] != e) {
      k = 1;
    }
    if (i == 0) break;
  }
  if (l == 0) {
    s.d = re_alloc(s.d, 1);
    if (s.d[0] != e) s.d[0] = '.';
    return (struct str) {s.d, 1};
  }
  char *d = alloc(l);
  memcpy(d, s.d, l);
  str_free(s);
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 2, 9), path_dirname(str_alloc(""))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 3, 9), path_dirname(str_alloc("t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 4, 9), path_dirname(str_alloc("test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 5, 9), path_dirname(str_alloc(THE_PATH_SEP))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 6, 9), path_dirname(cstr_concat_str("t", str_alloc(THE_PATH_SEP)))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 7, 9), path_dirname(cstr_concat_str("test", str_alloc(THE_PATH_SEP)))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 8, 9), path_dirname(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 9, 9), path_dirname(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 10, 9), path_dirname(str_concat_cstr(cstr_concat_str("t", str_alloc(THE_PATH_SEP)), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 11, 9), path_dirname(str_concat_cstr(cstr_concat_str("t", str_alloc(THE_PATH_SEP)), "test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 12, 9), path_dirname(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 13, 9), path_dirname(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 14, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 15, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 16, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 17, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 18, 9), path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP)))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 19, 9), path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP)))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 20, 9), path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP)))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 21, 9), path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP)))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 22, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP)), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 23, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP)), "test"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 24, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP)), "t"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", (error_stack_pos(&err_state, 25, 9), path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP)), "test"))), THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
.
.
.
{{ [\/\\] }}
.
.
{{ [\/\\] }}
{{ [\/\\] }}
t
t
test
test
{{ [\/\\] }}t
{{ [\/\\] }}t
{{ [\/\\] }}test
{{ [\/\\] }}test
{{ [\/\\] }}t
{{ [\/\\] }}t
{{ [\/\\] }}test
{{ [\/\\] }}test
{{ [\/\\] }}t{{ [\/\\] }}t
{{ [\/\\] }}t{{ [\/\\] }}test
{{ [\/\\] }}test{{ [\/\\] }}t
{{ [\/\\] }}test{{ [\/\\] }}test
