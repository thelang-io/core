======= stdin =======
main {
  file1 := path_tempFile()
  file2 := path_tempFile()

  print(file1)
  print(file2)
  print(file1 == file2)

  fs_rmSync(file1)
  fs_rmSync(file2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

#ifdef THE_OS_WINDOWS
  extern unsigned char NTAPI SystemFunction036 (void *, unsigned long);
#endif

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void fs_rmSync (struct str);
char *path_mktemp (unsigned char (*f) (char *));
struct str path_tempFile ();
unsigned char path_tempFileFunctor (char *);
char *path_tmpdir ();
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
char *str_cstr (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void fs_rmSync (struct str s) {
  char *c = str_cstr(s);
  if (remove(c) != 0) {
    const char *fmt = "failed to remove file `%s`";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z);
    sprintf(d, fmt, c);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    goto fs_rmSync_cleanup;
  }
fs_rmSync_cleanup:
  free(c);
  str_free(s);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
char *path_mktemp (unsigned char (*f) (char *)) {
  static const char *chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  static const size_t chars_len = 62;
  static const size_t x = 6;
  char *d = path_tmpdir();
  size_t l = strlen(d) + x;
  d = re_alloc(d, l + 1);
  memcpy(&d[l - x], "XXXXXX", x + 1);
  #ifdef THE_OS_WINDOWS
    size_t j = TMP_MAX;
    unsigned long long v;
    do {
      if (!SystemFunction036((void *) &v, sizeof(v))) {
        free(d);
        error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to generate random with `SystemFunction036`"), str_alloc("")));
        longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
      }
      char *p = &d[l - x];
      for (size_t i = 0; i < x; i++) {
        *p++ = chars[v % chars_len];
        v /= chars_len;
      }
      if (f(d)) return d;
    } while (--j);
    free(d);
    return NULL;
  #else
    if (!f(d)) {
      free(d);
      return NULL;
    }
    return d;
  #endif
}
struct str path_tempFile () {
  char *d = path_mktemp(path_tempFileFunctor);
  if (d == NULL) {
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to create temporary file"), str_alloc("")));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  struct str r = str_alloc(d);
  free(d);
  return r;
}
unsigned char path_tempFileFunctor (char *c) {
  #ifdef THE_OS_WINDOWS
    return INVALID_HANDLE_VALUE == CreateFile(c, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL) ? 0 : 1;
  #else
    int fd = mkstemp(c);
    if (fd != -1) close(fd);
    return fd == -1 ? 0 : 1;
  #endif
}
char *path_tmpdir () {
  char *d;
  #ifdef THE_OS_WINDOWS
    size_t l = GetTempPath(0, NULL);
    if (l == 0) {
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to get temporary path"), str_alloc("")));
      longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
    }
    l -= 1;
    d = alloc(l + 1);
    if (GetTempPath(l + 1, d) == 0) {
      free(d);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to get temporary path"), str_alloc("")));
      longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
    }
    if (d[l - 1] != '\\' && d[l - 1] != '/') {
      d[l] = '\\';
      d = re_alloc(d, ++l + 1);
    }
    d[l] = '\0';
  #else
    char *f;
    if (
      (f = getenv("TMPDIR")) == NULL &&
      (f = getenv("TMP")) == NULL &&
      (f = getenv("TEMP")) == NULL &&
      (f = getenv("TEMPDIR")) == NULL
    ) {
      f = "/tmp/";
    }
    size_t l = strlen(f);
    d = alloc(l + 1);
    memcpy(d, f, l);
    if (f[l - 1] != '/') {
      d[l] = '/';
      d = re_alloc(d, ++l + 1);
    }
    d[l] = '\0';
  #endif
  return d;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct str __THE_0_file1_0 = (error_stack_pos(&err_state, 2, 12), path_tempFile());
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct str __THE_0_file2_0 = (error_stack_pos(&err_state, 3, 12), path_tempFile());
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "sz", str_copy(__THE_0_file1_0), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "sz", str_copy(__THE_0_file2_0), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "tz", str_eq_str(str_copy(__THE_0_file1_0), str_copy(__THE_0_file2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 9, 3), fs_rmSync(str_copy(__THE_0_file1_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 10, 3), fs_rmSync(str_copy(__THE_0_file2_0)));
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
W:-ladvapi32
======= stdout =======
{{ (/var/folders/\w+/\w+/\w+/\w+|/tmp/\w+|C:\\\w+\\[\w~]+\\\w+\\\w+\\\w+\\\w+) }}
{{ (/var/folders/\w+/\w+/\w+/\w+|/tmp/\w+|C:\\\w+\\[\w~]+\\\w+\\\w+\\\w+\\\w+) }}
false
