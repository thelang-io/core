======= stdin =======
main {
  testInt1 := 1
  testInt2 := 2
  mut a := ref testInt1
  mut b := ref testInt2

  mut ref1 := ref a

  ref1.str()
  ref1 = ref b
  ref1.str()

  v4 := true ? a : ref1
  v5 := false ? ref1 : b
  v6 := false ? ref1 : ref1
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  const int32_t __THE_0_testInt1_0 = 1;
  const int32_t __THE_0_testInt2_0 = 2;
  int32_t *__THE_0_a_0 = &__THE_0_testInt1_0;
  int32_t *__THE_0_b_0 = &__THE_0_testInt2_0;
  int32_t **__THE_0_ref1_0 = &__THE_0_a_0;
  str_free((struct str) int_str(**__THE_0_ref1_0));
  __THE_0_ref1_0 = &__THE_0_b_0;
  str_free((struct str) int_str(**__THE_0_ref1_0));
  const int32_t *__THE_0_v4_0 = true ? __THE_0_a_0 : *__THE_0_ref1_0;
  const int32_t **__THE_0_v5_0 = false ? __THE_0_ref1_0 : &__THE_0_b_0;
  const int32_t **__THE_0_v6_0 = false ? __THE_0_ref1_0 : __THE_0_ref1_0;
}
======= flags =======
======= stdout =======
