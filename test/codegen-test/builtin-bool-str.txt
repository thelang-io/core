======= stdin =======
obj Test1 {
  b: bool
}

fn testCall () bool {
  return true
}

main {
  test := true
  refTest := ref test
  test1 := Test1{b: true}
  mut test2 := true

  v01 := test.str()
  v02 := test1.b.str()
  v03 := (test2 = false).str()
  v04 := (1 > 2).str()
  v05 := testCall().str()
  v06 := (1 > 2 ? true : false).str()
  v07 := true.str()
  v08 := false.str()
  v09 := (ref test).str()
  v10 := refTest.str()
  v11 := (!1).str()
  v12 := (!!1).str()

  fn testCtx () {
    v101 := test.str()
    v102 := test1.b.str()
    v103 := (test2 = false).str()
    v104 := testCall().str()
    v105 := (ref test).str()
    v106 := refTest.str()
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_test_Test1_0;
struct __THE_1_fn_sFRboolFE;
struct __THE_1_fn_sFRvoidFE;
struct __THE_1_test_mainSDtestCtx_0X;

struct __THE_1_test_Test1_0 {
  const bool __THE_0_b;
};
struct __THE_1_fn_sFRboolFE {
  bool (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_test_mainSDtestCtx_0X {
  bool *__THE_0_test2_0;
  const struct __THE_1_test_Test1_0 **__THE_0_test1_0;
  const bool **__THE_0_refTest_0;
  const bool *__THE_0_test_0;
  const struct __THE_1_fn_sFRboolFE *__THE_0_test_testCall_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
struct str bool_str (bool);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_test_Test1_0 *__THE_1_test_Test1_0_alloc (bool);
void __THE_1_test_Test1_0_free (struct __THE_1_test_Test1_0 *);
bool __THE_1_test_testCall_0 (void *);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_test_mainSDtestCtx_0 (void *);
void __THE_1_test_mainSDtestCtx_0_alloc (struct __THE_1_fn_sFRvoidFE *, struct __THE_1_test_mainSDtestCtx_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str bool_str (bool t) {
  return str_alloc(t ? "true" : "false");
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_test_Test1_0 *__THE_1_test_Test1_0_alloc (bool __THE_0_b) {
  struct __THE_1_test_Test1_0 *r = alloc(sizeof(struct __THE_1_test_Test1_0));
  struct __THE_1_test_Test1_0 s = {__THE_0_b};
  memcpy(r, &s, sizeof(struct __THE_1_test_Test1_0));
  return r;
}
void __THE_1_test_Test1_0_free (struct __THE_1_test_Test1_0 *n) {
  free(n);
}
bool __THE_1_test_testCall_0 (void *px) {
  return true;
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test_mainSDtestCtx_0 (void *px) {
  struct __THE_1_test_mainSDtestCtx_0X *x = px;
  bool *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_test_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const bool **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const bool *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn_sFRboolFE *__THE_0_test_testCall_0 = x->__THE_0_test_testCall_0;
  const struct str __THE_0_v101_0 = bool_str(*__THE_0_test_0);
  const struct str __THE_0_v102_0 = bool_str((*__THE_0_test1_0)->__THE_0_b);
  const struct str __THE_0_v103_0 = bool_str((*__THE_0_test2_0 = false));
  const struct str __THE_0_v104_0 = bool_str((*__THE_0_test_testCall_0).f((*__THE_0_test_testCall_0).x));
  const struct str __THE_0_v105_0 = bool_str((*__THE_0_test_0));
  const struct str __THE_0_v106_0 = bool_str(**__THE_0_refTest_0);
  str_free((struct str) __THE_0_v106_0);
  str_free((struct str) __THE_0_v105_0);
  str_free((struct str) __THE_0_v104_0);
  str_free((struct str) __THE_0_v103_0);
  str_free((struct str) __THE_0_v102_0);
  str_free((struct str) __THE_0_v101_0);
}
void __THE_1_test_mainSDtestCtx_0_alloc (struct __THE_1_fn_sFRvoidFE *n, struct __THE_1_test_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_test_mainSDtestCtx_0X);
  struct __THE_1_test_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn_sFRboolFE __THE_0_test_testCall_0 = (struct __THE_1_fn_sFRboolFE) {&__THE_1_test_testCall_0, NULL, 0};
  const bool __THE_0_test_0 = true;
  const bool *__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_test_Test1_0 *__THE_0_test1_0 = __THE_1_test_Test1_0_alloc(true);
  bool __THE_0_test2_0 = true;
  const struct str __THE_0_v01_0 = bool_str(__THE_0_test_0);
  const struct str __THE_0_v02_0 = bool_str(__THE_0_test1_0->__THE_0_b);
  const struct str __THE_0_v03_0 = bool_str((__THE_0_test2_0 = false));
  const struct str __THE_0_v04_0 = bool_str((1 > 2));
  const struct str __THE_0_v05_0 = bool_str(__THE_0_test_testCall_0.f(__THE_0_test_testCall_0.x));
  const struct str __THE_0_v06_0 = bool_str((1 > 2 ? true : false));
  const struct str __THE_0_v07_0 = bool_str(true);
  const struct str __THE_0_v08_0 = bool_str(false);
  const struct str __THE_0_v09_0 = bool_str((__THE_0_test_0));
  const struct str __THE_0_v10_0 = bool_str(*__THE_0_refTest_0);
  const struct str __THE_0_v11_0 = bool_str((!1));
  const struct str __THE_0_v12_0 = bool_str((!!1));
  const struct __THE_1_fn_sFRvoidFE __THE_0_test_mainSDtestCtx_0;
  __THE_1_test_mainSDtestCtx_0_alloc((struct __THE_1_fn_sFRvoidFE *) &__THE_0_test_mainSDtestCtx_0, (struct __THE_1_test_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_test_testCall_0});
  __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) __THE_0_test_mainSDtestCtx_0);
  str_free((struct str) __THE_0_v12_0);
  str_free((struct str) __THE_0_v11_0);
  str_free((struct str) __THE_0_v10_0);
  str_free((struct str) __THE_0_v09_0);
  str_free((struct str) __THE_0_v08_0);
  str_free((struct str) __THE_0_v07_0);
  str_free((struct str) __THE_0_v06_0);
  str_free((struct str) __THE_0_v05_0);
  str_free((struct str) __THE_0_v04_0);
  str_free((struct str) __THE_0_v03_0);
  str_free((struct str) __THE_0_v02_0);
  str_free((struct str) __THE_0_v01_0);
  __THE_1_test_Test1_0_free((struct __THE_1_test_Test1_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
