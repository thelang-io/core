======= stdin =======
main {
  process_env;
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

extern char **environ;

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSstrME;
struct __THE_1_map_strMSstrME;

struct __THE_1_pair_strMSstrME {
  struct str f;
  struct str s;
};
struct __THE_1_map_strMSstrME {
  struct __THE_1_pair_strMSstrME *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct __THE_1_map_strMSstrME process_env ();
struct str str_alloc (const char *);
struct str str_calloc (const char *, size_t);
void str_free (struct str);
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_map_strMSstrME process_env () {
  size_t l = 0;
  while (environ[l] != NULL) l++;
  struct __THE_1_pair_strMSstrME *d = alloc(l * sizeof(struct __THE_1_pair_strMSstrME));
  for (size_t i = 0; i < l; i++) {
    char *p = environ[i];
    size_t pl = strlen(p);
    char *e = strchr(p, '=');
    if (e == NULL) {
      d[i] = (struct __THE_1_pair_strMSstrME) {str_calloc(p, pl), str_alloc("")};
    } else {
      size_t ei = e - p;
      d[i] = (struct __THE_1_pair_strMSstrME) {str_calloc(p, ei), (ei == pl - 1) ? str_alloc("") : str_calloc(&p[ei + 1], pl - ei - 1)};
    }
  }
  return (struct __THE_1_map_strMSstrME) {d, l, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_calloc (const char *r, size_t l) {
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    str_free((struct str) n.d[i].s);
  }
  free(n.d);
}

int main () {
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) process_env());
}
======= flags =======
======= stdout =======
