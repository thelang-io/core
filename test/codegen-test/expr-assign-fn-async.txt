======= stdin =======
async fn test1 () {}
async fn test2 () {}
async fn test3 () {}
main {
  a: async () -> void = test1
  mut b := a
  b = a
  mut c: async () -> void = test2
  c = b = a
  mut d: async () -> void = test3
  d = c = b = a
  d = true ? b : a
  d = true ? b = c : a
  d = true ? c : b = a
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

struct threadpool;
struct threadpool_job;
struct threadpool_thread;

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
typedef struct threadpool {
  bool active;
  pthread_cond_t cond1;
  pthread_cond_t cond2;
  struct threadpool_job *jobs;
  pthread_mutex_t lock;
  struct threadpool_thread *threads;
  int working_threads;
} threadpool_t;
typedef struct threadpool_job {
  struct threadpool_job *parent;
  int (*func) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
  void *ctx;
  void *params;
  void *ret;
  int step;
  bool referenced;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  pthread_t id;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn$1000;

struct __THE_1_fn$1000 {
  int (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000, struct __THE_1_fn$1000);
int __THE_1_test1_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
int __THE_1_test2_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
int __THE_1_test3_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000 n1, struct __THE_1_fn$1000 n2) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n1);
  return n2;
}
int __THE_1_test1_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  return -1;
}
int __THE_1_test2_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  return -1;
}
int __THE_1_test3_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  return -1;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test2_0 = (struct __THE_1_fn$1000) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test3_0 = (struct __THE_1_fn$1000) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_a_0 = __THE_1_fn$1000_copy(__THE_0_test1_0);
  struct __THE_1_fn$1000 __THE_0_b_0 = __THE_1_fn$1000_copy(__THE_0_a_0);
  __THE_0_b_0 = __THE_1_fn$1000_realloc(__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_a_0));
  struct __THE_1_fn$1000 __THE_0_c_0 = __THE_1_fn$1000_copy(__THE_0_test2_0);
  __THE_0_c_0 = __THE_1_fn$1000_realloc(__THE_0_c_0, __THE_1_fn$1000_copy(__THE_0_b_0 = __THE_1_fn$1000_realloc(__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_a_0))));
  struct __THE_1_fn$1000 __THE_0_d_0 = __THE_1_fn$1000_copy(__THE_0_test3_0);
  __THE_0_d_0 = __THE_1_fn$1000_realloc(__THE_0_d_0, __THE_1_fn$1000_copy(__THE_0_c_0 = __THE_1_fn$1000_realloc(__THE_0_c_0, __THE_1_fn$1000_copy(__THE_0_b_0 = __THE_1_fn$1000_realloc(__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_a_0))))));
  __THE_0_d_0 = __THE_1_fn$1000_realloc(__THE_0_d_0, true ? __THE_1_fn$1000_copy(__THE_0_b_0) : __THE_1_fn$1000_copy(__THE_0_a_0));
  __THE_0_d_0 = __THE_1_fn$1000_realloc(__THE_0_d_0, true ? __THE_1_fn$1000_copy(__THE_0_b_0 = __THE_1_fn$1000_realloc(__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_c_0))) : __THE_1_fn$1000_copy(__THE_0_a_0));
  __THE_0_d_0 = __THE_1_fn$1000_realloc(__THE_0_d_0, true ? __THE_1_fn$1000_copy(__THE_0_c_0) : __THE_1_fn$1000_copy(__THE_0_b_0 = __THE_1_fn$1000_realloc(__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_a_0))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_d_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_c_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_b_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_a_0);
}
======= flags =======
======= stdout =======
