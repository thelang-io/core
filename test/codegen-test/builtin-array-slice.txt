======= stdin =======
main {
  test := [0, 1, 2]

  print(test.slice())
  print(test.slice(0))
  print(test.slice(1))
  print(test.slice(2))
  print(test.slice(3))
  print(test.slice(0, 0))
  print(test.slice(0, 1))
  print(test.slice(0, 2))
  print(test.slice(0, 3))
  print(test.slice(1, 0))
  print(test.slice(1, 1))
  print(test.slice(1, 2))
  print(test.slice(1, 3))
  print(test.slice(2, 0))
  print(test.slice(2, 1))
  print(test.slice(2, 2))
  print(test.slice(2, 3))
  print(test.slice(3, 0))
  print(test.slice(3, 1))
  print(test.slice(3, 2))
  print(test.slice(3, 3))
  print(test.slice(0, -1))
  print(test.slice(0, -2))
  print(test.slice(0, -3))
  print(test.slice(1, -1))
  print(test.slice(1, -2))
  print(test.slice(1, -3))
  print(test.slice(2, -1))
  print(test.slice(2, -2))
  print(test.slice(2, -3))
  print(test.slice(3, -1))
  print(test.slice(3, -2))
  print(test.slice(3, -3))
  print(test.slice(-1, 0))
  print(test.slice(-1, 1))
  print(test.slice(-1, 2))
  print(test.slice(-1, 3))
  print(test.slice(-2, 0))
  print(test.slice(-2, 1))
  print(test.slice(-2, 2))
  print(test.slice(-2, 3))
  print(test.slice(-3, 0))
  print(test.slice(-3, 1))
  print(test.slice(-3, 2))
  print(test.slice(-3, 3))
  print(test.slice(-1, -1))
  print(test.slice(-1, -2))
  print(test.slice(-1, -3))
  print(test.slice(-2, -1))
  print(test.slice(-2, -2))
  print(test.slice(-2, -3))
  print(test.slice(-3, -1))
  print(test.slice(-3, -2))
  print(test.slice(-3, -3))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_slice (struct __THE_1_array_int, unsigned int, int32_t, unsigned int, int32_t);
struct str __THE_1_array_int_str (struct __THE_1_array_int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_slice (struct __THE_1_array_int n, unsigned int o1, int32_t n1, unsigned int o2, int32_t n2) {
  int32_t i1 = o1 == 0 ? 0 : (int32_t) (n1 < 0 ? (n1 < -((int32_t) n.l) ? 0 : n1 + n.l) : (n1 > n.l ? n.l : n1));
  int32_t i2 = o2 == 0 ? (int32_t) n.l : (int32_t) (n2 < 0 ? (n2 < -((int32_t) n.l) ? 0 : n2 + n.l) : (n2 > n.l ? n.l : n2));
  if (i1 > i2 || i1 >= n.l) {
    __THE_1_array_int_free((struct __THE_1_array_int) n);
    return (struct __THE_1_array_int) {NULL, 0};
  }
  size_t l = i2 - i1;
  int32_t *d = alloc(l * sizeof(int32_t));
  for (size_t i = 0; i1 < i2; i1++) d[i++] = n.d[i1];
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return (struct __THE_1_array_int) {d, l};
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}

int main () {
  const struct __THE_1_array_int __THE_0_test_0 = __THE_1_array_int_alloc(3, 0, 1, 2);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 0, 0, 0, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 0, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 0, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 0, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 0, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, -3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, -3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, -3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, -3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 0)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, -3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, -3)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, -1)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, -2)), THE_EOL);
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, -3)), THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test_0);
}
======= flags =======
======= stdout =======
[0, 1, 2]
[0, 1, 2]
[1, 2]
[2]
[]
[]
[0]
[0, 1]
[0, 1, 2]
[]
[]
[1]
[1, 2]
[]
[]
[]
[2]
[]
[]
[]
[]
[0, 1]
[0]
[]
[1]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[2]
[]
[]
[1]
[1, 2]
[]
[0]
[0, 1]
[0, 1, 2]
[]
[]
[]
[1]
[]
[]
[0, 1]
[0]
[]
