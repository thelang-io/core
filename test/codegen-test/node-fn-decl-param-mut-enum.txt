======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}
fn test1 (mut a: Test) Test {
  return a
}
fn test2 (mut a: Test, mut b := Test.Red) Test {
  b = a
  return a == b ? a : b
}
main {
  test1(.Green)
  test2(.Blue)
  test2(.Blue, .Green)
}
======= code =======
#include <stdlib.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

struct __THE_1_fn$0;
struct __THE_1_fn$0P;
struct __THE_1_fn$1;
struct __THE_1_fn$1P;

struct __THE_1_fn$0 {
  enum __THE_1_Test_0 (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$0P {
  enum __THE_1_Test_0 n0;
};
struct __THE_1_fn$1 {
  enum __THE_1_Test_0 (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  enum __THE_1_Test_0 n0;
  unsigned char o1;
  enum __THE_1_Test_0 n1;
};

enum __THE_1_Test_0 __THE_1_test1_0 (void *, struct __THE_1_fn$0P);
enum __THE_1_Test_0 __THE_1_test2_0 (void *, struct __THE_1_fn$1P);

enum __THE_1_Test_0 __THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  enum __THE_1_Test_0 __THE_0_a_0 = p.n0;
  return __THE_0_a_0;
}
enum __THE_1_Test_0 __THE_1_test2_0 (void *px, struct __THE_1_fn$1P p) {
  enum __THE_1_Test_0 __THE_0_a_0 = p.n0;
  enum __THE_1_Test_0 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_0_TestSDRed_0;
  __THE_0_b_0 = __THE_0_a_0;
  return __THE_0_a_0 == __THE_0_b_0 ? __THE_0_a_0 : __THE_0_b_0;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test2_0 = (struct __THE_1_fn$1) {&__THE_1_test2_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_0_TestSDGreen_0});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {__THE_0_TestSDBlue_0, 0, 0});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {__THE_0_TestSDBlue_0, 1, __THE_0_TestSDGreen_0});
}
======= flags =======
======= stdout =======
