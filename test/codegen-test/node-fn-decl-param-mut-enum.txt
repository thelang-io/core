======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}
fn test1 (mut a: Test) Test {
  return a
}
fn test2 (mut a: Test, mut b := Test.Red) Test {
  b = a
  return a == b ? a : b
}
main {
  test1(.Green)
  test2(.Blue)
  test2(.Blue, .Green)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;

struct __THE_1_fn$1000 {
  enum __THE_1_Test_0 (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  enum __THE_1_Test_0 n0;
};
struct __THE_1_fn$1001 {
  enum __THE_1_Test_0 (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  enum __THE_1_Test_0 n0;
  unsigned char o1;
  enum __THE_1_Test_0 n1;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
enum __THE_1_Test_0 __THE_1_test1_0 (void *, void *);
enum __THE_1_Test_0 __THE_1_test2_0 (void *, void *);

void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
enum __THE_1_Test_0 __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_fn$1000P *p = pp;
  enum __THE_1_Test_0 __THE_0_a_0 = p->n0;
  return __THE_0_a_0;
}
enum __THE_1_Test_0 __THE_1_test2_0 (void *px, void *pp) {
  struct __THE_1_fn$1001P *p = pp;
  enum __THE_1_Test_0 __THE_0_a_0 = p->n0;
  enum __THE_1_Test_0 __THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_0_TestSDRed_0;
  __THE_0_b_0 = __THE_0_a_0;
  return __THE_0_a_0 == __THE_0_b_0 ? __THE_0_a_0 : __THE_0_b_0;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_test2_0 = (struct __THE_1_fn$1001) {&__THE_1_test2_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_TestSDGreen_0}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_TestSDBlue_0, 0, 0}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_TestSDBlue_0, 1, __THE_0_TestSDGreen_0}, sizeof(struct __THE_1_fn$1001P)));
}
======= flags =======
======= stdout =======
