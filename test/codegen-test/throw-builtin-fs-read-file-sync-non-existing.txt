======= stdin =======
main {
  fs_readFileSync("test/fixtures/test1.txt")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
void buffer_free (struct buffer);
struct str str_alloc (const char *);
void str_free (struct str);
struct buffer fs_readFileSync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void buffer_free (struct buffer o) {
  free(o.d);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct buffer fs_readFileSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  FILE *f = fopen(c, "rb");
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open file `%s` for reading" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  unsigned char *d = NULL;
  unsigned char b[4096];
  size_t l = 0;
  size_t y;
  while ((y = fread(b, 1, sizeof(b), f)) > 0) {
    d = re_alloc(d, l + y);
    memcpy(&d[l], b, y);
    l += y;
  }
  fclose(f);
  free(c);
  str_free((struct str) s);
  return (struct buffer) {d, l};
}

int main () {
  buffer_free((struct buffer) fs_readFileSync(str_alloc("test/fixtures/test1.txt")));
}
======= flags =======
======= stderr =======
Error: failed to open file `test/fixtures/test1.txt` for reading
