======= stdin =======
fn test1 (mut a: int[str]) int[str] {
  a.set("key4", 2)
  return a
}
fn test2 (mut a: int[str], mut b := { "key4": 4, "key5": 5, "key6": 6 }) int[str] {
  b = a
  a.set("key4", b.len)
  return a
}
main {
  test1({ "key1": 0, "key2": 1 })
  test2({ "key3": 2, "key4": 3 })
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_fn$1003;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1004;
struct __THE_1_fn$1004P;

struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_fn$1003 {
  struct __THE_1_map_strMSintME (*f) (void *, struct __THE_1_fn$1003P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1003P {
  struct __THE_1_map_strMSintME n0;
};
struct __THE_1_fn$1004 {
  struct __THE_1_map_strMSintME (*f) (void *, struct __THE_1_fn$1004P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1004P {
  struct __THE_1_map_strMSintME n0;
  unsigned char o1;
  struct __THE_1_map_strMSintME n1;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
size_t __THE_1_map_strMSintME_len (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_realloc (struct __THE_1_map_strMSintME, struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_set (struct __THE_1_map_strMSintME *, struct str, int32_t);
struct __THE_1_map_strMSintME __THE_1_test1_0 (void *, struct __THE_1_fn$1003P);
struct __THE_1_map_strMSintME __THE_1_test2_0 (void *, struct __THE_1_fn$1004P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
size_t __THE_1_map_strMSintME_len (struct __THE_1_map_strMSintME n) {
  size_t l = n.l;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return l;
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_realloc (struct __THE_1_map_strMSintME n1, struct __THE_1_map_strMSintME n2) {
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n1);
  return n2;
}
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_set (struct __THE_1_map_strMSintME *n, struct str k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (str_eq_str(str_copy(n->d[i].f), str_copy(k))) {
      str_free((struct str) k);
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_strMSintME));
  n->d[n->l++] = (struct __THE_1_pair_strMSintME) {k, v};
  return n;
}
struct __THE_1_map_strMSintME __THE_1_test1_0 (void *px, struct __THE_1_fn$1003P p) {
  struct __THE_1_map_strMSintME v;
  struct __THE_1_map_strMSintME __THE_0_a_0 = p.n0;
  __THE_1_map_strMSintME_set(&__THE_0_a_0, str_alloc("key4"), 2);
  v = __THE_1_map_strMSintME_copy(__THE_0_a_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_a_0);
  return v;
}
struct __THE_1_map_strMSintME __THE_1_test2_0 (void *px, struct __THE_1_fn$1004P p) {
  struct __THE_1_map_strMSintME v;
  struct __THE_1_map_strMSintME __THE_0_a_0 = p.n0;
  struct __THE_1_map_strMSintME __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_map_strMSintME_alloc(3, str_alloc("key4"), 4, str_alloc("key5"), 5, str_alloc("key6"), 6);
  __THE_0_b_0 = __THE_1_map_strMSintME_realloc(__THE_0_b_0, __THE_1_map_strMSintME_copy(__THE_0_a_0));
  __THE_1_map_strMSintME_set(&__THE_0_a_0, str_alloc("key4"), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_b_0)));
  v = __THE_1_map_strMSintME_copy(__THE_0_a_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_b_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$1003 __THE_0_test1_0 = (struct __THE_1_fn$1003) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1004 __THE_0_test2_0 = (struct __THE_1_fn$1004) {&__THE_1_test2_0, NULL, 0};
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_alloc(2, str_alloc("key1"), 0, str_alloc("key2"), 1)}));
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1004P) {__THE_1_map_strMSintME_alloc(2, str_alloc("key3"), 2, str_alloc("key4"), 3), 0, (struct __THE_1_map_strMSintME) {}}));
}
======= flags =======
======= stdout =======
