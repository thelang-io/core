======= stdin =======
type Alias = str
fn test1 (mut a: Alias) Alias {
  a = "test"
  return a
}
fn test2 (mut a: Alias, mut b: Alias = "test2") Alias {
  b = a
  a = b
  return a
}
main {
  test1("test0")
  test2("test4")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$0;
struct __THE_1_fn$0P;
struct __THE_1_fn$1;
struct __THE_1_fn$1P;

struct __THE_1_fn$0 {
  struct str (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$0P {
  struct str n0;
};
struct __THE_1_fn$1 {
  struct str (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct str n0;
  unsigned char o1;
  struct str n1;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
struct str __THE_1_test1_0 (void *, struct __THE_1_fn$0P);
struct str __THE_1_test2_0 (void *, struct __THE_1_fn$1P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
struct str __THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  struct str v;
  struct str __THE_0_a_0 = p.n0;
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_alloc("test"));
  v = str_copy(__THE_0_a_0);
  str_free((struct str) __THE_0_a_0);
  return v;
}
struct str __THE_1_test2_0 (void *px, struct __THE_1_fn$1P p) {
  struct str v;
  struct str __THE_0_a_0 = p.n0;
  struct str __THE_0_b_0 = p.o1 == 1 ? p.n1 : str_alloc("test2");
  __THE_0_b_0 = str_realloc(__THE_0_b_0, str_copy(__THE_0_a_0));
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_copy(__THE_0_b_0));
  v = str_copy(__THE_0_a_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test2_0 = (struct __THE_1_fn$1) {&__THE_1_test2_0, NULL, 0};
  str_free((struct str) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {str_alloc("test0")}));
  str_free((struct str) __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {str_alloc("test4"), 0, (struct str) {}}));
}
======= flags =======
======= stdout =======
