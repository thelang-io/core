======= stdin =======
fn testGo () {
  mut test := Test{}

  print(test.a)
  test.go()
  print(test.a)
}

obj Test {
  mut a: int

  fn go (mut self: ref Test) {
    self.a += 1
  }
}

main {
  testGo()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1001;
struct __THE_1_testGo_0X;
struct __THE_1_Test_0;

struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  struct __THE_1_Test_0 **self;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_testGo_0X {
  const struct __THE_1_fn$1001 *__THE_0_TestSDgo_0;
};
struct __THE_1_Test_0 {
  int32_t __THE_0_a;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_testGo_0 (void *);
void __THE_1_testGo_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_testGo_0X);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
void __THE_1_TestSDgo_0 (void *, struct __THE_1_fn$1001P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_testGo_0 (void *px) {
  struct __THE_1_testGo_0X *x = px;
  const struct __THE_1_fn$1001 *__THE_0_TestSDgo_0 = x->__THE_0_TestSDgo_0;
  struct __THE_1_Test_0 *__THE_0_test_0 = __THE_1_Test_0_alloc(0);
  print(stdout, "iz", __THE_0_test_0->__THE_0_a, THE_EOL);
  (*__THE_0_TestSDgo_0).f((*__THE_0_TestSDgo_0).x, (struct __THE_1_fn$1001P) {&__THE_0_test_0});
  print(stdout, "iz", __THE_0_test_0->__THE_0_a, THE_EOL);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test_0);
}
void __THE_1_testGo_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_testGo_0X x) {
  size_t l = sizeof(struct __THE_1_testGo_0X);
  struct __THE_1_testGo_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_testGo_0;
  n->x = r;
  n->l = l;
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
void __THE_1_TestSDgo_0 (void *px, struct __THE_1_fn$1001P p) {
  struct __THE_1_Test_0 **__THE_0_self_0 = p.self;
  (*__THE_0_self_0)->__THE_0_a += 1;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_testGo_0;
  const struct __THE_1_fn$1001 __THE_0_TestSDgo_0 = (struct __THE_1_fn$1001) {&__THE_1_TestSDgo_0, NULL, 0};
  __THE_1_testGo_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_testGo_0, (struct __THE_1_testGo_0X) {&__THE_0_TestSDgo_0});
  __THE_0_testGo_0.f(__THE_0_testGo_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_testGo_0);
}
======= flags =======
======= stdout =======
0
1
