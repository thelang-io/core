======= stdin =======
main {
  a: any = 1
  if a is int { print("int " + a.str()) }
  else { print("any") }

  b: any = 3.14
  if b is int { print("int " + b.str()) }
  else { print("any") }

  c: int | float = 1
  if c is int { print("int " + c.str()) }
  else { print("float " + c.str()) }

  d: int | float = 3.14
  if d is int { print("int " + d.str()) }
  else { print("float " + d.str()) }

  mut e: any = 1
  if (e = 1) is int { print("int " + e.str()) }
  else { print("any") }

  mut f: any = 3.14
  if (f = 3.14) is int { print("int " + f.str()) }
  else { print("any") }

  mut g: int | float = 1
  if (g = 1) is int { print("int " + g.str()) }
  else { print("float " + g.str()) }

  mut h: int | float = 3.14
  if (h = 3.14) is int { print("int " + h.str()) }
  else { print("float " + h.str()) }

  print((a is int) ? "int " + a.str() : "any")
  print((b is int) ? "int " + b.str() : "any")
  print((c is int) ? "int " + c.str() : "float " + c.str())
  print((d is int) ? "int " + d.str() : "float " + d.str())
  print(((e = 1) is int) ? "int " + e.str() : "any")
  print(((f = 3.14) is int) ? "int " + f.str() : "any")
  print(((g = 1) is int) ? "int " + g.str() : "float " + g.str())
  print(((h = 3.14) is int) ? "int " + h.str() : "float " + h.str())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2
#define TYPE_float 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_any_int;
struct __THE_1_any_float;
struct __THE_1_union_intUSfloatUE;

struct __THE_1_any_int {
  int32_t d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_union_intUSfloatUE {
  int t;
  union {
    int32_t v2;
    double v3;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str float_str (double);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct __THE_1_union_intUSfloatUE __THE_1_union_intUSfloatUE_alloc (int, ...);
void __THE_1_union_intUSfloatUE_free (struct __THE_1_union_intUSfloatUE);
struct __THE_1_union_intUSfloatUE __THE_1_union_intUSfloatUE_realloc (struct __THE_1_union_intUSfloatUE, struct __THE_1_union_intUSfloatUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct __THE_1_union_intUSfloatUE __THE_1_union_intUSfloatUE_alloc (int t, ...) {
  struct __THE_1_union_intUSfloatUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v2 = va_arg(args, int32_t);
  if (t == TYPE_float) r.v3 = va_arg(args, double);
  va_end(args);
  return r;
}
void __THE_1_union_intUSfloatUE_free (struct __THE_1_union_intUSfloatUE n) {
}
struct __THE_1_union_intUSfloatUE __THE_1_union_intUSfloatUE_realloc (struct __THE_1_union_intUSfloatUE n1, struct __THE_1_union_intUSfloatUE n2) {
  __THE_1_union_intUSfloatUE_free((struct __THE_1_union_intUSfloatUE) n1);
  return n2;
}

int main () {
  const struct any __THE_0_a_0 = __THE_1_any_int_alloc(1);
  if (__THE_0_a_0.t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_a_0.d)->d)), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct any __THE_0_b_0 = __THE_1_any_float_alloc(3.14);
  if (__THE_0_b_0.t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_b_0.d)->d)), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct __THE_1_union_intUSfloatUE __THE_0_c_0 = __THE_1_union_intUSfloatUE_alloc(TYPE_int, 1);
  if (__THE_0_c_0.t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(__THE_0_c_0.v2)), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_c_0.v3)), THE_EOL);
  }
  const struct __THE_1_union_intUSfloatUE __THE_0_d_0 = __THE_1_union_intUSfloatUE_alloc(TYPE_float, 3.14);
  if (__THE_0_d_0.t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(__THE_0_d_0.v2)), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_d_0.v3)), THE_EOL);
  }
  struct any __THE_0_e_0 = __THE_1_any_int_alloc(1);
  if ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_int_alloc(1))).t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_e_0.d)->d)), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct any __THE_0_f_0 = __THE_1_any_float_alloc(3.14);
  if ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_f_0.d)->d)), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct __THE_1_union_intUSfloatUE __THE_0_g_0 = __THE_1_union_intUSfloatUE_alloc(TYPE_int, 1);
  if ((__THE_0_g_0 = __THE_1_union_intUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_intUSfloatUE_alloc(TYPE_int, 1))).t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(__THE_0_g_0.v2)), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_g_0.v3)), THE_EOL);
  }
  struct __THE_1_union_intUSfloatUE __THE_0_h_0 = __THE_1_union_intUSfloatUE_alloc(TYPE_float, 3.14);
  if ((__THE_0_h_0 = __THE_1_union_intUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_intUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_int) {
    print(stdout, "sz", cstr_concat_str("int ", int_str(__THE_0_h_0.v2)), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_h_0.v3)), THE_EOL);
  }
  print(stdout, "sz", (__THE_0_a_0.t == TYPE_int) ? cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_a_0.d)->d)) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_b_0.t == TYPE_int) ? cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_b_0.d)->d)) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_c_0.t == TYPE_int) ? cstr_concat_str("int ", int_str(__THE_0_c_0.v2)) : cstr_concat_str("float ", float_str(__THE_0_c_0.v3)), THE_EOL);
  print(stdout, "sz", (__THE_0_d_0.t == TYPE_int) ? cstr_concat_str("int ", int_str(__THE_0_d_0.v2)) : cstr_concat_str("float ", float_str(__THE_0_d_0.v3)), THE_EOL);
  print(stdout, "sz", ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_int_alloc(1))).t == TYPE_int) ? cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_e_0.d)->d)) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_int) ? cstr_concat_str("int ", int_str(((struct __THE_1_any_int *) __THE_0_f_0.d)->d)) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_g_0 = __THE_1_union_intUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_intUSfloatUE_alloc(TYPE_int, 1))).t == TYPE_int) ? cstr_concat_str("int ", int_str(__THE_0_g_0.v2)) : cstr_concat_str("float ", float_str(__THE_0_g_0.v3)), THE_EOL);
  print(stdout, "sz", ((__THE_0_h_0 = __THE_1_union_intUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_intUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_int) ? cstr_concat_str("int ", int_str(__THE_0_h_0.v2)) : cstr_concat_str("float ", float_str(__THE_0_h_0.v3)), THE_EOL);
  any_free((struct any) __THE_0_f_0);
  any_free((struct any) __THE_0_e_0);
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
int 1
any
int 1
float 3.140000
int 1
any
int 1
float 3.140000
int 1
any
int 1
float 3.140000
int 1
any
int 1
float 3.140000
