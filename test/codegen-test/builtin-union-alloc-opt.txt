======= stdin =======
main {
  testOptInt: int?
  testOptStr: str?
  g3: int? | str? = testOptInt
  g4: int? | str? = testOptStr
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_opt_int 2
#define TYPE_opt_str 3

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_opt_intUSopt_strUE;

struct __THE_1_union_opt_intUSopt_strUE {
  int t;
  union {
    int32_t *v2;
    struct str *v3;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_copy (const struct str);
void str_free (struct str);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
struct str *__THE_1_opt_str_copy (const struct str *);
void __THE_1_opt_str_free (struct str *);
struct __THE_1_union_opt_intUSopt_strUE __THE_1_union_opt_intUSopt_strUE_alloc (int, ...);
void __THE_1_union_opt_intUSopt_strUE_free (struct __THE_1_union_opt_intUSopt_strUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
struct str *__THE_1_opt_str_copy (const struct str *n) {
  if (n == NULL) return NULL;
  struct str *r = alloc(sizeof(struct str));
  *r = str_copy(*n);
  return r;
}
void __THE_1_opt_str_free (struct str *n) {
  if (n == NULL) return;
  str_free((struct str) *n);
  free(n);
}
struct __THE_1_union_opt_intUSopt_strUE __THE_1_union_opt_intUSopt_strUE_alloc (int t, ...) {
  struct __THE_1_union_opt_intUSopt_strUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_opt_int) r.v2 = va_arg(args, int32_t *);
  if (t == TYPE_opt_str) r.v3 = va_arg(args, struct str *);
  va_end(args);
  return r;
}
void __THE_1_union_opt_intUSopt_strUE_free (struct __THE_1_union_opt_intUSopt_strUE n) {
  if (n.t == TYPE_opt_int) __THE_1_opt_int_free((int32_t *) n.v2);
  if (n.t == TYPE_opt_str) __THE_1_opt_str_free((struct str *) n.v3);
}

int main () {
  const int32_t *__THE_0_testOptInt_0 = NULL;
  const struct str *__THE_0_testOptStr_0 = NULL;
  const struct __THE_1_union_opt_intUSopt_strUE __THE_0_g3_0 = __THE_1_union_opt_intUSopt_strUE_alloc(TYPE_opt_int, __THE_1_opt_int_copy(__THE_0_testOptInt_0));
  const struct __THE_1_union_opt_intUSopt_strUE __THE_0_g4_0 = __THE_1_union_opt_intUSopt_strUE_alloc(TYPE_opt_str, __THE_1_opt_str_copy(__THE_0_testOptStr_0));
  __THE_1_union_opt_intUSopt_strUE_free((struct __THE_1_union_opt_intUSopt_strUE) __THE_0_g4_0);
  __THE_1_union_opt_intUSopt_strUE_free((struct __THE_1_union_opt_intUSopt_strUE) __THE_0_g3_0);
  __THE_1_opt_str_free((struct str *) __THE_0_testOptStr_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_testOptInt_0);
}
======= flags =======
======= stdout =======
