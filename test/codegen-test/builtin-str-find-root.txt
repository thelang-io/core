======= stdin =======
main {
  "test1".find("")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
int32_t str_find (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
int32_t str_find (struct str s1, struct str s2) {
  int32_t r = -1;
  for (size_t i = 0; i < s1.l; i++) {
    if (memcmp(&s1.d[i], s2.d, s2.l) == 0) {
      r = (int32_t) i;
      break;
    }
  }
  free(s1.d);
  free(s2.d);
  return r;
}

int main () {
  str_find(str_alloc("test1"), str_alloc(""));
}
======= flags =======
======= stdout =======
