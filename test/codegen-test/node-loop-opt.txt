======= stdin =======
main {
  loop i: int? = 0; i != nil; i = nil {
  }

  mut a: int? = 0
  loop ; a != nil; a = nil {
  }

  mut b: int? = 0
  loop ; b != nil; {
    b = nil
  }

  mut c: int? = 0
  loop {
    if c == nil {
      break
    }

    c = nil
  }

  loop d: int? = 0; d != nil; {
    d = nil
  }

  loop e: int? = 0;; e = nil {
    if e == nil {
      break
    }
  }
}
======= code =======
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);

int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}

int main () {
  {
    int32_t *__THE_0_i_0 = __THE_1_opt_int_alloc(0);
    for (; __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_i_0), NULL); __THE_0_i_0 = __THE_1_opt_int_realloc(__THE_0_i_0, NULL)) {
    }
    __THE_1_opt_int_free((int32_t *) __THE_0_i_0);
  }
  int32_t *__THE_0_a_0 = __THE_1_opt_int_alloc(0);
  for (; __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_a_0), NULL); __THE_0_a_0 = __THE_1_opt_int_realloc(__THE_0_a_0, NULL)) {
  }
  int32_t *__THE_0_b_0 = __THE_1_opt_int_alloc(0);
  while (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_b_0), NULL)) {
    __THE_0_b_0 = __THE_1_opt_int_realloc(__THE_0_b_0, NULL);
  }
  int32_t *__THE_0_c_0 = __THE_1_opt_int_alloc(0);
  while (1) {
    if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_c_0), NULL)) {
      break;
    }
    __THE_0_c_0 = __THE_1_opt_int_realloc(__THE_0_c_0, NULL);
  }
  {
    int32_t *__THE_0_d_0 = __THE_1_opt_int_alloc(0);
    for (; __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_d_0), NULL);) {
      __THE_0_d_0 = __THE_1_opt_int_realloc(__THE_0_d_0, NULL);
    }
    __THE_1_opt_int_free((int32_t *) __THE_0_d_0);
  }
  {
    int32_t *__THE_0_e_0 = __THE_1_opt_int_alloc(0);
    for (;; __THE_0_e_0 = __THE_1_opt_int_realloc(__THE_0_e_0, NULL)) {
      if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_e_0), NULL)) {
        break;
      }
    }
    __THE_1_opt_int_free((int32_t *) __THE_0_e_0);
  }
  __THE_1_opt_int_free((int32_t *) __THE_0_c_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
