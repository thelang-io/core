======= stdin =======
main {
  loop i: int? = 0; i != nil; i = nil {
  }

  mut a: int? = 0
  loop ; a != nil; a = nil {
  }

  mut b: int? = 0
  loop ; b != nil; {
    b = nil
  }

  mut c: int? = 0
  loop {
    if c == nil {
      break
    }

    c = nil
  }

  loop d: int? = 0; d != nil; {
    d = nil
  }

  loop e: int? = 0;; e = nil {
    if e == nil {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}

int main () {
  {
    int32_t *__THE_0_i_0 = __THE_1_opt_int_alloc(0);
    for (; __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_i_0), NULL); __THE_0_i_0 = __THE_1_opt_int_realloc(__THE_0_i_0, NULL)) {
    }
    __THE_1_opt_int_free((int32_t *) __THE_0_i_0);
  }
  int32_t *__THE_0_a_0 = __THE_1_opt_int_alloc(0);
  for (; __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_a_0), NULL); __THE_0_a_0 = __THE_1_opt_int_realloc(__THE_0_a_0, NULL)) {
  }
  int32_t *__THE_0_b_0 = __THE_1_opt_int_alloc(0);
  while (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_b_0), NULL)) {
    __THE_0_b_0 = __THE_1_opt_int_realloc(__THE_0_b_0, NULL);
  }
  int32_t *__THE_0_c_0 = __THE_1_opt_int_alloc(0);
  while (1) {
    if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_c_0), NULL)) {
      break;
    }
    __THE_0_c_0 = __THE_1_opt_int_realloc(__THE_0_c_0, NULL);
  }
  {
    int32_t *__THE_0_d_0 = __THE_1_opt_int_alloc(0);
    for (; __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_d_0), NULL);) {
      __THE_0_d_0 = __THE_1_opt_int_realloc(__THE_0_d_0, NULL);
    }
    __THE_1_opt_int_free((int32_t *) __THE_0_d_0);
  }
  {
    int32_t *__THE_0_e_0 = __THE_1_opt_int_alloc(0);
    for (;; __THE_0_e_0 = __THE_1_opt_int_realloc(__THE_0_e_0, NULL)) {
      if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_e_0), NULL)) {
        break;
      }
    }
    __THE_1_opt_int_free((int32_t *) __THE_0_e_0);
  }
  __THE_1_opt_int_free((int32_t *) __THE_0_c_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
