======= stdin =======
main {
  a := "t" + "t"
  b := "t" + a
  c := a + "t"
  d := a + b
  e := a + b + "t"
  f := "t" + "t" + a
  g := a + "t" + b
  h := "t" + a + "t"
  i := "t" + a + b
  j := a + "t" + "t"
  k := a + "t" + "t" + b
  l := "t" + a + b + "t"
  m := "t" + a + "t" + b
  n := a + "t" + b + "t"
  o := a + b + "t" + "t"
  p := "t" + "t" + a + b

  print("a" == "a")
  print("a" == "b")
  print("a" != "a")
  print("a" != "b")
  print("a" > "b")
  print("a" >= "b")
  print("a" < "b")
  print("a" <= "b")
  print("a" > "a")
  print("a" >= "a")
  print("a" < "a")
  print("a" <= "a")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
bool cstr_eq_cstr (const char *, const char *);
bool cstr_ne_cstr (const char *, const char *);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_ge (struct str, struct str);
bool str_gt (struct str, struct str);
bool str_le (struct str, struct str);
bool str_lt (struct str, struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
bool cstr_eq_cstr (const char *c1, const char *c2) {
  size_t l = strlen(c1);
  return l == strlen(c2) && memcmp(c1, c2, l) == 0;
}
bool cstr_ne_cstr (const char *c1, const char *c2) {
  size_t l = strlen(c1);
  return l != strlen(c2) || memcmp(c1, c2, l) != 0;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ge (struct str s1, struct str s2) {
  bool r = memcmp(s1.d, s2.d, s1.l > s2.l ? s1.l : s2.l) >= 0;
  free(s1.d);
  free(s2.d);
  return r;
}
bool str_gt (struct str s1, struct str s2) {
  bool r = memcmp(s1.d, s2.d, s1.l > s2.l ? s1.l : s2.l) > 0;
  free(s1.d);
  free(s2.d);
  return r;
}
bool str_le (struct str s1, struct str s2) {
  bool r = memcmp(s1.d, s2.d, s1.l > s2.l ? s1.l : s2.l) <= 0;
  free(s1.d);
  free(s2.d);
  return r;
}
bool str_lt (struct str s1, struct str s2) {
  bool r = memcmp(s1.d, s2.d, s1.l > s2.l ? s1.l : s2.l) < 0;
  free(s1.d);
  free(s2.d);
  return r;
}

int main () {
  const struct str __THE_0_a_0 = str_alloc("tt");
  const struct str __THE_0_b_0 = cstr_concat_str("t", str_copy(__THE_0_a_0));
  const struct str __THE_0_c_0 = str_concat_cstr(str_copy(__THE_0_a_0), "t");
  const struct str __THE_0_d_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  const struct str __THE_0_e_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_f_0 = cstr_concat_str("tt", str_copy(__THE_0_a_0));
  const struct str __THE_0_g_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_h_0 = str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t");
  const struct str __THE_0_i_0 = str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  const struct str __THE_0_j_0 = str_concat_cstr(str_copy(__THE_0_a_0), "tt");
  const struct str __THE_0_k_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "tt"), str_copy(__THE_0_b_0));
  const struct str __THE_0_l_0 = str_concat_cstr(str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_m_0 = str_concat_str(str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_n_0 = str_concat_cstr(str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_o_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "tt");
  const struct str __THE_0_p_0 = str_concat_str(cstr_concat_str("tt", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  print(stdout, "tz", cstr_eq_cstr("a", "a"), THE_EOL);
  print(stdout, "tz", cstr_eq_cstr("a", "b"), THE_EOL);
  print(stdout, "tz", cstr_ne_cstr("a", "a"), THE_EOL);
  print(stdout, "tz", cstr_ne_cstr("a", "b"), THE_EOL);
  print(stdout, "tz", str_gt(str_alloc("a"), str_alloc("b")), THE_EOL);
  print(stdout, "tz", str_ge(str_alloc("a"), str_alloc("b")), THE_EOL);
  print(stdout, "tz", str_lt(str_alloc("a"), str_alloc("b")), THE_EOL);
  print(stdout, "tz", str_le(str_alloc("a"), str_alloc("b")), THE_EOL);
  print(stdout, "tz", str_gt(str_alloc("a"), str_alloc("a")), THE_EOL);
  print(stdout, "tz", str_ge(str_alloc("a"), str_alloc("a")), THE_EOL);
  print(stdout, "tz", str_lt(str_alloc("a"), str_alloc("a")), THE_EOL);
  print(stdout, "tz", str_le(str_alloc("a"), str_alloc("a")), THE_EOL);
  str_free((struct str) __THE_0_p_0);
  str_free((struct str) __THE_0_o_0);
  str_free((struct str) __THE_0_n_0);
  str_free((struct str) __THE_0_m_0);
  str_free((struct str) __THE_0_l_0);
  str_free((struct str) __THE_0_k_0);
  str_free((struct str) __THE_0_j_0);
  str_free((struct str) __THE_0_i_0);
  str_free((struct str) __THE_0_h_0);
  str_free((struct str) __THE_0_g_0);
  str_free((struct str) __THE_0_f_0);
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
true
false
false
true
false
false
true
true
false
true
false
true
