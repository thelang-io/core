======= stdin =======
main {
  a := "t" + "t"
  b := "t" + a
  c := a + "t"
  d := a + b
  e := a + b + "t"
  f := "t" + "t" + a
  g := a + "t" + b
  h := "t" + a + "t"
  i := "t" + a + b
  j := a + "t" + "t"
  k := a + "t" + "t" + b
  l := "t" + a + b + "t"
  m := "t" + a + "t" + b
  n := a + "t" + b + "t"
  o := a + b + "t" + "t"
  p := "t" + "t" + a + b
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
void *alloc (size_t);

struct str cstr_concat_str (const char *c, struct str s) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *r = alloc(l);
  memcpy(r, s1.c, s1.l);
  memcpy(&r[s1.l], s2.c, s2.l);
  free(s1.c);
  free(s2.c);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
void str_free (struct str s) {
  free(s.c);
}
void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int main () {
  const struct str __THE_0_a_0 = str_alloc("tt");
  const struct str __THE_0_b_0 = cstr_concat_str("t", str_copy(__THE_0_a_0));
  const struct str __THE_0_c_0 = str_concat_cstr(str_copy(__THE_0_a_0), "t");
  const struct str __THE_0_d_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  const struct str __THE_0_e_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_f_0 = cstr_concat_str("tt", str_copy(__THE_0_a_0));
  const struct str __THE_0_g_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_h_0 = str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t");
  const struct str __THE_0_i_0 = str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  const struct str __THE_0_j_0 = str_concat_cstr(str_copy(__THE_0_a_0), "tt");
  const struct str __THE_0_k_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "tt"), str_copy(__THE_0_b_0));
  const struct str __THE_0_l_0 = str_concat_cstr(str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_m_0 = str_concat_str(str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_n_0 = str_concat_cstr(str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_o_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "tt");
  const struct str __THE_0_p_0 = str_concat_str(cstr_concat_str("tt", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  str_free((struct str) __THE_0_p_0);
  str_free((struct str) __THE_0_o_0);
  str_free((struct str) __THE_0_n_0);
  str_free((struct str) __THE_0_m_0);
  str_free((struct str) __THE_0_l_0);
  str_free((struct str) __THE_0_k_0);
  str_free((struct str) __THE_0_j_0);
  str_free((struct str) __THE_0_i_0);
  str_free((struct str) __THE_0_h_0);
  str_free((struct str) __THE_0_g_0);
  str_free((struct str) __THE_0_f_0);
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= code-windows =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
void *alloc (size_t);

struct str cstr_concat_str (const char *c, struct str s) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *r = alloc(l);
  memcpy(r, s1.c, s1.l);
  memcpy(&r[s1.l], s2.c, s2.l);
  free(s1.c);
  free(s2.c);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
void str_free (struct str s) {
  free(s.c);
}
void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\r\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int main () {
  const struct str __THE_0_a_0 = str_alloc("tt");
  const struct str __THE_0_b_0 = cstr_concat_str("t", str_copy(__THE_0_a_0));
  const struct str __THE_0_c_0 = str_concat_cstr(str_copy(__THE_0_a_0), "t");
  const struct str __THE_0_d_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  const struct str __THE_0_e_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_f_0 = cstr_concat_str("tt", str_copy(__THE_0_a_0));
  const struct str __THE_0_g_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_h_0 = str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t");
  const struct str __THE_0_i_0 = str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  const struct str __THE_0_j_0 = str_concat_cstr(str_copy(__THE_0_a_0), "tt");
  const struct str __THE_0_k_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "tt"), str_copy(__THE_0_b_0));
  const struct str __THE_0_l_0 = str_concat_cstr(str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_m_0 = str_concat_str(str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_n_0 = str_concat_cstr(str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_o_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "tt");
  const struct str __THE_0_p_0 = str_concat_str(cstr_concat_str("tt", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  str_free((struct str) __THE_0_p_0);
  str_free((struct str) __THE_0_o_0);
  str_free((struct str) __THE_0_n_0);
  str_free((struct str) __THE_0_m_0);
  str_free((struct str) __THE_0_l_0);
  str_free((struct str) __THE_0_k_0);
  str_free((struct str) __THE_0_j_0);
  str_free((struct str) __THE_0_i_0);
  str_free((struct str) __THE_0_h_0);
  str_free((struct str) __THE_0_g_0);
  str_free((struct str) __THE_0_f_0);
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
