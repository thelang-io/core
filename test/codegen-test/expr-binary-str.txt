======= stdin =======
main {
  a := "t" + "t"
  b := "t" + a
  c := a + "t"
  d := a + b
  e := a + b + "t"
  f := "t" + "t" + a
  g := a + "t" + b
  h := "t" + a + "t"
  i := "t" + a + b
  j := a + "t" + "t"
  k := a + "t" + "t" + b
  l := "t" + a + b + "t"
  m := "t" + a + "t" + b
  n := a + "t" + b + "t"
  o := a + b + "t" + "t"
  p := "t" + "t" + a + b
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  const struct str __THE_0_a_0 = str_alloc("tt");
  const struct str __THE_0_b_0 = cstr_concat_str("t", str_copy(__THE_0_a_0));
  const struct str __THE_0_c_0 = str_concat_cstr(str_copy(__THE_0_a_0), "t");
  const struct str __THE_0_d_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  const struct str __THE_0_e_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_f_0 = cstr_concat_str("tt", str_copy(__THE_0_a_0));
  const struct str __THE_0_g_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_h_0 = str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t");
  const struct str __THE_0_i_0 = str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  const struct str __THE_0_j_0 = str_concat_cstr(str_copy(__THE_0_a_0), "tt");
  const struct str __THE_0_k_0 = str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "tt"), str_copy(__THE_0_b_0));
  const struct str __THE_0_l_0 = str_concat_cstr(str_concat_str(cstr_concat_str("t", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_m_0 = str_concat_str(str_concat_cstr(cstr_concat_str("t", str_copy(__THE_0_a_0)), "t"), str_copy(__THE_0_b_0));
  const struct str __THE_0_n_0 = str_concat_cstr(str_concat_str(str_concat_cstr(str_copy(__THE_0_a_0), "t"), str_copy(__THE_0_b_0)), "t");
  const struct str __THE_0_o_0 = str_concat_cstr(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), "tt");
  const struct str __THE_0_p_0 = str_concat_str(cstr_concat_str("tt", str_copy(__THE_0_a_0)), str_copy(__THE_0_b_0));
  str_free((struct str) __THE_0_p_0);
  str_free((struct str) __THE_0_o_0);
  str_free((struct str) __THE_0_n_0);
  str_free((struct str) __THE_0_m_0);
  str_free((struct str) __THE_0_l_0);
  str_free((struct str) __THE_0_k_0);
  str_free((struct str) __THE_0_j_0);
  str_free((struct str) __THE_0_i_0);
  str_free((struct str) __THE_0_h_0);
  str_free((struct str) __THE_0_g_0);
  str_free((struct str) __THE_0_f_0);
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
