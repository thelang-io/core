======= stdin =======
main {
  print("0".toI64())
  print("01".toI64())
  print("1".toI64())
  print("10".toI64())
  print("100".toI64())
  print("9223372036854775807".toI64())
  print("-0".toI64())
  print("-1".toI64())
  print("-010".toI64())
  print("-10".toI64())
  print("-100".toI64())
  print("-9223372036854775808".toI64())

  print("0000".toI64(2))
  print("0001".toI64(2))
  print("1010".toI64(2))
  print("01100100".toI64(2))
  print("0111111111111111111111111111111111111111111111111111111111111111".toI64(2))
  print("-0000".toI64(2))
  print("-0001".toI64(2))
  print("-1010".toI64(2))
  print("-01100100".toI64(2))
  print("-1000000000000000000000000000000000000000000000000000000000000000".toI64(2))

  print("0".toI64(8))
  print("1".toI64(8))
  print("12".toI64(8))
  print("144".toI64(8))
  print("777777777777777777777".toI64(8))
  print("-0".toI64(8))
  print("-1".toI64(8))
  print("-12".toI64(8))
  print("-144".toI64(8))
  print("-1000000000000000000000".toI64(8))

  print("0".toI64(10))
  print("01".toI64(10))
  print("1".toI64(10))
  print("10".toI64(10))
  print("100".toI64(10))
  print("9223372036854775807".toI64(10))
  print("-0".toI64(10))
  print("-1".toI64(10))
  print("-010".toI64(10))
  print("-10".toI64(10))
  print("-100".toI64(10))
  print("-9223372036854775808".toI64(10))

  print("0".toI64(16))
  print("1".toI64(16))
  print("A".toI64(16))
  print("64".toI64(16))
  print("7FFFFFFFFFFFFFFF".toI64(16))
  print("-0".toI64(16))
  print("-1".toI64(16))
  print("-A".toI64(16))
  print("-64".toI64(16))
  print("-8000000000000000".toI64(16))

  print("0".toI64(36))
  print("1".toI64(36))
  print("A".toI64(36))
  print("2S".toI64(36))
  print("1Y2P0IJ32E8E7".toI64(36))
  print("-0".toI64(36))
  print("-1".toI64(36))
  print("-A".toI64(36))
  print("-2S".toI64(36))
  print("-1Y2P0IJ32E8E8".toI64(36))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
int64_t str_toI64 (struct str, unsigned char, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
int64_t str_toI64 (struct str self, unsigned char o1, int32_t n1) {
  if (o1 == 1 && (n1 < 2 || n1 > 36) && n1 != 0) {
    fprintf(stderr, "Error: radix %" PRId32 " is invalid, must be >= 2 and <= 36, or 0" THE_EOL, n1);
    exit(EXIT_FAILURE);
  }
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  long long r = strtoll(c, &e, o1 == 0 ? 10 : n1);
  if (errno == ERANGE || r < INT64_MIN || INT64_MAX < r) {
    fprintf(stderr, "Error: value `%s` out of range" THE_EOL, c);
    exit(EXIT_FAILURE);
  } else if (errno != 0 || e == c || *e != 0) {
    fprintf(stderr, "Error: value `%s` has invalid syntax" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  free(self.d);
  return (int64_t) r;
}

int main () {
  print(stdout, "lz", str_toI64(str_alloc("0"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("01"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("10"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("100"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("9223372036854775807"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-010"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-10"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-100"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-9223372036854775808"), 0, 0), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0000"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0001"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1010"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("01100100"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0111111111111111111111111111111111111111111111111111111111111111"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0000"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0001"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1010"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-01100100"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1000000000000000000000000000000000000000000000000000000000000000"), 1, 2), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("12"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("144"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("777777777777777777777"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-12"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-144"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1000000000000000000000"), 1, 8), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("01"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("10"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("100"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("9223372036854775807"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-010"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-10"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-100"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-9223372036854775808"), 1, 10), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("A"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("64"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("7FFFFFFFFFFFFFFF"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-A"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-64"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-8000000000000000"), 1, 16), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("0"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("A"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("2S"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("1Y2P0IJ32E8E7"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-0"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-A"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-2S"), 1, 36), THE_EOL);
  print(stdout, "lz", str_toI64(str_alloc("-1Y2P0IJ32E8E8"), 1, 36), THE_EOL);
}
======= flags =======
======= stdout =======
0
1
1
10
100
9223372036854775807
0
-1
-10
-10
-100
-9223372036854775808
0
1
10
100
9223372036854775807
0
-1
-10
-100
-9223372036854775808
0
1
10
100
9223372036854775807
0
-1
-10
-100
-9223372036854775808
0
1
1
10
100
9223372036854775807
0
-1
-10
-10
-100
-9223372036854775808
0
1
10
100
9223372036854775807
0
-1
-10
-100
-9223372036854775808
0
1
10
100
9223372036854775807
0
-1
-10
-100
-9223372036854775808
