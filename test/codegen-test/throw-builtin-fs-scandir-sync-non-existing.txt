======= stdin =======
main {
  fs_scandirSync("test/fixtures/test1")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <dirent.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_array_str fs_scandirSync (struct str);
void __THE_1_array_str_free (struct __THE_1_array_str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_str fs_scandirSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  DIR *f = opendir(c);
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open directory `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  struct dirent *a;
  struct str *r = NULL;
  size_t l = 0;
  while ((a = readdir(f)) != NULL) {
    if (strcmp(a->d_name, ".") == 0 || strcmp(a->d_name, "..") == 0) continue;
    r = re_alloc(r, ++l * sizeof(struct str));
    r[l - 1] = str_alloc(a->d_name);
  }
  closedir(f);
  free(c);
  str_free(s);
  return (struct __THE_1_array_str) {r, l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}

int main () {
  __THE_1_array_str_free((struct __THE_1_array_str) fs_scandirSync(str_alloc("test/fixtures/test1")));
}
======= flags =======
======= stderr =======
Error: failed to open directory `test/fixtures/test1`
