======= stdin =======
main {
  a := { "key1": [1, 2, 3], "key2": [3, 4, 5], "key3": [5, 6, 7] }
  b: int[][str] = { "key1": [8, 9, 10], "key2": [10, 11, 12], "key3": [12, 13, 14] }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_int;
struct __THE_1_pair_strMSarray_intME;
struct __THE_1_map_strMSarray_intME;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_pair_strMSarray_intME {
  struct str f;
  struct __THE_1_array_int s;
};
struct __THE_1_map_strMSarray_intME {
  struct __THE_1_pair_strMSarray_intME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_map_strMSarray_intME __THE_1_map_strMSarray_intME_alloc (int, ...);
void __THE_1_map_strMSarray_intME_free (struct __THE_1_map_strMSarray_intME);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_map_strMSarray_intME __THE_1_map_strMSarray_intME_alloc (int x, ...) {
  struct __THE_1_pair_strMSarray_intME *d = alloc(x * sizeof(struct __THE_1_pair_strMSarray_intME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSarray_intME) {va_arg(args, struct str), va_arg(args, struct __THE_1_array_int)};
  va_end(args);
  return (struct __THE_1_map_strMSarray_intME) {d, x, x};
}
void __THE_1_map_strMSarray_intME_free (struct __THE_1_map_strMSarray_intME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_array_int_free((struct __THE_1_array_int) n.d[i].s);
  }
  free(n.d);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct __THE_1_map_strMSarray_intME __THE_0_a_0 = __THE_1_map_strMSarray_intME_alloc(3, str_alloc("key1"), __THE_1_array_int_alloc(3, 1, 2, 3), str_alloc("key2"), __THE_1_array_int_alloc(3, 3, 4, 5), str_alloc("key3"), __THE_1_array_int_alloc(3, 5, 6, 7));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  const struct __THE_1_map_strMSarray_intME __THE_0_b_0 = __THE_1_map_strMSarray_intME_alloc(3, str_alloc("key1"), __THE_1_array_int_alloc(3, 8, 9, 10), str_alloc("key2"), __THE_1_array_int_alloc(3, 10, 11, 12), str_alloc("key3"), __THE_1_array_int_alloc(3, 12, 13, 14));
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) __THE_0_b_0);
L2:
  __THE_1_map_strMSarray_intME_free((struct __THE_1_map_strMSarray_intME) __THE_0_a_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
