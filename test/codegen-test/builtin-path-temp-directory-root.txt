======= stdin =======
main {
  path_tempDirectory();
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

#ifdef THE_OS_WINDOWS
  extern unsigned char NTAPI SystemFunction036 (void *, unsigned long);
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
char *path_mktemp (unsigned char (*f) (char *));
struct str path_tempDirectory ();
unsigned char path_tempDirectoryFunctor (char *);
char *path_tmpdir ();
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
char *path_mktemp (unsigned char (*f) (char *)) {
  static const char *chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  static const size_t chars_len = 62;
  static const size_t x = 6;
  char *d = path_tmpdir();
  size_t l = strlen(d) + x;
  d = re_alloc(d, l + 1);
  memcpy(&d[l - x], "XXXXXX", x + 1);
  #ifdef THE_OS_WINDOWS
    size_t j = TMP_MAX;
    unsigned long long v;
    do {
      if (!SystemFunction036((void *) &v, sizeof(v))) {
        fprintf(stderr, "Error: failed to generate random with `SystemFunction036`" THE_EOL);
        exit(EXIT_FAILURE);
      }
      char *p = &d[l - x];
      for (size_t i = 0; i < x; i++) {
        *p++ = chars[v % chars_len];
        v /= chars_len;
      }
      if (f(d)) return d;
    } while (--j);
    free(d);
    return NULL;
  #else
    if (!f(d)) {
      free(d);
      return NULL;
    }
    return d;
  #endif
}
struct str path_tempDirectory () {
  char *d = path_mktemp(path_tempDirectoryFunctor);
  if (d == NULL) {
    fprintf(stderr, "Error: failed to create temporary directory" THE_EOL);
    exit(EXIT_FAILURE);
  }
  struct str r = str_alloc(d);
  free(d);
  return r;
}
unsigned char path_tempDirectoryFunctor (char *c) {
  #ifdef THE_OS_WINDOWS
    return CreateDirectory(c, NULL) == 0 ? 0 : 1;
  #else
    return mkdtemp(c) == NULL ? 0 : 1;
  #endif
}
char *path_tmpdir () {
  char *d;
  #ifdef THE_OS_WINDOWS
    size_t l = GetTempPath(0, NULL);
    if (l == 0) {
      fprintf(stderr, "Error: failed to get temporary path" THE_EOL);
      exit(EXIT_FAILURE);
    }
    l -= 1;
    d = alloc(l + 1);
    if (GetTempPath(l + 1, d) == 0) {
      fprintf(stderr, "Error: failed to get temporary path" THE_EOL);
      exit(EXIT_FAILURE);
    }
    if (d[l - 1] != '\\' && d[l - 1] != '/') {
      d[l] = '\\';
      d = re_alloc(d, ++l + 1);
    }
    d[l] = '\0';
  #else
    char *f;
    if (
      (f = getenv("TMPDIR")) == NULL &&
      (f = getenv("TMP")) == NULL &&
      (f = getenv("TEMP")) == NULL &&
      (f = getenv("TEMPDIR")) == NULL
    ) {
      f = "/tmp/";
    }
    size_t l = strlen(f);
    d = alloc(l + 1);
    memcpy(d, f, l);
    if (f[l - 1] != '/') {
      d[l] = '/';
      d = re_alloc(d, ++l + 1);
    }
    d[l] = '\0';
  #endif
  return d;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  str_free((struct str) path_tempDirectory());
}
======= flags =======
W:-ladvapi32
======= stdout =======
