======= stdin =======
main {
  path_tempDirectory();
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str path_tempDirectory ();
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str path_tempDirectory () {
  char *f;
  if (
    (f = getenv("TMPDIR")) == NULL &&
    (f = getenv("TMP")) == NULL &&
    (f = getenv("TEMP")) == NULL &&
    (f = getenv("TEMPDIR")) == NULL
  ) {
    f = "/tmp";
  }
  char *fmt = f[strlen(f) - 1] == '/' ? "%sXXXXXX" : "%s/XXXXXX";
  size_t l = snprintf(NULL, 0, fmt, f);
  char *t = alloc(l + 1);
  sprintf(t, fmt, f);
  char *r = mkdtemp(t);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to create temporary directory" THE_EOL);
    exit(EXIT_FAILURE);
  }
  free(t);
  return str_alloc(r);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  str_free((struct str) path_tempDirectory());
}
======= flags =======
======= stdout =======
