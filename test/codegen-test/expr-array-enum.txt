======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}
main {
  a := [Test.Red, .Green, .Blue]
  b: Test[] = [.Red, .Green, .Blue]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_array_Test;

struct __THE_1_array_Test {
  enum __THE_1_Test_0 *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_array_Test __THE_1_array_Test_alloc (size_t, ...);
void __THE_1_array_Test_free (struct __THE_1_array_Test);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_array_Test __THE_1_array_Test_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_Test) {NULL, 0};
  enum __THE_1_Test_0 *d = alloc(x * sizeof(enum __THE_1_Test_0));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, enum __THE_1_Test_0);
  va_end(args);
  return (struct __THE_1_array_Test) {d, x};
}
void __THE_1_array_Test_free (struct __THE_1_array_Test n) {
  free(n.d);
}

int main () {
  const struct __THE_1_array_Test __THE_0_a_0 = __THE_1_array_Test_alloc(3, __THE_0_TestSDRed_0, __THE_0_TestSDGreen_0, __THE_0_TestSDBlue_0);
  const struct __THE_1_array_Test __THE_0_b_0 = __THE_1_array_Test_alloc(3, __THE_0_TestSDRed_0, __THE_0_TestSDGreen_0, __THE_0_TestSDBlue_0);
  __THE_1_array_Test_free((struct __THE_1_array_Test) __THE_0_b_0);
  __THE_1_array_Test_free((struct __THE_1_array_Test) __THE_0_a_0);
}
======= flags =======
======= stdout =======
