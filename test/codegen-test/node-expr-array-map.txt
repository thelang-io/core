======= stdin =======
main {
  [{ "key1": 1, "key2": 2, "key3": 3 }, { "key1": 3, "key2": 4, "key3": 5 }, { "key1": 5, "key2": 6, "key3": 7 }];
  [{ "key1": 8, "key2": 9, "key3": 10 }, { "key1": 10, "key2": 11, "key3": 12 }, { "key1": 12, "key2": 13, "key3": 14 }];
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_array_map_strMSintME;

struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_array_map_strMSintME {
  struct __THE_1_map_strMSintME *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct __THE_1_array_map_strMSintME __THE_1_array_map_strMSintME_alloc (size_t, ...);
void __THE_1_array_map_strMSintME_free (struct __THE_1_array_map_strMSintME);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_array_map_strMSintME __THE_1_array_map_strMSintME_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_map_strMSintME) {NULL, 0};
  struct __THE_1_map_strMSintME *d = alloc(x * sizeof(struct __THE_1_map_strMSintME));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_map_strMSintME);
  va_end(args);
  return (struct __THE_1_array_map_strMSintME) {d, x};
}
void __THE_1_array_map_strMSintME_free (struct __THE_1_array_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n.d[i]);
  free(n.d);
}

int main () {
  __THE_1_array_map_strMSintME_free((struct __THE_1_array_map_strMSintME) __THE_1_array_map_strMSintME_alloc(3, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3), __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 3, str_alloc("key2"), 4, str_alloc("key3"), 5), __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 5, str_alloc("key2"), 6, str_alloc("key3"), 7)));
  __THE_1_array_map_strMSintME_free((struct __THE_1_array_map_strMSintME) __THE_1_array_map_strMSintME_alloc(3, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 8, str_alloc("key2"), 9, str_alloc("key3"), 10), __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 10, str_alloc("key2"), 11, str_alloc("key3"), 12), __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 12, str_alloc("key2"), 13, str_alloc("key3"), 14)));
}
======= flags =======
======= stdout =======
