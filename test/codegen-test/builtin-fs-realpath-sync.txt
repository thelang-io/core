======= stdin =======
main {
  print(fs_realpathSync("test/fixtures/test.txt"))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
struct str fs_realpathSync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct str fs_realpathSync (struct str s) {
  char *c = str_cstr(s);
  char *d = NULL;
  #ifdef THE_OS_WINDOWS
    HANDLE h = CreateFile(c, 0, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS, NULL);
    if (h == INVALID_HANDLE_VALUE) {
      fprintf(stderr, "Error: failed to create handle to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    size_t l = GetFinalPathNameByHandle(h, NULL, 0, VOLUME_NAME_DOS);
    if (l == 0) {
      fprintf(stderr, "Error: not enough memory to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    char *r = alloc(l + 1);
    if (GetFinalPathNameByHandle(h, r, MAX_PATH, VOLUME_NAME_DOS) == 0) {
      fprintf(stderr, "Error: failed to get real path by handle of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    if (strncmp(r, "\\\\?\\UNC\\", 8) == 0) {
      l -= 6;
      d = alloc(l);
      memcpy(d, &r[6], l);
      d[0] = '\\';
    } else if (strncmp(r, "\\\\?\\", 4) == 0) {
      l -= 4;
      d = alloc(l);
      memcpy(d, &r[4], l);
    }
    free(r);
    CloseHandle(h);
  #else
    d = realpath(c, NULL);
    size_t l = d == NULL ? 0 : strlen(d);
  #endif
  if (d == NULL) {
    fprintf(stderr, "Error: failed to get real path of file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free((struct str) s);
  return (struct str) {d, l};
}

int main () {
  print(stdout, "sz", fs_realpathSync(str_alloc("test/fixtures/test.txt")), THE_EOL);
}
======= flags =======
======= stdout =======
{{ (\/|[A-Z]:\\).* }}
