======= stdin =======
main {
  "0".toFloat();
  "1".toFloat();
  "10".toFloat();
  "100".toFloat();
  "179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448".toFloat();
  "-0".toFloat();
  "-1".toFloat();
  "-10".toFloat();
  "-100".toFloat();
  "-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448".toFloat();
  "0.0".toFloat();
  "0.1".toFloat();
  "0.10".toFloat();
  "0.100".toFloat();
  "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507".toFloat();
  "-0.0".toFloat();
  "-0.1".toFloat();
  "-0.10".toFloat();
  "-0.100".toFloat();
  "-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507".toFloat();
  "0e0".toFloat();
  "1E+1".toFloat();
  "10.E+10".toFloat();
  "100.E+100".toFloat();
  "1.79769E+308".toFloat();
  "1e-1".toFloat();
  "10.e-10".toFloat();
  "100.e-100".toFloat();
  "2.22507e-307".toFloat();
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <float.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
double str_toFloat (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
double str_toFloat (struct str self) {
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  double r = strtod(c, &e);
  if (errno == ERANGE || r < -DBL_MAX || DBL_MAX < r) {
    fprintf(stderr, "Error: value `%s` out of range" THE_EOL, c);
    exit(EXIT_FAILURE);
  } else if (errno != 0 || e == c || *e != 0) {
    fprintf(stderr, "Error: value `%s` has invalid syntax" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  free(self.d);
  return r;
}

int main () {
  str_toFloat(str_alloc("0"));
  str_toFloat(str_alloc("1"));
  str_toFloat(str_alloc("10"));
  str_toFloat(str_alloc("100"));
  str_toFloat(str_alloc("179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448"));
  str_toFloat(str_alloc("-0"));
  str_toFloat(str_alloc("-1"));
  str_toFloat(str_alloc("-10"));
  str_toFloat(str_alloc("-100"));
  str_toFloat(str_alloc("-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448"));
  str_toFloat(str_alloc("0.0"));
  str_toFloat(str_alloc("0.1"));
  str_toFloat(str_alloc("0.10"));
  str_toFloat(str_alloc("0.100"));
  str_toFloat(str_alloc("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507"));
  str_toFloat(str_alloc("-0.0"));
  str_toFloat(str_alloc("-0.1"));
  str_toFloat(str_alloc("-0.10"));
  str_toFloat(str_alloc("-0.100"));
  str_toFloat(str_alloc("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507"));
  str_toFloat(str_alloc("0e0"));
  str_toFloat(str_alloc("1E+1"));
  str_toFloat(str_alloc("10.E+10"));
  str_toFloat(str_alloc("100.E+100"));
  str_toFloat(str_alloc("1.79769E+308"));
  str_toFloat(str_alloc("1e-1"));
  str_toFloat(str_alloc("10.e-10"));
  str_toFloat(str_alloc("100.e-100"));
  str_toFloat(str_alloc("2.22507e-307"));
}
======= flags =======
======= stdout =======
