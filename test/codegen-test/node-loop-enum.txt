======= stdin =======
enum Test { Red, Green, Blue }

fn inc (mut test: ref Test) Test {
  if test == .Red {
    test = .Green
  } elif test == .Green {
    test = .Blue
  } else {
    test = .Red
  }
}

main {
  loop i := Test.Red; i != .Blue; inc(ref i) {
  }

  mut a := Test.Red
  loop ; a != .Blue; inc(ref a) {
  }

  mut b := Test.Red
  loop ; b != .Blue; {
    inc(ref b)
  }

  mut c := Test.Red
  loop {
    if c == .Blue {
      break
    }

    inc(ref c)
  }

  loop d := Test.Red; d != .Blue; {
    inc(ref d)
  }

  loop e := Test.Red;; inc(ref e) {
    if e == .Blue {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn_sFP5ref_TestFRTestFE;
struct __THE_1_fn_sFP5ref_TestFRTestFEP;

struct __THE_1_fn_sFP5ref_TestFRTestFE {
  enum __THE_1_Test_0 (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5ref_TestFRTestFEP {
  enum __THE_1_Test_0 *n0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
enum __THE_1_Test_0 __THE_1_inc_0 (void *, void *);

void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
enum __THE_1_Test_0 __THE_1_inc_0 (void *px, void *pp) {
  struct __THE_1_fn_sFP5ref_TestFRTestFEP *p = pp;
  enum __THE_1_Test_0 *__THE_0_test_0 = p->n0;
  if (*__THE_0_test_0 == __THE_0_TestSDRed_0) {
    *__THE_0_test_0 = __THE_0_TestSDGreen_0;
  } else if (*__THE_0_test_0 == __THE_0_TestSDGreen_0) {
    *__THE_0_test_0 = __THE_0_TestSDBlue_0;
  } else {
    *__THE_0_test_0 = __THE_0_TestSDRed_0;
  }
  free(pp);
}

int main () {
  const struct __THE_1_fn_sFP5ref_TestFRTestFE __THE_0_inc_0 = (struct __THE_1_fn_sFP5ref_TestFRTestFE) {&__THE_1_inc_0, NULL, 0};
  for (enum __THE_1_Test_0 __THE_0_i_0 = __THE_0_TestSDRed_0; __THE_0_i_0 != __THE_0_TestSDBlue_0; __THE_0_inc_0.f(__THE_0_inc_0.x, xalloc(&(struct __THE_1_fn_sFP5ref_TestFRTestFEP) {&__THE_0_i_0}, sizeof(struct __THE_1_fn_sFP5ref_TestFRTestFEP)))) {
  }
  enum __THE_1_Test_0 __THE_0_a_0 = __THE_0_TestSDRed_0;
  for (; __THE_0_a_0 != __THE_0_TestSDBlue_0; __THE_0_inc_0.f(__THE_0_inc_0.x, xalloc(&(struct __THE_1_fn_sFP5ref_TestFRTestFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP5ref_TestFRTestFEP)))) {
  }
  enum __THE_1_Test_0 __THE_0_b_0 = __THE_0_TestSDRed_0;
  while (__THE_0_b_0 != __THE_0_TestSDBlue_0) {
    __THE_0_inc_0.f(__THE_0_inc_0.x, xalloc(&(struct __THE_1_fn_sFP5ref_TestFRTestFEP) {&__THE_0_b_0}, sizeof(struct __THE_1_fn_sFP5ref_TestFRTestFEP)));
  }
  enum __THE_1_Test_0 __THE_0_c_0 = __THE_0_TestSDRed_0;
  while (1) {
    if (__THE_0_c_0 == __THE_0_TestSDBlue_0) {
      break;
    }
    __THE_0_inc_0.f(__THE_0_inc_0.x, xalloc(&(struct __THE_1_fn_sFP5ref_TestFRTestFEP) {&__THE_0_c_0}, sizeof(struct __THE_1_fn_sFP5ref_TestFRTestFEP)));
  }
  for (enum __THE_1_Test_0 __THE_0_d_0 = __THE_0_TestSDRed_0; __THE_0_d_0 != __THE_0_TestSDBlue_0;) {
    __THE_0_inc_0.f(__THE_0_inc_0.x, xalloc(&(struct __THE_1_fn_sFP5ref_TestFRTestFEP) {&__THE_0_d_0}, sizeof(struct __THE_1_fn_sFP5ref_TestFRTestFEP)));
  }
  for (enum __THE_1_Test_0 __THE_0_e_0 = __THE_0_TestSDRed_0;; __THE_0_inc_0.f(__THE_0_inc_0.x, xalloc(&(struct __THE_1_fn_sFP5ref_TestFRTestFEP) {&__THE_0_e_0}, sizeof(struct __THE_1_fn_sFP5ref_TestFRTestFEP)))) {
    if (__THE_0_e_0 == __THE_0_TestSDBlue_0) {
      break;
    }
  }
}
======= flags =======
======= stdout =======
