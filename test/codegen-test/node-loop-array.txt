======= stdin =======
main {
  loop i: int[]; i.len < 3; i.push(0) {
  }

  mut a: int[]
  loop ; a.len < 3; a.push(0) {
  }

  mut b: int[]
  loop ; b.len < 3; {
    b.push(0)
  }

  mut c: int[]
  loop {
    if c.len == 3 {
      break
    }

    c.push(0)
  }

  loop d: int[]; d.len < 3; {
    d.push(0)
  }

  loop e: int[];; e.push(0) {
    if e.len == 3 {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *re_alloc (void *, size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, struct __THE_1_array_int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, struct __THE_1_array_int m) {
  if (m.l == 0) return;
  n->l += m.l;
  n->d = re_alloc(n->d, n->l * sizeof(int32_t));
  size_t k = 0;
  for (size_t i = n->l - m.l; i < n->l; i++) n->d[i] = m.d[k++];
  free(m.d);
}

int main () {
  {
    struct __THE_1_array_int __THE_0_i_0 = __THE_1_array_int_alloc(0);
    for (; __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_i_0)) < 3; __THE_1_array_int_push(&__THE_0_i_0, __THE_1_array_int_alloc(1, 0))) {
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_i_0);
  }
  struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(0);
  for (; __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_a_0)) < 3; __THE_1_array_int_push(&__THE_0_a_0, __THE_1_array_int_alloc(1, 0))) {
  }
  struct __THE_1_array_int __THE_0_b_0 = __THE_1_array_int_alloc(0);
  while (__THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0)) < 3) {
    __THE_1_array_int_push(&__THE_0_b_0, __THE_1_array_int_alloc(1, 0));
  }
  struct __THE_1_array_int __THE_0_c_0 = __THE_1_array_int_alloc(0);
  while (1) {
    if (__THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_c_0)) == 3) {
      break;
    }
    __THE_1_array_int_push(&__THE_0_c_0, __THE_1_array_int_alloc(1, 0));
  }
  {
    struct __THE_1_array_int __THE_0_d_0 = __THE_1_array_int_alloc(0);
    for (; __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_d_0)) < 3;) {
      __THE_1_array_int_push(&__THE_0_d_0, __THE_1_array_int_alloc(1, 0));
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_d_0);
  }
  {
    struct __THE_1_array_int __THE_0_e_0 = __THE_1_array_int_alloc(0);
    for (;; __THE_1_array_int_push(&__THE_0_e_0, __THE_1_array_int_alloc(1, 0))) {
      if (__THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_e_0)) == 3) {
        break;
      }
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_e_0);
  }
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
