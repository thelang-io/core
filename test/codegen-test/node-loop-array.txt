======= stdin =======
main {
  loop i: int[]; i.len < 3; i.push(0) {
  }

  mut a: int[]
  loop ; a.len < 3; a.push(0) {
  }

  mut b: int[]
  loop ; b.len < 3; {
    b.push(0)
  }

  mut c: int[]
  loop {
    if c.len == 3 {
      break
    }

    c.push(0)
  }

  loop d: int[]; d.len < 3; {
    d.push(0)
  }

  loop e: int[];; e.push(0) {
    if e.len == 3 {
      break
    }
  }
}
======= code =======
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, size_t, ...);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, size_t x, ...) {
  if (x == 0) return;
  n->l += x;
  n->d = realloc(n->d, n->l * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = n->l - x; i < n->l; i++) n->d[i] = va_arg(args, int32_t);
  va_end(args);
}

int main () {
  {
    struct __THE_1_array_int __THE_0_i_0 = __THE_1_array_int_alloc(0);
    for (; __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_i_0)) < 3; __THE_1_array_int_push(&__THE_0_i_0, 1, 0)) {
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_i_0);
  }
  struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(0);
  for (; __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_a_0)) < 3; __THE_1_array_int_push(&__THE_0_a_0, 1, 0)) {
  }
  struct __THE_1_array_int __THE_0_b_0 = __THE_1_array_int_alloc(0);
  while (__THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0)) < 3) {
    __THE_1_array_int_push(&__THE_0_b_0, 1, 0);
  }
  struct __THE_1_array_int __THE_0_c_0 = __THE_1_array_int_alloc(0);
  while (1) {
    if (__THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_c_0)) == 3) {
      break;
    }
    __THE_1_array_int_push(&__THE_0_c_0, 1, 0);
  }
  {
    struct __THE_1_array_int __THE_0_d_0 = __THE_1_array_int_alloc(0);
    for (; __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_d_0)) < 3;) {
      __THE_1_array_int_push(&__THE_0_d_0, 1, 0);
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_d_0);
  }
  {
    struct __THE_1_array_int __THE_0_e_0 = __THE_1_array_int_alloc(0);
    for (;; __THE_1_array_int_push(&__THE_0_e_0, 1, 0)) {
      if (__THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_e_0)) == 3) {
        break;
      }
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_e_0);
  }
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
