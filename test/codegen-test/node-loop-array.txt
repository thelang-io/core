======= stdin =======
main {
  loop i: int[]; i.len < 3; i.push(0) {
  }

  mut a: int[]
  loop ; a.len < 3; a.push(0) {
  }

  mut b: int[]
  loop ; b.len < 3; {
    b.push(0)
  }

  mut c: int[]
  loop {
    if c.len == 3 {
      break
    }

    c.push(0)
  }

  loop d: int[]; d.len < 3; {
    d.push(0)
  }

  loop e: int[];; e.push(0) {
    if e.len == 3 {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_int;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void *re_alloc (void *, size_t);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, struct __THE_1_array_int);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, struct __THE_1_array_int m) {
  if (m.l == 0) return;
  n->l += m.l;
  n->d = re_alloc(n->d, n->l * sizeof(int32_t));
  size_t k = 0;
  for (size_t i = n->l - m.l; i < n->l; i++) n->d[i] = m.d[k++];
  free(m.d);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  {
    struct __THE_1_array_int __THE_0_i_0 = __THE_1_array_int_alloc(0);
    for (; (error_stack_pos(&err_state, 2, 18), __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_i_0))) < 3; (error_stack_pos(&err_state, 2, 29), __THE_1_array_int_push(&__THE_0_i_0, __THE_1_array_int_alloc(1, 0)))) {
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_i_0);
  }
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(0);
  for (; (error_stack_pos(&err_state, 6, 10), __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_a_0))) < 3; (error_stack_pos(&err_state, 6, 21), __THE_1_array_int_push(&__THE_0_a_0, __THE_1_array_int_alloc(1, 0)))) {
  }
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  struct __THE_1_array_int __THE_0_b_0 = __THE_1_array_int_alloc(0);
  while ((error_stack_pos(&err_state, 10, 10), __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0))) < 3) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
    (error_stack_pos(&err_state, 11, 5), __THE_1_array_int_push(&__THE_0_b_0, __THE_1_array_int_alloc(1, 0)));
L5:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L4;
  }
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  struct __THE_1_array_int __THE_0_c_0 = __THE_1_array_int_alloc(0);
  while (1) {
    if ((error_stack_pos(&err_state, 16, 8), __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_c_0))) == 3) {
      break;
    }
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L7;
    (error_stack_pos(&err_state, 20, 5), __THE_1_array_int_push(&__THE_0_c_0, __THE_1_array_int_alloc(1, 0)));
L7:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L6;
  }
  {
    struct __THE_1_array_int __THE_0_d_0 = __THE_1_array_int_alloc(0);
    for (; (error_stack_pos(&err_state, 23, 18), __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_d_0))) < 3;) {
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L9;
      (error_stack_pos(&err_state, 24, 5), __THE_1_array_int_push(&__THE_0_d_0, __THE_1_array_int_alloc(1, 0)));
L9:
      err_state.buf_idx--;
      if (err_state.id != -1) goto L8;
    }
L8:
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_d_0);
  }
  {
    struct __THE_1_array_int __THE_0_e_0 = __THE_1_array_int_alloc(0);
    for (;; (error_stack_pos(&err_state, 27, 19), __THE_1_array_int_push(&__THE_0_e_0, __THE_1_array_int_alloc(1, 0)))) {
      if ((error_stack_pos(&err_state, 28, 8), __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_e_0))) == 3) {
        break;
      }
    }
    __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_e_0);
  }
L6:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
L4:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
L3:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
L2:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
