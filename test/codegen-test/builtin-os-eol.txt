======= stdin =======
main {
  test1 := os_EOL
  test2 := os_EOL + os_EOL
  test3 := "test" + os_EOL + os_EOL
  test4 := os_EOL + "test" + os_EOL
  test5 := os_EOL.slice()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);
struct str str_slice (struct str, unsigned char, int64_t, unsigned char, int64_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_slice (struct str s, unsigned char o1, int64_t n1, unsigned char o2, int64_t n2) {
  int64_t i1 = o1 == 0 ? 0 : (n1 < 0 ? (n1 < -s.l ? 0 : n1 + s.l) : (n1 > s.l ? s.l : n1));
  int64_t i2 = o2 == 0 ? s.l : (n2 < 0 ? (n2 < -s.l ? 0 : n2 + s.l) : (n2 > s.l ? s.l : n2));
  if (i1 >= i2 || i1 >= s.l) {
    free(s.d);
    return str_alloc("");
  }
  size_t l = i2 - i1;
  char *d = alloc(l);
  for (size_t i = 0; i1 < i2; i1++) d[i++] = s.d[i1];
  free(s.d);
  return (struct str) {d, l};
}

int main () {
  const struct str __THE_0_test1_0 = str_alloc(THE_EOL);
  const struct str __THE_0_test2_0 = str_concat_str(str_alloc(THE_EOL), str_alloc(THE_EOL));
  const struct str __THE_0_test3_0 = str_concat_str(cstr_concat_str("test", str_alloc(THE_EOL)), str_alloc(THE_EOL));
  const struct str __THE_0_test4_0 = str_concat_str(str_concat_cstr(str_alloc(THE_EOL), "test"), str_alloc(THE_EOL));
  const struct str __THE_0_test5_0 = str_slice(str_alloc(THE_EOL), 0, 0, 0, 0);
  str_free((struct str) __THE_0_test5_0);
  str_free((struct str) __THE_0_test4_0);
  str_free((struct str) __THE_0_test3_0);
  str_free((struct str) __THE_0_test2_0);
  str_free((struct str) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
