======= stdin =======
fn job1 (mut a: ref int) ref int {
  a += 1
  return a
}

fn job2 (mut a: ref int) int {
  return a
}

fn job3 (
  mut a: ref int,
  fn1: (mut a: ref int) -> ref int,
  fn2: (mut a: ref int) -> int,
  fn3: ref ((mut a: ref int) -> ref int),
  fn4: ref ((mut a: ref int) -> int)
) {
  v1 := fn1(a) + fn2(a)
  v2 := fn3(a) > fn4(a)
  v3 := fn1(a) & fn3(a)
  v4 := fn2(a) - fn4(a)
  v5 := fn1(a) == fn4(a)
  v6 := fn2(a) << fn3(a)
}

main {
  mut a := 0
  refA := ref a
  refJob1 := ref job1
  refJob2 := ref job2

  v01 := job1(ref a)
  v02 := job1(refA)
  v03 := job2(ref a)
  v04 := job2(refA)
  v05 := (ref job1)(ref a)
  v06 := (ref job1)(refA)
  v07 := (ref job2)(ref a)
  v08 := (ref job2)(refA)
  v09 := refJob1(ref a)
  v10 := refJob1(refA)
  v11 := refJob2(ref a)
  v12 := refJob2(refA)
  job3(ref a, job1, job2, ref job1, ref job2)
  job3(ref a, ref job1, ref job2, ref job1, ref job2)
  job3(refA, job1, job2, refJob1, refJob2)
  job3(refA, refJob1, refJob2, refJob1, refJob2)

  fn jobLocal1 () {
    v21 := job1(ref a) + job2(ref a)
    v22 := refJob1(refA) > refJob2(refA)
    v23 := job1(refA) & refJob1(refA)
    v24 := refJob2(ref a) - job2(ref a)
    v26 := (ref job1)(refA) > (ref job2)(refA)
    v27 := job1(ref a) & (ref job1)(ref a)
    v28 := (ref job2)(refA) - job2(refA)
  }

  jobLocal1()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1003;
struct __THE_1_mainSDjobLocal1_0X;

struct __THE_1_fn$1000 {
  int32_t *(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t *n0;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int32_t *n0;
};
struct __THE_1_fn$1002 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int32_t *n0;
  struct __THE_1_fn$1000 n1;
  struct __THE_1_fn$1001 n2;
  struct __THE_1_fn$1000 *n3;
  struct __THE_1_fn$1001 *n4;
};
struct __THE_1_fn$1003 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDjobLocal1_0X {
  const struct __THE_1_fn$1001 **__THE_0_refJob2_0;
  const struct __THE_1_fn$1000 **__THE_0_refJob1_0;
  const int32_t **__THE_0_refA_0;
  int32_t *__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_job2_0;
  const struct __THE_1_fn$1000 *__THE_0_job1_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
int32_t *__THE_1_job1_0 (void *, void *);
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
int32_t __THE_1_job2_0 (void *, void *);
void __THE_1_job3_0 (void *, void *);
void __THE_1_fn$1003_free (struct __THE_1_fn$1003);
void __THE_1_mainSDjobLocal1_0 (void *);
void __THE_1_mainSDjobLocal1_0_alloc (struct __THE_1_fn$1003 *, struct __THE_1_mainSDjobLocal1_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
int32_t *__THE_1_job1_0 (void *px, void *pp) {
  struct __THE_1_fn$1000P *p = pp;
  int32_t *__THE_0_a_0 = p->n0;
  *__THE_0_a_0 += 1;
  return __THE_0_a_0;
}
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1001) {n.f, x, n.l};
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_job2_0 (void *px, void *pp) {
  struct __THE_1_fn$1001P *p = pp;
  int32_t *__THE_0_a_0 = p->n0;
  return *__THE_0_a_0;
}
void __THE_1_job3_0 (void *px, void *pp) {
  struct __THE_1_fn$1002P *p = pp;
  int32_t *__THE_0_a_0 = p->n0;
  const struct __THE_1_fn$1000 __THE_0_fn1_0 = p->n1;
  const struct __THE_1_fn$1001 __THE_0_fn2_0 = p->n2;
  const struct __THE_1_fn$1000 *__THE_0_fn3_0 = p->n3;
  const struct __THE_1_fn$1001 *__THE_0_fn4_0 = p->n4;
  const int32_t __THE_0_v1_0 = *__THE_0_fn1_0.f(__THE_0_fn1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P))) + __THE_0_fn2_0.f(__THE_0_fn2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const bool __THE_0_v2_0 = *(*__THE_0_fn3_0).f((*__THE_0_fn3_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P))) > (*__THE_0_fn4_0).f((*__THE_0_fn4_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v3_0 = *__THE_0_fn1_0.f(__THE_0_fn1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P))) & *(*__THE_0_fn3_0).f((*__THE_0_fn3_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t __THE_0_v4_0 = __THE_0_fn2_0.f(__THE_0_fn2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P))) - (*__THE_0_fn4_0).f((*__THE_0_fn4_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const bool __THE_0_v5_0 = *__THE_0_fn1_0.f(__THE_0_fn1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P))) == (*__THE_0_fn4_0).f((*__THE_0_fn4_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v6_0 = __THE_0_fn2_0.f(__THE_0_fn2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P))) << *(*__THE_0_fn3_0).f((*__THE_0_fn3_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)));
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_fn2_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_fn1_0);
}
void __THE_1_fn$1003_free (struct __THE_1_fn$1003 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDjobLocal1_0 (void *px) {
  struct __THE_1_mainSDjobLocal1_0X *x = px;
  const struct __THE_1_fn$1001 **__THE_0_refJob2_0 = x->__THE_0_refJob2_0;
  const struct __THE_1_fn$1000 **__THE_0_refJob1_0 = x->__THE_0_refJob1_0;
  const int32_t **__THE_0_refA_0 = x->__THE_0_refA_0;
  int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_job2_0 = x->__THE_0_job2_0;
  const struct __THE_1_fn$1000 *__THE_0_job1_0 = x->__THE_0_job1_0;
  const int32_t __THE_0_v21_0 = *(*__THE_0_job1_0).f((*__THE_0_job1_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P))) + (*__THE_0_job2_0).f((*__THE_0_job2_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const bool __THE_0_v22_0 = *(**__THE_0_refJob1_0).f((**__THE_0_refJob1_0).x, xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P))) > (**__THE_0_refJob2_0).f((**__THE_0_refJob2_0).x, xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v23_0 = *(*__THE_0_job1_0).f((*__THE_0_job1_0).x, xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P))) & *(**__THE_0_refJob1_0).f((**__THE_0_refJob1_0).x, xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t __THE_0_v24_0 = (**__THE_0_refJob2_0).f((**__THE_0_refJob2_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P))) - (*__THE_0_job2_0).f((*__THE_0_job2_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const bool __THE_0_v26_0 = *(__THE_1_fn$1000_copy(*__THE_0_job1_0)).f((__THE_1_fn$1000_copy(*__THE_0_job1_0)).x, xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P))) > (__THE_1_fn$1001_copy(*__THE_0_job2_0)).f((__THE_1_fn$1001_copy(*__THE_0_job2_0)).x, xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v27_0 = *(*__THE_0_job1_0).f((*__THE_0_job1_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P))) & *(__THE_1_fn$1000_copy(*__THE_0_job1_0)).f((__THE_1_fn$1000_copy(*__THE_0_job1_0)).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t __THE_0_v28_0 = (__THE_1_fn$1001_copy(*__THE_0_job2_0)).f((__THE_1_fn$1001_copy(*__THE_0_job2_0)).x, xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P))) - (*__THE_0_job2_0).f((*__THE_0_job2_0).x, xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)));
}
void __THE_1_mainSDjobLocal1_0_alloc (struct __THE_1_fn$1003 *n, struct __THE_1_mainSDjobLocal1_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDjobLocal1_0X);
  struct __THE_1_mainSDjobLocal1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDjobLocal1_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_job1_0 = (struct __THE_1_fn$1000) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_job2_0 = (struct __THE_1_fn$1001) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_job3_0 = (struct __THE_1_fn$1002) {&__THE_1_job3_0, NULL, 0};
  int32_t __THE_0_a_0 = 0;
  const int32_t *__THE_0_refA_0 = &__THE_0_a_0;
  const struct __THE_1_fn$1000 *__THE_0_refJob1_0 = &__THE_0_job1_0;
  const struct __THE_1_fn$1001 *__THE_0_refJob2_0 = &__THE_0_job2_0;
  const int32_t *__THE_0_v01_0 = __THE_0_job1_0.f(__THE_0_job1_0.x, xalloc(&(struct __THE_1_fn$1000P) {&__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t *__THE_0_v02_0 = __THE_0_job1_0.f(__THE_0_job1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t __THE_0_v03_0 = __THE_0_job2_0.f(__THE_0_job2_0.x, xalloc(&(struct __THE_1_fn$1001P) {&__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v04_0 = __THE_0_job2_0.f(__THE_0_job2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t *__THE_0_v05_0 = (__THE_1_fn$1000_copy(__THE_0_job1_0)).f((__THE_1_fn$1000_copy(__THE_0_job1_0)).x, xalloc(&(struct __THE_1_fn$1000P) {&__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t *__THE_0_v06_0 = (__THE_1_fn$1000_copy(__THE_0_job1_0)).f((__THE_1_fn$1000_copy(__THE_0_job1_0)).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t __THE_0_v07_0 = (__THE_1_fn$1001_copy(__THE_0_job2_0)).f((__THE_1_fn$1001_copy(__THE_0_job2_0)).x, xalloc(&(struct __THE_1_fn$1001P) {&__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v08_0 = (__THE_1_fn$1001_copy(__THE_0_job2_0)).f((__THE_1_fn$1001_copy(__THE_0_job2_0)).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t *__THE_0_v09_0 = (*__THE_0_refJob1_0).f((*__THE_0_refJob1_0).x, xalloc(&(struct __THE_1_fn$1000P) {&__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t *__THE_0_v10_0 = (*__THE_0_refJob1_0).f((*__THE_0_refJob1_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)));
  const int32_t __THE_0_v11_0 = (*__THE_0_refJob2_0).f((*__THE_0_refJob2_0).x, xalloc(&(struct __THE_1_fn$1001P) {&__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)));
  const int32_t __THE_0_v12_0 = (*__THE_0_refJob2_0).f((*__THE_0_refJob2_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_job3_0.f(__THE_0_job3_0.x, xalloc(&(struct __THE_1_fn$1002P) {&__THE_0_a_0, __THE_1_fn$1000_copy(__THE_0_job1_0), __THE_1_fn$1001_copy(__THE_0_job2_0), &__THE_0_job1_0, &__THE_0_job2_0}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_job3_0.f(__THE_0_job3_0.x, xalloc(&(struct __THE_1_fn$1002P) {&__THE_0_a_0, __THE_1_fn$1000_copy(__THE_0_job1_0), __THE_1_fn$1001_copy(__THE_0_job2_0), &__THE_0_job1_0, &__THE_0_job2_0}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_job3_0.f(__THE_0_job3_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_0_refA_0, __THE_1_fn$1000_copy(__THE_0_job1_0), __THE_1_fn$1001_copy(__THE_0_job2_0), __THE_0_refJob1_0, __THE_0_refJob2_0}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_job3_0.f(__THE_0_job3_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_0_refA_0, __THE_1_fn$1000_copy(*__THE_0_refJob1_0), __THE_1_fn$1001_copy(*__THE_0_refJob2_0), __THE_0_refJob1_0, __THE_0_refJob2_0}, sizeof(struct __THE_1_fn$1002P)));
  const struct __THE_1_fn$1003 __THE_0_mainSDjobLocal1_0;
  __THE_1_mainSDjobLocal1_0_alloc((struct __THE_1_fn$1003 *) &__THE_0_mainSDjobLocal1_0, (struct __THE_1_mainSDjobLocal1_0X) {&__THE_0_refJob2_0, &__THE_0_refJob1_0, &__THE_0_refA_0, &__THE_0_a_0, &__THE_0_job2_0, &__THE_0_job1_0});
  __THE_0_mainSDjobLocal1_0.f(__THE_0_mainSDjobLocal1_0.x);
  __THE_1_fn$1003_free((struct __THE_1_fn$1003) __THE_0_mainSDjobLocal1_0);
}
======= flags =======
======= stdout =======
