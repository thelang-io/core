======= stdin =======
main {
  process_home;
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <pwd.h>
  #include <unistd.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str process_home ();
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str process_home () {
  #ifdef THE_OS_WINDOWS
    char r[0xFFFF];
    if (GetEnvironmentVariable("USERPROFILE", r, 0xFFFF) == 0) {
      fprintf(stderr, "Error: environment variable `USERPROFILE` is not set" THE_EOL);
      exit(EXIT_FAILURE);
    }
  #else
    char *r = getenv("HOME");
    if (r == NULL) {
      r = getpwuid(getuid())->pw_dir;
    }
  #endif
  return str_alloc(r);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  str_free((struct str) process_home());
}
======= flags =======
======= stdout =======
