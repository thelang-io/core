======= stdin =======
type Alias1 = int
type Alias2 = str

main {
  testInt := 1
  testStr := "test"

  v1: Alias1 | Alias2 = 1
  v2: Alias1 | Alias2 = ""
  v3: Alias1 | Alias2 = "test"
  v3: Alias1 | Alias2 = testInt
  v3: Alias1 | Alias2 = testStr
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2
#define TYPE_str 3

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_intUSstrUE;

struct __THE_1_union_intUSstrUE {
  int t;
  union {
    int32_t v2;
    struct str v3;
  };
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int, ...);
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int t, ...) {
  struct __THE_1_union_intUSstrUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v2 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v3 = va_arg(args, struct str);
  va_end(args);
  return r;
}
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v3);
}

int main () {
  const int32_t __THE_0_testInt_0 = 1;
  const struct str __THE_0_testStr_0 = str_alloc("test");
  const struct __THE_1_union_intUSstrUE __THE_0_v1_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 1);
  const struct __THE_1_union_intUSstrUE __THE_0_v2_0 = __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc(""));
  const struct __THE_1_union_intUSstrUE __THE_0_v3_0 = __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test"));
  const struct __THE_1_union_intUSstrUE __THE_0_v3_1 = __THE_1_union_intUSstrUE_alloc(TYPE_int, __THE_0_testInt_0);
  const struct __THE_1_union_intUSstrUE __THE_0_v3_2 = __THE_1_union_intUSstrUE_alloc(TYPE_str, str_copy(__THE_0_testStr_0));
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_v3_2);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_v3_1);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_v3_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_v2_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_v1_0);
  str_free((struct str) __THE_0_testStr_0);
}
======= flags =======
======= stdout =======
