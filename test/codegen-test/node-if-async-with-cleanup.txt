======= stdin =======
async fn test (a: int) {}
main {
  a := "1"
  if a == "1" {
    await test(1)
  }
  if a == "1" {
    b := "2"
    await test(1)
  }
  if a == "1" {
    b := "2"
    await test(1)
    c := "3"
  }
  if a == "1" {
    await test(1)
  } elif a == "2" {
    await test(2)
  }
  if a == "1" {
    b := "2"
    await test(1)
  } elif a == "2" {
    d := "4"
    await test(2)
  }
  if a == "1" {
    b := "2"
    await test(1)
    c := "3"
  } elif a == "2" {
    d := "4"
    await test(2)
    e := "5"
  }
  if a == "1" {
    await test(1)
  } else {
    await test(3)
  }
  if a == "1" {
    b := "2"
    await test(1)
  } else {
    d := "4"
    await test(3)
  }
  if a == "1" {
    b := "2"
    await test(1)
    c := "3"
  } else {
    d := "4"
    await test(3)
    e := "5"
  }
  if a == "1" {
    await test(1)
  } elif a == "2" {
    await test(2)
  } else {
    await test(3)
  }
  if a == "1" {
    b := "2"
    await test(1)
  } elif a == "2" {
    d := "4"
    await test(2)
  } else {
    f := "6"
    await test(3)
  }
  if a == "1" {
    b := "2"
    await test(1)
    c := "3"
  } elif a == "2" {
    d := "4"
    await test(2)
    e := "5"
  } else {
    f := "6"
    await test(3)
    g := "7"
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

struct threadpool;
struct threadpool_job;
struct threadpool_thread;

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};
typedef struct threadpool {
  bool active;
  pthread_cond_t cond1;
  pthread_cond_t cond2;
  struct threadpool_job *jobs;
  struct threadpool_job *jobs_tail;
  pthread_mutex_t lock1;
  pthread_mutex_t lock2;
  pthread_mutex_t lock3;
  struct threadpool_thread *threads;
  int working_threads;
  int alive_threads;
} threadpool_t;
typedef void (*threadpool_func_t) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
typedef struct threadpool_job {
  struct threadpool_job *parent;
  threadpool_func_t func;
  void *ctx;
  void *params;
  void *ret;
  int step;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  pthread_t id;
  struct threadpool *tp;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_async_mainX;

struct __THE_1_fn$1000 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t n0;
};
struct __THE_1_fn$1001 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_async_mainX {
  const struct __THE_1_fn$1000 *__THE_0_test_0;
  struct str __THE_0_a_0;
  struct str __THE_0_b_0;
  struct str __THE_0_c_0;
  struct str __THE_0_d_0;
  struct str __THE_0_e_0;
  struct str __THE_0_f_0;
  struct str __THE_0_g_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
void str_free (struct str);
void threadpool_add (threadpool_t *, threadpool_func_t, void *, void *, void *, threadpool_job_t *);
void threadpool_deinit (threadpool_t *);
threadpool_job_t *threadpool_get (threadpool_t *);
threadpool_t *threadpool_init (int);
void threadpool_insert (threadpool_t *, threadpool_job_t *);
void threadpool_job_deinit (threadpool_job_t *);
threadpool_job_t *threadpool_job_step (threadpool_job_t *, int);
void threadpool_thread_deinit (threadpool_thread_t *);
threadpool_thread_t *threadpool_thread_init (threadpool_t *, threadpool_thread_t *);
void threadpool_wait (threadpool_t *);
void *threadpool_worker (void *);
void *xalloc (void *, size_t);
void __THE_1_test_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_async_main (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_async_main_alloc (struct __THE_1_fn$1001 *, struct __THE_1_async_mainX);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
void threadpool_add (threadpool_t *self, threadpool_func_t func, void *ctx, void *params, void *ret, threadpool_job_t *parent) {
  threadpool_job_t *job = alloc(sizeof(threadpool_job_t));
  job->parent = parent;
  job->func = func;
  job->ctx = ctx;
  job->params = params;
  job->ret = ret;
  job->step = 0;
  job->next = NULL;
  threadpool_insert(self, job);
}
void threadpool_deinit (threadpool_t *self) {
  self->active = false;
  pthread_mutex_lock(&self->lock1);
  while (self->alive_threads != 0) {
    pthread_mutex_lock(&self->lock3);
    pthread_cond_signal(&self->cond2);
    pthread_mutex_unlock(&self->lock3);
    pthread_cond_wait(&self->cond1, &self->lock1);
  }
  pthread_mutex_unlock(&self->lock1);
  while (self->jobs != NULL) {
    threadpool_job_t *next = self->jobs->next;
    threadpool_job_deinit(self->jobs);
    self->jobs = next;
  }
  while (self->threads != NULL) {
    threadpool_thread_t *next = self->threads->next;
    threadpool_thread_deinit(self->threads);
    self->threads = next;
  }
  pthread_cond_destroy(&self->cond1);
  pthread_cond_destroy(&self->cond2);
  pthread_mutex_destroy(&self->lock1);
  pthread_mutex_destroy(&self->lock2);
  pthread_mutex_destroy(&self->lock3);
  free(self);
}
threadpool_job_t *threadpool_get (threadpool_t *self) {
  pthread_mutex_lock(&self->lock2);
  threadpool_job_t *job = self->jobs;
  if (job != NULL) {
    self->jobs = self->jobs->next;
    job->next = NULL;
    if (self->jobs == NULL) {
      self->jobs_tail = NULL;
    } else {
      pthread_mutex_lock(&self->lock3);
      pthread_cond_signal(&self->cond2);
      pthread_mutex_unlock(&self->lock3);
    }
  }
  pthread_mutex_unlock(&self->lock2);
  return job;
}
threadpool_t *threadpool_init (int count) {
  threadpool_t *self = alloc(sizeof(threadpool_t));
  self->active = true;
  self->jobs = NULL;
  self->jobs_tail = NULL;
  self->working_threads = 0;
  self->alive_threads = 0;
  pthread_cond_init(&self->cond1, NULL);
  pthread_cond_init(&self->cond2, NULL);
  pthread_mutex_init(&self->lock1, NULL);
  pthread_mutex_init(&self->lock2, NULL);
  pthread_mutex_init(&self->lock3, NULL);
  self->threads = NULL;
  for (int i = 0; i < count; i++) self->threads = threadpool_thread_init(self, self->threads);
  pthread_mutex_lock(&self->lock1);
  while (self->alive_threads != count) pthread_cond_wait(&self->cond1, &self->lock1);
  pthread_mutex_unlock(&self->lock1);
  return self;
}
void threadpool_insert (threadpool_t *self, threadpool_job_t *job) {
  pthread_mutex_lock(&self->lock2);
  if (self->jobs == NULL) {
    self->jobs = job;
    self->jobs_tail = job;
  } else {
    self->jobs_tail->next = job;
    self->jobs_tail = self->jobs_tail->next;
  }
  pthread_mutex_lock(&self->lock3);
  pthread_cond_signal(&self->cond2);
  pthread_mutex_unlock(&self->lock3);
  pthread_mutex_unlock(&self->lock2);
}
void threadpool_job_deinit (threadpool_job_t *self) {
  free(self);
}
threadpool_job_t *threadpool_job_step (threadpool_job_t *self, int step) {
  self->step = step;
  return self;
}
void threadpool_thread_deinit (threadpool_thread_t *self) {
  free(self);
}
threadpool_thread_t *threadpool_thread_init (threadpool_t *tp, threadpool_thread_t *next) {
  threadpool_thread_t *self = alloc(sizeof(threadpool_thread_t));
  self->tp = tp;
  pthread_create(&self->id, NULL, threadpool_worker, self);
  pthread_detach(self->id);
  self->next = next;
  return self;
}
void threadpool_wait (threadpool_t *self) {
  pthread_mutex_lock(&self->lock1);
  while ((self->working_threads != 0 || self->jobs != NULL) && err_state.id == -1) pthread_cond_wait(&self->cond1, &self->lock1);
  pthread_mutex_unlock(&self->lock1);
}
void *threadpool_worker (void *n) {
  threadpool_thread_t *thread = n;
  threadpool_t *self = thread->tp;
  pthread_mutex_lock(&self->lock1);
  self->alive_threads++;
  pthread_cond_signal(&self->cond1);
  pthread_mutex_unlock(&self->lock1);
  while (self->active) {
    pthread_mutex_lock(&self->lock3);
    while (self->active && self->jobs == NULL) pthread_cond_wait(&self->cond2, &self->lock3);
    pthread_mutex_unlock(&self->lock3);
    if (!self->active) break;
    pthread_mutex_lock(&self->lock1);
    self->working_threads++;
    pthread_mutex_unlock(&self->lock1);
    threadpool_job_t *job = threadpool_get(self);
    if (job != NULL) job->func(self, job, job->ctx, job->params, job->ret, job->step);
    pthread_mutex_lock(&self->lock1);
    self->working_threads--;
    if ((self->working_threads == 0 && self->jobs == NULL) || err_state.id != -1) pthread_cond_signal(&self->cond1);
    pthread_mutex_unlock(&self->lock1);
  }
  pthread_mutex_lock(&self->lock1);
  self->alive_threads--;
  pthread_cond_signal(&self->cond1);
  pthread_mutex_unlock(&self->lock1);
  return NULL;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
void __THE_1_test_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn$1000P *p = pp;
  const int32_t __THE_0_a_0 = p->n0;
  if (job->parent != NULL) threadpool_insert(tp, job->parent);
  threadpool_job_deinit(job);
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_async_main (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_async_mainX *x = px;
  const struct __THE_1_fn$1000 *__THE_0_test_0 = x->__THE_0_test_0;
  struct str *__THE_0_a_0 = &x->__THE_0_a_0;
  struct str *__THE_0_b_0 = &x->__THE_0_b_0;
  struct str *__THE_0_c_0 = &x->__THE_0_c_0;
  struct str *__THE_0_d_0 = &x->__THE_0_d_0;
  struct str *__THE_0_e_0 = &x->__THE_0_e_0;
  struct str *__THE_0_f_0 = &x->__THE_0_f_0;
  struct str *__THE_0_g_0 = &x->__THE_0_g_0;
  switch (step) {
    case 0: {
      *__THE_0_a_0 = str_alloc("1");
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 1));
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 1: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 3));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 2;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 2: {
      str_free((struct str) *__THE_0_b_0);
    }
    case 3: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 5));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 4;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 4: {
      *__THE_0_c_0 = str_alloc("3");
      str_free((struct str) *__THE_0_c_0);
      str_free((struct str) *__THE_0_b_0);
    }
    case 5: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 7));
      job->step = 6;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 6: {
      return threadpool_insert(tp, threadpool_job_step(job, 8));
    }
    case 7: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "2"))) return threadpool_insert(tp, threadpool_job_step(job, 8));
      job->step = 8;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {2}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 8: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 10));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 9;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 9: {
      str_free((struct str) *__THE_0_b_0);
      return threadpool_insert(tp, threadpool_job_step(job, 12));
    }
    case 10: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "2"))) return threadpool_insert(tp, threadpool_job_step(job, 12));
      *__THE_0_d_0 = str_alloc("4");
      job->step = 11;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {2}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 11: {
      str_free((struct str) *__THE_0_d_0);
    }
    case 12: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 14));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 13;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 13: {
      *__THE_0_c_0 = str_alloc("3");
      str_free((struct str) *__THE_0_c_0);
      str_free((struct str) *__THE_0_b_0);
      return threadpool_insert(tp, threadpool_job_step(job, 16));
    }
    case 14: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "2"))) return threadpool_insert(tp, threadpool_job_step(job, 16));
      *__THE_0_d_0 = str_alloc("4");
      job->step = 15;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {2}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 15: {
      *__THE_0_e_0 = str_alloc("5");
      str_free((struct str) *__THE_0_e_0);
      str_free((struct str) *__THE_0_d_0);
    }
    case 16: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 18));
      job->step = 17;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 17: {
      return threadpool_insert(tp, threadpool_job_step(job, 19));
    }
    case 18: {
      job->step = 19;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {3}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 19: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 21));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 20;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 20: {
      str_free((struct str) *__THE_0_b_0);
      return threadpool_insert(tp, threadpool_job_step(job, 23));
    }
    case 21: {
      *__THE_0_d_0 = str_alloc("4");
      job->step = 22;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {3}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 22: {
      str_free((struct str) *__THE_0_d_0);
    }
    case 23: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 25));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 24;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 24: {
      *__THE_0_c_0 = str_alloc("3");
      str_free((struct str) *__THE_0_c_0);
      str_free((struct str) *__THE_0_b_0);
      return threadpool_insert(tp, threadpool_job_step(job, 27));
    }
    case 25: {
      *__THE_0_d_0 = str_alloc("4");
      job->step = 26;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {3}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 26: {
      *__THE_0_e_0 = str_alloc("5");
      str_free((struct str) *__THE_0_e_0);
      str_free((struct str) *__THE_0_d_0);
    }
    case 27: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 29));
      job->step = 28;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 28: {
      return threadpool_insert(tp, threadpool_job_step(job, 32));
    }
    case 29: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "2"))) return threadpool_insert(tp, threadpool_job_step(job, 31));
      job->step = 30;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {2}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 30: {
      return threadpool_insert(tp, threadpool_job_step(job, 32));
    }
    case 31: {
      job->step = 32;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {3}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 32: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 34));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 33;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 33: {
      str_free((struct str) *__THE_0_b_0);
      return threadpool_insert(tp, threadpool_job_step(job, 38));
    }
    case 34: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "2"))) return threadpool_insert(tp, threadpool_job_step(job, 36));
      *__THE_0_d_0 = str_alloc("4");
      job->step = 35;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {2}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 35: {
      str_free((struct str) *__THE_0_d_0);
      return threadpool_insert(tp, threadpool_job_step(job, 38));
    }
    case 36: {
      *__THE_0_f_0 = str_alloc("6");
      job->step = 37;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {3}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 37: {
      str_free((struct str) *__THE_0_f_0);
    }
    case 38: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "1"))) return threadpool_insert(tp, threadpool_job_step(job, 40));
      *__THE_0_b_0 = str_alloc("2");
      job->step = 39;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {1}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 39: {
      *__THE_0_c_0 = str_alloc("3");
      str_free((struct str) *__THE_0_c_0);
      str_free((struct str) *__THE_0_b_0);
      return threadpool_insert(tp, threadpool_job_step(job, 44));
    }
    case 40: {
      if (!(str_eq_cstr(str_copy(*__THE_0_a_0), "2"))) return threadpool_insert(tp, threadpool_job_step(job, 42));
      *__THE_0_d_0 = str_alloc("4");
      job->step = 41;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {2}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 41: {
      *__THE_0_e_0 = str_alloc("5");
      str_free((struct str) *__THE_0_e_0);
      str_free((struct str) *__THE_0_d_0);
      return threadpool_insert(tp, threadpool_job_step(job, 44));
    }
    case 42: {
      *__THE_0_f_0 = str_alloc("6");
      job->step = 43;
      return threadpool_add(tp, (*__THE_0_test_0).f, xalloc((*__THE_0_test_0).x, (*__THE_0_test_0).l), xalloc(&(struct __THE_1_fn$1000P) {3}, sizeof(struct __THE_1_fn$1000P)), NULL, job);
    }
    case 43: {
      *__THE_0_g_0 = str_alloc("7");
      str_free((struct str) *__THE_0_g_0);
      str_free((struct str) *__THE_0_f_0);
    }
    case 44: {
      str_free((struct str) *__THE_0_a_0);
    }
  }
  if (job->parent != NULL) threadpool_insert(tp, job->parent);
  threadpool_job_deinit(job);
}
void __THE_1_async_main_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_async_mainX x) {
  size_t l = sizeof(struct __THE_1_async_mainX);
  struct __THE_1_async_mainX *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_async_main;
  n->x = r;
  n->l = l;
}

int main () {
  threadpool_t *tp = threadpool_init(5);
  const struct __THE_1_fn$1000 __THE_0_test_0 = (struct __THE_1_fn$1000) {&__THE_1_test_0, NULL, 0};
  const struct __THE_1_fn$1001 async_main;
  __THE_1_async_main_alloc((struct __THE_1_fn$1001 *) &async_main, (struct __THE_1_async_mainX) {&__THE_0_test_0});
  threadpool_add(tp, async_main.f, async_main.x, NULL, NULL, NULL);
  threadpool_wait(tp);
  threadpool_deinit(tp);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) async_main);
}
======= flags =======
======= stdout =======
