======= stdin =======
fn forEachPrint (it: str, idx: int) { print(it, idx) }

main {
  test0: str[]
  test1 := ["1"]
  test2 := ["1", "2"]
  test3 := ["1", "2", "3"]

  test0.forEach(forEachPrint)
  test1.forEach(forEachPrint)
  test2.forEach(forEachPrint)
  test3.forEach(forEachPrint)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_str;
struct __THE_1_fn$1;
struct __THE_1_fn$1P;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_fn$1 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  err_state_t *err_state;
  int line;
  int col;
  struct str n0;
  int32_t n1;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
void *xalloc (void *, size_t);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str);
void __THE_1_array_str_free (struct __THE_1_array_str);
struct __THE_1_fn$1 __THE_1_fn$1_copy (const struct __THE_1_fn$1);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_array_str_forEach (err_state_t *, int, int, struct __THE_1_array_str, struct __THE_1_fn$1);
void __THE_1_forEachPrint_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *fn_err_state) {
  fn_err_state->stack_idx--;
}
void error_stack_pos (err_state_t *fn_err_state, int line, int col) {
  if (line != 0) fn_err_state->stack[fn_err_state->stack_idx - 1].line = line;
  if (col != 0) fn_err_state->stack[fn_err_state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *fn_err_state, const char *file, const char *name, int line, int col) {
  fn_err_state->stack[fn_err_state->stack_idx].file = file;
  fn_err_state->stack[fn_err_state->stack_idx].name = name;
  error_stack_pos(fn_err_state, line, col);
  fn_err_state->stack_idx++;
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str n) {
  if (n.l == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) d[i] = str_copy(n.d[i]);
  return (struct __THE_1_array_str) {d, n.l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
struct __THE_1_fn$1 __THE_1_fn$1_copy (const struct __THE_1_fn$1 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1) {n.f, x, n.l};
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_array_str_forEach (err_state_t *fn_err_state, int line, int col, struct __THE_1_array_str self, struct __THE_1_fn$1 n1) {
  for (size_t i = 0; i < self.l; i++) {
    n1.f(n1.x, xalloc(&(struct __THE_1_fn$1P) {fn_err_state, line, col, str_copy(self.d[i]), i}, sizeof(struct __THE_1_fn$1P)));
  }
  __THE_1_fn$1_free((struct __THE_1_fn$1) n1);
  __THE_1_array_str_free((struct __THE_1_array_str) self);
}
void __THE_1_forEachPrint_0 (void *px, void *pp) {
  struct __THE_1_fn$1P *p = pp;
  error_stack_push(p->err_state, "/test", "forEachPrint", p->line, p->col);
  const struct str __THE_0_it_0 = p->n0;
  const int32_t __THE_0_idx_0 = p->n1;
  if (setjmp(p->err_state->buf[p->err_state->buf_idx++]) != 0) goto L1;
  print(stdout, "sziz", str_copy(__THE_0_it_0), " ", __THE_0_idx_0, THE_EOL);
L1:
  p->err_state->buf_idx--;
  str_free((struct str) __THE_0_it_0);
  error_stack_pop(p->err_state);
  if (p->err_state->id != -1) longjmp(p->err_state->buf[p->err_state->buf_idx - 1], p->err_state->id);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1 __THE_0_forEachPrint_0 = (struct __THE_1_fn$1) {&__THE_1_forEachPrint_0, NULL, 0};
  const struct __THE_1_array_str __THE_0_test0_0 = __THE_1_array_str_alloc(0);
  const struct __THE_1_array_str __THE_0_test1_0 = __THE_1_array_str_alloc(1, str_alloc("1"));
  const struct __THE_1_array_str __THE_0_test2_0 = __THE_1_array_str_alloc(2, str_alloc("1"), str_alloc("2"));
  const struct __THE_1_array_str __THE_0_test3_0 = __THE_1_array_str_alloc(3, str_alloc("1"), str_alloc("2"), str_alloc("3"));
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  __THE_1_array_str_forEach(&err_state, 9, 3, __THE_1_array_str_copy(__THE_0_test0_0), __THE_1_fn$1_copy(__THE_0_forEachPrint_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  __THE_1_array_str_forEach(&err_state, 10, 3, __THE_1_array_str_copy(__THE_0_test1_0), __THE_1_fn$1_copy(__THE_0_forEachPrint_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  __THE_1_array_str_forEach(&err_state, 11, 3, __THE_1_array_str_copy(__THE_0_test2_0), __THE_1_fn$1_copy(__THE_0_forEachPrint_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  __THE_1_array_str_forEach(&err_state, 12, 3, __THE_1_array_str_copy(__THE_0_test3_0), __THE_1_fn$1_copy(__THE_0_forEachPrint_0));
L2:
  err_state.buf_idx--;
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test3_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test2_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test1_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test0_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
1 0
1 0
2 1
1 0
2 1
3 2
