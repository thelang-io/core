======= stdin =======
obj Test1 {
  mut a: int
  mut b: str

  mut refA: ref int
  mut refB: ref str

  fn1: (ref int) -> ref int
  refFn1: ref ((ref int) -> ref int)
  fn2: () -> int
  refFn2: ref (() -> int)
}

obj Test2 {
  test1: Test1
  refTest1: ref Test1
}

fn job1 (a: ref int) ref int {
  return a
}

fn job2 () int {
  return 2
}

main {
  mut a := 0
  mut b := "str"
  refA := ref a
  refB := ref b
  refJob1 := ref job1
  refJob2 := ref job2

  mut test1 := Test1{a: a, b: b, refA: ref a, refB: ref b, fn1: job1, refFn1: ref job1, fn2: job2, refFn2: refJob2}
  mut refTest1 := ref test1

  mut test2 := Test2{test1: test1, refTest1: ref test1}
  test3 := Test1{a: refA, b: refB, refA: refA, refB: refB, fn1: refJob1, refFn1: refJob1, fn2: refJob2, refFn2: refJob2}
  test4 := Test2{test1: refTest1, refTest1: refTest1}

  test1.refA = ref test1.a
  test1.refB = ref test1.b

  a = test1.a + test1.refA
  b = test1.refB + test1.b

  test1.a = a + test1.refA
  test1.b += test1.refB + b
  test1.refA = a + test1.refA
  test1.refB = test1.refB + b

  v01 := refTest1.fn1(ref a) + test1.refFn1(refA)
  v02 := test1.fn2() + refTest1.refFn2()
  v03 := test1.fn1(ref a) + refTest1.refFn2()
  v04 := test1.fn2() + refTest1.refFn1(refA)
  v05 := test1.fn1(ref a) + test1.fn2()
  v06 := refTest1.refFn1(refA) + refTest1.refFn2()

  v21 := test2.refTest1.fn1(ref a) + test2.test1.refFn1(refA)
  v22 := test2.test1.fn2() + test2.refTest1.refFn2()
  v23 := test2.test1.fn1(ref a) + test2.refTest1.refFn2()
  v24 := test2.test1.fn2() + test2.refTest1.refFn1(refA)
  v25 := test2.test1.fn1(ref a) + test2.test1.fn2()
  v26 := test2.refTest1.refFn1(refA) + test2.refTest1.refFn2()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn_sFP3ref_intFRref_intFE;
struct __THE_1_fn_sFP3ref_intFRref_intFEP;
struct __THE_1_fn_sFRintFE;
struct __THE_1_Test1_0;
struct __THE_1_Test2_0;

struct __THE_1_fn_sFP3ref_intFRref_intFE {
  int32_t *(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3ref_intFRref_intFEP {
  int32_t *n0;
};
struct __THE_1_fn_sFRintFE {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_Test1_0 {
  int32_t __THE_0_a;
  struct str __THE_0_b;
  int32_t *__THE_0_refA;
  struct str *__THE_0_refB;
  const struct __THE_1_fn_sFP3ref_intFRref_intFE __THE_0_fn1;
  const struct __THE_1_fn_sFP3ref_intFRref_intFE *__THE_0_refFn1;
  const struct __THE_1_fn_sFRintFE __THE_0_fn2;
  const struct __THE_1_fn_sFRintFE *__THE_0_refFn2;
};
struct __THE_1_Test2_0 {
  const struct __THE_1_Test1_0 *__THE_0_test1;
  const struct __THE_1_Test1_0 **__THE_0_refTest1;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
void *xalloc (void *, size_t);
struct __THE_1_fn_sFP3ref_intFRref_intFE __THE_1_fn_sFP3ref_intFRref_intFE_copy (const struct __THE_1_fn_sFP3ref_intFRref_intFE);
void __THE_1_fn_sFP3ref_intFRref_intFE_free (struct __THE_1_fn_sFP3ref_intFRref_intFE);
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_copy (const struct __THE_1_fn_sFRintFE);
void __THE_1_fn_sFRintFE_free (struct __THE_1_fn_sFRintFE);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t, struct str, int32_t *, struct str *, struct __THE_1_fn_sFP3ref_intFRref_intFE, struct __THE_1_fn_sFP3ref_intFRref_intFE *, struct __THE_1_fn_sFRintFE, struct __THE_1_fn_sFRintFE *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *, struct __THE_1_Test1_0 **);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
int32_t *__THE_1_job1_0 (void *, void *);
int32_t __THE_1_job2_0 (void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn_sFP3ref_intFRref_intFE __THE_1_fn_sFP3ref_intFRref_intFE_copy (const struct __THE_1_fn_sFP3ref_intFRref_intFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP3ref_intFRref_intFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP3ref_intFRref_intFE_free (struct __THE_1_fn_sFP3ref_intFRref_intFE n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_copy (const struct __THE_1_fn_sFRintFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFRintFE) {n.f, x, n.l};
}
void __THE_1_fn_sFRintFE_free (struct __THE_1_fn_sFRintFE n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t __THE_0_a, struct str __THE_0_b, int32_t *__THE_0_refA, struct str *__THE_0_refB, struct __THE_1_fn_sFP3ref_intFRref_intFE __THE_0_fn1, struct __THE_1_fn_sFP3ref_intFRref_intFE *__THE_0_refFn1, struct __THE_1_fn_sFRintFE __THE_0_fn2, struct __THE_1_fn_sFRintFE *__THE_0_refFn2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_a, __THE_0_b, __THE_0_refA, __THE_0_refB, __THE_0_fn1, __THE_0_refFn1, __THE_0_fn2, __THE_0_refFn2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_copy (const struct __THE_1_Test1_0 *n) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {n->__THE_0_a, str_copy(n->__THE_0_b), n->__THE_0_refA, n->__THE_0_refB, __THE_1_fn_sFP3ref_intFRref_intFE_copy(n->__THE_0_fn1), n->__THE_0_refFn1, __THE_1_fn_sFRintFE_copy(n->__THE_0_fn2), n->__THE_0_refFn2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  str_free((struct str) n->__THE_0_b);
  __THE_1_fn_sFP3ref_intFRref_intFE_free((struct __THE_1_fn_sFP3ref_intFRref_intFE) n->__THE_0_fn1);
  __THE_1_fn_sFRintFE_free((struct __THE_1_fn_sFRintFE) n->__THE_0_fn2);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *__THE_0_test1, struct __THE_1_Test1_0 **__THE_0_refTest1) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_test1, __THE_0_refTest1};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) n->__THE_0_test1);
  free(n);
}
int32_t *__THE_1_job1_0 (void *px, void *pp) {
  int32_t *v;
  struct __THE_1_fn_sFP3ref_intFRref_intFEP *p = pp;
  const int32_t *__THE_0_a_0 = p->n0;
  v = __THE_0_a_0;
  free(pp);
  return v;
}
int32_t __THE_1_job2_0 (void *px) {
  return 2;
}

int main () {
  const struct __THE_1_fn_sFP3ref_intFRref_intFE __THE_0_job1_0 = (struct __THE_1_fn_sFP3ref_intFRref_intFE) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn_sFRintFE __THE_0_job2_0 = (struct __THE_1_fn_sFRintFE) {&__THE_1_job2_0, NULL, 0};
  int32_t __THE_0_a_0 = 0;
  struct str __THE_0_b_0 = str_alloc("str");
  const int32_t *__THE_0_refA_0 = &__THE_0_a_0;
  const struct str *__THE_0_refB_0 = &__THE_0_b_0;
  const struct __THE_1_fn_sFP3ref_intFRref_intFE *__THE_0_refJob1_0 = &__THE_0_job1_0;
  const struct __THE_1_fn_sFRintFE *__THE_0_refJob2_0 = &__THE_0_job2_0;
  struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_0_a_0, str_copy(__THE_0_b_0), &__THE_0_a_0, &__THE_0_b_0, __THE_1_fn_sFP3ref_intFRref_intFE_copy(__THE_0_job1_0), &__THE_0_job1_0, __THE_1_fn_sFRintFE_copy(__THE_0_job2_0), __THE_0_refJob2_0);
  struct __THE_1_Test1_0 **__THE_0_refTest1_0 = &__THE_0_test1_0;
  struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc(__THE_1_Test1_0_copy(__THE_0_test1_0), &__THE_0_test1_0);
  const struct __THE_1_Test1_0 *__THE_0_test3_0 = __THE_1_Test1_0_alloc(*__THE_0_refA_0, str_copy(*__THE_0_refB_0), __THE_0_refA_0, __THE_0_refB_0, __THE_1_fn_sFP3ref_intFRref_intFE_copy(*__THE_0_refJob1_0), __THE_0_refJob1_0, __THE_1_fn_sFRintFE_copy(*__THE_0_refJob2_0), __THE_0_refJob2_0);
  const struct __THE_1_Test2_0 *__THE_0_test4_0 = __THE_1_Test2_0_alloc(__THE_1_Test1_0_copy(*__THE_0_refTest1_0), __THE_0_refTest1_0);
  __THE_0_test1_0->__THE_0_refA = &__THE_0_test1_0->__THE_0_a;
  __THE_0_test1_0->__THE_0_refB = &__THE_0_test1_0->__THE_0_b;
  __THE_0_a_0 = __THE_0_test1_0->__THE_0_a + *__THE_0_test1_0->__THE_0_refA;
  __THE_0_b_0 = str_realloc(__THE_0_b_0, str_concat_str(str_copy(*__THE_0_test1_0->__THE_0_refB), str_copy(__THE_0_test1_0->__THE_0_b)));
  __THE_0_test1_0->__THE_0_a = __THE_0_a_0 + *__THE_0_test1_0->__THE_0_refA;
  __THE_0_test1_0->__THE_0_b = str_realloc(__THE_0_test1_0->__THE_0_b, str_concat_str(str_copy(__THE_0_test1_0->__THE_0_b), str_concat_str(str_copy(*__THE_0_test1_0->__THE_0_refB), str_copy(__THE_0_b_0))));
  *__THE_0_test1_0->__THE_0_refA = __THE_0_a_0 + *__THE_0_test1_0->__THE_0_refA;
  *__THE_0_test1_0->__THE_0_refB = str_realloc(*__THE_0_test1_0->__THE_0_refB, str_concat_str(str_copy(*__THE_0_test1_0->__THE_0_refB), str_copy(__THE_0_b_0)));
  const int32_t __THE_0_v01_0 = *(*__THE_0_refTest1_0)->__THE_0_fn1.f((*__THE_0_refTest1_0)->__THE_0_fn1.x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + *(*__THE_0_test1_0->__THE_0_refFn1).f((*__THE_0_test1_0->__THE_0_refFn1).x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {__THE_0_refA_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP)));
  const int32_t __THE_0_v02_0 = __THE_0_test1_0->__THE_0_fn2.f(__THE_0_test1_0->__THE_0_fn2.x) + (*(*__THE_0_refTest1_0)->__THE_0_refFn2).f((*(*__THE_0_refTest1_0)->__THE_0_refFn2).x);
  const int32_t __THE_0_v03_0 = *__THE_0_test1_0->__THE_0_fn1.f(__THE_0_test1_0->__THE_0_fn1.x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + (*(*__THE_0_refTest1_0)->__THE_0_refFn2).f((*(*__THE_0_refTest1_0)->__THE_0_refFn2).x);
  const int32_t __THE_0_v04_0 = __THE_0_test1_0->__THE_0_fn2.f(__THE_0_test1_0->__THE_0_fn2.x) + *(*(*__THE_0_refTest1_0)->__THE_0_refFn1).f((*(*__THE_0_refTest1_0)->__THE_0_refFn1).x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {__THE_0_refA_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP)));
  const int32_t __THE_0_v05_0 = *__THE_0_test1_0->__THE_0_fn1.f(__THE_0_test1_0->__THE_0_fn1.x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + __THE_0_test1_0->__THE_0_fn2.f(__THE_0_test1_0->__THE_0_fn2.x);
  const int32_t __THE_0_v06_0 = *(*(*__THE_0_refTest1_0)->__THE_0_refFn1).f((*(*__THE_0_refTest1_0)->__THE_0_refFn1).x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {__THE_0_refA_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + (*(*__THE_0_refTest1_0)->__THE_0_refFn2).f((*(*__THE_0_refTest1_0)->__THE_0_refFn2).x);
  const int32_t __THE_0_v21_0 = *(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_fn1.f((*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_fn1.x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + *(*__THE_0_test2_0->__THE_0_test1->__THE_0_refFn1).f((*__THE_0_test2_0->__THE_0_test1->__THE_0_refFn1).x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {__THE_0_refA_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP)));
  const int32_t __THE_0_v22_0 = __THE_0_test2_0->__THE_0_test1->__THE_0_fn2.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn2.x) + (*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).x);
  const int32_t __THE_0_v23_0 = *__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + (*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).x);
  const int32_t __THE_0_v24_0 = __THE_0_test2_0->__THE_0_test1->__THE_0_fn2.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn2.x) + *(*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {__THE_0_refA_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP)));
  const int32_t __THE_0_v25_0 = *__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn1.x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {&__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + __THE_0_test2_0->__THE_0_test1->__THE_0_fn2.f(__THE_0_test2_0->__THE_0_test1->__THE_0_fn2.x);
  const int32_t __THE_0_v26_0 = *(*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn1).x, xalloc(&(struct __THE_1_fn_sFP3ref_intFRref_intFEP) {__THE_0_refA_0}, sizeof(struct __THE_1_fn_sFP3ref_intFRref_intFEP))) + (*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).f((*(*__THE_0_test2_0->__THE_0_refTest1)->__THE_0_refFn2).x);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test4_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test3_0);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
  str_free((struct str) __THE_0_b_0);
}
======= flags =======
======= stdout =======
