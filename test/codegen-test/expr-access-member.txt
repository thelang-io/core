======= stdin =======
enum Color {
  Red,
  Green,
  Blue
}

fn testCall (t: Color) {}

main {
  mut test1: Color = .Red
  test1 = .Green
  testCall(.Green)
}
======= code =======
#include <stdlib.h>

enum __THE_1_Color_0 {
  __THE_0_ColorSDRed_0,
  __THE_0_ColorSDGreen_0,
  __THE_0_ColorSDBlue_0
};

struct __THE_1_fn$0P;
struct __THE_1_fn$0;

struct __THE_1_fn$0P {
  enum __THE_1_Color_0 n0;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};

void __THE_1_testCall_0 (void *, struct __THE_1_fn$0P);

void __THE_1_testCall_0 (void *px, struct __THE_1_fn$0P p) {
  const enum __THE_1_Color_0 __THE_0_t_0 = p.n0;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testCall_0 = (struct __THE_1_fn$0) {&__THE_1_testCall_0, NULL, 0};
  enum __THE_1_Color_0 __THE_0_test1_0 = __THE_0_ColorSDRed_0;
  __THE_0_test1_0 = __THE_0_ColorSDGreen_0;
  __THE_0_testCall_0.f(__THE_0_testCall_0.x, (struct __THE_1_fn$0P) {__THE_0_ColorSDGreen_0});
}
======= flags =======
======= stdout =======
