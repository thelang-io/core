======= stdin =======
main {
  mut a := 0

  loop (a < 10) {
    a++
  }

  mut b := 0
  loop (;;) {
    b++
    if b == 10 {
      break
    }
  }

  loop (c := 0;;) {
    c++
    if c == 10 {
      break
    }
  }

  mut d := 0
  loop (; d < 10;) {
    d++
  }

  mut e := 0
  loop (;; e++) {
    if e == 10 {
      break
    }
  }

  loop (f := 0; f < 10;) {
    f++
  }

  loop (g := 0;; g++) {
    if g < 10 {
      break
    }
  }

  mut h := 0
  loop (; h < 10; h++) {
    if h < 10 {
      break
    }
  }

  loop (i := 0; i < 10; i++) {
    print(i)
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

void print (FILE *, const char *, ...);
void str_free (struct str);

void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  int32_t __THE_0_a_0 = 0;
  while (__THE_0_a_0 < 10) {
    __THE_0_a_0++;
  }
  int32_t __THE_0_b_0 = 0;
  while (1) {
    __THE_0_b_0++;
    if (__THE_0_b_0 == 10) {
      break;
    }
  }
  for (int32_t __THE_0_c_0 = 0;;) {
    __THE_0_c_0++;
    if (__THE_0_c_0 == 10) {
      break;
    }
  }
  int32_t __THE_0_d_0 = 0;
  while (__THE_0_d_0 < 10) {
    __THE_0_d_0++;
  }
  int32_t __THE_0_e_0 = 0;
  for (;; __THE_0_e_0++) {
    if (__THE_0_e_0 == 10) {
      break;
    }
  }
  for (int32_t __THE_0_f_0 = 0; __THE_0_f_0 < 10;) {
    __THE_0_f_0++;
  }
  for (int32_t __THE_0_g_0 = 0;; __THE_0_g_0++) {
    if (__THE_0_g_0 < 10) {
      break;
    }
  }
  int32_t __THE_0_h_0 = 0;
  for (; __THE_0_h_0 < 10; __THE_0_h_0++) {
    if (__THE_0_h_0 < 10) {
      break;
    }
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", __THE_0_i_0, THE_EOL);
  }
}
======= flags =======
======= stdout =======
0
1
2
3
4
5
6
7
8
9
