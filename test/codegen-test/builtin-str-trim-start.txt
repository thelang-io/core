======= stdin =======
main {
  print("".trimStart())
  print("\n".trimStart())
  print("\n\r".trimStart())
  print("\n\r\t".trimStart())
  print("test in test".trimStart())
  print("test in test ".trimStart())
  print(" test in test".trimStart())
  print(" test in test ".trimStart())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <ctype.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
void str_free (struct str);
struct str str_trimStart (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_trimStart (struct str s) {
  if (s.l == 0) return s;
  size_t i = 0;
  while (i < s.l && isspace(s.d[i])) i++;
  if (i >= s.l) {
    free(s.d);
    s = (struct str) {NULL, 0};
  } else {
    memmove(s.d, &s.d[i], s.l - i);
    s.l -= i;
    s.d = re_alloc(s.d, s.l);
  }
  return s;
}

int main () {
  print(stdout, "sz", str_trimStart(str_alloc("")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc("\n")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc("\n\r")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc("\n\r\t")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc("test in test")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc("test in test ")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc(" test in test")), THE_EOL);
  print(stdout, "sz", str_trimStart(str_alloc(" test in test ")), THE_EOL);
}
======= flags =======
======= stdout =======




test in test
test in test{{ [ ] }}
test in test
test in test{{ [ ] }}
