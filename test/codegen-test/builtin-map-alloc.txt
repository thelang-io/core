======= stdin =======
main {
  map1Bool: int[bool]
  map1Byte: int[byte]
  map1Char: int[char]
  map1F32: int[f32]
  map1F64: int[f64]
  map1Float: int[float]
  map1I8: int[i8]
  map1I16: int[i16]
  map1I32: int[i32]
  map1I64: int[i64]
  map1Int: int[int]
  map1Str: int[str]
  map1U8: int[u8]
  map1U16: int[u16]
  map1U32: int[u32]
  map1U64: int[u64]

  mut map2Bool: int[bool] = {}
  map2Bool.set(true, 1)
  mut map2Byte: int[byte] = {}
  map2Byte.set(1, 1)
  mut map2Char: int[char] = {}
  map2Char.set('a', 1)
  mut map2F32: int[f32] = {}
  map2F32.set(3.14, 1)
  mut map2F64: int[f64] = {}
  map2F64.set(3.14, 1)
  mut map2Float: int[float] = {}
  map2Float.set(3.14, 1)
  mut map2I8: int[i8] = {}
  map2I8.set(1, 1)
  mut map2I16: int[i16] = {}
  map2I16.set(1, 1)
  mut map2I32: int[i32] = {}
  map2I32.set(1, 1)
  mut map2I64: int[i64] = {}
  map2I64.set(1, 1)
  mut map2Int: int[int] = {}
  map2Int.set(1, 1)
  mut map2Str: int[str] = {}
  map2Str.set("test", 1)
  mut map2U8: int[u8] = {}
  map2U8.set(1, 1)
  mut map2U16: int[u16] = {}
  map2U16.set(1, 1)
  mut map2U32: int[u32] = {}
  map2U32.set(1, 1)
  mut map2U64: int[u64] = {}
  map2U64.set(1, 1)

  map3Bool: int[bool] = map2Bool
  map3Byte: int[byte] = map2Byte
  map3Char: int[char] = map2Char
  map3F32: int[f32] = map2F32
  map3F64: int[f64] = map2F64
  map3Float: int[float] = map2Float
  map3I8: int[i8] = map2I8
  map3I16: int[i16] = map2I16
  map3I32: int[i32] = map2I32
  map3I64: int[i64] = map2I64
  map3Int: int[int] = map2Int
  map3Str: int[str] = map2Str
  map3U8: int[u8] = map2U8
  map3U16: int[u16] = map2U16
  map3U32: int[u32] = map2U32
  map3U64: int[u64] = map2U64
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_pair_boolMSintME;
struct __THE_1_map_boolMSintME;
struct __THE_1_pair_byteMSintME;
struct __THE_1_map_byteMSintME;
struct __THE_1_pair_charMSintME;
struct __THE_1_map_charMSintME;
struct __THE_1_pair_f32MSintME;
struct __THE_1_map_f32MSintME;
struct __THE_1_pair_f64MSintME;
struct __THE_1_map_f64MSintME;
struct __THE_1_pair_floatMSintME;
struct __THE_1_map_floatMSintME;
struct __THE_1_pair_i8MSintME;
struct __THE_1_map_i8MSintME;
struct __THE_1_pair_i16MSintME;
struct __THE_1_map_i16MSintME;
struct __THE_1_pair_i32MSintME;
struct __THE_1_map_i32MSintME;
struct __THE_1_pair_i64MSintME;
struct __THE_1_map_i64MSintME;
struct __THE_1_pair_intMSintME;
struct __THE_1_map_intMSintME;
struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_pair_u8MSintME;
struct __THE_1_map_u8MSintME;
struct __THE_1_pair_u16MSintME;
struct __THE_1_map_u16MSintME;
struct __THE_1_pair_u32MSintME;
struct __THE_1_map_u32MSintME;
struct __THE_1_pair_u64MSintME;
struct __THE_1_map_u64MSintME;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_pair_boolMSintME {
  bool f;
  int32_t s;
};
struct __THE_1_map_boolMSintME {
  struct __THE_1_pair_boolMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_byteMSintME {
  unsigned char f;
  int32_t s;
};
struct __THE_1_map_byteMSintME {
  struct __THE_1_pair_byteMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_charMSintME {
  char f;
  int32_t s;
};
struct __THE_1_map_charMSintME {
  struct __THE_1_pair_charMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_f32MSintME {
  float f;
  int32_t s;
};
struct __THE_1_map_f32MSintME {
  struct __THE_1_pair_f32MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_f64MSintME {
  double f;
  int32_t s;
};
struct __THE_1_map_f64MSintME {
  struct __THE_1_pair_f64MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_floatMSintME {
  double f;
  int32_t s;
};
struct __THE_1_map_floatMSintME {
  struct __THE_1_pair_floatMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_i8MSintME {
  int8_t f;
  int32_t s;
};
struct __THE_1_map_i8MSintME {
  struct __THE_1_pair_i8MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_i16MSintME {
  int16_t f;
  int32_t s;
};
struct __THE_1_map_i16MSintME {
  struct __THE_1_pair_i16MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_i32MSintME {
  int32_t f;
  int32_t s;
};
struct __THE_1_map_i32MSintME {
  struct __THE_1_pair_i32MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_i64MSintME {
  int64_t f;
  int32_t s;
};
struct __THE_1_map_i64MSintME {
  struct __THE_1_pair_i64MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_intMSintME {
  int32_t f;
  int32_t s;
};
struct __THE_1_map_intMSintME {
  struct __THE_1_pair_intMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_u8MSintME {
  uint8_t f;
  int32_t s;
};
struct __THE_1_map_u8MSintME {
  struct __THE_1_pair_u8MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_u16MSintME {
  uint16_t f;
  int32_t s;
};
struct __THE_1_map_u16MSintME {
  struct __THE_1_pair_u16MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_u32MSintME {
  uint32_t f;
  int32_t s;
};
struct __THE_1_map_u32MSintME {
  struct __THE_1_pair_u32MSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_u64MSintME {
  uint64_t f;
  int32_t s;
};
struct __THE_1_map_u64MSintME {
  struct __THE_1_pair_u64MSintME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_map_boolMSintME __THE_1_map_boolMSintME_alloc (int, ...);
struct __THE_1_map_boolMSintME __THE_1_map_boolMSintME_copy (const struct __THE_1_map_boolMSintME);
void __THE_1_map_boolMSintME_free (struct __THE_1_map_boolMSintME);
struct __THE_1_map_boolMSintME *__THE_1_map_boolMSintME_set (struct __THE_1_map_boolMSintME *, bool, int32_t);
struct __THE_1_map_byteMSintME __THE_1_map_byteMSintME_alloc (int, ...);
struct __THE_1_map_byteMSintME __THE_1_map_byteMSintME_copy (const struct __THE_1_map_byteMSintME);
void __THE_1_map_byteMSintME_free (struct __THE_1_map_byteMSintME);
struct __THE_1_map_byteMSintME *__THE_1_map_byteMSintME_set (struct __THE_1_map_byteMSintME *, unsigned char, int32_t);
struct __THE_1_map_charMSintME __THE_1_map_charMSintME_alloc (int, ...);
struct __THE_1_map_charMSintME __THE_1_map_charMSintME_copy (const struct __THE_1_map_charMSintME);
void __THE_1_map_charMSintME_free (struct __THE_1_map_charMSintME);
struct __THE_1_map_charMSintME *__THE_1_map_charMSintME_set (struct __THE_1_map_charMSintME *, char, int32_t);
struct __THE_1_map_f32MSintME __THE_1_map_f32MSintME_alloc (int, ...);
struct __THE_1_map_f32MSintME __THE_1_map_f32MSintME_copy (const struct __THE_1_map_f32MSintME);
void __THE_1_map_f32MSintME_free (struct __THE_1_map_f32MSintME);
struct __THE_1_map_f32MSintME *__THE_1_map_f32MSintME_set (struct __THE_1_map_f32MSintME *, float, int32_t);
struct __THE_1_map_f64MSintME __THE_1_map_f64MSintME_alloc (int, ...);
struct __THE_1_map_f64MSintME __THE_1_map_f64MSintME_copy (const struct __THE_1_map_f64MSintME);
void __THE_1_map_f64MSintME_free (struct __THE_1_map_f64MSintME);
struct __THE_1_map_f64MSintME *__THE_1_map_f64MSintME_set (struct __THE_1_map_f64MSintME *, double, int32_t);
struct __THE_1_map_floatMSintME __THE_1_map_floatMSintME_alloc (int, ...);
struct __THE_1_map_floatMSintME __THE_1_map_floatMSintME_copy (const struct __THE_1_map_floatMSintME);
void __THE_1_map_floatMSintME_free (struct __THE_1_map_floatMSintME);
struct __THE_1_map_floatMSintME *__THE_1_map_floatMSintME_set (struct __THE_1_map_floatMSintME *, double, int32_t);
struct __THE_1_map_i8MSintME __THE_1_map_i8MSintME_alloc (int, ...);
struct __THE_1_map_i8MSintME __THE_1_map_i8MSintME_copy (const struct __THE_1_map_i8MSintME);
void __THE_1_map_i8MSintME_free (struct __THE_1_map_i8MSintME);
struct __THE_1_map_i8MSintME *__THE_1_map_i8MSintME_set (struct __THE_1_map_i8MSintME *, int8_t, int32_t);
struct __THE_1_map_i16MSintME __THE_1_map_i16MSintME_alloc (int, ...);
struct __THE_1_map_i16MSintME __THE_1_map_i16MSintME_copy (const struct __THE_1_map_i16MSintME);
void __THE_1_map_i16MSintME_free (struct __THE_1_map_i16MSintME);
struct __THE_1_map_i16MSintME *__THE_1_map_i16MSintME_set (struct __THE_1_map_i16MSintME *, int16_t, int32_t);
struct __THE_1_map_i32MSintME __THE_1_map_i32MSintME_alloc (int, ...);
struct __THE_1_map_i32MSintME __THE_1_map_i32MSintME_copy (const struct __THE_1_map_i32MSintME);
void __THE_1_map_i32MSintME_free (struct __THE_1_map_i32MSintME);
struct __THE_1_map_i32MSintME *__THE_1_map_i32MSintME_set (struct __THE_1_map_i32MSintME *, int32_t, int32_t);
struct __THE_1_map_i64MSintME __THE_1_map_i64MSintME_alloc (int, ...);
struct __THE_1_map_i64MSintME __THE_1_map_i64MSintME_copy (const struct __THE_1_map_i64MSintME);
void __THE_1_map_i64MSintME_free (struct __THE_1_map_i64MSintME);
struct __THE_1_map_i64MSintME *__THE_1_map_i64MSintME_set (struct __THE_1_map_i64MSintME *, int64_t, int32_t);
struct __THE_1_map_intMSintME __THE_1_map_intMSintME_alloc (int, ...);
struct __THE_1_map_intMSintME __THE_1_map_intMSintME_copy (const struct __THE_1_map_intMSintME);
void __THE_1_map_intMSintME_free (struct __THE_1_map_intMSintME);
struct __THE_1_map_intMSintME *__THE_1_map_intMSintME_set (struct __THE_1_map_intMSintME *, int32_t, int32_t);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_set (struct __THE_1_map_strMSintME *, struct str, int32_t);
struct __THE_1_map_u8MSintME __THE_1_map_u8MSintME_alloc (int, ...);
struct __THE_1_map_u8MSintME __THE_1_map_u8MSintME_copy (const struct __THE_1_map_u8MSintME);
void __THE_1_map_u8MSintME_free (struct __THE_1_map_u8MSintME);
struct __THE_1_map_u8MSintME *__THE_1_map_u8MSintME_set (struct __THE_1_map_u8MSintME *, uint8_t, int32_t);
struct __THE_1_map_u16MSintME __THE_1_map_u16MSintME_alloc (int, ...);
struct __THE_1_map_u16MSintME __THE_1_map_u16MSintME_copy (const struct __THE_1_map_u16MSintME);
void __THE_1_map_u16MSintME_free (struct __THE_1_map_u16MSintME);
struct __THE_1_map_u16MSintME *__THE_1_map_u16MSintME_set (struct __THE_1_map_u16MSintME *, uint16_t, int32_t);
struct __THE_1_map_u32MSintME __THE_1_map_u32MSintME_alloc (int, ...);
struct __THE_1_map_u32MSintME __THE_1_map_u32MSintME_copy (const struct __THE_1_map_u32MSintME);
void __THE_1_map_u32MSintME_free (struct __THE_1_map_u32MSintME);
struct __THE_1_map_u32MSintME *__THE_1_map_u32MSintME_set (struct __THE_1_map_u32MSintME *, uint32_t, int32_t);
struct __THE_1_map_u64MSintME __THE_1_map_u64MSintME_alloc (int, ...);
struct __THE_1_map_u64MSintME __THE_1_map_u64MSintME_copy (const struct __THE_1_map_u64MSintME);
void __THE_1_map_u64MSintME_free (struct __THE_1_map_u64MSintME);
struct __THE_1_map_u64MSintME *__THE_1_map_u64MSintME_set (struct __THE_1_map_u64MSintME *, uint64_t, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_map_boolMSintME __THE_1_map_boolMSintME_alloc (int x, ...) {
  struct __THE_1_pair_boolMSintME *d = alloc(x * sizeof(struct __THE_1_pair_boolMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_boolMSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_boolMSintME) {d, x, x};
}
struct __THE_1_map_boolMSintME __THE_1_map_boolMSintME_copy (const struct __THE_1_map_boolMSintME n) {
  struct __THE_1_pair_boolMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_boolMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_boolMSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_boolMSintME) {d, n.c, n.l};
}
void __THE_1_map_boolMSintME_free (struct __THE_1_map_boolMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_boolMSintME *__THE_1_map_boolMSintME_set (struct __THE_1_map_boolMSintME *n, bool k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_boolMSintME));
  n->d[n->l++] = (struct __THE_1_pair_boolMSintME) {k, v};
  return n;
}
struct __THE_1_map_byteMSintME __THE_1_map_byteMSintME_alloc (int x, ...) {
  struct __THE_1_pair_byteMSintME *d = alloc(x * sizeof(struct __THE_1_pair_byteMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_byteMSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_byteMSintME) {d, x, x};
}
struct __THE_1_map_byteMSintME __THE_1_map_byteMSintME_copy (const struct __THE_1_map_byteMSintME n) {
  struct __THE_1_pair_byteMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_byteMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_byteMSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_byteMSintME) {d, n.c, n.l};
}
void __THE_1_map_byteMSintME_free (struct __THE_1_map_byteMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_byteMSintME *__THE_1_map_byteMSintME_set (struct __THE_1_map_byteMSintME *n, unsigned char k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_byteMSintME));
  n->d[n->l++] = (struct __THE_1_pair_byteMSintME) {k, v};
  return n;
}
struct __THE_1_map_charMSintME __THE_1_map_charMSintME_alloc (int x, ...) {
  struct __THE_1_pair_charMSintME *d = alloc(x * sizeof(struct __THE_1_pair_charMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_charMSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_charMSintME) {d, x, x};
}
struct __THE_1_map_charMSintME __THE_1_map_charMSintME_copy (const struct __THE_1_map_charMSintME n) {
  struct __THE_1_pair_charMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_charMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_charMSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_charMSintME) {d, n.c, n.l};
}
void __THE_1_map_charMSintME_free (struct __THE_1_map_charMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_charMSintME *__THE_1_map_charMSintME_set (struct __THE_1_map_charMSintME *n, char k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_charMSintME));
  n->d[n->l++] = (struct __THE_1_pair_charMSintME) {k, v};
  return n;
}
struct __THE_1_map_f32MSintME __THE_1_map_f32MSintME_alloc (int x, ...) {
  struct __THE_1_pair_f32MSintME *d = alloc(x * sizeof(struct __THE_1_pair_f32MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_f32MSintME) {va_arg(args, double), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_f32MSintME) {d, x, x};
}
struct __THE_1_map_f32MSintME __THE_1_map_f32MSintME_copy (const struct __THE_1_map_f32MSintME n) {
  struct __THE_1_pair_f32MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_f32MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_f32MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_f32MSintME) {d, n.c, n.l};
}
void __THE_1_map_f32MSintME_free (struct __THE_1_map_f32MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_f32MSintME *__THE_1_map_f32MSintME_set (struct __THE_1_map_f32MSintME *n, float k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_f32MSintME));
  n->d[n->l++] = (struct __THE_1_pair_f32MSintME) {k, v};
  return n;
}
struct __THE_1_map_f64MSintME __THE_1_map_f64MSintME_alloc (int x, ...) {
  struct __THE_1_pair_f64MSintME *d = alloc(x * sizeof(struct __THE_1_pair_f64MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_f64MSintME) {va_arg(args, double), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_f64MSintME) {d, x, x};
}
struct __THE_1_map_f64MSintME __THE_1_map_f64MSintME_copy (const struct __THE_1_map_f64MSintME n) {
  struct __THE_1_pair_f64MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_f64MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_f64MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_f64MSintME) {d, n.c, n.l};
}
void __THE_1_map_f64MSintME_free (struct __THE_1_map_f64MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_f64MSintME *__THE_1_map_f64MSintME_set (struct __THE_1_map_f64MSintME *n, double k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_f64MSintME));
  n->d[n->l++] = (struct __THE_1_pair_f64MSintME) {k, v};
  return n;
}
struct __THE_1_map_floatMSintME __THE_1_map_floatMSintME_alloc (int x, ...) {
  struct __THE_1_pair_floatMSintME *d = alloc(x * sizeof(struct __THE_1_pair_floatMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_floatMSintME) {va_arg(args, double), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_floatMSintME) {d, x, x};
}
struct __THE_1_map_floatMSintME __THE_1_map_floatMSintME_copy (const struct __THE_1_map_floatMSintME n) {
  struct __THE_1_pair_floatMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_floatMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_floatMSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_floatMSintME) {d, n.c, n.l};
}
void __THE_1_map_floatMSintME_free (struct __THE_1_map_floatMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_floatMSintME *__THE_1_map_floatMSintME_set (struct __THE_1_map_floatMSintME *n, double k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_floatMSintME));
  n->d[n->l++] = (struct __THE_1_pair_floatMSintME) {k, v};
  return n;
}
struct __THE_1_map_i8MSintME __THE_1_map_i8MSintME_alloc (int x, ...) {
  struct __THE_1_pair_i8MSintME *d = alloc(x * sizeof(struct __THE_1_pair_i8MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_i8MSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_i8MSintME) {d, x, x};
}
struct __THE_1_map_i8MSintME __THE_1_map_i8MSintME_copy (const struct __THE_1_map_i8MSintME n) {
  struct __THE_1_pair_i8MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_i8MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_i8MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_i8MSintME) {d, n.c, n.l};
}
void __THE_1_map_i8MSintME_free (struct __THE_1_map_i8MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_i8MSintME *__THE_1_map_i8MSintME_set (struct __THE_1_map_i8MSintME *n, int8_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_i8MSintME));
  n->d[n->l++] = (struct __THE_1_pair_i8MSintME) {k, v};
  return n;
}
struct __THE_1_map_i16MSintME __THE_1_map_i16MSintME_alloc (int x, ...) {
  struct __THE_1_pair_i16MSintME *d = alloc(x * sizeof(struct __THE_1_pair_i16MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_i16MSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_i16MSintME) {d, x, x};
}
struct __THE_1_map_i16MSintME __THE_1_map_i16MSintME_copy (const struct __THE_1_map_i16MSintME n) {
  struct __THE_1_pair_i16MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_i16MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_i16MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_i16MSintME) {d, n.c, n.l};
}
void __THE_1_map_i16MSintME_free (struct __THE_1_map_i16MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_i16MSintME *__THE_1_map_i16MSintME_set (struct __THE_1_map_i16MSintME *n, int16_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_i16MSintME));
  n->d[n->l++] = (struct __THE_1_pair_i16MSintME) {k, v};
  return n;
}
struct __THE_1_map_i32MSintME __THE_1_map_i32MSintME_alloc (int x, ...) {
  struct __THE_1_pair_i32MSintME *d = alloc(x * sizeof(struct __THE_1_pair_i32MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_i32MSintME) {va_arg(args, int32_t), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_i32MSintME) {d, x, x};
}
struct __THE_1_map_i32MSintME __THE_1_map_i32MSintME_copy (const struct __THE_1_map_i32MSintME n) {
  struct __THE_1_pair_i32MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_i32MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_i32MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_i32MSintME) {d, n.c, n.l};
}
void __THE_1_map_i32MSintME_free (struct __THE_1_map_i32MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_i32MSintME *__THE_1_map_i32MSintME_set (struct __THE_1_map_i32MSintME *n, int32_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_i32MSintME));
  n->d[n->l++] = (struct __THE_1_pair_i32MSintME) {k, v};
  return n;
}
struct __THE_1_map_i64MSintME __THE_1_map_i64MSintME_alloc (int x, ...) {
  struct __THE_1_pair_i64MSintME *d = alloc(x * sizeof(struct __THE_1_pair_i64MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_i64MSintME) {va_arg(args, int64_t), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_i64MSintME) {d, x, x};
}
struct __THE_1_map_i64MSintME __THE_1_map_i64MSintME_copy (const struct __THE_1_map_i64MSintME n) {
  struct __THE_1_pair_i64MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_i64MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_i64MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_i64MSintME) {d, n.c, n.l};
}
void __THE_1_map_i64MSintME_free (struct __THE_1_map_i64MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_i64MSintME *__THE_1_map_i64MSintME_set (struct __THE_1_map_i64MSintME *n, int64_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_i64MSintME));
  n->d[n->l++] = (struct __THE_1_pair_i64MSintME) {k, v};
  return n;
}
struct __THE_1_map_intMSintME __THE_1_map_intMSintME_alloc (int x, ...) {
  struct __THE_1_pair_intMSintME *d = alloc(x * sizeof(struct __THE_1_pair_intMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_intMSintME) {va_arg(args, int32_t), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_intMSintME) {d, x, x};
}
struct __THE_1_map_intMSintME __THE_1_map_intMSintME_copy (const struct __THE_1_map_intMSintME n) {
  struct __THE_1_pair_intMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_intMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_intMSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_intMSintME) {d, n.c, n.l};
}
void __THE_1_map_intMSintME_free (struct __THE_1_map_intMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_intMSintME *__THE_1_map_intMSintME_set (struct __THE_1_map_intMSintME *n, int32_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_intMSintME));
  n->d[n->l++] = (struct __THE_1_pair_intMSintME) {k, v};
  return n;
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_set (struct __THE_1_map_strMSintME *n, struct str k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (str_eq_str(str_copy(n->d[i].f), str_copy(k))) {
      str_free((struct str) k);
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_strMSintME));
  n->d[n->l++] = (struct __THE_1_pair_strMSintME) {k, v};
  return n;
}
struct __THE_1_map_u8MSintME __THE_1_map_u8MSintME_alloc (int x, ...) {
  struct __THE_1_pair_u8MSintME *d = alloc(x * sizeof(struct __THE_1_pair_u8MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_u8MSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_u8MSintME) {d, x, x};
}
struct __THE_1_map_u8MSintME __THE_1_map_u8MSintME_copy (const struct __THE_1_map_u8MSintME n) {
  struct __THE_1_pair_u8MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_u8MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_u8MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_u8MSintME) {d, n.c, n.l};
}
void __THE_1_map_u8MSintME_free (struct __THE_1_map_u8MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_u8MSintME *__THE_1_map_u8MSintME_set (struct __THE_1_map_u8MSintME *n, uint8_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_u8MSintME));
  n->d[n->l++] = (struct __THE_1_pair_u8MSintME) {k, v};
  return n;
}
struct __THE_1_map_u16MSintME __THE_1_map_u16MSintME_alloc (int x, ...) {
  struct __THE_1_pair_u16MSintME *d = alloc(x * sizeof(struct __THE_1_pair_u16MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_u16MSintME) {va_arg(args, int), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_u16MSintME) {d, x, x};
}
struct __THE_1_map_u16MSintME __THE_1_map_u16MSintME_copy (const struct __THE_1_map_u16MSintME n) {
  struct __THE_1_pair_u16MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_u16MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_u16MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_u16MSintME) {d, n.c, n.l};
}
void __THE_1_map_u16MSintME_free (struct __THE_1_map_u16MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_u16MSintME *__THE_1_map_u16MSintME_set (struct __THE_1_map_u16MSintME *n, uint16_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_u16MSintME));
  n->d[n->l++] = (struct __THE_1_pair_u16MSintME) {k, v};
  return n;
}
struct __THE_1_map_u32MSintME __THE_1_map_u32MSintME_alloc (int x, ...) {
  struct __THE_1_pair_u32MSintME *d = alloc(x * sizeof(struct __THE_1_pair_u32MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_u32MSintME) {va_arg(args, uint32_t), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_u32MSintME) {d, x, x};
}
struct __THE_1_map_u32MSintME __THE_1_map_u32MSintME_copy (const struct __THE_1_map_u32MSintME n) {
  struct __THE_1_pair_u32MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_u32MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_u32MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_u32MSintME) {d, n.c, n.l};
}
void __THE_1_map_u32MSintME_free (struct __THE_1_map_u32MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_u32MSintME *__THE_1_map_u32MSintME_set (struct __THE_1_map_u32MSintME *n, uint32_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_u32MSintME));
  n->d[n->l++] = (struct __THE_1_pair_u32MSintME) {k, v};
  return n;
}
struct __THE_1_map_u64MSintME __THE_1_map_u64MSintME_alloc (int x, ...) {
  struct __THE_1_pair_u64MSintME *d = alloc(x * sizeof(struct __THE_1_pair_u64MSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_u64MSintME) {va_arg(args, uint64_t), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_u64MSintME) {d, x, x};
}
struct __THE_1_map_u64MSintME __THE_1_map_u64MSintME_copy (const struct __THE_1_map_u64MSintME n) {
  struct __THE_1_pair_u64MSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_u64MSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_u64MSintME) {n.d[i].f, n.d[i].s};
  return (struct __THE_1_map_u64MSintME) {d, n.c, n.l};
}
void __THE_1_map_u64MSintME_free (struct __THE_1_map_u64MSintME n) {
  for (size_t i = 0; i < n.l; i++) {
  }
  free(n.d);
}
struct __THE_1_map_u64MSintME *__THE_1_map_u64MSintME_set (struct __THE_1_map_u64MSintME *n, uint64_t k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (n->d[i].f == k) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_u64MSintME));
  n->d[n->l++] = (struct __THE_1_pair_u64MSintME) {k, v};
  return n;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct __THE_1_map_boolMSintME __THE_0_map1Bool_0 = __THE_1_map_boolMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  const struct __THE_1_map_byteMSintME __THE_0_map1Byte_0 = __THE_1_map_byteMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  const struct __THE_1_map_charMSintME __THE_0_map1Char_0 = __THE_1_map_charMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  const struct __THE_1_map_f32MSintME __THE_0_map1F32_0 = __THE_1_map_f32MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L5;
  const struct __THE_1_map_f64MSintME __THE_0_map1F64_0 = __THE_1_map_f64MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L6;
  const struct __THE_1_map_floatMSintME __THE_0_map1Float_0 = __THE_1_map_floatMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  const struct __THE_1_map_i8MSintME __THE_0_map1I8_0 = __THE_1_map_i8MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L8;
  const struct __THE_1_map_i16MSintME __THE_0_map1I16_0 = __THE_1_map_i16MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L9;
  const struct __THE_1_map_i32MSintME __THE_0_map1I32_0 = __THE_1_map_i32MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L10;
  const struct __THE_1_map_i64MSintME __THE_0_map1I64_0 = __THE_1_map_i64MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L11;
  const struct __THE_1_map_intMSintME __THE_0_map1Int_0 = __THE_1_map_intMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L12;
  const struct __THE_1_map_strMSintME __THE_0_map1Str_0 = __THE_1_map_strMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L13;
  const struct __THE_1_map_u8MSintME __THE_0_map1U8_0 = __THE_1_map_u8MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L14;
  const struct __THE_1_map_u16MSintME __THE_0_map1U16_0 = __THE_1_map_u16MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L15;
  const struct __THE_1_map_u32MSintME __THE_0_map1U32_0 = __THE_1_map_u32MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L16;
  const struct __THE_1_map_u64MSintME __THE_0_map1U64_0 = __THE_1_map_u64MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L17;
  struct __THE_1_map_boolMSintME __THE_0_map2Bool_0 = __THE_1_map_boolMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L18;
  (error_stack_pos(&err_state, 20, 3), __THE_1_map_boolMSintME_set(&__THE_0_map2Bool_0, true, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L18;
  struct __THE_1_map_byteMSintME __THE_0_map2Byte_0 = __THE_1_map_byteMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L19;
  (error_stack_pos(&err_state, 22, 3), __THE_1_map_byteMSintME_set(&__THE_0_map2Byte_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L19;
  struct __THE_1_map_charMSintME __THE_0_map2Char_0 = __THE_1_map_charMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L20;
  (error_stack_pos(&err_state, 24, 3), __THE_1_map_charMSintME_set(&__THE_0_map2Char_0, 'a', 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L20;
  struct __THE_1_map_f32MSintME __THE_0_map2F32_0 = __THE_1_map_f32MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L21;
  (error_stack_pos(&err_state, 26, 3), __THE_1_map_f32MSintME_set(&__THE_0_map2F32_0, 3.14, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L21;
  struct __THE_1_map_f64MSintME __THE_0_map2F64_0 = __THE_1_map_f64MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L22;
  (error_stack_pos(&err_state, 28, 3), __THE_1_map_f64MSintME_set(&__THE_0_map2F64_0, 3.14, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L22;
  struct __THE_1_map_floatMSintME __THE_0_map2Float_0 = __THE_1_map_floatMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L23;
  (error_stack_pos(&err_state, 30, 3), __THE_1_map_floatMSintME_set(&__THE_0_map2Float_0, 3.14, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L23;
  struct __THE_1_map_i8MSintME __THE_0_map2I8_0 = __THE_1_map_i8MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  (error_stack_pos(&err_state, 32, 3), __THE_1_map_i8MSintME_set(&__THE_0_map2I8_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L24;
  struct __THE_1_map_i16MSintME __THE_0_map2I16_0 = __THE_1_map_i16MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L25;
  (error_stack_pos(&err_state, 34, 3), __THE_1_map_i16MSintME_set(&__THE_0_map2I16_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L25;
  struct __THE_1_map_i32MSintME __THE_0_map2I32_0 = __THE_1_map_i32MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L26;
  (error_stack_pos(&err_state, 36, 3), __THE_1_map_i32MSintME_set(&__THE_0_map2I32_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L26;
  struct __THE_1_map_i64MSintME __THE_0_map2I64_0 = __THE_1_map_i64MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L27;
  (error_stack_pos(&err_state, 38, 3), __THE_1_map_i64MSintME_set(&__THE_0_map2I64_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L27;
  struct __THE_1_map_intMSintME __THE_0_map2Int_0 = __THE_1_map_intMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L28;
  (error_stack_pos(&err_state, 40, 3), __THE_1_map_intMSintME_set(&__THE_0_map2Int_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L28;
  struct __THE_1_map_strMSintME __THE_0_map2Str_0 = __THE_1_map_strMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L29;
  (error_stack_pos(&err_state, 42, 3), __THE_1_map_strMSintME_set(&__THE_0_map2Str_0, str_alloc("test"), 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L29;
  struct __THE_1_map_u8MSintME __THE_0_map2U8_0 = __THE_1_map_u8MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L30;
  (error_stack_pos(&err_state, 44, 3), __THE_1_map_u8MSintME_set(&__THE_0_map2U8_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L30;
  struct __THE_1_map_u16MSintME __THE_0_map2U16_0 = __THE_1_map_u16MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L31;
  (error_stack_pos(&err_state, 46, 3), __THE_1_map_u16MSintME_set(&__THE_0_map2U16_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L31;
  struct __THE_1_map_u32MSintME __THE_0_map2U32_0 = __THE_1_map_u32MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L32;
  (error_stack_pos(&err_state, 48, 3), __THE_1_map_u32MSintME_set(&__THE_0_map2U32_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L32;
  struct __THE_1_map_u64MSintME __THE_0_map2U64_0 = __THE_1_map_u64MSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L33;
  (error_stack_pos(&err_state, 50, 3), __THE_1_map_u64MSintME_set(&__THE_0_map2U64_0, 1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L33;
  const struct __THE_1_map_boolMSintME __THE_0_map3Bool_0 = __THE_1_map_boolMSintME_copy(__THE_0_map2Bool_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L34;
  const struct __THE_1_map_byteMSintME __THE_0_map3Byte_0 = __THE_1_map_byteMSintME_copy(__THE_0_map2Byte_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L35;
  const struct __THE_1_map_charMSintME __THE_0_map3Char_0 = __THE_1_map_charMSintME_copy(__THE_0_map2Char_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L36;
  const struct __THE_1_map_f32MSintME __THE_0_map3F32_0 = __THE_1_map_f32MSintME_copy(__THE_0_map2F32_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L37;
  const struct __THE_1_map_f64MSintME __THE_0_map3F64_0 = __THE_1_map_f64MSintME_copy(__THE_0_map2F64_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L38;
  const struct __THE_1_map_floatMSintME __THE_0_map3Float_0 = __THE_1_map_floatMSintME_copy(__THE_0_map2Float_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L39;
  const struct __THE_1_map_i8MSintME __THE_0_map3I8_0 = __THE_1_map_i8MSintME_copy(__THE_0_map2I8_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L40;
  const struct __THE_1_map_i16MSintME __THE_0_map3I16_0 = __THE_1_map_i16MSintME_copy(__THE_0_map2I16_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L41;
  const struct __THE_1_map_i32MSintME __THE_0_map3I32_0 = __THE_1_map_i32MSintME_copy(__THE_0_map2I32_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L42;
  const struct __THE_1_map_i64MSintME __THE_0_map3I64_0 = __THE_1_map_i64MSintME_copy(__THE_0_map2I64_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L43;
  const struct __THE_1_map_intMSintME __THE_0_map3Int_0 = __THE_1_map_intMSintME_copy(__THE_0_map2Int_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L44;
  const struct __THE_1_map_strMSintME __THE_0_map3Str_0 = __THE_1_map_strMSintME_copy(__THE_0_map2Str_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L45;
  const struct __THE_1_map_u8MSintME __THE_0_map3U8_0 = __THE_1_map_u8MSintME_copy(__THE_0_map2U8_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L46;
  const struct __THE_1_map_u16MSintME __THE_0_map3U16_0 = __THE_1_map_u16MSintME_copy(__THE_0_map2U16_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L47;
  const struct __THE_1_map_u32MSintME __THE_0_map3U32_0 = __THE_1_map_u32MSintME_copy(__THE_0_map2U32_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L48;
  const struct __THE_1_map_u64MSintME __THE_0_map3U64_0 = __THE_1_map_u64MSintME_copy(__THE_0_map2U64_0);
  __THE_1_map_u64MSintME_free((struct __THE_1_map_u64MSintME) __THE_0_map3U64_0);
L48:
  __THE_1_map_u32MSintME_free((struct __THE_1_map_u32MSintME) __THE_0_map3U32_0);
L47:
  __THE_1_map_u16MSintME_free((struct __THE_1_map_u16MSintME) __THE_0_map3U16_0);
L46:
  __THE_1_map_u8MSintME_free((struct __THE_1_map_u8MSintME) __THE_0_map3U8_0);
L45:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_map3Str_0);
L44:
  __THE_1_map_intMSintME_free((struct __THE_1_map_intMSintME) __THE_0_map3Int_0);
L43:
  __THE_1_map_i64MSintME_free((struct __THE_1_map_i64MSintME) __THE_0_map3I64_0);
L42:
  __THE_1_map_i32MSintME_free((struct __THE_1_map_i32MSintME) __THE_0_map3I32_0);
L41:
  __THE_1_map_i16MSintME_free((struct __THE_1_map_i16MSintME) __THE_0_map3I16_0);
L40:
  __THE_1_map_i8MSintME_free((struct __THE_1_map_i8MSintME) __THE_0_map3I8_0);
L39:
  __THE_1_map_floatMSintME_free((struct __THE_1_map_floatMSintME) __THE_0_map3Float_0);
L38:
  __THE_1_map_f64MSintME_free((struct __THE_1_map_f64MSintME) __THE_0_map3F64_0);
L37:
  __THE_1_map_f32MSintME_free((struct __THE_1_map_f32MSintME) __THE_0_map3F32_0);
L36:
  __THE_1_map_charMSintME_free((struct __THE_1_map_charMSintME) __THE_0_map3Char_0);
L35:
  __THE_1_map_byteMSintME_free((struct __THE_1_map_byteMSintME) __THE_0_map3Byte_0);
L34:
  __THE_1_map_boolMSintME_free((struct __THE_1_map_boolMSintME) __THE_0_map3Bool_0);
L33:
  __THE_1_map_u64MSintME_free((struct __THE_1_map_u64MSintME) __THE_0_map2U64_0);
L32:
  __THE_1_map_u32MSintME_free((struct __THE_1_map_u32MSintME) __THE_0_map2U32_0);
L31:
  __THE_1_map_u16MSintME_free((struct __THE_1_map_u16MSintME) __THE_0_map2U16_0);
L30:
  __THE_1_map_u8MSintME_free((struct __THE_1_map_u8MSintME) __THE_0_map2U8_0);
L29:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_map2Str_0);
L28:
  __THE_1_map_intMSintME_free((struct __THE_1_map_intMSintME) __THE_0_map2Int_0);
L27:
  __THE_1_map_i64MSintME_free((struct __THE_1_map_i64MSintME) __THE_0_map2I64_0);
L26:
  __THE_1_map_i32MSintME_free((struct __THE_1_map_i32MSintME) __THE_0_map2I32_0);
L25:
  __THE_1_map_i16MSintME_free((struct __THE_1_map_i16MSintME) __THE_0_map2I16_0);
L24:
  __THE_1_map_i8MSintME_free((struct __THE_1_map_i8MSintME) __THE_0_map2I8_0);
L23:
  __THE_1_map_floatMSintME_free((struct __THE_1_map_floatMSintME) __THE_0_map2Float_0);
L22:
  __THE_1_map_f64MSintME_free((struct __THE_1_map_f64MSintME) __THE_0_map2F64_0);
L21:
  __THE_1_map_f32MSintME_free((struct __THE_1_map_f32MSintME) __THE_0_map2F32_0);
L20:
  __THE_1_map_charMSintME_free((struct __THE_1_map_charMSintME) __THE_0_map2Char_0);
L19:
  __THE_1_map_byteMSintME_free((struct __THE_1_map_byteMSintME) __THE_0_map2Byte_0);
L18:
  __THE_1_map_boolMSintME_free((struct __THE_1_map_boolMSintME) __THE_0_map2Bool_0);
L17:
  __THE_1_map_u64MSintME_free((struct __THE_1_map_u64MSintME) __THE_0_map1U64_0);
L16:
  __THE_1_map_u32MSintME_free((struct __THE_1_map_u32MSintME) __THE_0_map1U32_0);
L15:
  __THE_1_map_u16MSintME_free((struct __THE_1_map_u16MSintME) __THE_0_map1U16_0);
L14:
  __THE_1_map_u8MSintME_free((struct __THE_1_map_u8MSintME) __THE_0_map1U8_0);
L13:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_map1Str_0);
L12:
  __THE_1_map_intMSintME_free((struct __THE_1_map_intMSintME) __THE_0_map1Int_0);
L11:
  __THE_1_map_i64MSintME_free((struct __THE_1_map_i64MSintME) __THE_0_map1I64_0);
L10:
  __THE_1_map_i32MSintME_free((struct __THE_1_map_i32MSintME) __THE_0_map1I32_0);
L9:
  __THE_1_map_i16MSintME_free((struct __THE_1_map_i16MSintME) __THE_0_map1I16_0);
L8:
  __THE_1_map_i8MSintME_free((struct __THE_1_map_i8MSintME) __THE_0_map1I8_0);
L7:
  __THE_1_map_floatMSintME_free((struct __THE_1_map_floatMSintME) __THE_0_map1Float_0);
L6:
  __THE_1_map_f64MSintME_free((struct __THE_1_map_f64MSintME) __THE_0_map1F64_0);
L5:
  __THE_1_map_f32MSintME_free((struct __THE_1_map_f32MSintME) __THE_0_map1F32_0);
L4:
  __THE_1_map_charMSintME_free((struct __THE_1_map_charMSintME) __THE_0_map1Char_0);
L3:
  __THE_1_map_byteMSintME_free((struct __THE_1_map_byteMSintME) __THE_0_map1Byte_0);
L2:
  __THE_1_map_boolMSintME_free((struct __THE_1_map_boolMSintME) __THE_0_map1Bool_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
