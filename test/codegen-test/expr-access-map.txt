======= stdin =======
main {
  a := { "key1": 1 }
  mut b := a
  b = a
  mut c := { "key2": 2 }
  c = b
  e := true ? a : b
  f := true ? c : (b = c)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair$0;
struct __THE_1_map$0;

struct __THE_1_pair$0 {
  struct str f;
  int32_t s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
struct __THE_1_map$0 __THE_1_map$0_copy (const struct __THE_1_map$0);
void __THE_1_map$0_free (struct __THE_1_map$0);
struct __THE_1_map$0 __THE_1_map$0_realloc (struct __THE_1_map$0, struct __THE_1_map$0);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
struct __THE_1_map$0 __THE_1_map$0_copy (const struct __THE_1_map$0 n) {
  struct __THE_1_pair$0 *d = alloc(n.c * sizeof(struct __THE_1_pair$0));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair$0) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map$0) {d, n.c, n.l};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map$0 __THE_1_map$0_realloc (struct __THE_1_map$0 n1, struct __THE_1_map$0 n2) {
  __THE_1_map$0_free((struct __THE_1_map$0) n1);
  return n2;
}

int main () {
  const struct __THE_1_map$0 __THE_0_a_0 = __THE_1_map$0_alloc(1, str_alloc("key1"), 1);
  struct __THE_1_map$0 __THE_0_b_0 = __THE_1_map$0_copy(__THE_0_a_0);
  __THE_0_b_0 = __THE_1_map$0_realloc(__THE_0_b_0, __THE_1_map$0_copy(__THE_0_a_0));
  struct __THE_1_map$0 __THE_0_c_0 = __THE_1_map$0_alloc(1, str_alloc("key2"), 2);
  __THE_0_c_0 = __THE_1_map$0_realloc(__THE_0_c_0, __THE_1_map$0_copy(__THE_0_b_0));
  const struct __THE_1_map$0 __THE_0_e_0 = true ? __THE_1_map$0_copy(__THE_0_a_0) : __THE_1_map$0_copy(__THE_0_b_0);
  const struct __THE_1_map$0 __THE_0_f_0 = true ? __THE_1_map$0_copy(__THE_0_c_0) : (__THE_1_map$0_copy(__THE_0_b_0 = __THE_1_map$0_realloc(__THE_0_b_0, __THE_1_map$0_copy(__THE_0_c_0))));
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_f_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_e_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_c_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_b_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_a_0);
}
======= flags =======
======= stdout =======
