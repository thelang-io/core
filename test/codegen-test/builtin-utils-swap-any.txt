======= stdin =======
fn printAny (prefix: str, v: any) {
  if v is int {
    print(prefix, "is int:", v)
  }

  if v is str {
    print(prefix, "is str:", v)
  }
}

main {
  mut a: any = 1
  mut b: any = "test"

  printAny("a", a)
  printAny("b", b)
  utils_swap(ref a, ref b)
  printAny("a", a)
  printAny("b", b)
  utils_swap(ref a, ref b)
  printAny("a", a)
  printAny("b", b)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2
#define TYPE_str 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn_sFP3strFP3anyFRvoidFE;
struct __THE_1_fn_sFP3strFP3anyFRvoidFEP;
struct __THE_1_any_int;
struct __THE_1_any_str;

struct __THE_1_fn_sFP3strFP3anyFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3strFP3anyFRvoidFEP {
  struct str n0;
  struct any n1;
};
struct __THE_1_any_int {
  int32_t d;
};
struct __THE_1_any_str {
  struct str d;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
void utils_swap (void *, void *, size_t);
void *xalloc (void *, size_t);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);
struct any __THE_1_any_str_alloc (struct str);
struct any __THE_1_any_str_copy (const struct any);
void __THE_1_any_str_free (struct any);
void __THE_1_printAny_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
void utils_swap (void *a, void *b, size_t l) {
  void *t = alloc(l);
  memcpy(t, a, l);
  memcpy(a, b, l);
  memcpy(b, t, l);
  free(t);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}
struct any __THE_1_any_str_alloc (struct str d) {
  size_t l = sizeof(struct __THE_1_any_str);
  struct __THE_1_any_str *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_str, r, l, &__THE_1_any_str_copy, &__THE_1_any_str_free};
}
struct any __THE_1_any_str_copy (const struct any n) {
  struct __THE_1_any_str *o = n.d;
  struct __THE_1_any_str *r = alloc(n.l);
  r->d = str_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_str_free (struct any _n) {
  struct __THE_1_any_str *n = _n.d;
  str_free((struct str) n->d);
  free(n);
}
void __THE_1_printAny_0 (void *px, void *pp) {
  struct __THE_1_fn_sFP3strFP3anyFRvoidFEP *p = pp;
  const struct str __THE_0_prefix_0 = p->n0;
  const struct any __THE_0_v_0 = p->n1;
  if (__THE_0_v_0.t == TYPE_int) {
    print(stdout, "szzziz", str_copy(__THE_0_prefix_0), " ", "is int:", " ", ((struct __THE_1_any_int *) __THE_0_v_0.d)->d, THE_EOL);
  }
  if (__THE_0_v_0.t == TYPE_str) {
    print(stdout, "szzzsz", str_copy(__THE_0_prefix_0), " ", "is str:", " ", str_copy(((struct __THE_1_any_str *) __THE_0_v_0.d)->d), THE_EOL);
  }
  any_free((struct any) __THE_0_v_0);
  str_free((struct str) __THE_0_prefix_0);
  free(pp);
}

int main () {
  const struct __THE_1_fn_sFP3strFP3anyFRvoidFE __THE_0_printAny_0 = (struct __THE_1_fn_sFP3strFP3anyFRvoidFE) {&__THE_1_printAny_0, NULL, 0};
  struct any __THE_0_a_0 = __THE_1_any_int_alloc(1);
  struct any __THE_0_b_0 = __THE_1_any_str_alloc(str_alloc("test"));
  __THE_0_printAny_0.f(__THE_0_printAny_0.x, xalloc(&(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP) {str_alloc("a"), any_copy(__THE_0_a_0)}, sizeof(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP)));
  __THE_0_printAny_0.f(__THE_0_printAny_0.x, xalloc(&(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP) {str_alloc("b"), any_copy(__THE_0_b_0)}, sizeof(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP)));
  utils_swap(&__THE_0_a_0, &__THE_0_b_0, sizeof(struct any));
  __THE_0_printAny_0.f(__THE_0_printAny_0.x, xalloc(&(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP) {str_alloc("a"), any_copy(__THE_0_a_0)}, sizeof(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP)));
  __THE_0_printAny_0.f(__THE_0_printAny_0.x, xalloc(&(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP) {str_alloc("b"), any_copy(__THE_0_b_0)}, sizeof(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP)));
  utils_swap(&__THE_0_a_0, &__THE_0_b_0, sizeof(struct any));
  __THE_0_printAny_0.f(__THE_0_printAny_0.x, xalloc(&(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP) {str_alloc("a"), any_copy(__THE_0_a_0)}, sizeof(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP)));
  __THE_0_printAny_0.f(__THE_0_printAny_0.x, xalloc(&(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP) {str_alloc("b"), any_copy(__THE_0_b_0)}, sizeof(struct __THE_1_fn_sFP3strFP3anyFRvoidFEP)));
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
a is int: 1
b is str: test
a is str: test
b is int: 1
a is int: 1
b is str: test
