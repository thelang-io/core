======= stdin =======
main {
  testBool := true
  testByte: byte = 1
  testChar := 'a'
  testF32: f32 = 3.14
  testF64: f64 = 3.14
  testFloat := 3.14
  testI8: i8 = 1
  testI16: i16 = 1
  testI32: i32 = 1
  testI64: i64 = 1
  testInt := 1
  testU8: u8 = 10
  testU16: u16 = 10
  testU32: u32 = 10
  testU64: u64 = 10

  array01Bool: bool[]
  array01Byte: byte[]
  array01Char: char[]
  array01F32: f32[]
  array01F64: f64[]
  array01Float: float[]
  array01I8: i8[]
  array01I16: i16[]
  array01I32: i32[]
  array01I64: i64[]
  array01Int: int[]
  array01U8: u8[]
  array01U16: u16[]
  array01U32: u32[]
  array01U64: u64[]

  array02Bool: bool[] = []
  array02Byte: byte[] = []
  array02Char: char[] = []
  array02F32: f32[] = []
  array02F64: f64[] = []
  array02Float: float[] = []
  array02I8: i8[] = []
  array02I16: i16[] = []
  array02I32: i32[] = []
  array02I64: i64[] = []
  array02Int: int[] = []
  array02U8: u8[] = []
  array02U16: u16[] = []
  array02U32: u32[] = []
  array02U64: u64[] = []

  array1Bool: bool[] = [true]
  array1Byte: byte[] = [1]
  array1Char: char[] = ['a']
  array1F32: f32[] = [3.14]
  array1F64: f64[] = [3.14]
  array1Float: float[] = [3.14]
  array1I8: i8[] = [1]
  array1I16: i16[] = [1]
  array1I32: i32[] = [1]
  array1I64: i64[] = [1]
  array1Int: int[] = [1]
  array1U8: u8[] = [1]
  array1U16: u16[] = [1]
  array1U32: u32[] = [1]
  array1U64: u64[] = [1]

  array3Bool := [true, false, testBool]
  array3Byte := [testByte, testByte, testByte]
  array3Char := ['a', 'b', testChar]
  array3F32 := [testF32, testF32, testF32]
  array3F64 := [testF64, testF64, testF64]
  array3Float := [3.14, 2.16, testFloat]
  array3I8 := [testI8, testI8, testI8]
  array3I16 := [testI16, testI16, testI16]
  array3I32 := [testI32, testI32, testI32]
  array3I64 := [testI64, testI64, testI64]
  array3Int := [1, 2, testInt]
  array3U8 := [testU8, testU8, testU8]
  array3U16 := [testU16, testU16, testU16]
  array3U32 := [testU32, testU32, testU32]
  array3U64 := [testU64, testU64, testU64]

  arrayArrayBool := [array3Bool, array3Bool, array3Bool]
  arrayArrayByte := [array3Byte, array3Byte, array3Byte]
  arrayArrayChar := [array3Char, array3Char, array3Char]
  arrayArrayF32 := [array3F32, array3F32, array3F32]
  arrayArrayF64 := [array3F64, array3F64, array3F64]
  arrayArrayFloat := [array3Float, array3Float, array3Float]
  arrayArrayI8 := [array3I8, array3I8, array3I8]
  arrayArrayI16 := [array3I16, array3I16, array3I16]
  arrayArrayI32 := [array3I32, array3I32, array3I32]
  arrayArrayI64 := [array3I64, array3I64, array3I64]
  arrayArrayInt := [array3Int, array3Int, array3Int]
  arrayArrayU8 := [array3U8, array3U8, array3U8]
  arrayArrayU16 := [array3U16, array3U16, array3U16]
  arrayArrayU32 := [array3U32, array3U32, array3U32]
  arrayArrayU64 := [array3U64, array3U64, array3U64]

  arrayArrayArrayBool := [arrayArrayBool, arrayArrayBool, arrayArrayBool]
  arrayArrayArrayByte := [arrayArrayByte, arrayArrayByte, arrayArrayByte]
  arrayArrayArrayChar := [arrayArrayChar, arrayArrayChar, arrayArrayChar]
  arrayArrayArrayF32 := [arrayArrayF32, arrayArrayF32, arrayArrayF32]
  arrayArrayArrayF64 := [arrayArrayF64, arrayArrayF64, arrayArrayF64]
  arrayArrayArrayFloat := [arrayArrayFloat, arrayArrayFloat, arrayArrayFloat]
  arrayArrayArrayI8 := [arrayArrayI8, arrayArrayI8, arrayArrayI8]
  arrayArrayArrayI16 := [arrayArrayI16, arrayArrayI16, arrayArrayI16]
  arrayArrayArrayI32 := [arrayArrayI32, arrayArrayI32, arrayArrayI32]
  arrayArrayArrayI64 := [arrayArrayI64, arrayArrayI64, arrayArrayI64]
  arrayArrayArrayInt := [arrayArrayInt, arrayArrayInt, arrayArrayInt]
  arrayArrayArrayU8 := [arrayArrayU8, arrayArrayU8, arrayArrayU8]
  arrayArrayArrayU16 := [arrayArrayU16, arrayArrayU16, arrayArrayU16]
  arrayArrayArrayU32 := [arrayArrayU32, arrayArrayU32, arrayArrayU32]
  arrayArrayArrayU64 := [arrayArrayU64, arrayArrayU64, arrayArrayU64]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_bool;
struct __THE_1_array_byte;
struct __THE_1_array_char;
struct __THE_1_array_f32;
struct __THE_1_array_f64;
struct __THE_1_array_float;
struct __THE_1_array_i8;
struct __THE_1_array_i16;
struct __THE_1_array_i32;
struct __THE_1_array_i64;
struct __THE_1_array_int;
struct __THE_1_array_u8;
struct __THE_1_array_u16;
struct __THE_1_array_u32;
struct __THE_1_array_u64;
struct __THE_1_array_array_bool;
struct __THE_1_array_array_byte;
struct __THE_1_array_array_char;
struct __THE_1_array_array_f32;
struct __THE_1_array_array_f64;
struct __THE_1_array_array_float;
struct __THE_1_array_array_i8;
struct __THE_1_array_array_i16;
struct __THE_1_array_array_i32;
struct __THE_1_array_array_i64;
struct __THE_1_array_array_int;
struct __THE_1_array_array_u8;
struct __THE_1_array_array_u16;
struct __THE_1_array_array_u32;
struct __THE_1_array_array_u64;
struct __THE_1_array_array_array_bool;
struct __THE_1_array_array_array_byte;
struct __THE_1_array_array_array_char;
struct __THE_1_array_array_array_f32;
struct __THE_1_array_array_array_f64;
struct __THE_1_array_array_array_float;
struct __THE_1_array_array_array_i8;
struct __THE_1_array_array_array_i16;
struct __THE_1_array_array_array_i32;
struct __THE_1_array_array_array_i64;
struct __THE_1_array_array_array_int;
struct __THE_1_array_array_array_u8;
struct __THE_1_array_array_array_u16;
struct __THE_1_array_array_array_u32;
struct __THE_1_array_array_array_u64;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_bool {
  bool *d;
  size_t l;
};
struct __THE_1_array_byte {
  unsigned char *d;
  size_t l;
};
struct __THE_1_array_char {
  char *d;
  size_t l;
};
struct __THE_1_array_f32 {
  float *d;
  size_t l;
};
struct __THE_1_array_f64 {
  double *d;
  size_t l;
};
struct __THE_1_array_float {
  double *d;
  size_t l;
};
struct __THE_1_array_i8 {
  int8_t *d;
  size_t l;
};
struct __THE_1_array_i16 {
  int16_t *d;
  size_t l;
};
struct __THE_1_array_i32 {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_i64 {
  int64_t *d;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_u8 {
  uint8_t *d;
  size_t l;
};
struct __THE_1_array_u16 {
  uint16_t *d;
  size_t l;
};
struct __THE_1_array_u32 {
  uint32_t *d;
  size_t l;
};
struct __THE_1_array_u64 {
  uint64_t *d;
  size_t l;
};
struct __THE_1_array_array_bool {
  struct __THE_1_array_bool *d;
  size_t l;
};
struct __THE_1_array_array_byte {
  struct __THE_1_array_byte *d;
  size_t l;
};
struct __THE_1_array_array_char {
  struct __THE_1_array_char *d;
  size_t l;
};
struct __THE_1_array_array_f32 {
  struct __THE_1_array_f32 *d;
  size_t l;
};
struct __THE_1_array_array_f64 {
  struct __THE_1_array_f64 *d;
  size_t l;
};
struct __THE_1_array_array_float {
  struct __THE_1_array_float *d;
  size_t l;
};
struct __THE_1_array_array_i8 {
  struct __THE_1_array_i8 *d;
  size_t l;
};
struct __THE_1_array_array_i16 {
  struct __THE_1_array_i16 *d;
  size_t l;
};
struct __THE_1_array_array_i32 {
  struct __THE_1_array_i32 *d;
  size_t l;
};
struct __THE_1_array_array_i64 {
  struct __THE_1_array_i64 *d;
  size_t l;
};
struct __THE_1_array_array_int {
  struct __THE_1_array_int *d;
  size_t l;
};
struct __THE_1_array_array_u8 {
  struct __THE_1_array_u8 *d;
  size_t l;
};
struct __THE_1_array_array_u16 {
  struct __THE_1_array_u16 *d;
  size_t l;
};
struct __THE_1_array_array_u32 {
  struct __THE_1_array_u32 *d;
  size_t l;
};
struct __THE_1_array_array_u64 {
  struct __THE_1_array_u64 *d;
  size_t l;
};
struct __THE_1_array_array_array_bool {
  struct __THE_1_array_array_bool *d;
  size_t l;
};
struct __THE_1_array_array_array_byte {
  struct __THE_1_array_array_byte *d;
  size_t l;
};
struct __THE_1_array_array_array_char {
  struct __THE_1_array_array_char *d;
  size_t l;
};
struct __THE_1_array_array_array_f32 {
  struct __THE_1_array_array_f32 *d;
  size_t l;
};
struct __THE_1_array_array_array_f64 {
  struct __THE_1_array_array_f64 *d;
  size_t l;
};
struct __THE_1_array_array_array_float {
  struct __THE_1_array_array_float *d;
  size_t l;
};
struct __THE_1_array_array_array_i8 {
  struct __THE_1_array_array_i8 *d;
  size_t l;
};
struct __THE_1_array_array_array_i16 {
  struct __THE_1_array_array_i16 *d;
  size_t l;
};
struct __THE_1_array_array_array_i32 {
  struct __THE_1_array_array_i32 *d;
  size_t l;
};
struct __THE_1_array_array_array_i64 {
  struct __THE_1_array_array_i64 *d;
  size_t l;
};
struct __THE_1_array_array_array_int {
  struct __THE_1_array_array_int *d;
  size_t l;
};
struct __THE_1_array_array_array_u8 {
  struct __THE_1_array_array_u8 *d;
  size_t l;
};
struct __THE_1_array_array_array_u16 {
  struct __THE_1_array_array_u16 *d;
  size_t l;
};
struct __THE_1_array_array_array_u32 {
  struct __THE_1_array_array_u32 *d;
  size_t l;
};
struct __THE_1_array_array_array_u64 {
  struct __THE_1_array_array_u64 *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t, ...);
struct __THE_1_array_bool __THE_1_array_bool_copy (const struct __THE_1_array_bool);
void __THE_1_array_bool_free (struct __THE_1_array_bool);
struct __THE_1_array_byte __THE_1_array_byte_alloc (size_t, ...);
struct __THE_1_array_byte __THE_1_array_byte_copy (const struct __THE_1_array_byte);
void __THE_1_array_byte_free (struct __THE_1_array_byte);
struct __THE_1_array_char __THE_1_array_char_alloc (size_t, ...);
struct __THE_1_array_char __THE_1_array_char_copy (const struct __THE_1_array_char);
void __THE_1_array_char_free (struct __THE_1_array_char);
struct __THE_1_array_f32 __THE_1_array_f32_alloc (size_t, ...);
struct __THE_1_array_f32 __THE_1_array_f32_copy (const struct __THE_1_array_f32);
void __THE_1_array_f32_free (struct __THE_1_array_f32);
struct __THE_1_array_f64 __THE_1_array_f64_alloc (size_t, ...);
struct __THE_1_array_f64 __THE_1_array_f64_copy (const struct __THE_1_array_f64);
void __THE_1_array_f64_free (struct __THE_1_array_f64);
struct __THE_1_array_float __THE_1_array_float_alloc (size_t, ...);
struct __THE_1_array_float __THE_1_array_float_copy (const struct __THE_1_array_float);
void __THE_1_array_float_free (struct __THE_1_array_float);
struct __THE_1_array_i8 __THE_1_array_i8_alloc (size_t, ...);
struct __THE_1_array_i8 __THE_1_array_i8_copy (const struct __THE_1_array_i8);
void __THE_1_array_i8_free (struct __THE_1_array_i8);
struct __THE_1_array_i16 __THE_1_array_i16_alloc (size_t, ...);
struct __THE_1_array_i16 __THE_1_array_i16_copy (const struct __THE_1_array_i16);
void __THE_1_array_i16_free (struct __THE_1_array_i16);
struct __THE_1_array_i32 __THE_1_array_i32_alloc (size_t, ...);
struct __THE_1_array_i32 __THE_1_array_i32_copy (const struct __THE_1_array_i32);
void __THE_1_array_i32_free (struct __THE_1_array_i32);
struct __THE_1_array_i64 __THE_1_array_i64_alloc (size_t, ...);
struct __THE_1_array_i64 __THE_1_array_i64_copy (const struct __THE_1_array_i64);
void __THE_1_array_i64_free (struct __THE_1_array_i64);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_u8 __THE_1_array_u8_alloc (size_t, ...);
struct __THE_1_array_u8 __THE_1_array_u8_copy (const struct __THE_1_array_u8);
void __THE_1_array_u8_free (struct __THE_1_array_u8);
struct __THE_1_array_u16 __THE_1_array_u16_alloc (size_t, ...);
struct __THE_1_array_u16 __THE_1_array_u16_copy (const struct __THE_1_array_u16);
void __THE_1_array_u16_free (struct __THE_1_array_u16);
struct __THE_1_array_u32 __THE_1_array_u32_alloc (size_t, ...);
struct __THE_1_array_u32 __THE_1_array_u32_copy (const struct __THE_1_array_u32);
void __THE_1_array_u32_free (struct __THE_1_array_u32);
struct __THE_1_array_u64 __THE_1_array_u64_alloc (size_t, ...);
struct __THE_1_array_u64 __THE_1_array_u64_copy (const struct __THE_1_array_u64);
void __THE_1_array_u64_free (struct __THE_1_array_u64);
struct __THE_1_array_array_bool __THE_1_array_array_bool_alloc (size_t, ...);
struct __THE_1_array_array_bool __THE_1_array_array_bool_copy (const struct __THE_1_array_array_bool);
void __THE_1_array_array_bool_free (struct __THE_1_array_array_bool);
struct __THE_1_array_array_byte __THE_1_array_array_byte_alloc (size_t, ...);
struct __THE_1_array_array_byte __THE_1_array_array_byte_copy (const struct __THE_1_array_array_byte);
void __THE_1_array_array_byte_free (struct __THE_1_array_array_byte);
struct __THE_1_array_array_char __THE_1_array_array_char_alloc (size_t, ...);
struct __THE_1_array_array_char __THE_1_array_array_char_copy (const struct __THE_1_array_array_char);
void __THE_1_array_array_char_free (struct __THE_1_array_array_char);
struct __THE_1_array_array_f32 __THE_1_array_array_f32_alloc (size_t, ...);
struct __THE_1_array_array_f32 __THE_1_array_array_f32_copy (const struct __THE_1_array_array_f32);
void __THE_1_array_array_f32_free (struct __THE_1_array_array_f32);
struct __THE_1_array_array_f64 __THE_1_array_array_f64_alloc (size_t, ...);
struct __THE_1_array_array_f64 __THE_1_array_array_f64_copy (const struct __THE_1_array_array_f64);
void __THE_1_array_array_f64_free (struct __THE_1_array_array_f64);
struct __THE_1_array_array_float __THE_1_array_array_float_alloc (size_t, ...);
struct __THE_1_array_array_float __THE_1_array_array_float_copy (const struct __THE_1_array_array_float);
void __THE_1_array_array_float_free (struct __THE_1_array_array_float);
struct __THE_1_array_array_i8 __THE_1_array_array_i8_alloc (size_t, ...);
struct __THE_1_array_array_i8 __THE_1_array_array_i8_copy (const struct __THE_1_array_array_i8);
void __THE_1_array_array_i8_free (struct __THE_1_array_array_i8);
struct __THE_1_array_array_i16 __THE_1_array_array_i16_alloc (size_t, ...);
struct __THE_1_array_array_i16 __THE_1_array_array_i16_copy (const struct __THE_1_array_array_i16);
void __THE_1_array_array_i16_free (struct __THE_1_array_array_i16);
struct __THE_1_array_array_i32 __THE_1_array_array_i32_alloc (size_t, ...);
struct __THE_1_array_array_i32 __THE_1_array_array_i32_copy (const struct __THE_1_array_array_i32);
void __THE_1_array_array_i32_free (struct __THE_1_array_array_i32);
struct __THE_1_array_array_i64 __THE_1_array_array_i64_alloc (size_t, ...);
struct __THE_1_array_array_i64 __THE_1_array_array_i64_copy (const struct __THE_1_array_array_i64);
void __THE_1_array_array_i64_free (struct __THE_1_array_array_i64);
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t, ...);
struct __THE_1_array_array_int __THE_1_array_array_int_copy (const struct __THE_1_array_array_int);
void __THE_1_array_array_int_free (struct __THE_1_array_array_int);
struct __THE_1_array_array_u8 __THE_1_array_array_u8_alloc (size_t, ...);
struct __THE_1_array_array_u8 __THE_1_array_array_u8_copy (const struct __THE_1_array_array_u8);
void __THE_1_array_array_u8_free (struct __THE_1_array_array_u8);
struct __THE_1_array_array_u16 __THE_1_array_array_u16_alloc (size_t, ...);
struct __THE_1_array_array_u16 __THE_1_array_array_u16_copy (const struct __THE_1_array_array_u16);
void __THE_1_array_array_u16_free (struct __THE_1_array_array_u16);
struct __THE_1_array_array_u32 __THE_1_array_array_u32_alloc (size_t, ...);
struct __THE_1_array_array_u32 __THE_1_array_array_u32_copy (const struct __THE_1_array_array_u32);
void __THE_1_array_array_u32_free (struct __THE_1_array_array_u32);
struct __THE_1_array_array_u64 __THE_1_array_array_u64_alloc (size_t, ...);
struct __THE_1_array_array_u64 __THE_1_array_array_u64_copy (const struct __THE_1_array_array_u64);
void __THE_1_array_array_u64_free (struct __THE_1_array_array_u64);
struct __THE_1_array_array_array_bool __THE_1_array_array_array_bool_alloc (size_t, ...);
void __THE_1_array_array_array_bool_free (struct __THE_1_array_array_array_bool);
struct __THE_1_array_array_array_byte __THE_1_array_array_array_byte_alloc (size_t, ...);
void __THE_1_array_array_array_byte_free (struct __THE_1_array_array_array_byte);
struct __THE_1_array_array_array_char __THE_1_array_array_array_char_alloc (size_t, ...);
void __THE_1_array_array_array_char_free (struct __THE_1_array_array_array_char);
struct __THE_1_array_array_array_f32 __THE_1_array_array_array_f32_alloc (size_t, ...);
void __THE_1_array_array_array_f32_free (struct __THE_1_array_array_array_f32);
struct __THE_1_array_array_array_f64 __THE_1_array_array_array_f64_alloc (size_t, ...);
void __THE_1_array_array_array_f64_free (struct __THE_1_array_array_array_f64);
struct __THE_1_array_array_array_float __THE_1_array_array_array_float_alloc (size_t, ...);
void __THE_1_array_array_array_float_free (struct __THE_1_array_array_array_float);
struct __THE_1_array_array_array_i8 __THE_1_array_array_array_i8_alloc (size_t, ...);
void __THE_1_array_array_array_i8_free (struct __THE_1_array_array_array_i8);
struct __THE_1_array_array_array_i16 __THE_1_array_array_array_i16_alloc (size_t, ...);
void __THE_1_array_array_array_i16_free (struct __THE_1_array_array_array_i16);
struct __THE_1_array_array_array_i32 __THE_1_array_array_array_i32_alloc (size_t, ...);
void __THE_1_array_array_array_i32_free (struct __THE_1_array_array_array_i32);
struct __THE_1_array_array_array_i64 __THE_1_array_array_array_i64_alloc (size_t, ...);
void __THE_1_array_array_array_i64_free (struct __THE_1_array_array_array_i64);
struct __THE_1_array_array_array_int __THE_1_array_array_array_int_alloc (size_t, ...);
void __THE_1_array_array_array_int_free (struct __THE_1_array_array_array_int);
struct __THE_1_array_array_array_u8 __THE_1_array_array_array_u8_alloc (size_t, ...);
void __THE_1_array_array_array_u8_free (struct __THE_1_array_array_array_u8);
struct __THE_1_array_array_array_u16 __THE_1_array_array_array_u16_alloc (size_t, ...);
void __THE_1_array_array_array_u16_free (struct __THE_1_array_array_array_u16);
struct __THE_1_array_array_array_u32 __THE_1_array_array_array_u32_alloc (size_t, ...);
void __THE_1_array_array_array_u32_free (struct __THE_1_array_array_array_u32);
struct __THE_1_array_array_array_u64 __THE_1_array_array_array_u64_alloc (size_t, ...);
void __THE_1_array_array_array_u64_free (struct __THE_1_array_array_array_u64);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_bool) {NULL, 0};
  bool *d = alloc(x * sizeof(bool));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_bool) {d, x};
}
struct __THE_1_array_bool __THE_1_array_bool_copy (const struct __THE_1_array_bool n) {
  if (n.l == 0) return (struct __THE_1_array_bool) {NULL, 0};
  bool *d = alloc(n.l * sizeof(bool));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_bool) {d, n.l};
}
void __THE_1_array_bool_free (struct __THE_1_array_bool n) {
  free(n.d);
}
struct __THE_1_array_byte __THE_1_array_byte_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_byte) {NULL, 0};
  unsigned char *d = alloc(x * sizeof(unsigned char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_byte) {d, x};
}
struct __THE_1_array_byte __THE_1_array_byte_copy (const struct __THE_1_array_byte n) {
  if (n.l == 0) return (struct __THE_1_array_byte) {NULL, 0};
  unsigned char *d = alloc(n.l * sizeof(unsigned char));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_byte) {d, n.l};
}
void __THE_1_array_byte_free (struct __THE_1_array_byte n) {
  free(n.d);
}
struct __THE_1_array_char __THE_1_array_char_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_char) {NULL, 0};
  char *d = alloc(x * sizeof(char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_char) {d, x};
}
struct __THE_1_array_char __THE_1_array_char_copy (const struct __THE_1_array_char n) {
  if (n.l == 0) return (struct __THE_1_array_char) {NULL, 0};
  char *d = alloc(n.l * sizeof(char));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_char) {d, n.l};
}
void __THE_1_array_char_free (struct __THE_1_array_char n) {
  free(n.d);
}
struct __THE_1_array_f32 __THE_1_array_f32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_f32) {NULL, 0};
  float *d = alloc(x * sizeof(float));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_f32) {d, x};
}
struct __THE_1_array_f32 __THE_1_array_f32_copy (const struct __THE_1_array_f32 n) {
  if (n.l == 0) return (struct __THE_1_array_f32) {NULL, 0};
  float *d = alloc(n.l * sizeof(float));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_f32) {d, n.l};
}
void __THE_1_array_f32_free (struct __THE_1_array_f32 n) {
  free(n.d);
}
struct __THE_1_array_f64 __THE_1_array_f64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_f64) {NULL, 0};
  double *d = alloc(x * sizeof(double));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_f64) {d, x};
}
struct __THE_1_array_f64 __THE_1_array_f64_copy (const struct __THE_1_array_f64 n) {
  if (n.l == 0) return (struct __THE_1_array_f64) {NULL, 0};
  double *d = alloc(n.l * sizeof(double));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_f64) {d, n.l};
}
void __THE_1_array_f64_free (struct __THE_1_array_f64 n) {
  free(n.d);
}
struct __THE_1_array_float __THE_1_array_float_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_float) {NULL, 0};
  double *d = alloc(x * sizeof(double));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_float) {d, x};
}
struct __THE_1_array_float __THE_1_array_float_copy (const struct __THE_1_array_float n) {
  if (n.l == 0) return (struct __THE_1_array_float) {NULL, 0};
  double *d = alloc(n.l * sizeof(double));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_float) {d, n.l};
}
void __THE_1_array_float_free (struct __THE_1_array_float n) {
  free(n.d);
}
struct __THE_1_array_i8 __THE_1_array_i8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i8) {NULL, 0};
  int8_t *d = alloc(x * sizeof(int8_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_i8) {d, x};
}
struct __THE_1_array_i8 __THE_1_array_i8_copy (const struct __THE_1_array_i8 n) {
  if (n.l == 0) return (struct __THE_1_array_i8) {NULL, 0};
  int8_t *d = alloc(n.l * sizeof(int8_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_i8) {d, n.l};
}
void __THE_1_array_i8_free (struct __THE_1_array_i8 n) {
  free(n.d);
}
struct __THE_1_array_i16 __THE_1_array_i16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i16) {NULL, 0};
  int16_t *d = alloc(x * sizeof(int16_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_i16) {d, x};
}
struct __THE_1_array_i16 __THE_1_array_i16_copy (const struct __THE_1_array_i16 n) {
  if (n.l == 0) return (struct __THE_1_array_i16) {NULL, 0};
  int16_t *d = alloc(n.l * sizeof(int16_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_i16) {d, n.l};
}
void __THE_1_array_i16_free (struct __THE_1_array_i16 n) {
  free(n.d);
}
struct __THE_1_array_i32 __THE_1_array_i32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i32) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_i32) {d, x};
}
struct __THE_1_array_i32 __THE_1_array_i32_copy (const struct __THE_1_array_i32 n) {
  if (n.l == 0) return (struct __THE_1_array_i32) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_i32) {d, n.l};
}
void __THE_1_array_i32_free (struct __THE_1_array_i32 n) {
  free(n.d);
}
struct __THE_1_array_i64 __THE_1_array_i64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i64) {NULL, 0};
  int64_t *d = alloc(x * sizeof(int64_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int64_t);
  va_end(args);
  return (struct __THE_1_array_i64) {d, x};
}
struct __THE_1_array_i64 __THE_1_array_i64_copy (const struct __THE_1_array_i64 n) {
  if (n.l == 0) return (struct __THE_1_array_i64) {NULL, 0};
  int64_t *d = alloc(n.l * sizeof(int64_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_i64) {d, n.l};
}
void __THE_1_array_i64_free (struct __THE_1_array_i64 n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_u8 __THE_1_array_u8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u8) {NULL, 0};
  uint8_t *d = alloc(x * sizeof(uint8_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_u8) {d, x};
}
struct __THE_1_array_u8 __THE_1_array_u8_copy (const struct __THE_1_array_u8 n) {
  if (n.l == 0) return (struct __THE_1_array_u8) {NULL, 0};
  uint8_t *d = alloc(n.l * sizeof(uint8_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_u8) {d, n.l};
}
void __THE_1_array_u8_free (struct __THE_1_array_u8 n) {
  free(n.d);
}
struct __THE_1_array_u16 __THE_1_array_u16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u16) {NULL, 0};
  uint16_t *d = alloc(x * sizeof(uint16_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_u16) {d, x};
}
struct __THE_1_array_u16 __THE_1_array_u16_copy (const struct __THE_1_array_u16 n) {
  if (n.l == 0) return (struct __THE_1_array_u16) {NULL, 0};
  uint16_t *d = alloc(n.l * sizeof(uint16_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_u16) {d, n.l};
}
void __THE_1_array_u16_free (struct __THE_1_array_u16 n) {
  free(n.d);
}
struct __THE_1_array_u32 __THE_1_array_u32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u32) {NULL, 0};
  uint32_t *d = alloc(x * sizeof(uint32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, uint32_t);
  va_end(args);
  return (struct __THE_1_array_u32) {d, x};
}
struct __THE_1_array_u32 __THE_1_array_u32_copy (const struct __THE_1_array_u32 n) {
  if (n.l == 0) return (struct __THE_1_array_u32) {NULL, 0};
  uint32_t *d = alloc(n.l * sizeof(uint32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_u32) {d, n.l};
}
void __THE_1_array_u32_free (struct __THE_1_array_u32 n) {
  free(n.d);
}
struct __THE_1_array_u64 __THE_1_array_u64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u64) {NULL, 0};
  uint64_t *d = alloc(x * sizeof(uint64_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, uint64_t);
  va_end(args);
  return (struct __THE_1_array_u64) {d, x};
}
struct __THE_1_array_u64 __THE_1_array_u64_copy (const struct __THE_1_array_u64 n) {
  if (n.l == 0) return (struct __THE_1_array_u64) {NULL, 0};
  uint64_t *d = alloc(n.l * sizeof(uint64_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_u64) {d, n.l};
}
void __THE_1_array_u64_free (struct __THE_1_array_u64 n) {
  free(n.d);
}
struct __THE_1_array_array_bool __THE_1_array_array_bool_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_bool) {NULL, 0};
  struct __THE_1_array_bool *d = alloc(x * sizeof(struct __THE_1_array_bool));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_bool);
  va_end(args);
  return (struct __THE_1_array_array_bool) {d, x};
}
struct __THE_1_array_array_bool __THE_1_array_array_bool_copy (const struct __THE_1_array_array_bool n) {
  if (n.l == 0) return (struct __THE_1_array_array_bool) {NULL, 0};
  struct __THE_1_array_bool *d = alloc(n.l * sizeof(struct __THE_1_array_bool));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_bool_copy(n.d[i]);
  return (struct __THE_1_array_array_bool) {d, n.l};
}
void __THE_1_array_array_bool_free (struct __THE_1_array_array_bool n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_bool_free((struct __THE_1_array_bool) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_byte __THE_1_array_array_byte_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_byte) {NULL, 0};
  struct __THE_1_array_byte *d = alloc(x * sizeof(struct __THE_1_array_byte));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_byte);
  va_end(args);
  return (struct __THE_1_array_array_byte) {d, x};
}
struct __THE_1_array_array_byte __THE_1_array_array_byte_copy (const struct __THE_1_array_array_byte n) {
  if (n.l == 0) return (struct __THE_1_array_array_byte) {NULL, 0};
  struct __THE_1_array_byte *d = alloc(n.l * sizeof(struct __THE_1_array_byte));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_byte_copy(n.d[i]);
  return (struct __THE_1_array_array_byte) {d, n.l};
}
void __THE_1_array_array_byte_free (struct __THE_1_array_array_byte n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_byte_free((struct __THE_1_array_byte) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_char __THE_1_array_array_char_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_char) {NULL, 0};
  struct __THE_1_array_char *d = alloc(x * sizeof(struct __THE_1_array_char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_char);
  va_end(args);
  return (struct __THE_1_array_array_char) {d, x};
}
struct __THE_1_array_array_char __THE_1_array_array_char_copy (const struct __THE_1_array_array_char n) {
  if (n.l == 0) return (struct __THE_1_array_array_char) {NULL, 0};
  struct __THE_1_array_char *d = alloc(n.l * sizeof(struct __THE_1_array_char));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_char_copy(n.d[i]);
  return (struct __THE_1_array_array_char) {d, n.l};
}
void __THE_1_array_array_char_free (struct __THE_1_array_array_char n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_char_free((struct __THE_1_array_char) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_f32 __THE_1_array_array_f32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_f32) {NULL, 0};
  struct __THE_1_array_f32 *d = alloc(x * sizeof(struct __THE_1_array_f32));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_f32);
  va_end(args);
  return (struct __THE_1_array_array_f32) {d, x};
}
struct __THE_1_array_array_f32 __THE_1_array_array_f32_copy (const struct __THE_1_array_array_f32 n) {
  if (n.l == 0) return (struct __THE_1_array_array_f32) {NULL, 0};
  struct __THE_1_array_f32 *d = alloc(n.l * sizeof(struct __THE_1_array_f32));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_f32_copy(n.d[i]);
  return (struct __THE_1_array_array_f32) {d, n.l};
}
void __THE_1_array_array_f32_free (struct __THE_1_array_array_f32 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_f32_free((struct __THE_1_array_f32) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_f64 __THE_1_array_array_f64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_f64) {NULL, 0};
  struct __THE_1_array_f64 *d = alloc(x * sizeof(struct __THE_1_array_f64));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_f64);
  va_end(args);
  return (struct __THE_1_array_array_f64) {d, x};
}
struct __THE_1_array_array_f64 __THE_1_array_array_f64_copy (const struct __THE_1_array_array_f64 n) {
  if (n.l == 0) return (struct __THE_1_array_array_f64) {NULL, 0};
  struct __THE_1_array_f64 *d = alloc(n.l * sizeof(struct __THE_1_array_f64));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_f64_copy(n.d[i]);
  return (struct __THE_1_array_array_f64) {d, n.l};
}
void __THE_1_array_array_f64_free (struct __THE_1_array_array_f64 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_f64_free((struct __THE_1_array_f64) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_float __THE_1_array_array_float_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_float) {NULL, 0};
  struct __THE_1_array_float *d = alloc(x * sizeof(struct __THE_1_array_float));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_float);
  va_end(args);
  return (struct __THE_1_array_array_float) {d, x};
}
struct __THE_1_array_array_float __THE_1_array_array_float_copy (const struct __THE_1_array_array_float n) {
  if (n.l == 0) return (struct __THE_1_array_array_float) {NULL, 0};
  struct __THE_1_array_float *d = alloc(n.l * sizeof(struct __THE_1_array_float));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_float_copy(n.d[i]);
  return (struct __THE_1_array_array_float) {d, n.l};
}
void __THE_1_array_array_float_free (struct __THE_1_array_array_float n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_float_free((struct __THE_1_array_float) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_i8 __THE_1_array_array_i8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_i8) {NULL, 0};
  struct __THE_1_array_i8 *d = alloc(x * sizeof(struct __THE_1_array_i8));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_i8);
  va_end(args);
  return (struct __THE_1_array_array_i8) {d, x};
}
struct __THE_1_array_array_i8 __THE_1_array_array_i8_copy (const struct __THE_1_array_array_i8 n) {
  if (n.l == 0) return (struct __THE_1_array_array_i8) {NULL, 0};
  struct __THE_1_array_i8 *d = alloc(n.l * sizeof(struct __THE_1_array_i8));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_i8_copy(n.d[i]);
  return (struct __THE_1_array_array_i8) {d, n.l};
}
void __THE_1_array_array_i8_free (struct __THE_1_array_array_i8 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_i8_free((struct __THE_1_array_i8) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_i16 __THE_1_array_array_i16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_i16) {NULL, 0};
  struct __THE_1_array_i16 *d = alloc(x * sizeof(struct __THE_1_array_i16));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_i16);
  va_end(args);
  return (struct __THE_1_array_array_i16) {d, x};
}
struct __THE_1_array_array_i16 __THE_1_array_array_i16_copy (const struct __THE_1_array_array_i16 n) {
  if (n.l == 0) return (struct __THE_1_array_array_i16) {NULL, 0};
  struct __THE_1_array_i16 *d = alloc(n.l * sizeof(struct __THE_1_array_i16));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_i16_copy(n.d[i]);
  return (struct __THE_1_array_array_i16) {d, n.l};
}
void __THE_1_array_array_i16_free (struct __THE_1_array_array_i16 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_i16_free((struct __THE_1_array_i16) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_i32 __THE_1_array_array_i32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_i32) {NULL, 0};
  struct __THE_1_array_i32 *d = alloc(x * sizeof(struct __THE_1_array_i32));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_i32);
  va_end(args);
  return (struct __THE_1_array_array_i32) {d, x};
}
struct __THE_1_array_array_i32 __THE_1_array_array_i32_copy (const struct __THE_1_array_array_i32 n) {
  if (n.l == 0) return (struct __THE_1_array_array_i32) {NULL, 0};
  struct __THE_1_array_i32 *d = alloc(n.l * sizeof(struct __THE_1_array_i32));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_i32_copy(n.d[i]);
  return (struct __THE_1_array_array_i32) {d, n.l};
}
void __THE_1_array_array_i32_free (struct __THE_1_array_array_i32 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_i32_free((struct __THE_1_array_i32) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_i64 __THE_1_array_array_i64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_i64) {NULL, 0};
  struct __THE_1_array_i64 *d = alloc(x * sizeof(struct __THE_1_array_i64));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_i64);
  va_end(args);
  return (struct __THE_1_array_array_i64) {d, x};
}
struct __THE_1_array_array_i64 __THE_1_array_array_i64_copy (const struct __THE_1_array_array_i64 n) {
  if (n.l == 0) return (struct __THE_1_array_array_i64) {NULL, 0};
  struct __THE_1_array_i64 *d = alloc(n.l * sizeof(struct __THE_1_array_i64));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_i64_copy(n.d[i]);
  return (struct __THE_1_array_array_i64) {d, n.l};
}
void __THE_1_array_array_i64_free (struct __THE_1_array_array_i64 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_i64_free((struct __THE_1_array_i64) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(x * sizeof(struct __THE_1_array_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_int);
  va_end(args);
  return (struct __THE_1_array_array_int) {d, x};
}
struct __THE_1_array_array_int __THE_1_array_array_int_copy (const struct __THE_1_array_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(n.l * sizeof(struct __THE_1_array_int));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_int_copy(n.d[i]);
  return (struct __THE_1_array_array_int) {d, n.l};
}
void __THE_1_array_array_int_free (struct __THE_1_array_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_int_free((struct __THE_1_array_int) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_u8 __THE_1_array_array_u8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_u8) {NULL, 0};
  struct __THE_1_array_u8 *d = alloc(x * sizeof(struct __THE_1_array_u8));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_u8);
  va_end(args);
  return (struct __THE_1_array_array_u8) {d, x};
}
struct __THE_1_array_array_u8 __THE_1_array_array_u8_copy (const struct __THE_1_array_array_u8 n) {
  if (n.l == 0) return (struct __THE_1_array_array_u8) {NULL, 0};
  struct __THE_1_array_u8 *d = alloc(n.l * sizeof(struct __THE_1_array_u8));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_u8_copy(n.d[i]);
  return (struct __THE_1_array_array_u8) {d, n.l};
}
void __THE_1_array_array_u8_free (struct __THE_1_array_array_u8 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_u8_free((struct __THE_1_array_u8) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_u16 __THE_1_array_array_u16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_u16) {NULL, 0};
  struct __THE_1_array_u16 *d = alloc(x * sizeof(struct __THE_1_array_u16));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_u16);
  va_end(args);
  return (struct __THE_1_array_array_u16) {d, x};
}
struct __THE_1_array_array_u16 __THE_1_array_array_u16_copy (const struct __THE_1_array_array_u16 n) {
  if (n.l == 0) return (struct __THE_1_array_array_u16) {NULL, 0};
  struct __THE_1_array_u16 *d = alloc(n.l * sizeof(struct __THE_1_array_u16));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_u16_copy(n.d[i]);
  return (struct __THE_1_array_array_u16) {d, n.l};
}
void __THE_1_array_array_u16_free (struct __THE_1_array_array_u16 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_u16_free((struct __THE_1_array_u16) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_u32 __THE_1_array_array_u32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_u32) {NULL, 0};
  struct __THE_1_array_u32 *d = alloc(x * sizeof(struct __THE_1_array_u32));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_u32);
  va_end(args);
  return (struct __THE_1_array_array_u32) {d, x};
}
struct __THE_1_array_array_u32 __THE_1_array_array_u32_copy (const struct __THE_1_array_array_u32 n) {
  if (n.l == 0) return (struct __THE_1_array_array_u32) {NULL, 0};
  struct __THE_1_array_u32 *d = alloc(n.l * sizeof(struct __THE_1_array_u32));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_u32_copy(n.d[i]);
  return (struct __THE_1_array_array_u32) {d, n.l};
}
void __THE_1_array_array_u32_free (struct __THE_1_array_array_u32 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_u32_free((struct __THE_1_array_u32) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_u64 __THE_1_array_array_u64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_u64) {NULL, 0};
  struct __THE_1_array_u64 *d = alloc(x * sizeof(struct __THE_1_array_u64));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_u64);
  va_end(args);
  return (struct __THE_1_array_array_u64) {d, x};
}
struct __THE_1_array_array_u64 __THE_1_array_array_u64_copy (const struct __THE_1_array_array_u64 n) {
  if (n.l == 0) return (struct __THE_1_array_array_u64) {NULL, 0};
  struct __THE_1_array_u64 *d = alloc(n.l * sizeof(struct __THE_1_array_u64));
  for (size_t i = 0; i < n.l; i++) d[i] = __THE_1_array_u64_copy(n.d[i]);
  return (struct __THE_1_array_array_u64) {d, n.l};
}
void __THE_1_array_array_u64_free (struct __THE_1_array_array_u64 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_u64_free((struct __THE_1_array_u64) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_bool __THE_1_array_array_array_bool_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_bool) {NULL, 0};
  struct __THE_1_array_array_bool *d = alloc(x * sizeof(struct __THE_1_array_array_bool));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_bool);
  va_end(args);
  return (struct __THE_1_array_array_array_bool) {d, x};
}
void __THE_1_array_array_array_bool_free (struct __THE_1_array_array_array_bool n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_bool_free((struct __THE_1_array_array_bool) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_byte __THE_1_array_array_array_byte_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_byte) {NULL, 0};
  struct __THE_1_array_array_byte *d = alloc(x * sizeof(struct __THE_1_array_array_byte));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_byte);
  va_end(args);
  return (struct __THE_1_array_array_array_byte) {d, x};
}
void __THE_1_array_array_array_byte_free (struct __THE_1_array_array_array_byte n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_byte_free((struct __THE_1_array_array_byte) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_char __THE_1_array_array_array_char_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_char) {NULL, 0};
  struct __THE_1_array_array_char *d = alloc(x * sizeof(struct __THE_1_array_array_char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_char);
  va_end(args);
  return (struct __THE_1_array_array_array_char) {d, x};
}
void __THE_1_array_array_array_char_free (struct __THE_1_array_array_array_char n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_char_free((struct __THE_1_array_array_char) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_f32 __THE_1_array_array_array_f32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_f32) {NULL, 0};
  struct __THE_1_array_array_f32 *d = alloc(x * sizeof(struct __THE_1_array_array_f32));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_f32);
  va_end(args);
  return (struct __THE_1_array_array_array_f32) {d, x};
}
void __THE_1_array_array_array_f32_free (struct __THE_1_array_array_array_f32 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_f32_free((struct __THE_1_array_array_f32) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_f64 __THE_1_array_array_array_f64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_f64) {NULL, 0};
  struct __THE_1_array_array_f64 *d = alloc(x * sizeof(struct __THE_1_array_array_f64));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_f64);
  va_end(args);
  return (struct __THE_1_array_array_array_f64) {d, x};
}
void __THE_1_array_array_array_f64_free (struct __THE_1_array_array_array_f64 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_f64_free((struct __THE_1_array_array_f64) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_float __THE_1_array_array_array_float_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_float) {NULL, 0};
  struct __THE_1_array_array_float *d = alloc(x * sizeof(struct __THE_1_array_array_float));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_float);
  va_end(args);
  return (struct __THE_1_array_array_array_float) {d, x};
}
void __THE_1_array_array_array_float_free (struct __THE_1_array_array_array_float n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_float_free((struct __THE_1_array_array_float) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_i8 __THE_1_array_array_array_i8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_i8) {NULL, 0};
  struct __THE_1_array_array_i8 *d = alloc(x * sizeof(struct __THE_1_array_array_i8));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_i8);
  va_end(args);
  return (struct __THE_1_array_array_array_i8) {d, x};
}
void __THE_1_array_array_array_i8_free (struct __THE_1_array_array_array_i8 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_i8_free((struct __THE_1_array_array_i8) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_i16 __THE_1_array_array_array_i16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_i16) {NULL, 0};
  struct __THE_1_array_array_i16 *d = alloc(x * sizeof(struct __THE_1_array_array_i16));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_i16);
  va_end(args);
  return (struct __THE_1_array_array_array_i16) {d, x};
}
void __THE_1_array_array_array_i16_free (struct __THE_1_array_array_array_i16 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_i16_free((struct __THE_1_array_array_i16) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_i32 __THE_1_array_array_array_i32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_i32) {NULL, 0};
  struct __THE_1_array_array_i32 *d = alloc(x * sizeof(struct __THE_1_array_array_i32));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_i32);
  va_end(args);
  return (struct __THE_1_array_array_array_i32) {d, x};
}
void __THE_1_array_array_array_i32_free (struct __THE_1_array_array_array_i32 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_i32_free((struct __THE_1_array_array_i32) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_i64 __THE_1_array_array_array_i64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_i64) {NULL, 0};
  struct __THE_1_array_array_i64 *d = alloc(x * sizeof(struct __THE_1_array_array_i64));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_i64);
  va_end(args);
  return (struct __THE_1_array_array_array_i64) {d, x};
}
void __THE_1_array_array_array_i64_free (struct __THE_1_array_array_array_i64 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_i64_free((struct __THE_1_array_array_i64) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_int __THE_1_array_array_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_int) {NULL, 0};
  struct __THE_1_array_array_int *d = alloc(x * sizeof(struct __THE_1_array_array_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_int);
  va_end(args);
  return (struct __THE_1_array_array_array_int) {d, x};
}
void __THE_1_array_array_array_int_free (struct __THE_1_array_array_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_int_free((struct __THE_1_array_array_int) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_u8 __THE_1_array_array_array_u8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_u8) {NULL, 0};
  struct __THE_1_array_array_u8 *d = alloc(x * sizeof(struct __THE_1_array_array_u8));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_u8);
  va_end(args);
  return (struct __THE_1_array_array_array_u8) {d, x};
}
void __THE_1_array_array_array_u8_free (struct __THE_1_array_array_array_u8 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_u8_free((struct __THE_1_array_array_u8) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_u16 __THE_1_array_array_array_u16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_u16) {NULL, 0};
  struct __THE_1_array_array_u16 *d = alloc(x * sizeof(struct __THE_1_array_array_u16));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_u16);
  va_end(args);
  return (struct __THE_1_array_array_array_u16) {d, x};
}
void __THE_1_array_array_array_u16_free (struct __THE_1_array_array_array_u16 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_u16_free((struct __THE_1_array_array_u16) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_u32 __THE_1_array_array_array_u32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_u32) {NULL, 0};
  struct __THE_1_array_array_u32 *d = alloc(x * sizeof(struct __THE_1_array_array_u32));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_u32);
  va_end(args);
  return (struct __THE_1_array_array_array_u32) {d, x};
}
void __THE_1_array_array_array_u32_free (struct __THE_1_array_array_array_u32 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_u32_free((struct __THE_1_array_array_u32) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_array_u64 __THE_1_array_array_array_u64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_array_u64) {NULL, 0};
  struct __THE_1_array_array_u64 *d = alloc(x * sizeof(struct __THE_1_array_array_u64));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_array_u64);
  va_end(args);
  return (struct __THE_1_array_array_array_u64) {d, x};
}
void __THE_1_array_array_array_u64_free (struct __THE_1_array_array_array_u64 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_array_u64_free((struct __THE_1_array_array_u64) n.d[i]);
  free(n.d);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const bool __THE_0_testBool_0 = true;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const unsigned char __THE_0_testByte_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const char __THE_0_testChar_0 = 'a';
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const float __THE_0_testF32_0 = 3.14;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const double __THE_0_testF64_0 = 3.14;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const double __THE_0_testFloat_0 = 3.14;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int8_t __THE_0_testI8_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int16_t __THE_0_testI16_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int32_t __THE_0_testI32_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int64_t __THE_0_testI64_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const int32_t __THE_0_testInt_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint8_t __THE_0_testU8_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint16_t __THE_0_testU16_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint32_t __THE_0_testU32_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const uint64_t __THE_0_testU64_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  const struct __THE_1_array_bool __THE_0_array01Bool_0 = __THE_1_array_bool_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  const struct __THE_1_array_byte __THE_0_array01Byte_0 = __THE_1_array_byte_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  const struct __THE_1_array_char __THE_0_array01Char_0 = __THE_1_array_char_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_array_f32 __THE_0_array01F32_0 = __THE_1_array_f32_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const struct __THE_1_array_f64 __THE_0_array01F64_0 = __THE_1_array_f64_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const struct __THE_1_array_float __THE_0_array01Float_0 = __THE_1_array_float_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  const struct __THE_1_array_i8 __THE_0_array01I8_0 = __THE_1_array_i8_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const struct __THE_1_array_i16 __THE_0_array01I16_0 = __THE_1_array_i16_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L9;
  const struct __THE_1_array_i32 __THE_0_array01I32_0 = __THE_1_array_i32_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  const struct __THE_1_array_i64 __THE_0_array01I64_0 = __THE_1_array_i64_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L11;
  const struct __THE_1_array_int __THE_0_array01Int_0 = __THE_1_array_int_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L12;
  const struct __THE_1_array_u8 __THE_0_array01U8_0 = __THE_1_array_u8_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L13;
  const struct __THE_1_array_u16 __THE_0_array01U16_0 = __THE_1_array_u16_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L14;
  const struct __THE_1_array_u32 __THE_0_array01U32_0 = __THE_1_array_u32_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L15;
  const struct __THE_1_array_u64 __THE_0_array01U64_0 = __THE_1_array_u64_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L16;
  const struct __THE_1_array_bool __THE_0_array02Bool_0 = __THE_1_array_bool_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L17;
  const struct __THE_1_array_byte __THE_0_array02Byte_0 = __THE_1_array_byte_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L18;
  const struct __THE_1_array_char __THE_0_array02Char_0 = __THE_1_array_char_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L19;
  const struct __THE_1_array_f32 __THE_0_array02F32_0 = __THE_1_array_f32_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L20;
  const struct __THE_1_array_f64 __THE_0_array02F64_0 = __THE_1_array_f64_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L21;
  const struct __THE_1_array_float __THE_0_array02Float_0 = __THE_1_array_float_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L22;
  const struct __THE_1_array_i8 __THE_0_array02I8_0 = __THE_1_array_i8_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L23;
  const struct __THE_1_array_i16 __THE_0_array02I16_0 = __THE_1_array_i16_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L24;
  const struct __THE_1_array_i32 __THE_0_array02I32_0 = __THE_1_array_i32_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L25;
  const struct __THE_1_array_i64 __THE_0_array02I64_0 = __THE_1_array_i64_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L26;
  const struct __THE_1_array_int __THE_0_array02Int_0 = __THE_1_array_int_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L27;
  const struct __THE_1_array_u8 __THE_0_array02U8_0 = __THE_1_array_u8_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L28;
  const struct __THE_1_array_u16 __THE_0_array02U16_0 = __THE_1_array_u16_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L29;
  const struct __THE_1_array_u32 __THE_0_array02U32_0 = __THE_1_array_u32_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L30;
  const struct __THE_1_array_u64 __THE_0_array02U64_0 = __THE_1_array_u64_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L31;
  const struct __THE_1_array_bool __THE_0_array1Bool_0 = __THE_1_array_bool_alloc(1, true);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L32;
  const struct __THE_1_array_byte __THE_0_array1Byte_0 = __THE_1_array_byte_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L33;
  const struct __THE_1_array_char __THE_0_array1Char_0 = __THE_1_array_char_alloc(1, 'a');
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L34;
  const struct __THE_1_array_f32 __THE_0_array1F32_0 = __THE_1_array_f32_alloc(1, 3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L35;
  const struct __THE_1_array_f64 __THE_0_array1F64_0 = __THE_1_array_f64_alloc(1, 3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L36;
  const struct __THE_1_array_float __THE_0_array1Float_0 = __THE_1_array_float_alloc(1, 3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L37;
  const struct __THE_1_array_i8 __THE_0_array1I8_0 = __THE_1_array_i8_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L38;
  const struct __THE_1_array_i16 __THE_0_array1I16_0 = __THE_1_array_i16_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L39;
  const struct __THE_1_array_i32 __THE_0_array1I32_0 = __THE_1_array_i32_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L40;
  const struct __THE_1_array_i64 __THE_0_array1I64_0 = __THE_1_array_i64_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L41;
  const struct __THE_1_array_int __THE_0_array1Int_0 = __THE_1_array_int_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L42;
  const struct __THE_1_array_u8 __THE_0_array1U8_0 = __THE_1_array_u8_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L43;
  const struct __THE_1_array_u16 __THE_0_array1U16_0 = __THE_1_array_u16_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L44;
  const struct __THE_1_array_u32 __THE_0_array1U32_0 = __THE_1_array_u32_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L45;
  const struct __THE_1_array_u64 __THE_0_array1U64_0 = __THE_1_array_u64_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L46;
  const struct __THE_1_array_bool __THE_0_array3Bool_0 = __THE_1_array_bool_alloc(3, true, false, __THE_0_testBool_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L47;
  const struct __THE_1_array_byte __THE_0_array3Byte_0 = __THE_1_array_byte_alloc(3, __THE_0_testByte_0, __THE_0_testByte_0, __THE_0_testByte_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L48;
  const struct __THE_1_array_char __THE_0_array3Char_0 = __THE_1_array_char_alloc(3, 'a', 'b', __THE_0_testChar_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L49;
  const struct __THE_1_array_f32 __THE_0_array3F32_0 = __THE_1_array_f32_alloc(3, __THE_0_testF32_0, __THE_0_testF32_0, __THE_0_testF32_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L50;
  const struct __THE_1_array_f64 __THE_0_array3F64_0 = __THE_1_array_f64_alloc(3, __THE_0_testF64_0, __THE_0_testF64_0, __THE_0_testF64_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L51;
  const struct __THE_1_array_float __THE_0_array3Float_0 = __THE_1_array_float_alloc(3, 3.14, 2.16, __THE_0_testFloat_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L52;
  const struct __THE_1_array_i8 __THE_0_array3I8_0 = __THE_1_array_i8_alloc(3, __THE_0_testI8_0, __THE_0_testI8_0, __THE_0_testI8_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L53;
  const struct __THE_1_array_i16 __THE_0_array3I16_0 = __THE_1_array_i16_alloc(3, __THE_0_testI16_0, __THE_0_testI16_0, __THE_0_testI16_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L54;
  const struct __THE_1_array_i32 __THE_0_array3I32_0 = __THE_1_array_i32_alloc(3, __THE_0_testI32_0, __THE_0_testI32_0, __THE_0_testI32_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L55;
  const struct __THE_1_array_i64 __THE_0_array3I64_0 = __THE_1_array_i64_alloc(3, __THE_0_testI64_0, __THE_0_testI64_0, __THE_0_testI64_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L56;
  const struct __THE_1_array_int __THE_0_array3Int_0 = __THE_1_array_int_alloc(3, 1, 2, __THE_0_testInt_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L57;
  const struct __THE_1_array_u8 __THE_0_array3U8_0 = __THE_1_array_u8_alloc(3, __THE_0_testU8_0, __THE_0_testU8_0, __THE_0_testU8_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L58;
  const struct __THE_1_array_u16 __THE_0_array3U16_0 = __THE_1_array_u16_alloc(3, __THE_0_testU16_0, __THE_0_testU16_0, __THE_0_testU16_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L59;
  const struct __THE_1_array_u32 __THE_0_array3U32_0 = __THE_1_array_u32_alloc(3, __THE_0_testU32_0, __THE_0_testU32_0, __THE_0_testU32_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L60;
  const struct __THE_1_array_u64 __THE_0_array3U64_0 = __THE_1_array_u64_alloc(3, __THE_0_testU64_0, __THE_0_testU64_0, __THE_0_testU64_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L61;
  const struct __THE_1_array_array_bool __THE_0_arrayArrayBool_0 = __THE_1_array_array_bool_alloc(3, __THE_1_array_bool_copy(__THE_0_array3Bool_0), __THE_1_array_bool_copy(__THE_0_array3Bool_0), __THE_1_array_bool_copy(__THE_0_array3Bool_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L62;
  const struct __THE_1_array_array_byte __THE_0_arrayArrayByte_0 = __THE_1_array_array_byte_alloc(3, __THE_1_array_byte_copy(__THE_0_array3Byte_0), __THE_1_array_byte_copy(__THE_0_array3Byte_0), __THE_1_array_byte_copy(__THE_0_array3Byte_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L63;
  const struct __THE_1_array_array_char __THE_0_arrayArrayChar_0 = __THE_1_array_array_char_alloc(3, __THE_1_array_char_copy(__THE_0_array3Char_0), __THE_1_array_char_copy(__THE_0_array3Char_0), __THE_1_array_char_copy(__THE_0_array3Char_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L64;
  const struct __THE_1_array_array_f32 __THE_0_arrayArrayF32_0 = __THE_1_array_array_f32_alloc(3, __THE_1_array_f32_copy(__THE_0_array3F32_0), __THE_1_array_f32_copy(__THE_0_array3F32_0), __THE_1_array_f32_copy(__THE_0_array3F32_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L65;
  const struct __THE_1_array_array_f64 __THE_0_arrayArrayF64_0 = __THE_1_array_array_f64_alloc(3, __THE_1_array_f64_copy(__THE_0_array3F64_0), __THE_1_array_f64_copy(__THE_0_array3F64_0), __THE_1_array_f64_copy(__THE_0_array3F64_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L66;
  const struct __THE_1_array_array_float __THE_0_arrayArrayFloat_0 = __THE_1_array_array_float_alloc(3, __THE_1_array_float_copy(__THE_0_array3Float_0), __THE_1_array_float_copy(__THE_0_array3Float_0), __THE_1_array_float_copy(__THE_0_array3Float_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L67;
  const struct __THE_1_array_array_i8 __THE_0_arrayArrayI8_0 = __THE_1_array_array_i8_alloc(3, __THE_1_array_i8_copy(__THE_0_array3I8_0), __THE_1_array_i8_copy(__THE_0_array3I8_0), __THE_1_array_i8_copy(__THE_0_array3I8_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L68;
  const struct __THE_1_array_array_i16 __THE_0_arrayArrayI16_0 = __THE_1_array_array_i16_alloc(3, __THE_1_array_i16_copy(__THE_0_array3I16_0), __THE_1_array_i16_copy(__THE_0_array3I16_0), __THE_1_array_i16_copy(__THE_0_array3I16_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L69;
  const struct __THE_1_array_array_i32 __THE_0_arrayArrayI32_0 = __THE_1_array_array_i32_alloc(3, __THE_1_array_i32_copy(__THE_0_array3I32_0), __THE_1_array_i32_copy(__THE_0_array3I32_0), __THE_1_array_i32_copy(__THE_0_array3I32_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L70;
  const struct __THE_1_array_array_i64 __THE_0_arrayArrayI64_0 = __THE_1_array_array_i64_alloc(3, __THE_1_array_i64_copy(__THE_0_array3I64_0), __THE_1_array_i64_copy(__THE_0_array3I64_0), __THE_1_array_i64_copy(__THE_0_array3I64_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L71;
  const struct __THE_1_array_array_int __THE_0_arrayArrayInt_0 = __THE_1_array_array_int_alloc(3, __THE_1_array_int_copy(__THE_0_array3Int_0), __THE_1_array_int_copy(__THE_0_array3Int_0), __THE_1_array_int_copy(__THE_0_array3Int_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L72;
  const struct __THE_1_array_array_u8 __THE_0_arrayArrayU8_0 = __THE_1_array_array_u8_alloc(3, __THE_1_array_u8_copy(__THE_0_array3U8_0), __THE_1_array_u8_copy(__THE_0_array3U8_0), __THE_1_array_u8_copy(__THE_0_array3U8_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L73;
  const struct __THE_1_array_array_u16 __THE_0_arrayArrayU16_0 = __THE_1_array_array_u16_alloc(3, __THE_1_array_u16_copy(__THE_0_array3U16_0), __THE_1_array_u16_copy(__THE_0_array3U16_0), __THE_1_array_u16_copy(__THE_0_array3U16_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L74;
  const struct __THE_1_array_array_u32 __THE_0_arrayArrayU32_0 = __THE_1_array_array_u32_alloc(3, __THE_1_array_u32_copy(__THE_0_array3U32_0), __THE_1_array_u32_copy(__THE_0_array3U32_0), __THE_1_array_u32_copy(__THE_0_array3U32_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L75;
  const struct __THE_1_array_array_u64 __THE_0_arrayArrayU64_0 = __THE_1_array_array_u64_alloc(3, __THE_1_array_u64_copy(__THE_0_array3U64_0), __THE_1_array_u64_copy(__THE_0_array3U64_0), __THE_1_array_u64_copy(__THE_0_array3U64_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L76;
  const struct __THE_1_array_array_array_bool __THE_0_arrayArrayArrayBool_0 = __THE_1_array_array_array_bool_alloc(3, __THE_1_array_array_bool_copy(__THE_0_arrayArrayBool_0), __THE_1_array_array_bool_copy(__THE_0_arrayArrayBool_0), __THE_1_array_array_bool_copy(__THE_0_arrayArrayBool_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L77;
  const struct __THE_1_array_array_array_byte __THE_0_arrayArrayArrayByte_0 = __THE_1_array_array_array_byte_alloc(3, __THE_1_array_array_byte_copy(__THE_0_arrayArrayByte_0), __THE_1_array_array_byte_copy(__THE_0_arrayArrayByte_0), __THE_1_array_array_byte_copy(__THE_0_arrayArrayByte_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L78;
  const struct __THE_1_array_array_array_char __THE_0_arrayArrayArrayChar_0 = __THE_1_array_array_array_char_alloc(3, __THE_1_array_array_char_copy(__THE_0_arrayArrayChar_0), __THE_1_array_array_char_copy(__THE_0_arrayArrayChar_0), __THE_1_array_array_char_copy(__THE_0_arrayArrayChar_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L79;
  const struct __THE_1_array_array_array_f32 __THE_0_arrayArrayArrayF32_0 = __THE_1_array_array_array_f32_alloc(3, __THE_1_array_array_f32_copy(__THE_0_arrayArrayF32_0), __THE_1_array_array_f32_copy(__THE_0_arrayArrayF32_0), __THE_1_array_array_f32_copy(__THE_0_arrayArrayF32_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L80;
  const struct __THE_1_array_array_array_f64 __THE_0_arrayArrayArrayF64_0 = __THE_1_array_array_array_f64_alloc(3, __THE_1_array_array_f64_copy(__THE_0_arrayArrayF64_0), __THE_1_array_array_f64_copy(__THE_0_arrayArrayF64_0), __THE_1_array_array_f64_copy(__THE_0_arrayArrayF64_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L81;
  const struct __THE_1_array_array_array_float __THE_0_arrayArrayArrayFloat_0 = __THE_1_array_array_array_float_alloc(3, __THE_1_array_array_float_copy(__THE_0_arrayArrayFloat_0), __THE_1_array_array_float_copy(__THE_0_arrayArrayFloat_0), __THE_1_array_array_float_copy(__THE_0_arrayArrayFloat_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L82;
  const struct __THE_1_array_array_array_i8 __THE_0_arrayArrayArrayI8_0 = __THE_1_array_array_array_i8_alloc(3, __THE_1_array_array_i8_copy(__THE_0_arrayArrayI8_0), __THE_1_array_array_i8_copy(__THE_0_arrayArrayI8_0), __THE_1_array_array_i8_copy(__THE_0_arrayArrayI8_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L83;
  const struct __THE_1_array_array_array_i16 __THE_0_arrayArrayArrayI16_0 = __THE_1_array_array_array_i16_alloc(3, __THE_1_array_array_i16_copy(__THE_0_arrayArrayI16_0), __THE_1_array_array_i16_copy(__THE_0_arrayArrayI16_0), __THE_1_array_array_i16_copy(__THE_0_arrayArrayI16_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L84;
  const struct __THE_1_array_array_array_i32 __THE_0_arrayArrayArrayI32_0 = __THE_1_array_array_array_i32_alloc(3, __THE_1_array_array_i32_copy(__THE_0_arrayArrayI32_0), __THE_1_array_array_i32_copy(__THE_0_arrayArrayI32_0), __THE_1_array_array_i32_copy(__THE_0_arrayArrayI32_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L85;
  const struct __THE_1_array_array_array_i64 __THE_0_arrayArrayArrayI64_0 = __THE_1_array_array_array_i64_alloc(3, __THE_1_array_array_i64_copy(__THE_0_arrayArrayI64_0), __THE_1_array_array_i64_copy(__THE_0_arrayArrayI64_0), __THE_1_array_array_i64_copy(__THE_0_arrayArrayI64_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L86;
  const struct __THE_1_array_array_array_int __THE_0_arrayArrayArrayInt_0 = __THE_1_array_array_array_int_alloc(3, __THE_1_array_array_int_copy(__THE_0_arrayArrayInt_0), __THE_1_array_array_int_copy(__THE_0_arrayArrayInt_0), __THE_1_array_array_int_copy(__THE_0_arrayArrayInt_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L87;
  const struct __THE_1_array_array_array_u8 __THE_0_arrayArrayArrayU8_0 = __THE_1_array_array_array_u8_alloc(3, __THE_1_array_array_u8_copy(__THE_0_arrayArrayU8_0), __THE_1_array_array_u8_copy(__THE_0_arrayArrayU8_0), __THE_1_array_array_u8_copy(__THE_0_arrayArrayU8_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L88;
  const struct __THE_1_array_array_array_u16 __THE_0_arrayArrayArrayU16_0 = __THE_1_array_array_array_u16_alloc(3, __THE_1_array_array_u16_copy(__THE_0_arrayArrayU16_0), __THE_1_array_array_u16_copy(__THE_0_arrayArrayU16_0), __THE_1_array_array_u16_copy(__THE_0_arrayArrayU16_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L89;
  const struct __THE_1_array_array_array_u32 __THE_0_arrayArrayArrayU32_0 = __THE_1_array_array_array_u32_alloc(3, __THE_1_array_array_u32_copy(__THE_0_arrayArrayU32_0), __THE_1_array_array_u32_copy(__THE_0_arrayArrayU32_0), __THE_1_array_array_u32_copy(__THE_0_arrayArrayU32_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L90;
  const struct __THE_1_array_array_array_u64 __THE_0_arrayArrayArrayU64_0 = __THE_1_array_array_array_u64_alloc(3, __THE_1_array_array_u64_copy(__THE_0_arrayArrayU64_0), __THE_1_array_array_u64_copy(__THE_0_arrayArrayU64_0), __THE_1_array_array_u64_copy(__THE_0_arrayArrayU64_0));
  __THE_1_array_array_array_u64_free((struct __THE_1_array_array_array_u64) __THE_0_arrayArrayArrayU64_0);
L90:
  __THE_1_array_array_array_u32_free((struct __THE_1_array_array_array_u32) __THE_0_arrayArrayArrayU32_0);
L89:
  __THE_1_array_array_array_u16_free((struct __THE_1_array_array_array_u16) __THE_0_arrayArrayArrayU16_0);
L88:
  __THE_1_array_array_array_u8_free((struct __THE_1_array_array_array_u8) __THE_0_arrayArrayArrayU8_0);
L87:
  __THE_1_array_array_array_int_free((struct __THE_1_array_array_array_int) __THE_0_arrayArrayArrayInt_0);
L86:
  __THE_1_array_array_array_i64_free((struct __THE_1_array_array_array_i64) __THE_0_arrayArrayArrayI64_0);
L85:
  __THE_1_array_array_array_i32_free((struct __THE_1_array_array_array_i32) __THE_0_arrayArrayArrayI32_0);
L84:
  __THE_1_array_array_array_i16_free((struct __THE_1_array_array_array_i16) __THE_0_arrayArrayArrayI16_0);
L83:
  __THE_1_array_array_array_i8_free((struct __THE_1_array_array_array_i8) __THE_0_arrayArrayArrayI8_0);
L82:
  __THE_1_array_array_array_float_free((struct __THE_1_array_array_array_float) __THE_0_arrayArrayArrayFloat_0);
L81:
  __THE_1_array_array_array_f64_free((struct __THE_1_array_array_array_f64) __THE_0_arrayArrayArrayF64_0);
L80:
  __THE_1_array_array_array_f32_free((struct __THE_1_array_array_array_f32) __THE_0_arrayArrayArrayF32_0);
L79:
  __THE_1_array_array_array_char_free((struct __THE_1_array_array_array_char) __THE_0_arrayArrayArrayChar_0);
L78:
  __THE_1_array_array_array_byte_free((struct __THE_1_array_array_array_byte) __THE_0_arrayArrayArrayByte_0);
L77:
  __THE_1_array_array_array_bool_free((struct __THE_1_array_array_array_bool) __THE_0_arrayArrayArrayBool_0);
L76:
  __THE_1_array_array_u64_free((struct __THE_1_array_array_u64) __THE_0_arrayArrayU64_0);
L75:
  __THE_1_array_array_u32_free((struct __THE_1_array_array_u32) __THE_0_arrayArrayU32_0);
L74:
  __THE_1_array_array_u16_free((struct __THE_1_array_array_u16) __THE_0_arrayArrayU16_0);
L73:
  __THE_1_array_array_u8_free((struct __THE_1_array_array_u8) __THE_0_arrayArrayU8_0);
L72:
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) __THE_0_arrayArrayInt_0);
L71:
  __THE_1_array_array_i64_free((struct __THE_1_array_array_i64) __THE_0_arrayArrayI64_0);
L70:
  __THE_1_array_array_i32_free((struct __THE_1_array_array_i32) __THE_0_arrayArrayI32_0);
L69:
  __THE_1_array_array_i16_free((struct __THE_1_array_array_i16) __THE_0_arrayArrayI16_0);
L68:
  __THE_1_array_array_i8_free((struct __THE_1_array_array_i8) __THE_0_arrayArrayI8_0);
L67:
  __THE_1_array_array_float_free((struct __THE_1_array_array_float) __THE_0_arrayArrayFloat_0);
L66:
  __THE_1_array_array_f64_free((struct __THE_1_array_array_f64) __THE_0_arrayArrayF64_0);
L65:
  __THE_1_array_array_f32_free((struct __THE_1_array_array_f32) __THE_0_arrayArrayF32_0);
L64:
  __THE_1_array_array_char_free((struct __THE_1_array_array_char) __THE_0_arrayArrayChar_0);
L63:
  __THE_1_array_array_byte_free((struct __THE_1_array_array_byte) __THE_0_arrayArrayByte_0);
L62:
  __THE_1_array_array_bool_free((struct __THE_1_array_array_bool) __THE_0_arrayArrayBool_0);
L61:
  __THE_1_array_u64_free((struct __THE_1_array_u64) __THE_0_array3U64_0);
L60:
  __THE_1_array_u32_free((struct __THE_1_array_u32) __THE_0_array3U32_0);
L59:
  __THE_1_array_u16_free((struct __THE_1_array_u16) __THE_0_array3U16_0);
L58:
  __THE_1_array_u8_free((struct __THE_1_array_u8) __THE_0_array3U8_0);
L57:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_array3Int_0);
L56:
  __THE_1_array_i64_free((struct __THE_1_array_i64) __THE_0_array3I64_0);
L55:
  __THE_1_array_i32_free((struct __THE_1_array_i32) __THE_0_array3I32_0);
L54:
  __THE_1_array_i16_free((struct __THE_1_array_i16) __THE_0_array3I16_0);
L53:
  __THE_1_array_i8_free((struct __THE_1_array_i8) __THE_0_array3I8_0);
L52:
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_0_array3Float_0);
L51:
  __THE_1_array_f64_free((struct __THE_1_array_f64) __THE_0_array3F64_0);
L50:
  __THE_1_array_f32_free((struct __THE_1_array_f32) __THE_0_array3F32_0);
L49:
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_0_array3Char_0);
L48:
  __THE_1_array_byte_free((struct __THE_1_array_byte) __THE_0_array3Byte_0);
L47:
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_0_array3Bool_0);
L46:
  __THE_1_array_u64_free((struct __THE_1_array_u64) __THE_0_array1U64_0);
L45:
  __THE_1_array_u32_free((struct __THE_1_array_u32) __THE_0_array1U32_0);
L44:
  __THE_1_array_u16_free((struct __THE_1_array_u16) __THE_0_array1U16_0);
L43:
  __THE_1_array_u8_free((struct __THE_1_array_u8) __THE_0_array1U8_0);
L42:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_array1Int_0);
L41:
  __THE_1_array_i64_free((struct __THE_1_array_i64) __THE_0_array1I64_0);
L40:
  __THE_1_array_i32_free((struct __THE_1_array_i32) __THE_0_array1I32_0);
L39:
  __THE_1_array_i16_free((struct __THE_1_array_i16) __THE_0_array1I16_0);
L38:
  __THE_1_array_i8_free((struct __THE_1_array_i8) __THE_0_array1I8_0);
L37:
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_0_array1Float_0);
L36:
  __THE_1_array_f64_free((struct __THE_1_array_f64) __THE_0_array1F64_0);
L35:
  __THE_1_array_f32_free((struct __THE_1_array_f32) __THE_0_array1F32_0);
L34:
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_0_array1Char_0);
L33:
  __THE_1_array_byte_free((struct __THE_1_array_byte) __THE_0_array1Byte_0);
L32:
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_0_array1Bool_0);
L31:
  __THE_1_array_u64_free((struct __THE_1_array_u64) __THE_0_array02U64_0);
L30:
  __THE_1_array_u32_free((struct __THE_1_array_u32) __THE_0_array02U32_0);
L29:
  __THE_1_array_u16_free((struct __THE_1_array_u16) __THE_0_array02U16_0);
L28:
  __THE_1_array_u8_free((struct __THE_1_array_u8) __THE_0_array02U8_0);
L27:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_array02Int_0);
L26:
  __THE_1_array_i64_free((struct __THE_1_array_i64) __THE_0_array02I64_0);
L25:
  __THE_1_array_i32_free((struct __THE_1_array_i32) __THE_0_array02I32_0);
L24:
  __THE_1_array_i16_free((struct __THE_1_array_i16) __THE_0_array02I16_0);
L23:
  __THE_1_array_i8_free((struct __THE_1_array_i8) __THE_0_array02I8_0);
L22:
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_0_array02Float_0);
L21:
  __THE_1_array_f64_free((struct __THE_1_array_f64) __THE_0_array02F64_0);
L20:
  __THE_1_array_f32_free((struct __THE_1_array_f32) __THE_0_array02F32_0);
L19:
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_0_array02Char_0);
L18:
  __THE_1_array_byte_free((struct __THE_1_array_byte) __THE_0_array02Byte_0);
L17:
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_0_array02Bool_0);
L16:
  __THE_1_array_u64_free((struct __THE_1_array_u64) __THE_0_array01U64_0);
L15:
  __THE_1_array_u32_free((struct __THE_1_array_u32) __THE_0_array01U32_0);
L14:
  __THE_1_array_u16_free((struct __THE_1_array_u16) __THE_0_array01U16_0);
L13:
  __THE_1_array_u8_free((struct __THE_1_array_u8) __THE_0_array01U8_0);
L12:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_array01Int_0);
L11:
  __THE_1_array_i64_free((struct __THE_1_array_i64) __THE_0_array01I64_0);
L10:
  __THE_1_array_i32_free((struct __THE_1_array_i32) __THE_0_array01I32_0);
L9:
  __THE_1_array_i16_free((struct __THE_1_array_i16) __THE_0_array01I16_0);
L8:
  __THE_1_array_i8_free((struct __THE_1_array_i8) __THE_0_array01I8_0);
L7:
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_0_array01Float_0);
L6:
  __THE_1_array_f64_free((struct __THE_1_array_f64) __THE_0_array01F64_0);
L5:
  __THE_1_array_f32_free((struct __THE_1_array_f32) __THE_0_array01F32_0);
L4:
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_0_array01Char_0);
L3:
  __THE_1_array_byte_free((struct __THE_1_array_byte) __THE_0_array01Byte_0);
L2:
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_0_array01Bool_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
