======= stdin =======
main {
  var1: (int | str) = 1;
  var2: (int | str) = "";
  var3: (int | str) = "test";
  { "key1": var1, "key2": var2, "key3": var3 };
  { "key1": 1, "key2": "", "key3": "test" };
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 1
#define TYPE_str 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_union$0;
struct __THE_1_pair$0;
struct __THE_1_map$0;

struct __THE_1_union$0 {
  int t;
  union {
    int32_t v1;
    struct str v2;
  };
};
struct __THE_1_pair$0 {
  struct str f;
  struct __THE_1_union$0 s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_union$0 __THE_1_union$0_alloc (int, ...);
struct __THE_1_union$0 __THE_1_union$0_copy (const struct __THE_1_union$0);
void __THE_1_union$0_free (struct __THE_1_union$0);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
void __THE_1_map$0_free (struct __THE_1_map$0);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_union$0 __THE_1_union$0_alloc (int t, ...) {
  struct __THE_1_union$0 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v1 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v2 = va_arg(args, struct str);
  va_end(args);
  return r;
}
struct __THE_1_union$0 __THE_1_union$0_copy (const struct __THE_1_union$0 n) {
  struct __THE_1_union$0 r = {n.t};
  if (n.t == TYPE_int) r.v1 = n.v1;
  if (n.t == TYPE_str) r.v2 = str_copy(n.v2);
  return r;
}
void __THE_1_union$0_free (struct __THE_1_union$0 n) {
  if (n.t == TYPE_str) str_free((struct str) n.v2);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, struct __THE_1_union$0)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_union$0_free((struct __THE_1_union$0) n.d[i].s);
  }
  free(n.d);
}

int main () {
  const struct __THE_1_union$0 __THE_0_var1_0 = __THE_1_union$0_alloc(TYPE_int, 1);
  const struct __THE_1_union$0 __THE_0_var2_0 = __THE_1_union$0_alloc(TYPE_str, str_alloc(""));
  const struct __THE_1_union$0 __THE_0_var3_0 = __THE_1_union$0_alloc(TYPE_str, str_alloc("test"));
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_1_map$0_alloc(3, str_alloc("key1"), __THE_1_union$0_copy(__THE_0_var1_0), str_alloc("key2"), __THE_1_union$0_copy(__THE_0_var2_0), str_alloc("key3"), __THE_1_union$0_copy(__THE_0_var3_0)));
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_1_map$0_alloc(3, str_alloc("key1"), __THE_1_union$0_alloc(TYPE_int, 1), str_alloc("key2"), __THE_1_union$0_alloc(TYPE_str, str_alloc("")), str_alloc("key3"), __THE_1_union$0_alloc(TYPE_str, str_alloc("test"))));
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_var3_0);
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_var2_0);
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_var1_0);
}
======= flags =======
======= stdout =======
