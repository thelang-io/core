======= stdin =======
fn printMap (m: int[str]) {
  print(m.cap.str() + "|" + m.len.str(), m)
}

main {
  mut test1: int[str]
  test1.reserve(100)
  mut test2 := { "key": 1 }
  test2.reserve(100)
  mut test3 := { "key1": 1, "key2": 2 }
  test3.reserve(100)

  printMap(test1)
  test1.shrink()
  printMap(test1)

  printMap(test2)
  test2.shrink()
  printMap(test2)

  printMap(test3)
  test3.shrink()
  printMap(test3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_fn$1003;
struct __THE_1_fn$1003P;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_fn$1003 {
  void (*f) (void *, struct __THE_1_fn$1003P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1003P {
  struct __THE_1_map_strMSintME n0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
size_t __THE_1_map_strMSintME_cap (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
size_t __THE_1_map_strMSintME_len (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_reserve (struct __THE_1_map_strMSintME *, int32_t);
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_shrink (struct __THE_1_map_strMSintME *);
struct str __THE_1_map_strMSintME_str (struct __THE_1_map_strMSintME);
void __THE_1_printMap_0 (void *, struct __THE_1_fn$1003P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str int_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
size_t __THE_1_map_strMSintME_cap (struct __THE_1_map_strMSintME n) {
  size_t c = n.c;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return c;
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
size_t __THE_1_map_strMSintME_len (struct __THE_1_map_strMSintME n) {
  size_t l = n.l;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return l;
}
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_reserve (struct __THE_1_map_strMSintME *n, int32_t c) {
  if (c > n->c) n->d = re_alloc(n->d, (n->c = c) * sizeof(struct __THE_1_pair_strMSintME));
  return n;
}
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_shrink (struct __THE_1_map_strMSintME *n) {
  if (n->l != n->c && n->l == 0) {
    free(n->d);
    n->d = NULL;
    n->c = 0;
  } else if (n->l != n->c) {
    n->d = re_alloc(n->d, (n->c = n->l) * sizeof(struct __THE_1_pair_strMSintME));
  }
  return n;
}
struct str __THE_1_map_strMSintME_str (struct __THE_1_map_strMSintME n) {
  struct str r = str_alloc("{");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_cstr(r, "\"");
    r = str_concat_str(r, str_escape(n.d[i].f));
    r = str_concat_cstr(r, "\": ");
    r = str_concat_str(r, int_str(n.d[i].s));
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return str_concat_cstr(r, "}");
}
void __THE_1_printMap_0 (void *px, struct __THE_1_fn$1003P p) {
  const struct __THE_1_map_strMSintME __THE_0_m_0 = p.n0;
  print(stdout, "szsz", str_concat_str(str_concat_cstr((error_stack_pos(&err_state, 2, 9), int_str(__THE_1_map_strMSintME_cap(__THE_1_map_strMSintME_copy(__THE_0_m_0)))), "|"), (error_stack_pos(&err_state, 2, 29), int_str(__THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_m_0))))), " ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_m_0)), THE_EOL);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_m_0);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1003 __THE_0_printMap_0 = (struct __THE_1_fn$1003) {&__THE_1_printMap_0, NULL, 0};
  struct __THE_1_map_strMSintME __THE_0_test1_0 = __THE_1_map_strMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  (error_stack_pos(&err_state, 7, 3), __THE_1_map_strMSintME_reserve(&__THE_0_test1_0, 100));
  struct __THE_1_map_strMSintME __THE_0_test2_0 = __THE_1_map_strMSintME_alloc(1, str_alloc("key"), 1);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 9, 3), __THE_1_map_strMSintME_reserve(&__THE_0_test2_0, 100));
  struct __THE_1_map_strMSintME __THE_0_test3_0 = __THE_1_map_strMSintME_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 2);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  (error_stack_pos(&err_state, 11, 3), __THE_1_map_strMSintME_reserve(&__THE_0_test3_0, 100));
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_copy(__THE_0_test1_0)});
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  (error_stack_pos(&err_state, 14, 3), __THE_1_map_strMSintME_shrink(&__THE_0_test1_0));
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_copy(__THE_0_test1_0)});
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_copy(__THE_0_test2_0)});
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  (error_stack_pos(&err_state, 18, 3), __THE_1_map_strMSintME_shrink(&__THE_0_test2_0));
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_copy(__THE_0_test2_0)});
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_copy(__THE_0_test3_0)});
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  (error_stack_pos(&err_state, 22, 3), __THE_1_map_strMSintME_shrink(&__THE_0_test3_0));
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$1003P) {__THE_1_map_strMSintME_copy(__THE_0_test3_0)});
L4:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test3_0);
L3:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test2_0);
L2:
  err_state.buf_idx--;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test1_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
100|0 {}
0|0 {}
100|1 {"key": 1}
1|1 {"key": 1}
100|2 {"key1": 1, "key2": 2}
2|2 {"key1": 1, "key2": 2}
