======= stdin =======
main {
  a01: bool[str]
  a02: byte[str]
  a03: char[str]
  a04: f32[str]
  a05: f64[str]
  a06: float[str]
  a07: i8[str]
  a08: i16[str]
  a09: i32[str]
  a10: i64[str]
  a11: int[str]
  a12: u8[str]
  a13: u16[str]
  a14: u32[str]
  a15: u64[str]

  b01: bool[str] = {}
  b02: byte[str] = {}
  b03: char[str] = {}
  b04: f32[str] = {}
  b05: f64[str] = {}
  b06: float[str] = {}
  b07: i8[str] = {}
  b08: i16[str] = {}
  b09: i32[str] = {}
  b10: i64[str] = {}
  b11: int[str] = {}
  b12: u8[str] = {}
  b13: u16[str] = {}
  b14: u32[str] = {}
  b15: u64[str] = {}

  c01 := { "key": true }
  c02: byte[str] = { "key": 0x0F }
  c03 := { "key": 'a' }
  c04: f32[str] = { "key": 6.32 }
  c05: f64[str] = { "key": 3.14 }
  c06 := { "key": 4.12 }
  c07: i8[str] = { "key": -1 }
  c08: i16[str] = { "key": -2 }
  c09: i32[str] = { "key": -3 }
  c10: i64[str] = { "key": -4 }
  c11 := { "key": 1 }
  c12: u8[str] = { "key": 1 }
  c13: u16[str] = { "key": 2 }
  c14: u32[str] = { "key": 3 }
  c15: u64[str] = { "key": 4 }

  d01 := { "key1": true, "key2": false }
  d02: byte[str] = { "key1": 0x0F, "key2": 0x00 }
  d03 := { "key1": 'a', "key2": 'z' }
  d04: f32[str] = { "key1": 6.32, "key2": 6.32 }
  d05: f64[str] = { "key1": 3.14, "key2": 3.14 }
  d06 := { "key1": 4.12, "key2": 4.12 }
  d07: i8[str] = { "key1": -1, "key2": -1 }
  d08: i16[str] = { "key1": -2, "key2": -2 }
  d09: i32[str] = { "key1": -3, "key2": -3 }
  d10: i64[str] = { "key1": -4, "key2": -4 }
  d11 := { "key1": 1, "key2": 1 }
  d12: u8[str] = { "key1": 1, "key2": 1 }
  d13: u16[str] = { "key1": 2, "key2": 2 }
  d14: u32[str] = { "key1": 3, "key2": 3 }
  d15: u64[str] = { "key1": 4, "key2": 4 }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_pair_strMSboolME;
struct __THE_1_map_strMSboolME;
struct __THE_1_pair_strMSbyteME;
struct __THE_1_map_strMSbyteME;
struct __THE_1_pair_strMScharME;
struct __THE_1_map_strMScharME;
struct __THE_1_pair_strMSf32ME;
struct __THE_1_map_strMSf32ME;
struct __THE_1_pair_strMSf64ME;
struct __THE_1_map_strMSf64ME;
struct __THE_1_pair_strMSfloatME;
struct __THE_1_map_strMSfloatME;
struct __THE_1_pair_strMSi8ME;
struct __THE_1_map_strMSi8ME;
struct __THE_1_pair_strMSi16ME;
struct __THE_1_map_strMSi16ME;
struct __THE_1_pair_strMSi32ME;
struct __THE_1_map_strMSi32ME;
struct __THE_1_pair_strMSi64ME;
struct __THE_1_map_strMSi64ME;
struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_pair_strMSu8ME;
struct __THE_1_map_strMSu8ME;
struct __THE_1_pair_strMSu16ME;
struct __THE_1_map_strMSu16ME;
struct __THE_1_pair_strMSu32ME;
struct __THE_1_map_strMSu32ME;
struct __THE_1_pair_strMSu64ME;
struct __THE_1_map_strMSu64ME;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_pair_strMSboolME {
  struct str f;
  bool s;
};
struct __THE_1_map_strMSboolME {
  struct __THE_1_pair_strMSboolME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSbyteME {
  struct str f;
  unsigned char s;
};
struct __THE_1_map_strMSbyteME {
  struct __THE_1_pair_strMSbyteME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMScharME {
  struct str f;
  char s;
};
struct __THE_1_map_strMScharME {
  struct __THE_1_pair_strMScharME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSf32ME {
  struct str f;
  float s;
};
struct __THE_1_map_strMSf32ME {
  struct __THE_1_pair_strMSf32ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSf64ME {
  struct str f;
  double s;
};
struct __THE_1_map_strMSf64ME {
  struct __THE_1_pair_strMSf64ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSfloatME {
  struct str f;
  double s;
};
struct __THE_1_map_strMSfloatME {
  struct __THE_1_pair_strMSfloatME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSi8ME {
  struct str f;
  int8_t s;
};
struct __THE_1_map_strMSi8ME {
  struct __THE_1_pair_strMSi8ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSi16ME {
  struct str f;
  int16_t s;
};
struct __THE_1_map_strMSi16ME {
  struct __THE_1_pair_strMSi16ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSi32ME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSi32ME {
  struct __THE_1_pair_strMSi32ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSi64ME {
  struct str f;
  int64_t s;
};
struct __THE_1_map_strMSi64ME {
  struct __THE_1_pair_strMSi64ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSu8ME {
  struct str f;
  uint8_t s;
};
struct __THE_1_map_strMSu8ME {
  struct __THE_1_pair_strMSu8ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSu16ME {
  struct str f;
  uint16_t s;
};
struct __THE_1_map_strMSu16ME {
  struct __THE_1_pair_strMSu16ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSu32ME {
  struct str f;
  uint32_t s;
};
struct __THE_1_map_strMSu32ME {
  struct __THE_1_pair_strMSu32ME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSu64ME {
  struct str f;
  uint64_t s;
};
struct __THE_1_map_strMSu64ME {
  struct __THE_1_pair_strMSu64ME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str str_alloc (const char *);
void str_free (struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_map_strMSboolME __THE_1_map_strMSboolME_alloc (int, ...);
void __THE_1_map_strMSboolME_free (struct __THE_1_map_strMSboolME);
struct __THE_1_map_strMSbyteME __THE_1_map_strMSbyteME_alloc (int, ...);
void __THE_1_map_strMSbyteME_free (struct __THE_1_map_strMSbyteME);
struct __THE_1_map_strMScharME __THE_1_map_strMScharME_alloc (int, ...);
void __THE_1_map_strMScharME_free (struct __THE_1_map_strMScharME);
struct __THE_1_map_strMSf32ME __THE_1_map_strMSf32ME_alloc (int, ...);
void __THE_1_map_strMSf32ME_free (struct __THE_1_map_strMSf32ME);
struct __THE_1_map_strMSf64ME __THE_1_map_strMSf64ME_alloc (int, ...);
void __THE_1_map_strMSf64ME_free (struct __THE_1_map_strMSf64ME);
struct __THE_1_map_strMSfloatME __THE_1_map_strMSfloatME_alloc (int, ...);
void __THE_1_map_strMSfloatME_free (struct __THE_1_map_strMSfloatME);
struct __THE_1_map_strMSi8ME __THE_1_map_strMSi8ME_alloc (int, ...);
void __THE_1_map_strMSi8ME_free (struct __THE_1_map_strMSi8ME);
struct __THE_1_map_strMSi16ME __THE_1_map_strMSi16ME_alloc (int, ...);
void __THE_1_map_strMSi16ME_free (struct __THE_1_map_strMSi16ME);
struct __THE_1_map_strMSi32ME __THE_1_map_strMSi32ME_alloc (int, ...);
void __THE_1_map_strMSi32ME_free (struct __THE_1_map_strMSi32ME);
struct __THE_1_map_strMSi64ME __THE_1_map_strMSi64ME_alloc (int, ...);
void __THE_1_map_strMSi64ME_free (struct __THE_1_map_strMSi64ME);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSu8ME __THE_1_map_strMSu8ME_alloc (int, ...);
void __THE_1_map_strMSu8ME_free (struct __THE_1_map_strMSu8ME);
struct __THE_1_map_strMSu16ME __THE_1_map_strMSu16ME_alloc (int, ...);
void __THE_1_map_strMSu16ME_free (struct __THE_1_map_strMSu16ME);
struct __THE_1_map_strMSu32ME __THE_1_map_strMSu32ME_alloc (int, ...);
void __THE_1_map_strMSu32ME_free (struct __THE_1_map_strMSu32ME);
struct __THE_1_map_strMSu64ME __THE_1_map_strMSu64ME_alloc (int, ...);
void __THE_1_map_strMSu64ME_free (struct __THE_1_map_strMSu64ME);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_map_strMSboolME __THE_1_map_strMSboolME_alloc (int x, ...) {
  struct __THE_1_pair_strMSboolME *d = alloc(x * sizeof(struct __THE_1_pair_strMSboolME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSboolME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSboolME) {d, x, x};
}
void __THE_1_map_strMSboolME_free (struct __THE_1_map_strMSboolME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSbyteME __THE_1_map_strMSbyteME_alloc (int x, ...) {
  struct __THE_1_pair_strMSbyteME *d = alloc(x * sizeof(struct __THE_1_pair_strMSbyteME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSbyteME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSbyteME) {d, x, x};
}
void __THE_1_map_strMSbyteME_free (struct __THE_1_map_strMSbyteME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMScharME __THE_1_map_strMScharME_alloc (int x, ...) {
  struct __THE_1_pair_strMScharME *d = alloc(x * sizeof(struct __THE_1_pair_strMScharME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMScharME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMScharME) {d, x, x};
}
void __THE_1_map_strMScharME_free (struct __THE_1_map_strMScharME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSf32ME __THE_1_map_strMSf32ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSf32ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSf32ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSf32ME) {va_arg(args, struct str), va_arg(args, double)};
  va_end(args);
  return (struct __THE_1_map_strMSf32ME) {d, x, x};
}
void __THE_1_map_strMSf32ME_free (struct __THE_1_map_strMSf32ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSf64ME __THE_1_map_strMSf64ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSf64ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSf64ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSf64ME) {va_arg(args, struct str), va_arg(args, double)};
  va_end(args);
  return (struct __THE_1_map_strMSf64ME) {d, x, x};
}
void __THE_1_map_strMSf64ME_free (struct __THE_1_map_strMSf64ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSfloatME __THE_1_map_strMSfloatME_alloc (int x, ...) {
  struct __THE_1_pair_strMSfloatME *d = alloc(x * sizeof(struct __THE_1_pair_strMSfloatME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSfloatME) {va_arg(args, struct str), va_arg(args, double)};
  va_end(args);
  return (struct __THE_1_map_strMSfloatME) {d, x, x};
}
void __THE_1_map_strMSfloatME_free (struct __THE_1_map_strMSfloatME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSi8ME __THE_1_map_strMSi8ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSi8ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSi8ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSi8ME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSi8ME) {d, x, x};
}
void __THE_1_map_strMSi8ME_free (struct __THE_1_map_strMSi8ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSi16ME __THE_1_map_strMSi16ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSi16ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSi16ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSi16ME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSi16ME) {d, x, x};
}
void __THE_1_map_strMSi16ME_free (struct __THE_1_map_strMSi16ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSi32ME __THE_1_map_strMSi32ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSi32ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSi32ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSi32ME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSi32ME) {d, x, x};
}
void __THE_1_map_strMSi32ME_free (struct __THE_1_map_strMSi32ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSi64ME __THE_1_map_strMSi64ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSi64ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSi64ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSi64ME) {va_arg(args, struct str), va_arg(args, int64_t)};
  va_end(args);
  return (struct __THE_1_map_strMSi64ME) {d, x, x};
}
void __THE_1_map_strMSi64ME_free (struct __THE_1_map_strMSi64ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSu8ME __THE_1_map_strMSu8ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSu8ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSu8ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSu8ME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSu8ME) {d, x, x};
}
void __THE_1_map_strMSu8ME_free (struct __THE_1_map_strMSu8ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSu16ME __THE_1_map_strMSu16ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSu16ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSu16ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSu16ME) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map_strMSu16ME) {d, x, x};
}
void __THE_1_map_strMSu16ME_free (struct __THE_1_map_strMSu16ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSu32ME __THE_1_map_strMSu32ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSu32ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSu32ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSu32ME) {va_arg(args, struct str), va_arg(args, uint32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSu32ME) {d, x, x};
}
void __THE_1_map_strMSu32ME_free (struct __THE_1_map_strMSu32ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSu64ME __THE_1_map_strMSu64ME_alloc (int x, ...) {
  struct __THE_1_pair_strMSu64ME *d = alloc(x * sizeof(struct __THE_1_pair_strMSu64ME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSu64ME) {va_arg(args, struct str), va_arg(args, uint64_t)};
  va_end(args);
  return (struct __THE_1_map_strMSu64ME) {d, x, x};
}
void __THE_1_map_strMSu64ME_free (struct __THE_1_map_strMSu64ME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct __THE_1_map_strMSboolME __THE_0_a01_0 = __THE_1_map_strMSboolME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  const struct __THE_1_map_strMSbyteME __THE_0_a02_0 = __THE_1_map_strMSbyteME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  const struct __THE_1_map_strMScharME __THE_0_a03_0 = __THE_1_map_strMScharME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_map_strMSf32ME __THE_0_a04_0 = __THE_1_map_strMSf32ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const struct __THE_1_map_strMSf64ME __THE_0_a05_0 = __THE_1_map_strMSf64ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const struct __THE_1_map_strMSfloatME __THE_0_a06_0 = __THE_1_map_strMSfloatME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  const struct __THE_1_map_strMSi8ME __THE_0_a07_0 = __THE_1_map_strMSi8ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const struct __THE_1_map_strMSi16ME __THE_0_a08_0 = __THE_1_map_strMSi16ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L9;
  const struct __THE_1_map_strMSi32ME __THE_0_a09_0 = __THE_1_map_strMSi32ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  const struct __THE_1_map_strMSi64ME __THE_0_a10_0 = __THE_1_map_strMSi64ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L11;
  const struct __THE_1_map_strMSintME __THE_0_a11_0 = __THE_1_map_strMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L12;
  const struct __THE_1_map_strMSu8ME __THE_0_a12_0 = __THE_1_map_strMSu8ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L13;
  const struct __THE_1_map_strMSu16ME __THE_0_a13_0 = __THE_1_map_strMSu16ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L14;
  const struct __THE_1_map_strMSu32ME __THE_0_a14_0 = __THE_1_map_strMSu32ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L15;
  const struct __THE_1_map_strMSu64ME __THE_0_a15_0 = __THE_1_map_strMSu64ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L16;
  const struct __THE_1_map_strMSboolME __THE_0_b01_0 = __THE_1_map_strMSboolME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L17;
  const struct __THE_1_map_strMSbyteME __THE_0_b02_0 = __THE_1_map_strMSbyteME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L18;
  const struct __THE_1_map_strMScharME __THE_0_b03_0 = __THE_1_map_strMScharME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L19;
  const struct __THE_1_map_strMSf32ME __THE_0_b04_0 = __THE_1_map_strMSf32ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L20;
  const struct __THE_1_map_strMSf64ME __THE_0_b05_0 = __THE_1_map_strMSf64ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L21;
  const struct __THE_1_map_strMSfloatME __THE_0_b06_0 = __THE_1_map_strMSfloatME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L22;
  const struct __THE_1_map_strMSi8ME __THE_0_b07_0 = __THE_1_map_strMSi8ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L23;
  const struct __THE_1_map_strMSi16ME __THE_0_b08_0 = __THE_1_map_strMSi16ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L24;
  const struct __THE_1_map_strMSi32ME __THE_0_b09_0 = __THE_1_map_strMSi32ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L25;
  const struct __THE_1_map_strMSi64ME __THE_0_b10_0 = __THE_1_map_strMSi64ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L26;
  const struct __THE_1_map_strMSintME __THE_0_b11_0 = __THE_1_map_strMSintME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L27;
  const struct __THE_1_map_strMSu8ME __THE_0_b12_0 = __THE_1_map_strMSu8ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L28;
  const struct __THE_1_map_strMSu16ME __THE_0_b13_0 = __THE_1_map_strMSu16ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L29;
  const struct __THE_1_map_strMSu32ME __THE_0_b14_0 = __THE_1_map_strMSu32ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L30;
  const struct __THE_1_map_strMSu64ME __THE_0_b15_0 = __THE_1_map_strMSu64ME_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L31;
  const struct __THE_1_map_strMSboolME __THE_0_c01_0 = __THE_1_map_strMSboolME_alloc(1, str_alloc("key"), true);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L32;
  const struct __THE_1_map_strMSbyteME __THE_0_c02_0 = __THE_1_map_strMSbyteME_alloc(1, str_alloc("key"), 0x0F);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L33;
  const struct __THE_1_map_strMScharME __THE_0_c03_0 = __THE_1_map_strMScharME_alloc(1, str_alloc("key"), 'a');
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L34;
  const struct __THE_1_map_strMSf32ME __THE_0_c04_0 = __THE_1_map_strMSf32ME_alloc(1, str_alloc("key"), 6.32);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L35;
  const struct __THE_1_map_strMSf64ME __THE_0_c05_0 = __THE_1_map_strMSf64ME_alloc(1, str_alloc("key"), 3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L36;
  const struct __THE_1_map_strMSfloatME __THE_0_c06_0 = __THE_1_map_strMSfloatME_alloc(1, str_alloc("key"), 4.12);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L37;
  const struct __THE_1_map_strMSi8ME __THE_0_c07_0 = __THE_1_map_strMSi8ME_alloc(1, str_alloc("key"), -1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L38;
  const struct __THE_1_map_strMSi16ME __THE_0_c08_0 = __THE_1_map_strMSi16ME_alloc(1, str_alloc("key"), -2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L39;
  const struct __THE_1_map_strMSi32ME __THE_0_c09_0 = __THE_1_map_strMSi32ME_alloc(1, str_alloc("key"), -3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L40;
  const struct __THE_1_map_strMSi64ME __THE_0_c10_0 = __THE_1_map_strMSi64ME_alloc(1, str_alloc("key"), -4);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L41;
  const struct __THE_1_map_strMSintME __THE_0_c11_0 = __THE_1_map_strMSintME_alloc(1, str_alloc("key"), 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L42;
  const struct __THE_1_map_strMSu8ME __THE_0_c12_0 = __THE_1_map_strMSu8ME_alloc(1, str_alloc("key"), 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L43;
  const struct __THE_1_map_strMSu16ME __THE_0_c13_0 = __THE_1_map_strMSu16ME_alloc(1, str_alloc("key"), 2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L44;
  const struct __THE_1_map_strMSu32ME __THE_0_c14_0 = __THE_1_map_strMSu32ME_alloc(1, str_alloc("key"), 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L45;
  const struct __THE_1_map_strMSu64ME __THE_0_c15_0 = __THE_1_map_strMSu64ME_alloc(1, str_alloc("key"), 4);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L46;
  const struct __THE_1_map_strMSboolME __THE_0_d01_0 = __THE_1_map_strMSboolME_alloc(2, str_alloc("key1"), true, str_alloc("key2"), false);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L47;
  const struct __THE_1_map_strMSbyteME __THE_0_d02_0 = __THE_1_map_strMSbyteME_alloc(2, str_alloc("key1"), 0x0F, str_alloc("key2"), 0x00);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L48;
  const struct __THE_1_map_strMScharME __THE_0_d03_0 = __THE_1_map_strMScharME_alloc(2, str_alloc("key1"), 'a', str_alloc("key2"), 'z');
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L49;
  const struct __THE_1_map_strMSf32ME __THE_0_d04_0 = __THE_1_map_strMSf32ME_alloc(2, str_alloc("key1"), 6.32, str_alloc("key2"), 6.32);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L50;
  const struct __THE_1_map_strMSf64ME __THE_0_d05_0 = __THE_1_map_strMSf64ME_alloc(2, str_alloc("key1"), 3.14, str_alloc("key2"), 3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L51;
  const struct __THE_1_map_strMSfloatME __THE_0_d06_0 = __THE_1_map_strMSfloatME_alloc(2, str_alloc("key1"), 4.12, str_alloc("key2"), 4.12);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L52;
  const struct __THE_1_map_strMSi8ME __THE_0_d07_0 = __THE_1_map_strMSi8ME_alloc(2, str_alloc("key1"), -1, str_alloc("key2"), -1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L53;
  const struct __THE_1_map_strMSi16ME __THE_0_d08_0 = __THE_1_map_strMSi16ME_alloc(2, str_alloc("key1"), -2, str_alloc("key2"), -2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L54;
  const struct __THE_1_map_strMSi32ME __THE_0_d09_0 = __THE_1_map_strMSi32ME_alloc(2, str_alloc("key1"), -3, str_alloc("key2"), -3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L55;
  const struct __THE_1_map_strMSi64ME __THE_0_d10_0 = __THE_1_map_strMSi64ME_alloc(2, str_alloc("key1"), -4, str_alloc("key2"), -4);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L56;
  const struct __THE_1_map_strMSintME __THE_0_d11_0 = __THE_1_map_strMSintME_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L57;
  const struct __THE_1_map_strMSu8ME __THE_0_d12_0 = __THE_1_map_strMSu8ME_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L58;
  const struct __THE_1_map_strMSu16ME __THE_0_d13_0 = __THE_1_map_strMSu16ME_alloc(2, str_alloc("key1"), 2, str_alloc("key2"), 2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L59;
  const struct __THE_1_map_strMSu32ME __THE_0_d14_0 = __THE_1_map_strMSu32ME_alloc(2, str_alloc("key1"), 3, str_alloc("key2"), 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L60;
  const struct __THE_1_map_strMSu64ME __THE_0_d15_0 = __THE_1_map_strMSu64ME_alloc(2, str_alloc("key1"), 4, str_alloc("key2"), 4);
  __THE_1_map_strMSu64ME_free((struct __THE_1_map_strMSu64ME) __THE_0_d15_0);
L60:
  __THE_1_map_strMSu32ME_free((struct __THE_1_map_strMSu32ME) __THE_0_d14_0);
L59:
  __THE_1_map_strMSu16ME_free((struct __THE_1_map_strMSu16ME) __THE_0_d13_0);
L58:
  __THE_1_map_strMSu8ME_free((struct __THE_1_map_strMSu8ME) __THE_0_d12_0);
L57:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_d11_0);
L56:
  __THE_1_map_strMSi64ME_free((struct __THE_1_map_strMSi64ME) __THE_0_d10_0);
L55:
  __THE_1_map_strMSi32ME_free((struct __THE_1_map_strMSi32ME) __THE_0_d09_0);
L54:
  __THE_1_map_strMSi16ME_free((struct __THE_1_map_strMSi16ME) __THE_0_d08_0);
L53:
  __THE_1_map_strMSi8ME_free((struct __THE_1_map_strMSi8ME) __THE_0_d07_0);
L52:
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) __THE_0_d06_0);
L51:
  __THE_1_map_strMSf64ME_free((struct __THE_1_map_strMSf64ME) __THE_0_d05_0);
L50:
  __THE_1_map_strMSf32ME_free((struct __THE_1_map_strMSf32ME) __THE_0_d04_0);
L49:
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) __THE_0_d03_0);
L48:
  __THE_1_map_strMSbyteME_free((struct __THE_1_map_strMSbyteME) __THE_0_d02_0);
L47:
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) __THE_0_d01_0);
L46:
  __THE_1_map_strMSu64ME_free((struct __THE_1_map_strMSu64ME) __THE_0_c15_0);
L45:
  __THE_1_map_strMSu32ME_free((struct __THE_1_map_strMSu32ME) __THE_0_c14_0);
L44:
  __THE_1_map_strMSu16ME_free((struct __THE_1_map_strMSu16ME) __THE_0_c13_0);
L43:
  __THE_1_map_strMSu8ME_free((struct __THE_1_map_strMSu8ME) __THE_0_c12_0);
L42:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_c11_0);
L41:
  __THE_1_map_strMSi64ME_free((struct __THE_1_map_strMSi64ME) __THE_0_c10_0);
L40:
  __THE_1_map_strMSi32ME_free((struct __THE_1_map_strMSi32ME) __THE_0_c09_0);
L39:
  __THE_1_map_strMSi16ME_free((struct __THE_1_map_strMSi16ME) __THE_0_c08_0);
L38:
  __THE_1_map_strMSi8ME_free((struct __THE_1_map_strMSi8ME) __THE_0_c07_0);
L37:
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) __THE_0_c06_0);
L36:
  __THE_1_map_strMSf64ME_free((struct __THE_1_map_strMSf64ME) __THE_0_c05_0);
L35:
  __THE_1_map_strMSf32ME_free((struct __THE_1_map_strMSf32ME) __THE_0_c04_0);
L34:
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) __THE_0_c03_0);
L33:
  __THE_1_map_strMSbyteME_free((struct __THE_1_map_strMSbyteME) __THE_0_c02_0);
L32:
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) __THE_0_c01_0);
L31:
  __THE_1_map_strMSu64ME_free((struct __THE_1_map_strMSu64ME) __THE_0_b15_0);
L30:
  __THE_1_map_strMSu32ME_free((struct __THE_1_map_strMSu32ME) __THE_0_b14_0);
L29:
  __THE_1_map_strMSu16ME_free((struct __THE_1_map_strMSu16ME) __THE_0_b13_0);
L28:
  __THE_1_map_strMSu8ME_free((struct __THE_1_map_strMSu8ME) __THE_0_b12_0);
L27:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_b11_0);
L26:
  __THE_1_map_strMSi64ME_free((struct __THE_1_map_strMSi64ME) __THE_0_b10_0);
L25:
  __THE_1_map_strMSi32ME_free((struct __THE_1_map_strMSi32ME) __THE_0_b09_0);
L24:
  __THE_1_map_strMSi16ME_free((struct __THE_1_map_strMSi16ME) __THE_0_b08_0);
L23:
  __THE_1_map_strMSi8ME_free((struct __THE_1_map_strMSi8ME) __THE_0_b07_0);
L22:
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) __THE_0_b06_0);
L21:
  __THE_1_map_strMSf64ME_free((struct __THE_1_map_strMSf64ME) __THE_0_b05_0);
L20:
  __THE_1_map_strMSf32ME_free((struct __THE_1_map_strMSf32ME) __THE_0_b04_0);
L19:
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) __THE_0_b03_0);
L18:
  __THE_1_map_strMSbyteME_free((struct __THE_1_map_strMSbyteME) __THE_0_b02_0);
L17:
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) __THE_0_b01_0);
L16:
  __THE_1_map_strMSu64ME_free((struct __THE_1_map_strMSu64ME) __THE_0_a15_0);
L15:
  __THE_1_map_strMSu32ME_free((struct __THE_1_map_strMSu32ME) __THE_0_a14_0);
L14:
  __THE_1_map_strMSu16ME_free((struct __THE_1_map_strMSu16ME) __THE_0_a13_0);
L13:
  __THE_1_map_strMSu8ME_free((struct __THE_1_map_strMSu8ME) __THE_0_a12_0);
L12:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_a11_0);
L11:
  __THE_1_map_strMSi64ME_free((struct __THE_1_map_strMSi64ME) __THE_0_a10_0);
L10:
  __THE_1_map_strMSi32ME_free((struct __THE_1_map_strMSi32ME) __THE_0_a09_0);
L9:
  __THE_1_map_strMSi16ME_free((struct __THE_1_map_strMSi16ME) __THE_0_a08_0);
L8:
  __THE_1_map_strMSi8ME_free((struct __THE_1_map_strMSi8ME) __THE_0_a07_0);
L7:
  __THE_1_map_strMSfloatME_free((struct __THE_1_map_strMSfloatME) __THE_0_a06_0);
L6:
  __THE_1_map_strMSf64ME_free((struct __THE_1_map_strMSf64ME) __THE_0_a05_0);
L5:
  __THE_1_map_strMSf32ME_free((struct __THE_1_map_strMSf32ME) __THE_0_a04_0);
L4:
  __THE_1_map_strMScharME_free((struct __THE_1_map_strMScharME) __THE_0_a03_0);
L3:
  __THE_1_map_strMSbyteME_free((struct __THE_1_map_strMSbyteME) __THE_0_a02_0);
L2:
  __THE_1_map_strMSboolME_free((struct __THE_1_map_strMSboolME) __THE_0_a01_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
