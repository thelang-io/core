======= stdin =======
fn testFn () {}

main {
  anyRawFn: any = testFn
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_fn$1000 1

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};

struct __THE_1_fn$1000;
struct __THE_1_any_fn$1000;

struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_any_fn$1000 {
  struct __THE_1_fn$1000 d;
};

void *alloc (size_t);
void any_free (struct any);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_testFn_0 (void *);
struct any __THE_1_any_fn$1000_alloc (struct __THE_1_fn$1000);
struct any __THE_1_any_fn$1000_copy (const struct any);
void __THE_1_any_fn$1000_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_testFn_0 (void *px) {
}
struct any __THE_1_any_fn$1000_alloc (struct __THE_1_fn$1000 d) {
  size_t l = sizeof(struct __THE_1_any_fn$1000);
  struct __THE_1_any_fn$1000 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_fn$1000, r, l, &__THE_1_any_fn$1000_copy, &__THE_1_any_fn$1000_free};
}
struct any __THE_1_any_fn$1000_copy (const struct any n) {
  struct __THE_1_any_fn$1000 *o = n.d;
  struct __THE_1_any_fn$1000 *r = alloc(n.l);
  r->d = __THE_1_fn$1000_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_fn$1000_free (struct any _n) {
  struct __THE_1_any_fn$1000 *n = _n.d;
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n->d);
  free(n);
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_testFn_0 = (struct __THE_1_fn$1000) {&__THE_1_testFn_0, NULL, 0};
  const struct any __THE_0_anyRawFn_0 = __THE_1_any_fn$1000_alloc(__THE_1_fn$1000_copy(__THE_0_testFn_0));
  any_free((struct any) __THE_0_anyRawFn_0);
}
======= flags =======
======= stdout =======
