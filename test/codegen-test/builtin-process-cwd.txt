======= stdin =======
main {
  test1 := process_cwd()
  test2 := process_cwd().len
  test3 := "CWD: " + process_cwd()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <direct.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
void str_free (struct str);
size_t str_len (struct str);
struct str process_cwd ();

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
size_t str_len (struct str s) {
  size_t l = s.l;
  free(s.d);
  return l;
}
struct str process_cwd () {
  char buf[256];
  #ifdef THE_OS_WINDOWS
    char *p = _getcwd(buf, 256);
  #else
    char *p = getcwd(buf, 256);
  #endif
  if (p == NULL) {
    fprintf(stderr, "Error: failed to retrieve current working directory information" THE_EOL);
    exit(EXIT_FAILURE);
  }
  return str_alloc(buf);
}

int main () {
  const struct str __THE_0_test1_0 = process_cwd();
  const int32_t __THE_0_test2_0 = str_len(process_cwd());
  const struct str __THE_0_test3_0 = cstr_concat_str("CWD: ", process_cwd());
  str_free((struct str) __THE_0_test3_0);
  str_free((struct str) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
