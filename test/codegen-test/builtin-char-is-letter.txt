======= stdin =======
main {
  print('\0'.isLetter)
  print('\n'.isLetter)
  print('\t'.isLetter)
  print('A'.isLetter)
  print('a'.isLetter)
  print('0'.isLetter)
  print('9'.isLetter)
  print('_'.isLetter)
  print('-'.isLetter)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

bool char_isLetter (char);
void print (FILE *, const char *, ...);
void str_free (struct str);

bool char_isLetter (char c) {
  return isalpha(c);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  print(stdout, "tz", char_isLetter('\0'), THE_EOL);
  print(stdout, "tz", char_isLetter('\n'), THE_EOL);
  print(stdout, "tz", char_isLetter('\t'), THE_EOL);
  print(stdout, "tz", char_isLetter('A'), THE_EOL);
  print(stdout, "tz", char_isLetter('a'), THE_EOL);
  print(stdout, "tz", char_isLetter('0'), THE_EOL);
  print(stdout, "tz", char_isLetter('9'), THE_EOL);
  print(stdout, "tz", char_isLetter('_'), THE_EOL);
  print(stdout, "tz", char_isLetter('-'), THE_EOL);
}
======= flags =======
======= stdout =======
false
false
false
true
true
false
false
false
false
