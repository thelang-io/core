======= stdin =======
obj Test1 {
  test2: Test2
}

obj Test2 {
  s: str
}

fn testCall () str {
  return "call"
}

main {
  mut test := "test"
  mut refTest := ref test
  mut test2 := Test2{s: "hello"}
  mut test1 := Test1{test2: test2}

  a01 := "test".len
  a02 := ("test" + "test").len
  a03 := ("test" + test).len
  a04 := (test + "test").len
  a05 := (test = "test2").len
  a06 := test.len
  a07 := test2.s.len
  a08 := test1.test2.s.len
  a09 := testCall().len
  a10 := (ref test).len
  a11 := refTest.len

  fn testCtx () {
    b03 := ("test" + test).len
    b04 := (test + "test").len
    b05 := (test = "test2").len
    b06 := test.len
    b07 := test2.s.len
    b08 := test1.test2.s.len
    b09 := testCall().len
    b10 := (ref test).len
    b11 := refTest.len
  }

  testCtx()
}
======= code =======
#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
int32_t str_len (struct str);
struct str str_realloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *c, struct str s) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
void str_free (struct str s) {
  free(s.c);
}
int32_t str_len (struct str s) {
  int32_t l = s.l;
  free(s.c);
  return l;
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.c);
  return s2;
}

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_fn$0;
struct __THE_1_fn$1;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  struct __THE_1_Test2_0 *__THE_0_test2;
};
struct __THE_1_Test2_0 {
  struct str __THE_0_s;
};
struct __THE_1_fn$0 {
  struct str (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  struct __THE_1_Test1_0 **__THE_0_test1_0;
  struct __THE_1_Test2_0 **__THE_0_test2_0;
  struct str **__THE_0_refTest_0;
  struct str *__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0;
};

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str);
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct str __THE_1_testCall_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtestCtx_0 (void *);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtestCtx_0X);

struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *__THE_0_test2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  r->__THE_0_test2 = __THE_0_test2;
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) o->__THE_0_test2);
  free(o);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str __THE_0_s) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  r->__THE_0_s = __THE_0_s;
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *o) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  r->__THE_0_s = str_copy(o->__THE_0_s);
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *o) {
  str_free((struct str) o->__THE_0_s);
  free(o);
}
struct str __THE_1_testCall_0 (void *px) {
  return str_alloc("call");
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  struct __THE_1_Test2_0 **__THE_0_test2_0 = x->__THE_0_test2_0;
  struct str **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  struct str *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  const int32_t __THE_0_b03_0 = str_len(cstr_concat_str("test", str_copy(*__THE_0_test_0)));
  const int32_t __THE_0_b04_0 = str_len(str_concat_cstr(str_copy(*__THE_0_test_0), "test"));
  const int32_t __THE_0_b05_0 = str_len(str_copy(*__THE_0_test_0 = str_realloc(*__THE_0_test_0, str_alloc("test2"))));
  const int32_t __THE_0_b06_0 = str_len(str_copy(*__THE_0_test_0));
  const int32_t __THE_0_b07_0 = str_len(str_copy((*__THE_0_test2_0)->__THE_0_s));
  const int32_t __THE_0_b08_0 = str_len(str_copy((*__THE_0_test1_0)->__THE_0_test2->__THE_0_s));
  const int32_t __THE_0_b09_0 = str_len((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x));
  const int32_t __THE_0_b10_0 = str_len(str_copy(*__THE_0_test_0));
  const int32_t __THE_0_b11_0 = str_len(str_copy(**__THE_0_refTest_0));
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testCall_0 = (struct __THE_1_fn$0) {&__THE_1_testCall_0, NULL, 0};
  struct str __THE_0_test_0 = str_alloc("test");
  struct str *__THE_0_refTest_0 = &__THE_0_test_0;
  struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc(str_alloc("hello"));
  struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_1_Test2_0_copy(__THE_0_test2_0));
  const int32_t __THE_0_a01_0 = str_len(str_alloc("test"));
  const int32_t __THE_0_a02_0 = str_len(str_alloc("testtest"));
  const int32_t __THE_0_a03_0 = str_len(cstr_concat_str("test", str_copy(__THE_0_test_0)));
  const int32_t __THE_0_a04_0 = str_len(str_concat_cstr(str_copy(__THE_0_test_0), "test"));
  const int32_t __THE_0_a05_0 = str_len(str_copy(__THE_0_test_0 = str_realloc(__THE_0_test_0, str_alloc("test2"))));
  const int32_t __THE_0_a06_0 = str_len(str_copy(__THE_0_test_0));
  const int32_t __THE_0_a07_0 = str_len(str_copy(__THE_0_test2_0->__THE_0_s));
  const int32_t __THE_0_a08_0 = str_len(str_copy(__THE_0_test1_0->__THE_0_test2->__THE_0_s));
  const int32_t __THE_0_a09_0 = str_len(__THE_0_testCall_0.f(__THE_0_testCall_0.x));
  const int32_t __THE_0_a10_0 = str_len(str_copy(__THE_0_test_0));
  const int32_t __THE_0_a11_0 = str_len(str_copy(*__THE_0_refTest_0));
  const struct __THE_1_fn$1 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test1_0, &__THE_0_test2_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_0_mainSDtestCtx_0.f(__THE_0_mainSDtestCtx_0.x);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtestCtx_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
  str_free((struct str) __THE_0_test_0);
}
======= flags =======
======= stdout =======
