======= stdin =======
obj Test { mut a: int }

main {
  loop i := Test{a: 0}; i.a < 3; i.a++ {
  }

  mut a := Test{a: 0}
  loop ; a.a < 3; a.a++ {
  }

  mut b := Test{a: 0}
  loop ; b.a < 3; {
    b.a++
  }

  mut c := Test{a: 0}
  loop {
    if c.a == 3 {
      break
    }

    c.a++
  }

  loop d := Test{a: 0}; d.a < 3; {
    d.a++
  }

  loop e := Test{a: 0};; e.a++ {
    if e.a == 3 {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_test_Test_0;

struct __THE_1_test_Test_0 {
  int32_t __THE_0_a;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_alloc (int32_t);
void __THE_1_test_Test_0_free (struct __THE_1_test_Test_0 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_test_Test_0 *r = alloc(sizeof(struct __THE_1_test_Test_0));
  struct __THE_1_test_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_test_Test_0));
  return r;
}
void __THE_1_test_Test_0_free (struct __THE_1_test_Test_0 *n) {
  free(n);
}

int main () {
  {
    struct __THE_1_test_Test_0 *__THE_0_i_0 = __THE_1_test_Test_0_alloc(0);
    for (; __THE_0_i_0->__THE_0_a < 3; __THE_0_i_0->__THE_0_a++) {
    }
    __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_i_0);
  }
  struct __THE_1_test_Test_0 *__THE_0_a_0 = __THE_1_test_Test_0_alloc(0);
  for (; __THE_0_a_0->__THE_0_a < 3; __THE_0_a_0->__THE_0_a++) {
  }
  struct __THE_1_test_Test_0 *__THE_0_b_0 = __THE_1_test_Test_0_alloc(0);
  while (__THE_0_b_0->__THE_0_a < 3) {
    __THE_0_b_0->__THE_0_a++;
  }
  struct __THE_1_test_Test_0 *__THE_0_c_0 = __THE_1_test_Test_0_alloc(0);
  while (1) {
    if (__THE_0_c_0->__THE_0_a == 3) {
      break;
    }
    __THE_0_c_0->__THE_0_a++;
  }
  {
    struct __THE_1_test_Test_0 *__THE_0_d_0 = __THE_1_test_Test_0_alloc(0);
    for (; __THE_0_d_0->__THE_0_a < 3;) {
      __THE_0_d_0->__THE_0_a++;
    }
    __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_d_0);
  }
  {
    struct __THE_1_test_Test_0 *__THE_0_e_0 = __THE_1_test_Test_0_alloc(0);
    for (;; __THE_0_e_0->__THE_0_a++) {
      if (__THE_0_e_0->__THE_0_a == 3) {
        break;
      }
    }
    __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_e_0);
  }
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_c_0);
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_b_0);
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
