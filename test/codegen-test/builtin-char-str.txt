======= stdin =======
obj Test1 {
  c: char
}

fn testCall () char {
  return 'd'
}

main {
  test := 'a'
  refTest := ref test
  test1 := Test1{c: 'b'}
  mut test2 := 'c'

  v1 := test.str()
  v2 := test1.c.str()
  v3 := (test2 = 'e').str()
  v4 := testCall().str()
  v5 := (1 > 2 ? 'f' : 'g').str()
  v6 := 'h'.str()
  v7 := (ref test).str()
  v8 := refTest.str()

  fn testCtx () {
    v11 := test.str()
    v12 := test1.c.str()
    v13 := (test2 = 'm').str()
    v14 := testCall().str()
    v15 := (ref test).str()
    v16 := refTest.str()
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  const char __THE_0_c;
};
struct __THE_1_fn$1000 {
  char (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  char *__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0;
  const char **__THE_0_refTest_0;
  const char *__THE_0_test_0;
  const struct __THE_1_fn$1000 *__THE_0_testCall_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
struct str char_str (char);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (char);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
char __THE_1_testCall_0 (void *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_mainSDtestCtx_0 (void *);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_mainSDtestCtx_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (char __THE_0_c) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_c};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  free(n);
}
char __THE_1_testCall_0 (void *px) {
  return 'd';
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  char *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const char **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const char *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$1000 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  const struct str __THE_0_v11_0 = char_str(*__THE_0_test_0);
  const struct str __THE_0_v12_0 = char_str((*__THE_0_test1_0)->__THE_0_c);
  const struct str __THE_0_v13_0 = char_str((*__THE_0_test2_0 = 'm'));
  const struct str __THE_0_v14_0 = char_str((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x));
  const struct str __THE_0_v15_0 = char_str((*__THE_0_test_0));
  const struct str __THE_0_v16_0 = char_str(**__THE_0_refTest_0);
  str_free((struct str) __THE_0_v16_0);
  str_free((struct str) __THE_0_v15_0);
  str_free((struct str) __THE_0_v14_0);
  str_free((struct str) __THE_0_v13_0);
  str_free((struct str) __THE_0_v12_0);
  str_free((struct str) __THE_0_v11_0);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_testCall_0 = (struct __THE_1_fn$1000) {&__THE_1_testCall_0, NULL, 0};
  const char __THE_0_test_0 = 'a';
  const char *__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc('b');
  char __THE_0_test2_0 = 'c';
  const struct str __THE_0_v1_0 = char_str(__THE_0_test_0);
  const struct str __THE_0_v2_0 = char_str(__THE_0_test1_0->__THE_0_c);
  const struct str __THE_0_v3_0 = char_str((__THE_0_test2_0 = 'e'));
  const struct str __THE_0_v4_0 = char_str(__THE_0_testCall_0.f(__THE_0_testCall_0.x));
  const struct str __THE_0_v5_0 = char_str((1 > 2 ? 'f' : 'g'));
  const struct str __THE_0_v6_0 = char_str('h');
  const struct str __THE_0_v7_0 = char_str((__THE_0_test_0));
  const struct str __THE_0_v8_0 = char_str(*__THE_0_refTest_0);
  const struct __THE_1_fn$1001 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_mainSDtestCtx_0);
  str_free((struct str) __THE_0_v8_0);
  str_free((struct str) __THE_0_v7_0);
  str_free((struct str) __THE_0_v6_0);
  str_free((struct str) __THE_0_v5_0);
  str_free((struct str) __THE_0_v4_0);
  str_free((struct str) __THE_0_v3_0);
  str_free((struct str) __THE_0_v2_0);
  str_free((struct str) __THE_0_v1_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
