======= stdin =======
obj TestObj { a: int }

obj TestArrInt { a: int[] }
obj TestBool { a: bool }
obj TestChar { a: char }
obj TestFloat { a: float }
obj TestInt { a: int }
obj TestObj { a: TestObj }
obj TestOptInt { a: int? }
obj TestOptRefInt { a: (ref int)? }
obj TestRefInt { a: ref int }
obj TestRefOptInt { a: ref int? }
obj TestStr { a: str }

main {
  intA := 1
  intB := 2
  optIntA: int? = intA
  optIntB: int?
  optRefIntA: (ref int)? = ref intA
  optRefIntB: (ref int)?

  TestArrInt{a: [1, 2]} == TestArrInt{a: [1, 2]}
  TestArrInt{a: [1, 2]} != TestArrInt{a: [3, 4]}
  TestBool{a: true} == TestBool{a: true}
  TestBool{a: true} != TestBool{a: false}
  TestChar{a: 'a'} == TestChar{a: 'a'}
  TestChar{a: 'a'} != TestChar{a: 'c'}
  TestFloat{a: 3.14} == TestFloat{a: 3.14}
  TestFloat{a: 3.14} != TestFloat{a: 2.16}
  TestInt{a: 1} == TestInt{a: 1}
  TestInt{a: 1} != TestInt{a: 0}
  TestOptInt{a: optIntA} == TestOptInt{a: optIntA}
  TestOptInt{a: optIntA} != TestOptInt{a: optIntB}
  TestOptRefInt{a: optRefIntA} == TestOptRefInt{a: optRefIntA}
  TestOptRefInt{a: optRefIntA} != TestOptRefInt{a: optRefIntB}
  TestRefInt{a: ref intA} == TestRefInt{a: ref intA}
  TestRefInt{a: ref intA} != TestRefInt{a: ref intB}
  TestRefOptInt{a: ref optIntA} == TestRefOptInt{a: ref optIntA}
  TestRefOptInt{a: ref optIntA} != TestRefOptInt{a: ref optIntB}
  TestStr{a: "test1"} == TestStr{a: "test1"}
  TestStr{a: "test1"} != TestStr{a: "test2"}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_int;
struct __THE_1_TestArrInt_0;
struct __THE_1_TestBool_0;
struct __THE_1_TestChar_0;
struct __THE_1_TestFloat_0;
struct __THE_1_TestInt_0;
struct __THE_1_TestOptInt_0;
struct __THE_1_TestOptRefInt_0;
struct __THE_1_TestRefInt_0;
struct __THE_1_TestRefOptInt_0;
struct __THE_1_TestStr_0;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_TestArrInt_0 {
  const struct __THE_1_array_int __THE_0_a;
};
struct __THE_1_TestBool_0 {
  const bool __THE_0_a;
};
struct __THE_1_TestChar_0 {
  const char __THE_0_a;
};
struct __THE_1_TestFloat_0 {
  const double __THE_0_a;
};
struct __THE_1_TestInt_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_TestOptInt_0 {
  const int32_t *__THE_0_a;
};
struct __THE_1_TestOptRefInt_0 {
  const int32_t **__THE_0_a;
};
struct __THE_1_TestRefInt_0 {
  const int32_t *__THE_0_a;
};
struct __THE_1_TestRefOptInt_0 {
  const int32_t **__THE_0_a;
};
struct __THE_1_TestStr_0 {
  const struct str __THE_0_a;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
bool __THE_1_array_int_eq (struct __THE_1_array_int, struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
bool __THE_1_array_int_ne (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_TestArrInt_0 *__THE_1_TestArrInt_0_alloc (struct __THE_1_array_int);
bool __THE_1_TestArrInt_0_eq (struct __THE_1_TestArrInt_0 *, struct __THE_1_TestArrInt_0 *);
void __THE_1_TestArrInt_0_free (struct __THE_1_TestArrInt_0 *);
bool __THE_1_TestArrInt_0_ne (struct __THE_1_TestArrInt_0 *, struct __THE_1_TestArrInt_0 *);
struct __THE_1_TestBool_0 *__THE_1_TestBool_0_alloc (bool);
bool __THE_1_TestBool_0_eq (struct __THE_1_TestBool_0 *, struct __THE_1_TestBool_0 *);
void __THE_1_TestBool_0_free (struct __THE_1_TestBool_0 *);
bool __THE_1_TestBool_0_ne (struct __THE_1_TestBool_0 *, struct __THE_1_TestBool_0 *);
struct __THE_1_TestChar_0 *__THE_1_TestChar_0_alloc (char);
bool __THE_1_TestChar_0_eq (struct __THE_1_TestChar_0 *, struct __THE_1_TestChar_0 *);
void __THE_1_TestChar_0_free (struct __THE_1_TestChar_0 *);
bool __THE_1_TestChar_0_ne (struct __THE_1_TestChar_0 *, struct __THE_1_TestChar_0 *);
struct __THE_1_TestFloat_0 *__THE_1_TestFloat_0_alloc (double);
bool __THE_1_TestFloat_0_eq (struct __THE_1_TestFloat_0 *, struct __THE_1_TestFloat_0 *);
void __THE_1_TestFloat_0_free (struct __THE_1_TestFloat_0 *);
bool __THE_1_TestFloat_0_ne (struct __THE_1_TestFloat_0 *, struct __THE_1_TestFloat_0 *);
struct __THE_1_TestInt_0 *__THE_1_TestInt_0_alloc (int32_t);
bool __THE_1_TestInt_0_eq (struct __THE_1_TestInt_0 *, struct __THE_1_TestInt_0 *);
void __THE_1_TestInt_0_free (struct __THE_1_TestInt_0 *);
bool __THE_1_TestInt_0_ne (struct __THE_1_TestInt_0 *, struct __THE_1_TestInt_0 *);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
struct __THE_1_TestOptInt_0 *__THE_1_TestOptInt_0_alloc (int32_t *);
bool __THE_1_TestOptInt_0_eq (struct __THE_1_TestOptInt_0 *, struct __THE_1_TestOptInt_0 *);
void __THE_1_TestOptInt_0_free (struct __THE_1_TestOptInt_0 *);
bool __THE_1_TestOptInt_0_ne (struct __THE_1_TestOptInt_0 *, struct __THE_1_TestOptInt_0 *);
int32_t **__THE_1_opt_ref_int_alloc (int32_t *);
int32_t **__THE_1_opt_ref_int_copy (const int32_t **);
bool __THE_1_opt_ref_int_eq (int32_t **, int32_t **);
void __THE_1_opt_ref_int_free (int32_t **);
bool __THE_1_opt_ref_int_ne (int32_t **, int32_t **);
struct __THE_1_TestOptRefInt_0 *__THE_1_TestOptRefInt_0_alloc (int32_t **);
bool __THE_1_TestOptRefInt_0_eq (struct __THE_1_TestOptRefInt_0 *, struct __THE_1_TestOptRefInt_0 *);
void __THE_1_TestOptRefInt_0_free (struct __THE_1_TestOptRefInt_0 *);
bool __THE_1_TestOptRefInt_0_ne (struct __THE_1_TestOptRefInt_0 *, struct __THE_1_TestOptRefInt_0 *);
struct __THE_1_TestRefInt_0 *__THE_1_TestRefInt_0_alloc (int32_t *);
bool __THE_1_TestRefInt_0_eq (struct __THE_1_TestRefInt_0 *, struct __THE_1_TestRefInt_0 *);
void __THE_1_TestRefInt_0_free (struct __THE_1_TestRefInt_0 *);
bool __THE_1_TestRefInt_0_ne (struct __THE_1_TestRefInt_0 *, struct __THE_1_TestRefInt_0 *);
struct __THE_1_TestRefOptInt_0 *__THE_1_TestRefOptInt_0_alloc (int32_t **);
bool __THE_1_TestRefOptInt_0_eq (struct __THE_1_TestRefOptInt_0 *, struct __THE_1_TestRefOptInt_0 *);
void __THE_1_TestRefOptInt_0_free (struct __THE_1_TestRefOptInt_0 *);
bool __THE_1_TestRefOptInt_0_ne (struct __THE_1_TestRefOptInt_0 *, struct __THE_1_TestRefOptInt_0 *);
struct __THE_1_TestStr_0 *__THE_1_TestStr_0_alloc (struct str);
bool __THE_1_TestStr_0_eq (struct __THE_1_TestStr_0 *, struct __THE_1_TestStr_0 *);
void __THE_1_TestStr_0_free (struct __THE_1_TestStr_0 *);
bool __THE_1_TestStr_0_ne (struct __THE_1_TestStr_0 *, struct __THE_1_TestStr_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
bool __THE_1_array_int_eq (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
bool __THE_1_array_int_ne (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
struct __THE_1_TestArrInt_0 *__THE_1_TestArrInt_0_alloc (struct __THE_1_array_int __THE_0_a) {
  struct __THE_1_TestArrInt_0 *r = alloc(sizeof(struct __THE_1_TestArrInt_0));
  struct __THE_1_TestArrInt_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestArrInt_0));
  return r;
}
bool __THE_1_TestArrInt_0_eq (struct __THE_1_TestArrInt_0 *n1, struct __THE_1_TestArrInt_0 *n2) {
  bool r = __THE_1_array_int_eq(__THE_1_array_int_copy(n1->__THE_0_a), __THE_1_array_int_copy(n2->__THE_0_a));
  __THE_1_TestArrInt_0_free((struct __THE_1_TestArrInt_0 *) n1);
  __THE_1_TestArrInt_0_free((struct __THE_1_TestArrInt_0 *) n2);
  return r;
}
void __THE_1_TestArrInt_0_free (struct __THE_1_TestArrInt_0 *n) {
  __THE_1_array_int_free((struct __THE_1_array_int) n->__THE_0_a);
  free(n);
}
bool __THE_1_TestArrInt_0_ne (struct __THE_1_TestArrInt_0 *n1, struct __THE_1_TestArrInt_0 *n2) {
  bool r = __THE_1_array_int_ne(__THE_1_array_int_copy(n1->__THE_0_a), __THE_1_array_int_copy(n2->__THE_0_a));
  __THE_1_TestArrInt_0_free((struct __THE_1_TestArrInt_0 *) n1);
  __THE_1_TestArrInt_0_free((struct __THE_1_TestArrInt_0 *) n2);
  return r;
}
struct __THE_1_TestBool_0 *__THE_1_TestBool_0_alloc (bool __THE_0_a) {
  struct __THE_1_TestBool_0 *r = alloc(sizeof(struct __THE_1_TestBool_0));
  struct __THE_1_TestBool_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestBool_0));
  return r;
}
bool __THE_1_TestBool_0_eq (struct __THE_1_TestBool_0 *n1, struct __THE_1_TestBool_0 *n2) {
  bool r = n1->__THE_0_a == n2->__THE_0_a;
  __THE_1_TestBool_0_free((struct __THE_1_TestBool_0 *) n1);
  __THE_1_TestBool_0_free((struct __THE_1_TestBool_0 *) n2);
  return r;
}
void __THE_1_TestBool_0_free (struct __THE_1_TestBool_0 *n) {
  free(n);
}
bool __THE_1_TestBool_0_ne (struct __THE_1_TestBool_0 *n1, struct __THE_1_TestBool_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestBool_0_free((struct __THE_1_TestBool_0 *) n1);
  __THE_1_TestBool_0_free((struct __THE_1_TestBool_0 *) n2);
  return r;
}
struct __THE_1_TestChar_0 *__THE_1_TestChar_0_alloc (char __THE_0_a) {
  struct __THE_1_TestChar_0 *r = alloc(sizeof(struct __THE_1_TestChar_0));
  struct __THE_1_TestChar_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestChar_0));
  return r;
}
bool __THE_1_TestChar_0_eq (struct __THE_1_TestChar_0 *n1, struct __THE_1_TestChar_0 *n2) {
  bool r = n1->__THE_0_a == n2->__THE_0_a;
  __THE_1_TestChar_0_free((struct __THE_1_TestChar_0 *) n1);
  __THE_1_TestChar_0_free((struct __THE_1_TestChar_0 *) n2);
  return r;
}
void __THE_1_TestChar_0_free (struct __THE_1_TestChar_0 *n) {
  free(n);
}
bool __THE_1_TestChar_0_ne (struct __THE_1_TestChar_0 *n1, struct __THE_1_TestChar_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestChar_0_free((struct __THE_1_TestChar_0 *) n1);
  __THE_1_TestChar_0_free((struct __THE_1_TestChar_0 *) n2);
  return r;
}
struct __THE_1_TestFloat_0 *__THE_1_TestFloat_0_alloc (double __THE_0_a) {
  struct __THE_1_TestFloat_0 *r = alloc(sizeof(struct __THE_1_TestFloat_0));
  struct __THE_1_TestFloat_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestFloat_0));
  return r;
}
bool __THE_1_TestFloat_0_eq (struct __THE_1_TestFloat_0 *n1, struct __THE_1_TestFloat_0 *n2) {
  bool r = n1->__THE_0_a == n2->__THE_0_a;
  __THE_1_TestFloat_0_free((struct __THE_1_TestFloat_0 *) n1);
  __THE_1_TestFloat_0_free((struct __THE_1_TestFloat_0 *) n2);
  return r;
}
void __THE_1_TestFloat_0_free (struct __THE_1_TestFloat_0 *n) {
  free(n);
}
bool __THE_1_TestFloat_0_ne (struct __THE_1_TestFloat_0 *n1, struct __THE_1_TestFloat_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestFloat_0_free((struct __THE_1_TestFloat_0 *) n1);
  __THE_1_TestFloat_0_free((struct __THE_1_TestFloat_0 *) n2);
  return r;
}
struct __THE_1_TestInt_0 *__THE_1_TestInt_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestInt_0 *r = alloc(sizeof(struct __THE_1_TestInt_0));
  struct __THE_1_TestInt_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestInt_0));
  return r;
}
bool __THE_1_TestInt_0_eq (struct __THE_1_TestInt_0 *n1, struct __THE_1_TestInt_0 *n2) {
  bool r = n1->__THE_0_a == n2->__THE_0_a;
  __THE_1_TestInt_0_free((struct __THE_1_TestInt_0 *) n1);
  __THE_1_TestInt_0_free((struct __THE_1_TestInt_0 *) n2);
  return r;
}
void __THE_1_TestInt_0_free (struct __THE_1_TestInt_0 *n) {
  free(n);
}
bool __THE_1_TestInt_0_ne (struct __THE_1_TestInt_0 *n1, struct __THE_1_TestInt_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestInt_0_free((struct __THE_1_TestInt_0 *) n1);
  __THE_1_TestInt_0_free((struct __THE_1_TestInt_0 *) n2);
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
struct __THE_1_TestOptInt_0 *__THE_1_TestOptInt_0_alloc (int32_t *__THE_0_a) {
  struct __THE_1_TestOptInt_0 *r = alloc(sizeof(struct __THE_1_TestOptInt_0));
  struct __THE_1_TestOptInt_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestOptInt_0));
  return r;
}
bool __THE_1_TestOptInt_0_eq (struct __THE_1_TestOptInt_0 *n1, struct __THE_1_TestOptInt_0 *n2) {
  bool r = __THE_1_opt_int_eq(__THE_1_opt_int_copy(n1->__THE_0_a), __THE_1_opt_int_copy(n2->__THE_0_a));
  __THE_1_TestOptInt_0_free((struct __THE_1_TestOptInt_0 *) n1);
  __THE_1_TestOptInt_0_free((struct __THE_1_TestOptInt_0 *) n2);
  return r;
}
void __THE_1_TestOptInt_0_free (struct __THE_1_TestOptInt_0 *n) {
  __THE_1_opt_int_free((int32_t *) n->__THE_0_a);
  free(n);
}
bool __THE_1_TestOptInt_0_ne (struct __THE_1_TestOptInt_0 *n1, struct __THE_1_TestOptInt_0 *n2) {
  bool r = __THE_1_opt_int_ne(__THE_1_opt_int_copy(n1->__THE_0_a), __THE_1_opt_int_copy(n2->__THE_0_a));
  __THE_1_TestOptInt_0_free((struct __THE_1_TestOptInt_0 *) n1);
  __THE_1_TestOptInt_0_free((struct __THE_1_TestOptInt_0 *) n2);
  return r;
}
int32_t **__THE_1_opt_ref_int_alloc (int32_t *n) {
  int32_t **r = alloc(sizeof(int32_t *));
  *r = n;
  return r;
}
int32_t **__THE_1_opt_ref_int_copy (const int32_t **n) {
  if (n == NULL) return NULL;
  int32_t **r = alloc(sizeof(int32_t *));
  *r = *n;
  return r;
}
bool __THE_1_opt_ref_int_eq (int32_t **n1, int32_t **n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_ref_int_free((int32_t **) n1);
  __THE_1_opt_ref_int_free((int32_t **) n2);
  return r;
}
void __THE_1_opt_ref_int_free (int32_t **n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_ref_int_ne (int32_t **n1, int32_t **n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_ref_int_free((int32_t **) n1);
  __THE_1_opt_ref_int_free((int32_t **) n2);
  return r;
}
struct __THE_1_TestOptRefInt_0 *__THE_1_TestOptRefInt_0_alloc (int32_t **__THE_0_a) {
  struct __THE_1_TestOptRefInt_0 *r = alloc(sizeof(struct __THE_1_TestOptRefInt_0));
  struct __THE_1_TestOptRefInt_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestOptRefInt_0));
  return r;
}
bool __THE_1_TestOptRefInt_0_eq (struct __THE_1_TestOptRefInt_0 *n1, struct __THE_1_TestOptRefInt_0 *n2) {
  bool r = __THE_1_opt_ref_int_eq(__THE_1_opt_ref_int_copy(n1->__THE_0_a), __THE_1_opt_ref_int_copy(n2->__THE_0_a));
  __THE_1_TestOptRefInt_0_free((struct __THE_1_TestOptRefInt_0 *) n1);
  __THE_1_TestOptRefInt_0_free((struct __THE_1_TestOptRefInt_0 *) n2);
  return r;
}
void __THE_1_TestOptRefInt_0_free (struct __THE_1_TestOptRefInt_0 *n) {
  __THE_1_opt_ref_int_free((int32_t **) n->__THE_0_a);
  free(n);
}
bool __THE_1_TestOptRefInt_0_ne (struct __THE_1_TestOptRefInt_0 *n1, struct __THE_1_TestOptRefInt_0 *n2) {
  bool r = __THE_1_opt_ref_int_ne(__THE_1_opt_ref_int_copy(n1->__THE_0_a), __THE_1_opt_ref_int_copy(n2->__THE_0_a));
  __THE_1_TestOptRefInt_0_free((struct __THE_1_TestOptRefInt_0 *) n1);
  __THE_1_TestOptRefInt_0_free((struct __THE_1_TestOptRefInt_0 *) n2);
  return r;
}
struct __THE_1_TestRefInt_0 *__THE_1_TestRefInt_0_alloc (int32_t *__THE_0_a) {
  struct __THE_1_TestRefInt_0 *r = alloc(sizeof(struct __THE_1_TestRefInt_0));
  struct __THE_1_TestRefInt_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestRefInt_0));
  return r;
}
bool __THE_1_TestRefInt_0_eq (struct __THE_1_TestRefInt_0 *n1, struct __THE_1_TestRefInt_0 *n2) {
  bool r = n1->__THE_0_a == n2->__THE_0_a;
  __THE_1_TestRefInt_0_free((struct __THE_1_TestRefInt_0 *) n1);
  __THE_1_TestRefInt_0_free((struct __THE_1_TestRefInt_0 *) n2);
  return r;
}
void __THE_1_TestRefInt_0_free (struct __THE_1_TestRefInt_0 *n) {
  free(n);
}
bool __THE_1_TestRefInt_0_ne (struct __THE_1_TestRefInt_0 *n1, struct __THE_1_TestRefInt_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestRefInt_0_free((struct __THE_1_TestRefInt_0 *) n1);
  __THE_1_TestRefInt_0_free((struct __THE_1_TestRefInt_0 *) n2);
  return r;
}
struct __THE_1_TestRefOptInt_0 *__THE_1_TestRefOptInt_0_alloc (int32_t **__THE_0_a) {
  struct __THE_1_TestRefOptInt_0 *r = alloc(sizeof(struct __THE_1_TestRefOptInt_0));
  struct __THE_1_TestRefOptInt_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestRefOptInt_0));
  return r;
}
bool __THE_1_TestRefOptInt_0_eq (struct __THE_1_TestRefOptInt_0 *n1, struct __THE_1_TestRefOptInt_0 *n2) {
  bool r = __THE_1_opt_int_eq(__THE_1_opt_int_copy(n1->__THE_0_a), __THE_1_opt_int_copy(n2->__THE_0_a));
  __THE_1_TestRefOptInt_0_free((struct __THE_1_TestRefOptInt_0 *) n1);
  __THE_1_TestRefOptInt_0_free((struct __THE_1_TestRefOptInt_0 *) n2);
  return r;
}
void __THE_1_TestRefOptInt_0_free (struct __THE_1_TestRefOptInt_0 *n) {
  free(n);
}
bool __THE_1_TestRefOptInt_0_ne (struct __THE_1_TestRefOptInt_0 *n1, struct __THE_1_TestRefOptInt_0 *n2) {
  bool r = __THE_1_opt_int_ne(__THE_1_opt_int_copy(n1->__THE_0_a), __THE_1_opt_int_copy(n2->__THE_0_a));
  __THE_1_TestRefOptInt_0_free((struct __THE_1_TestRefOptInt_0 *) n1);
  __THE_1_TestRefOptInt_0_free((struct __THE_1_TestRefOptInt_0 *) n2);
  return r;
}
struct __THE_1_TestStr_0 *__THE_1_TestStr_0_alloc (struct str __THE_0_a) {
  struct __THE_1_TestStr_0 *r = alloc(sizeof(struct __THE_1_TestStr_0));
  struct __THE_1_TestStr_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestStr_0));
  return r;
}
bool __THE_1_TestStr_0_eq (struct __THE_1_TestStr_0 *n1, struct __THE_1_TestStr_0 *n2) {
  bool r = str_eq_str(str_copy(n1->__THE_0_a), str_copy(n2->__THE_0_a));
  __THE_1_TestStr_0_free((struct __THE_1_TestStr_0 *) n1);
  __THE_1_TestStr_0_free((struct __THE_1_TestStr_0 *) n2);
  return r;
}
void __THE_1_TestStr_0_free (struct __THE_1_TestStr_0 *n) {
  str_free((struct str) n->__THE_0_a);
  free(n);
}
bool __THE_1_TestStr_0_ne (struct __THE_1_TestStr_0 *n1, struct __THE_1_TestStr_0 *n2) {
  bool r = str_ne_str(str_copy(n1->__THE_0_a), str_copy(n2->__THE_0_a));
  __THE_1_TestStr_0_free((struct __THE_1_TestStr_0 *) n1);
  __THE_1_TestStr_0_free((struct __THE_1_TestStr_0 *) n2);
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const int32_t __THE_0_intA_0 = 1;
  const int32_t __THE_0_intB_0 = 2;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const int32_t *__THE_0_optIntA_0 = __THE_1_opt_int_alloc(__THE_0_intA_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  const int32_t *__THE_0_optIntB_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  const int32_t **__THE_0_optRefIntA_0 = __THE_1_opt_ref_int_alloc(&__THE_0_intA_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const int32_t **__THE_0_optRefIntB_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestArrInt_0_eq(__THE_1_TestArrInt_0_alloc(__THE_1_array_int_alloc(2, 1, 2)), __THE_1_TestArrInt_0_alloc(__THE_1_array_int_alloc(2, 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestArrInt_0_ne(__THE_1_TestArrInt_0_alloc(__THE_1_array_int_alloc(2, 1, 2)), __THE_1_TestArrInt_0_alloc(__THE_1_array_int_alloc(2, 3, 4)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestBool_0_eq(__THE_1_TestBool_0_alloc(true), __THE_1_TestBool_0_alloc(true));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestBool_0_ne(__THE_1_TestBool_0_alloc(true), __THE_1_TestBool_0_alloc(false));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestChar_0_eq(__THE_1_TestChar_0_alloc('a'), __THE_1_TestChar_0_alloc('a'));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestChar_0_ne(__THE_1_TestChar_0_alloc('a'), __THE_1_TestChar_0_alloc('c'));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestFloat_0_eq(__THE_1_TestFloat_0_alloc(3.14), __THE_1_TestFloat_0_alloc(3.14));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestFloat_0_ne(__THE_1_TestFloat_0_alloc(3.14), __THE_1_TestFloat_0_alloc(2.16));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestInt_0_eq(__THE_1_TestInt_0_alloc(1), __THE_1_TestInt_0_alloc(1));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestInt_0_ne(__THE_1_TestInt_0_alloc(1), __THE_1_TestInt_0_alloc(0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestOptInt_0_eq(__THE_1_TestOptInt_0_alloc(__THE_1_opt_int_copy(__THE_0_optIntA_0)), __THE_1_TestOptInt_0_alloc(__THE_1_opt_int_copy(__THE_0_optIntA_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestOptInt_0_ne(__THE_1_TestOptInt_0_alloc(__THE_1_opt_int_copy(__THE_0_optIntA_0)), __THE_1_TestOptInt_0_alloc(__THE_1_opt_int_copy(__THE_0_optIntB_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestOptRefInt_0_eq(__THE_1_TestOptRefInt_0_alloc(__THE_1_opt_ref_int_copy(__THE_0_optRefIntA_0)), __THE_1_TestOptRefInt_0_alloc(__THE_1_opt_ref_int_copy(__THE_0_optRefIntA_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestOptRefInt_0_ne(__THE_1_TestOptRefInt_0_alloc(__THE_1_opt_ref_int_copy(__THE_0_optRefIntA_0)), __THE_1_TestOptRefInt_0_alloc(__THE_1_opt_ref_int_copy(__THE_0_optRefIntB_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestRefInt_0_eq(__THE_1_TestRefInt_0_alloc(&__THE_0_intA_0), __THE_1_TestRefInt_0_alloc(&__THE_0_intA_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestRefInt_0_ne(__THE_1_TestRefInt_0_alloc(&__THE_0_intA_0), __THE_1_TestRefInt_0_alloc(&__THE_0_intB_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestRefOptInt_0_eq(__THE_1_TestRefOptInt_0_alloc(&__THE_0_optIntA_0), __THE_1_TestRefOptInt_0_alloc(&__THE_0_optIntA_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestRefOptInt_0_ne(__THE_1_TestRefOptInt_0_alloc(&__THE_0_optIntA_0), __THE_1_TestRefOptInt_0_alloc(&__THE_0_optIntB_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestStr_0_eq(__THE_1_TestStr_0_alloc(str_alloc("test1")), __THE_1_TestStr_0_alloc(str_alloc("test1")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  __THE_1_TestStr_0_ne(__THE_1_TestStr_0_alloc(str_alloc("test1")), __THE_1_TestStr_0_alloc(str_alloc("test2")));
L5:
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_optRefIntB_0);
L4:
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_optRefIntA_0);
L3:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntB_0);
L2:
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntA_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
