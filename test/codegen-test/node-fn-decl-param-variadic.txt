======= stdin =======
fn test1 (a: int...) {
  print(a)
}
fn test2 (a: int, b: int...) {
  print(a, b)
}
fn test3 (a: int, b: int..., c := 0) {
  print(a, b, c)
}
main {
  test1()
  test1(1)
  test1(1, 2)
  test2(0)
  test2(1, 2)
  test2(2, 3, 4)
  test3(3)
  test3(4, 5)
  test3(6, 7, 8)
  test3(7, c: 8)
  test3(9, 10, c: 11)
  test3(12, 13, 14, c: 15)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_int;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1003;
struct __THE_1_fn$1004P;
struct __THE_1_fn$1004;
struct __THE_1_fn$1005P;
struct __THE_1_fn$1005;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn$1003P {
  struct __THE_1_array_int n0;
};
struct __THE_1_fn$1003 {
  void (*f) (void *, struct __THE_1_fn$1003P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1004P {
  int32_t n0;
  struct __THE_1_array_int n1;
};
struct __THE_1_fn$1004 {
  void (*f) (void *, struct __THE_1_fn$1004P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1005P {
  int32_t n0;
  struct __THE_1_array_int n1;
  unsigned char o2;
  int32_t n2;
};
struct __THE_1_fn$1005 {
  void (*f) (void *, struct __THE_1_fn$1005P);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct str __THE_1_array_int_str (struct __THE_1_array_int);
void __THE_1_test1_0 (void *, struct __THE_1_fn$1003P);
void __THE_1_test2_0 (void *, struct __THE_1_fn$1004P);
void __THE_1_test3_0 (void *, struct __THE_1_fn$1005P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}
void __THE_1_test1_0 (void *px, struct __THE_1_fn$1003P p) {
  const struct __THE_1_array_int __THE_0_a_0 = p.n0;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_a_0)), THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
void __THE_1_test2_0 (void *px, struct __THE_1_fn$1004P p) {
  const int32_t __THE_0_a_0 = p.n0;
  const struct __THE_1_array_int __THE_0_b_0 = p.n1;
  print(stdout, "izsz", __THE_0_a_0, " ", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_b_0)), THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
}
void __THE_1_test3_0 (void *px, struct __THE_1_fn$1005P p) {
  const int32_t __THE_0_a_0 = p.n0;
  const struct __THE_1_array_int __THE_0_b_0 = p.n1;
  const int32_t __THE_0_c_0 = p.o2 == 1 ? p.n2 : 0;
  print(stdout, "izsziz", __THE_0_a_0, " ", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_b_0)), " ", __THE_0_c_0, THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
}

int main () {
  const struct __THE_1_fn$1003 __THE_0_test1_0 = (struct __THE_1_fn$1003) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1004 __THE_0_test2_0 = (struct __THE_1_fn$1004) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1005 __THE_0_test3_0 = (struct __THE_1_fn$1005) {&__THE_1_test3_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {__THE_1_array_int_alloc(0)});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {__THE_1_array_int_alloc(1, 1)});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {__THE_1_array_int_alloc(2, 1, 2)});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1004P) {0, __THE_1_array_int_alloc(0)});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1004P) {1, __THE_1_array_int_alloc(1, 2)});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1004P) {2, __THE_1_array_int_alloc(2, 3, 4)});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1005P) {3, __THE_1_array_int_alloc(0), 0, 0});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1005P) {4, __THE_1_array_int_alloc(1, 5), 0, 0});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1005P) {6, __THE_1_array_int_alloc(2, 7, 8), 0, 0});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1005P) {7, __THE_1_array_int_alloc(0), 1, 8});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1005P) {9, __THE_1_array_int_alloc(1, 10), 1, 11});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1005P) {12, __THE_1_array_int_alloc(2, 13, 14), 1, 15});
}
======= flags =======
======= stdout =======
[]
[1]
[1, 2]
0 []
1 [2]
2 [3, 4]
3 [] 0
4 [5] 0
6 [7, 8] 0
7 [] 8
9 [10] 11
12 [13, 14] 15
