======= stdin =======
enum Test {
  Red,
  Green,
  Blue
}

main {
  mut a := Test.Red
  mut b := Test.Green

  mut ref1 := ref a

  print(ref1.str(), ref1.rawValue)
  ref1 = ref b
  print(ref1.str(), ref1.rawValue)

  v4 := true ? a : ref1
  v5 := false ? ref1 : b
  v6 := false ? ref1 : ref1
  print(v4, v5, v6.str())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Test_0 {
  __THE_0_TestSDRed_0,
  __THE_0_TestSDGreen_0,
  __THE_0_TestSDBlue_0
};

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str enum_str (int);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
void str_free (struct str);
struct str __THE_1_Test_0_rawValue (enum __THE_1_Test_0);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str enum_str (int d) {
  char buf[512];
  sprintf(buf, "%d", d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str __THE_1_Test_0_rawValue (enum __THE_1_Test_0 n) {
  if (n == __THE_0_TestSDRed_0) return str_alloc("Red");
  if (n == __THE_0_TestSDGreen_0) return str_alloc("Green");
  if (n == __THE_0_TestSDBlue_0) return str_alloc("Blue");
}

int main () {
  enum __THE_1_Test_0 __THE_0_a_0 = __THE_0_TestSDRed_0;
  enum __THE_1_Test_0 __THE_0_b_0 = __THE_0_TestSDGreen_0;
  enum __THE_1_Test_0 *__THE_0_ref1_0 = &__THE_0_a_0;
  print(stdout, "szsz", enum_str(*__THE_0_ref1_0), " ", __THE_1_Test_0_rawValue(*__THE_0_ref1_0), THE_EOL);
  __THE_0_ref1_0 = &__THE_0_b_0;
  print(stdout, "szsz", enum_str(*__THE_0_ref1_0), " ", __THE_1_Test_0_rawValue(*__THE_0_ref1_0), THE_EOL);
  const enum __THE_1_Test_0 __THE_0_v4_0 = true ? __THE_0_a_0 : *__THE_0_ref1_0;
  const enum __THE_1_Test_0 __THE_0_v5_0 = false ? *__THE_0_ref1_0 : __THE_0_b_0;
  const enum __THE_1_Test_0 *__THE_0_v6_0 = false ? __THE_0_ref1_0 : __THE_0_ref1_0;
  print(stdout, "szszsz", enum_str(__THE_0_v4_0), " ", enum_str(__THE_0_v5_0), " ", enum_str(*__THE_0_v6_0), THE_EOL);
}
======= flags =======
======= stdout =======
0 Red
1 Green
0 1 1
