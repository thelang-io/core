======= stdin =======
main {
  "0".toInt();
  "01".toInt();
  "1".toInt();
  "10".toInt();
  "100".toInt();
  "2147483647".toInt();
  "-0".toInt();
  "-1".toInt();
  "-010".toInt();
  "-10".toInt();
  "-100".toInt();
  "-2147483648".toInt();

  "0000".toInt(2);
  "0001".toInt(2);
  "1010".toInt(2);
  "01100100".toInt(2);
  "01111111111111111111111111111111".toInt(2);
  "-0000".toInt(2);
  "-0001".toInt(2);
  "-1010".toInt(2);
  "-01100100".toInt(2);
  "-10000000000000000000000000000000".toInt(2);

  "0".toInt(8);
  "1".toInt(8);
  "12".toInt(8);
  "144".toInt(8);
  "17777777777".toInt(8);
  "-0".toInt(8);
  "-1".toInt(8);
  "-12".toInt(8);
  "-144".toInt(8);
  "-20000000000".toInt(8);

  "0".toInt(10);
  "01".toInt(10);
  "1".toInt(10);
  "10".toInt(10);
  "100".toInt(10);
  "2147483647".toInt(10);
  "-0".toInt(10);
  "-1".toInt(10);
  "-010".toInt(10);
  "-10".toInt(10);
  "-100".toInt(10);
  "-2147483648".toInt(10);

  "0".toInt(16);
  "1".toInt(16);
  "A".toInt(16);
  "64".toInt(16);
  "7FFFFFFF".toInt(16);
  "-0".toInt(16);
  "-1".toInt(16);
  "-A".toInt(16);
  "-64".toInt(16);
  "-80000000".toInt(16);

  "0".toInt(36);
  "1".toInt(36);
  "A".toInt(36);
  "2S".toInt(36);
  "ZIK0ZJ".toInt(36);
  "-0".toInt(36);
  "-1".toInt(36);
  "-A".toInt(36);
  "-2S".toInt(36);
  "-ZIK0ZK".toInt(36);
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <inttypes.h>
#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
int32_t str_toInt (struct str, unsigned char, int32_t);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
int32_t str_toInt (struct str self, unsigned char o1, int32_t n1) {
  if (o1 == 1 && (n1 < 2 || n1 > 36) && n1 != 0) {
    const char *fmt = "radix %" PRId32 " is invalid, must be >= 2 and <= 36, or 0";
    size_t z = snprintf(NULL, 0, fmt, n1);
    char *d = alloc(z + 1);
    sprintf(d, fmt, n1);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  long r = strtol(c, &e, o1 == 0 ? 10 : n1);
  if (errno == ERANGE || r < INT32_MIN || INT32_MAX < r) {
    const char *fmt = "value `%s` out of range";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  } else if (errno != 0 || e == c || *e != 0) {
    const char *fmt = "value `%s` has invalid syntax";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  free(c);
  free(self.d);
  return (int32_t) r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  (error_stack_pos(&err_state, 2, 3), str_toInt(str_alloc("0"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 3, 3), str_toInt(str_alloc("01"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 4, 3), str_toInt(str_alloc("1"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 5, 3), str_toInt(str_alloc("10"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 6, 3), str_toInt(str_alloc("100"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 7, 3), str_toInt(str_alloc("2147483647"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 8, 3), str_toInt(str_alloc("-0"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 9, 3), str_toInt(str_alloc("-1"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 10, 3), str_toInt(str_alloc("-010"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 11, 3), str_toInt(str_alloc("-10"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 12, 3), str_toInt(str_alloc("-100"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 13, 3), str_toInt(str_alloc("-2147483648"), 0, 0));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 15, 3), str_toInt(str_alloc("0000"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 16, 3), str_toInt(str_alloc("0001"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 17, 3), str_toInt(str_alloc("1010"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 18, 3), str_toInt(str_alloc("01100100"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 19, 3), str_toInt(str_alloc("01111111111111111111111111111111"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 20, 3), str_toInt(str_alloc("-0000"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 21, 3), str_toInt(str_alloc("-0001"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 22, 3), str_toInt(str_alloc("-1010"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 23, 3), str_toInt(str_alloc("-01100100"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 24, 3), str_toInt(str_alloc("-10000000000000000000000000000000"), 1, 2));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 26, 3), str_toInt(str_alloc("0"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 27, 3), str_toInt(str_alloc("1"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 28, 3), str_toInt(str_alloc("12"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 29, 3), str_toInt(str_alloc("144"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 30, 3), str_toInt(str_alloc("17777777777"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 31, 3), str_toInt(str_alloc("-0"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 32, 3), str_toInt(str_alloc("-1"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 33, 3), str_toInt(str_alloc("-12"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 34, 3), str_toInt(str_alloc("-144"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 35, 3), str_toInt(str_alloc("-20000000000"), 1, 8));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 37, 3), str_toInt(str_alloc("0"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 38, 3), str_toInt(str_alloc("01"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 39, 3), str_toInt(str_alloc("1"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 40, 3), str_toInt(str_alloc("10"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 41, 3), str_toInt(str_alloc("100"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 42, 3), str_toInt(str_alloc("2147483647"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 43, 3), str_toInt(str_alloc("-0"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 44, 3), str_toInt(str_alloc("-1"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 45, 3), str_toInt(str_alloc("-010"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 46, 3), str_toInt(str_alloc("-10"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 47, 3), str_toInt(str_alloc("-100"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 48, 3), str_toInt(str_alloc("-2147483648"), 1, 10));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 50, 3), str_toInt(str_alloc("0"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 51, 3), str_toInt(str_alloc("1"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 52, 3), str_toInt(str_alloc("A"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 53, 3), str_toInt(str_alloc("64"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 54, 3), str_toInt(str_alloc("7FFFFFFF"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 55, 3), str_toInt(str_alloc("-0"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 56, 3), str_toInt(str_alloc("-1"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 57, 3), str_toInt(str_alloc("-A"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 58, 3), str_toInt(str_alloc("-64"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 59, 3), str_toInt(str_alloc("-80000000"), 1, 16));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 61, 3), str_toInt(str_alloc("0"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 62, 3), str_toInt(str_alloc("1"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 63, 3), str_toInt(str_alloc("A"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 64, 3), str_toInt(str_alloc("2S"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 65, 3), str_toInt(str_alloc("ZIK0ZJ"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 66, 3), str_toInt(str_alloc("-0"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 67, 3), str_toInt(str_alloc("-1"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 68, 3), str_toInt(str_alloc("-A"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 69, 3), str_toInt(str_alloc("-2S"), 1, 36));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  (error_stack_pos(&err_state, 70, 3), str_toInt(str_alloc("-ZIK0ZK"), 1, 36));
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
