======= stdin =======
main {
  print("[Buffer] == [Buffer]:", "".toBuffer() == "".toBuffer())
  print("[Buffer] != [Buffer]:", "".toBuffer() != "".toBuffer())
  print("[Buffer 09] == [Buffer]:", "\t".toBuffer() == "".toBuffer())
  print("[Buffer 09] != [Buffer]:", "\t".toBuffer() != "".toBuffer())
  print("[Buffer] == [Buffer 09]:", "".toBuffer() == "\t".toBuffer())
  print("[Buffer] != [Buffer 09]:", "".toBuffer() != "\t".toBuffer())
  print("[Buffer 09] == [Buffer 09]:", "\t".toBuffer() == "\t".toBuffer())
  print("[Buffer 09] != [Buffer 09]:", "\t".toBuffer() != "\t".toBuffer())
  print("[Buffer 09] == [Buffer 0a]:", "\t".toBuffer() == "\n".toBuffer())
  print("[Buffer 09] != [Buffer 0a]:", "\t".toBuffer() != "\n".toBuffer())
  print("[Buffer 41 61 72 6f 6e] == [Buffer 41 61 72 6f 6e]:", "Aaron".toBuffer() == "Aaron".toBuffer())
  print("[Buffer 41 61 72 6f 6e] != [Buffer 41 61 72 6f 6e]:", "Aaron".toBuffer() != "Aaron".toBuffer())
  print("[Buffer 41 61 72 6f 6e] == [Buffer 44 65 6c 61 73 79]:", "Aaron".toBuffer() == "Delasy".toBuffer())
  print("[Buffer 41 61 72 6f 6e] != [Buffer 44 65 6c 61 73 79]:", "Aaron".toBuffer() != "Delasy".toBuffer())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
bool buffer_eq (struct buffer, struct buffer);
bool buffer_ne (struct buffer, struct buffer);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
void str_free (struct str);
struct buffer str_to_buffer (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
bool buffer_eq (struct buffer o1, struct buffer o2) {
  bool r = o1.l == o2.l && memcmp(o1.d, o2.d, o1.l) == 0;
  free(o1.d);
  free(o2.d);
  return r;
}
bool buffer_ne (struct buffer o1, struct buffer o2) {
  bool r = o1.l != o2.l || memcmp(o1.d, o2.d, o1.l) != 0;
  free(o1.d);
  free(o2.d);
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct buffer str_to_buffer (struct str s) {
  return (struct buffer) {(unsigned char *) s.d, s.l};
}

int main () {
  print(stdout, "zztz", "[Buffer] == [Buffer]:", " ", buffer_eq(str_to_buffer(str_alloc("")), str_to_buffer(str_alloc(""))), THE_EOL);
  print(stdout, "zztz", "[Buffer] != [Buffer]:", " ", buffer_ne(str_to_buffer(str_alloc("")), str_to_buffer(str_alloc(""))), THE_EOL);
  print(stdout, "zztz", "[Buffer 09] == [Buffer]:", " ", buffer_eq(str_to_buffer(str_alloc("\t")), str_to_buffer(str_alloc(""))), THE_EOL);
  print(stdout, "zztz", "[Buffer 09] != [Buffer]:", " ", buffer_ne(str_to_buffer(str_alloc("\t")), str_to_buffer(str_alloc(""))), THE_EOL);
  print(stdout, "zztz", "[Buffer] == [Buffer 09]:", " ", buffer_eq(str_to_buffer(str_alloc("")), str_to_buffer(str_alloc("\t"))), THE_EOL);
  print(stdout, "zztz", "[Buffer] != [Buffer 09]:", " ", buffer_ne(str_to_buffer(str_alloc("")), str_to_buffer(str_alloc("\t"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 09] == [Buffer 09]:", " ", buffer_eq(str_to_buffer(str_alloc("\t")), str_to_buffer(str_alloc("\t"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 09] != [Buffer 09]:", " ", buffer_ne(str_to_buffer(str_alloc("\t")), str_to_buffer(str_alloc("\t"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 09] == [Buffer 0a]:", " ", buffer_eq(str_to_buffer(str_alloc("\t")), str_to_buffer(str_alloc("\n"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 09] != [Buffer 0a]:", " ", buffer_ne(str_to_buffer(str_alloc("\t")), str_to_buffer(str_alloc("\n"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 41 61 72 6f 6e] == [Buffer 41 61 72 6f 6e]:", " ", buffer_eq(str_to_buffer(str_alloc("Aaron")), str_to_buffer(str_alloc("Aaron"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 41 61 72 6f 6e] != [Buffer 41 61 72 6f 6e]:", " ", buffer_ne(str_to_buffer(str_alloc("Aaron")), str_to_buffer(str_alloc("Aaron"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 41 61 72 6f 6e] == [Buffer 44 65 6c 61 73 79]:", " ", buffer_eq(str_to_buffer(str_alloc("Aaron")), str_to_buffer(str_alloc("Delasy"))), THE_EOL);
  print(stdout, "zztz", "[Buffer 41 61 72 6f 6e] != [Buffer 44 65 6c 61 73 79]:", " ", buffer_ne(str_to_buffer(str_alloc("Aaron")), str_to_buffer(str_alloc("Delasy"))), THE_EOL);
}
======= flags =======
======= stdout =======
[Buffer] == [Buffer]: true
[Buffer] != [Buffer]: false
[Buffer 09] == [Buffer]: false
[Buffer 09] != [Buffer]: true
[Buffer] == [Buffer 09]: false
[Buffer] != [Buffer 09]: true
[Buffer 09] == [Buffer 09]: true
[Buffer 09] != [Buffer 09]: false
[Buffer 09] == [Buffer 0a]: false
[Buffer 09] != [Buffer 0a]: true
[Buffer 41 61 72 6f 6e] == [Buffer 41 61 72 6f 6e]: true
[Buffer 41 61 72 6f 6e] != [Buffer 41 61 72 6f 6e]: false
[Buffer 41 61 72 6f 6e] == [Buffer 44 65 6c 61 73 79]: false
[Buffer 41 61 72 6f 6e] != [Buffer 44 65 6c 61 73 79]: true
