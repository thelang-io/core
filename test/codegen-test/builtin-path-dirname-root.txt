======= stdin =======
main {
  path_dirname("")
  path_dirname("t")
  path_dirname("test")
  path_dirname(path_SEP)
  path_dirname("t" + path_SEP)
  path_dirname("test" + path_SEP)
  path_dirname(path_SEP + "t")
  path_dirname(path_SEP + "test")
  path_dirname("t" + path_SEP + "t")
  path_dirname("t" + path_SEP + "test")
  path_dirname("test" + path_SEP + "t")
  path_dirname("test" + path_SEP + "test")
  path_dirname(path_SEP + "t" + path_SEP + "t")
  path_dirname(path_SEP + "t" + path_SEP + "test")
  path_dirname(path_SEP + "test" + path_SEP + "t")
  path_dirname(path_SEP + "test" + path_SEP + "test")
  path_dirname(path_SEP + "t" + path_SEP + "t" + path_SEP)
  path_dirname(path_SEP + "t" + path_SEP + "test" + path_SEP)
  path_dirname(path_SEP + "test" + path_SEP + "t" + path_SEP)
  path_dirname(path_SEP + "test" + path_SEP + "test" + path_SEP)
  path_dirname(path_SEP + "t" + path_SEP + "t" + path_SEP + "t")
  path_dirname(path_SEP + "t" + path_SEP + "test" + path_SEP + "test")
  path_dirname(path_SEP + "test" + path_SEP + "t" + path_SEP + "t")
  path_dirname(path_SEP + "test" + path_SEP + "test" + path_SEP + "test")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str path_dirname (struct str);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str path_dirname (struct str s) {
  if (s.l == 0) {
    str_free(s);
    return str_alloc(".");
  }
  #ifdef THE_OS_WINDOWS
    char e = '\\';
  #else
    char e = '/';
  #endif
  size_t l = 0;
  unsigned char k = 0;
  for (size_t i = s.l - 1;; i--) {
    if (k == 1 && s.d[i] == e) {
      l = i;
      break;
    } else if (k == 0 && s.d[i] != e) {
      k = 1;
    }
    if (i == 0) break;
  }
  if (l == 0) {
    s.d = re_alloc(s.d, 1);
    if (s.d[0] != e) s.d[0] = '.';
    return (struct str) {s.d, 1};
  }
  char *d = alloc(l);
  memcpy(d, s.d, l);
  str_free(s);
  return (struct str) {d, l};
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  str_free((struct str) path_dirname(str_alloc("")));
  str_free((struct str) path_dirname(str_alloc("t")));
  str_free((struct str) path_dirname(str_alloc("test")));
  str_free((struct str) path_dirname(str_alloc(THE_PATH_SEP)));
  str_free((struct str) path_dirname(cstr_concat_str("t", str_alloc(THE_PATH_SEP))));
  str_free((struct str) path_dirname(cstr_concat_str("test", str_alloc(THE_PATH_SEP))));
  str_free((struct str) path_dirname(str_concat_cstr(str_alloc(THE_PATH_SEP), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(str_alloc(THE_PATH_SEP), "test")));
  str_free((struct str) path_dirname(str_concat_cstr(cstr_concat_str("t", str_alloc(THE_PATH_SEP)), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(cstr_concat_str("t", str_alloc(THE_PATH_SEP)), "test")));
  str_free((struct str) path_dirname(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "test")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "test")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "test")));
  str_free((struct str) path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP))));
  str_free((struct str) path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP))));
  str_free((struct str) path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP))));
  str_free((struct str) path_dirname(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP))));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP)), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "t"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP)), "test")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "t"), str_alloc(THE_PATH_SEP)), "t")));
  str_free((struct str) path_dirname(str_concat_cstr(str_concat_str(str_concat_cstr(str_concat_str(str_concat_cstr(str_alloc(THE_PATH_SEP), "test"), str_alloc(THE_PATH_SEP)), "test"), str_alloc(THE_PATH_SEP)), "test")));
}
======= flags =======
======= stdout =======
