======= stdin =======
main {
  loop i := 0; i < 10; i++ {
    print(random_randomInt())
  }
  loop i := 0; i < 10; i++ {
    print(random_randomInt(-1, 1))
  }
  loop i := 0; i < 10; i++ {
    print(random_randomInt(-1, 0))
  }
  loop i := 0; i < 10; i++ {
    print(random_randomInt(0, 1))
  }
  loop i := 0; i < 10; i++ {
    print(random_randomInt(-100, 100))
  }
  loop i := 0; i < 10; i++ {
    print(random_randomInt(-100, 0))
  }
  loop i := 0; i < 10; i++ {
    print(random_randomInt(0, 100))
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <openssl/rand.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

void print (FILE *, const char *, ...);
int32_t random_randomInt (unsigned char, int32_t, unsigned char, int32_t);
void str_free (struct str);

void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
int32_t random_randomInt (unsigned char o1, int32_t n1, unsigned char o2, int32_t n2) {
  int64_t a = o1 == 0 ? INT32_MIN : n1;
  int64_t b = o2 == 0 ? INT32_MAX : n2;
  unsigned char d[4];
  if (RAND_bytes(d, 4) != 1) {
    fprintf(stderr, "Error: failed to generate random bytes" THE_EOL);
    exit(EXIT_FAILURE);
  }
  uint32_t r = (d[0] << 24) | (d[1] << 16) | (d[2] << 8) | d[3];
  return (int32_t) (a + r / (UINT32_MAX / (b - a + 1) + 1));
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(0, 0, 0, 0), THE_EOL);
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(1, -1, 1, 1), THE_EOL);
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(1, -1, 1, 0), THE_EOL);
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(1, 0, 1, 1), THE_EOL);
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(1, -100, 1, 100), THE_EOL);
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(1, -100, 1, 0), THE_EOL);
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "iz", random_randomInt(1, 0, 1, 100), THE_EOL);
  }
}
======= flags =======
A:-lssl A:-lcrypto W:-lws2_32 W:-lgdi32 W:-ladvapi32 W:-lcrypt32 W:-luser32
======= stdout =======
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ \-?\d{1,10} }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0|1) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ (\-1|0) }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ [01] }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \-?\d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
{{ \d{1,3} }}
