======= stdin =======
main {
  testByte1: byte = 0x00
  testByte2: byte = 0xFF
  testF32: f32 = 3.14
  testF64: f64 = 3.14
  testI8: i8 = -1
  testI16: i16 = -2
  testI32: i32 = -3
  testI64: i64 = -4
  testU8: u8 = 1
  testU16: u16 = 2
  testU32: u32 = 3
  testU64: u64 = 4

  g1: bool | byte | char = true
  g2: bool | byte | char = false
  g3: bool | byte | char = testByte1
  g4: bool | byte | char = testByte2
  g5: bool | byte | char = 'a'
  g6: bool | byte | char = 'z'

  f1: f32 | f64 | float = 3.14
  f2: f32 | f64 | float = testF32
  f3: f32 | f64 | float = testF64

  i1: i8 | i16 | i32 | i64 | int = 0
  i2: i8 | i16 | i32 | i64 | int = testI8
  i3: i8 | i16 | i32 | i64 | int = testI16
  i4: i8 | i16 | i32 | i64 | int = testI32
  i5: i8 | i16 | i32 | i64 | int = testI64

  u1: u8 | u16 | u32 | u64 = testU8
  u2: u8 | u16 | u32 | u64 = testU16
  u3: u8 | u16 | u32 | u64 = testU32
  u4: u8 | u16 | u32 | u64 = testU64
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define TYPE_bool 1
#define TYPE_byte 2
#define TYPE_char 3
#define TYPE_f32 4
#define TYPE_f64 5
#define TYPE_float 6
#define TYPE_i8 7
#define TYPE_i16 8
#define TYPE_i32 9
#define TYPE_i64 10
#define TYPE_int 11
#define TYPE_u8 12
#define TYPE_u16 13
#define TYPE_u32 14
#define TYPE_u64 15

struct __THE_1_union$0;
struct __THE_1_union$1;
struct __THE_1_union$2;
struct __THE_1_union$3;

struct __THE_1_union$0 {
  int t;
  union {
    bool v1;
    unsigned char v2;
    char v3;
  };
};
struct __THE_1_union$1 {
  int t;
  union {
    float v4;
    double v5;
    double v6;
  };
};
struct __THE_1_union$2 {
  int t;
  union {
    int8_t v7;
    int16_t v8;
    int32_t v9;
    int64_t v10;
    int32_t v11;
  };
};
struct __THE_1_union$3 {
  int t;
  union {
    uint8_t v12;
    uint16_t v13;
    uint32_t v14;
    uint64_t v15;
  };
};

void *alloc (size_t);
struct __THE_1_union$0 __THE_1_union$0_alloc (int, ...);
struct __THE_1_union$1 __THE_1_union$1_alloc (int, ...);
struct __THE_1_union$2 __THE_1_union$2_alloc (int, ...);
struct __THE_1_union$3 __THE_1_union$3_alloc (int, ...);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_union$0 __THE_1_union$0_alloc (int t, ...) {
  struct __THE_1_union$0 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_bool) r.v1 = va_arg(args, int);
  if (t == TYPE_byte) r.v2 = va_arg(args, int);
  if (t == TYPE_char) r.v3 = va_arg(args, int);
  va_end(args);
  return r;
}
struct __THE_1_union$1 __THE_1_union$1_alloc (int t, ...) {
  struct __THE_1_union$1 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_f32) r.v4 = va_arg(args, double);
  if (t == TYPE_f64) r.v5 = va_arg(args, double);
  if (t == TYPE_float) r.v6 = va_arg(args, double);
  va_end(args);
  return r;
}
struct __THE_1_union$2 __THE_1_union$2_alloc (int t, ...) {
  struct __THE_1_union$2 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_i8) r.v7 = va_arg(args, int);
  if (t == TYPE_i16) r.v8 = va_arg(args, int);
  if (t == TYPE_i32) r.v9 = va_arg(args, int32_t);
  if (t == TYPE_i64) r.v10 = va_arg(args, int64_t);
  if (t == TYPE_int) r.v11 = va_arg(args, int32_t);
  va_end(args);
  return r;
}
struct __THE_1_union$3 __THE_1_union$3_alloc (int t, ...) {
  struct __THE_1_union$3 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_u8) r.v12 = va_arg(args, int);
  if (t == TYPE_u16) r.v13 = va_arg(args, int);
  if (t == TYPE_u32) r.v14 = va_arg(args, uint32_t);
  if (t == TYPE_u64) r.v15 = va_arg(args, uint64_t);
  va_end(args);
  return r;
}

int main () {
  const unsigned char __THE_0_testByte1_0 = 0x00;
  const unsigned char __THE_0_testByte2_0 = 0xFF;
  const float __THE_0_testF32_0 = 3.14;
  const double __THE_0_testF64_0 = 3.14;
  const int8_t __THE_0_testI8_0 = -1;
  const int16_t __THE_0_testI16_0 = -2;
  const int32_t __THE_0_testI32_0 = -3;
  const int64_t __THE_0_testI64_0 = -4;
  const uint8_t __THE_0_testU8_0 = 1;
  const uint16_t __THE_0_testU16_0 = 2;
  const uint32_t __THE_0_testU32_0 = 3;
  const uint64_t __THE_0_testU64_0 = 4;
  const struct __THE_1_union$0 __THE_0_g1_0 = __THE_1_union$0_alloc(TYPE_bool, true);
  const struct __THE_1_union$0 __THE_0_g2_0 = __THE_1_union$0_alloc(TYPE_bool, false);
  const struct __THE_1_union$0 __THE_0_g3_0 = __THE_1_union$0_alloc(TYPE_byte, __THE_0_testByte1_0);
  const struct __THE_1_union$0 __THE_0_g4_0 = __THE_1_union$0_alloc(TYPE_byte, __THE_0_testByte2_0);
  const struct __THE_1_union$0 __THE_0_g5_0 = __THE_1_union$0_alloc(TYPE_char, 'a');
  const struct __THE_1_union$0 __THE_0_g6_0 = __THE_1_union$0_alloc(TYPE_char, 'z');
  const struct __THE_1_union$1 __THE_0_f1_0 = __THE_1_union$1_alloc(TYPE_float, 3.14);
  const struct __THE_1_union$1 __THE_0_f2_0 = __THE_1_union$1_alloc(TYPE_f32, __THE_0_testF32_0);
  const struct __THE_1_union$1 __THE_0_f3_0 = __THE_1_union$1_alloc(TYPE_f64, __THE_0_testF64_0);
  const struct __THE_1_union$2 __THE_0_i1_0 = __THE_1_union$2_alloc(TYPE_int, 0);
  const struct __THE_1_union$2 __THE_0_i2_0 = __THE_1_union$2_alloc(TYPE_i8, __THE_0_testI8_0);
  const struct __THE_1_union$2 __THE_0_i3_0 = __THE_1_union$2_alloc(TYPE_i16, __THE_0_testI16_0);
  const struct __THE_1_union$2 __THE_0_i4_0 = __THE_1_union$2_alloc(TYPE_i32, __THE_0_testI32_0);
  const struct __THE_1_union$2 __THE_0_i5_0 = __THE_1_union$2_alloc(TYPE_i64, __THE_0_testI64_0);
  const struct __THE_1_union$3 __THE_0_u1_0 = __THE_1_union$3_alloc(TYPE_u8, __THE_0_testU8_0);
  const struct __THE_1_union$3 __THE_0_u2_0 = __THE_1_union$3_alloc(TYPE_u16, __THE_0_testU16_0);
  const struct __THE_1_union$3 __THE_0_u3_0 = __THE_1_union$3_alloc(TYPE_u32, __THE_0_testU32_0);
  const struct __THE_1_union$3 __THE_0_u4_0 = __THE_1_union$3_alloc(TYPE_u64, __THE_0_testU64_0);
}
======= flags =======
======= stdout =======
