======= stdin =======
fn factorial (n: i64) i64 {
  return n <= 1 ? 1 : n * factorial(n - 1)
}

fn test1 (mut a: int) int {
  if a == 1 {
    return test1(a + 10)
  } elif a == 10 {
    return test2(a + 100)
  } else {
    return 2
  }
}
fn test2 (a: int) int {
  if a == 11 {
    return test1(a - 10)
  } elif a == 101 {
    return test2(a - 100)
  } else {
    return 21
  }
}

main {
  loop i := -1; i < 10; i++ {
    print("factorial(" + i.str() + "):", factorial(i))
  }

  print("test1(0):", test1(0))
  print("test1(1):", test1(1))
  print("test1(2):", test1(2))
  print("test1(10):", test1(10))
  print("test1(11):", test1(11))
  print("test1(12):", test1(12))
  print("test1(20):", test1(20))
  print("test1(21):", test1(21))
  print("test1(22):", test1(22))
  print("test1(100):", test1(100))
  print("test1(101):", test1(101))
  print("test1(102):", test1(102))
  print("test2(0):", test2(0))
  print("test2(1):", test2(1))
  print("test2(2):", test2(2))
  print("test2(10):", test2(10))
  print("test2(11):", test2(11))
  print("test2(12):", test2(12))
  print("test2(20):", test2(20))
  print("test2(21):", test2(21))
  print("test2(22):", test2(22))
  print("test2(100):", test2(100))
  print("test2(101):", test2(101))
  print("test2(102):", test2(102))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_factorial_0X;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_test1_0X;
struct __THE_1_test2_0X;

struct __THE_1_fn$1000 {
  int64_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int64_t n0;
};
struct __THE_1_factorial_0X {
  const struct __THE_1_fn$1000 *__THE_0_factorial_0;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int32_t n0;
};
struct __THE_1_fn$1002 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int32_t n0;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$1002 *__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
};
struct __THE_1_test2_0X {
  const struct __THE_1_fn$1002 *__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
void *xalloc (void *, size_t);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
int64_t __THE_1_factorial_0 (void *, void *);
void __THE_1_factorial_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_factorial_0X);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
int32_t __THE_1_test1_0 (void *, void *);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_test1_0X);
int32_t __THE_1_test2_0 (void *, void *);
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_test2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
int64_t __THE_1_factorial_0 (void *px, void *pp) {
  int64_t v;
  struct __THE_1_fn$1000P *p = pp;
  struct __THE_1_factorial_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_factorial_0 = x->__THE_0_factorial_0;
  const int64_t __THE_0_n_0 = p->n0;
  v = __THE_0_n_0 <= 1 ? 1 : __THE_0_n_0 * (*__THE_0_factorial_0).f((*__THE_0_factorial_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_n_0 - 1}, sizeof(struct __THE_1_fn$1000P)));
  free(pp);
  return v;
}
void __THE_1_factorial_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_factorial_0X x) {
  size_t l = sizeof(struct __THE_1_factorial_0X);
  struct __THE_1_factorial_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_factorial_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test1_0 (void *px, void *pp) {
  unsigned char r = 0;
  int32_t v;
  struct __THE_1_fn$1001P *p = pp;
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$1002 *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  int32_t __THE_0_a_0 = p->n0;
  if (__THE_0_a_0 == 1) {
    r = 1;
    v = (*__THE_0_test1_0).f((*__THE_0_test1_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0 + 10}, sizeof(struct __THE_1_fn$1001P)));
    goto L1;
  } else if (__THE_0_a_0 == 10) {
    r = 1;
    v = (*__THE_0_test2_0).f((*__THE_0_test2_0).x, xalloc(&(struct __THE_1_fn$1002P) {__THE_0_a_0 + 100}, sizeof(struct __THE_1_fn$1002P)));
    goto L1;
  } else {
    r = 1;
    v = 2;
    goto L1;
  }
L1:
  free(pp);
  return v;
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
int32_t __THE_1_test2_0 (void *px, void *pp) {
  unsigned char r = 0;
  int32_t v;
  struct __THE_1_fn$1002P *p = pp;
  struct __THE_1_test2_0X *x = px;
  const struct __THE_1_fn$1002 *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const int32_t __THE_0_a_0 = p->n0;
  if (__THE_0_a_0 == 11) {
    r = 1;
    v = (*__THE_0_test1_0).f((*__THE_0_test1_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0 - 10}, sizeof(struct __THE_1_fn$1001P)));
    goto L2;
  } else if (__THE_0_a_0 == 101) {
    r = 1;
    v = (*__THE_0_test2_0).f((*__THE_0_test2_0).x, xalloc(&(struct __THE_1_fn$1002P) {__THE_0_a_0 - 100}, sizeof(struct __THE_1_fn$1002P)));
    goto L2;
  } else {
    r = 1;
    v = 21;
    goto L2;
  }
L2:
  free(pp);
  return v;
}
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test2_0X);
  struct __THE_1_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_factorial_0;
  const struct __THE_1_fn$1001 __THE_0_test1_0;
  const struct __THE_1_fn$1002 __THE_0_test2_0;
  __THE_1_factorial_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_factorial_0, (struct __THE_1_factorial_0X) {&__THE_0_factorial_0});
  __THE_1_test1_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_test2_0, &__THE_0_test1_0});
  __THE_1_test2_0_alloc((struct __THE_1_fn$1002 *) &__THE_0_test2_0, (struct __THE_1_test2_0X) {&__THE_0_test2_0, &__THE_0_test1_0});
  for (int32_t __THE_0_i_0 = -1; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "szlz", str_concat_cstr(cstr_concat_str("factorial(", int_str(__THE_0_i_0)), "):"), " ", __THE_0_factorial_0.f(__THE_0_factorial_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_0_i_0}, sizeof(struct __THE_1_fn$1000P))), THE_EOL);
  }
  print(stdout, "zziz", "test1(0):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {0}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(1):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {1}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(2):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {2}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(10):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {10}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(11):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {11}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(12):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {12}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(20):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {20}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(21):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {21}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(22):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {22}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(100):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {100}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(101):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {101}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test1(102):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {102}, sizeof(struct __THE_1_fn$1001P))), THE_EOL);
  print(stdout, "zziz", "test2(0):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {0}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(1):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {1}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(2):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {2}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(10):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {10}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(11):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {11}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(12):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {12}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(20):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {20}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(21):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {21}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(22):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {22}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(100):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {100}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(101):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {101}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  print(stdout, "zziz", "test2(102):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1002P) {102}, sizeof(struct __THE_1_fn$1002P))), THE_EOL);
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_test2_0);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_test1_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_factorial_0);
}
======= flags =======
======= stdout =======
factorial(-1): 1
factorial(0): 1
factorial(1): 1
factorial(2): 2
factorial(3): 6
factorial(4): 24
factorial(5): 120
factorial(6): 720
factorial(7): 5040
factorial(8): 40320
factorial(9): 362880
test1(0): 2
test1(1): 2
test1(2): 2
test1(10): 21
test1(11): 2
test1(12): 2
test1(20): 2
test1(21): 2
test1(22): 2
test1(100): 2
test1(101): 2
test1(102): 2
test2(0): 21
test2(1): 21
test2(2): 21
test2(10): 21
test2(11): 2
test2(12): 21
test2(20): 21
test2(21): 21
test2(22): 21
test2(100): 21
test2(101): 21
test2(102): 21
