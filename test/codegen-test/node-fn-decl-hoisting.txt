======= stdin =======
fn factorial (n: i64) i64 {
  return n <= 1 ? 1 : n * factorial(n - 1)
}

fn test1 (mut a: int) int {
  if a == 1 {
    return test1(a + 10)
  } elif a == 10 {
    return test2(a + 100)
  } else {
    return 2
  }
}
fn test2 (a: int) int {
  if a == 11 {
    return test1(a - 10)
  } elif a == 101 {
    return test2(a - 100)
  } else {
    return 21
  }
}

main {
  loop i := -1; i < 10; i++ {
    print("factorial(" + i.str() + "):", factorial(i))
  }

  print("test1(0):", test1(0))
  print("test1(1):", test1(1))
  print("test1(2):", test1(2))
  print("test1(10):", test1(10))
  print("test1(11):", test1(11))
  print("test1(12):", test1(12))
  print("test1(20):", test1(20))
  print("test1(21):", test1(21))
  print("test1(22):", test1(22))
  print("test1(100):", test1(100))
  print("test1(101):", test1(101))
  print("test1(102):", test1(102))
  print("test2(0):", test2(0))
  print("test2(1):", test2(1))
  print("test2(2):", test2(2))
  print("test2(10):", test2(10))
  print("test2(11):", test2(11))
  print("test2(12):", test2(12))
  print("test2(20):", test2(20))
  print("test2(21):", test2(21))
  print("test2(22):", test2(22))
  print("test2(100):", test2(100))
  print("test2(101):", test2(101))
  print("test2(102):", test2(102))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;
struct __THE_1_factorial_0X;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1002;
struct __THE_1_test1_0X;
struct __THE_1_test2_0X;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
  int64_t n0;
};
struct __THE_1_fn$1000 {
  int64_t (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_factorial_0X {
  const struct __THE_1_fn$1000 *__THE_0_factorial_0;
};
struct __THE_1_fn$1001P {
  int line;
  int col;
  int32_t n0;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int line;
  int col;
  int32_t n0;
};
struct __THE_1_fn$1002 {
  int32_t (*f) (void *, struct __THE_1_fn$1002P);
  void *x;
  size_t l;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$1002 *__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
};
struct __THE_1_test2_0X {
  const struct __THE_1_fn$1002 *__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
void str_free (struct str);
void error_Error_free (struct error_Error *);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
int64_t __THE_1_factorial_0 (void *, struct __THE_1_fn$1000P);
void __THE_1_factorial_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_factorial_0X);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
int32_t __THE_1_test1_0 (void *, struct __THE_1_fn$1001P);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_test1_0X);
int32_t __THE_1_test2_0 (void *, struct __THE_1_fn$1002P);
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_test2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
int64_t __THE_1_factorial_0 (void *px, struct __THE_1_fn$1000P p) {
  int64_t v;
  error_stack_push(&err_state, "/test", "factorial", p.line, p.col);
  struct __THE_1_factorial_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_factorial_0 = x->__THE_0_factorial_0;
  const int64_t __THE_0_n_0 = p.n0;
  v = __THE_0_n_0 <= 1 ? 1 : __THE_0_n_0 * (*__THE_0_factorial_0).f((*__THE_0_factorial_0).x, (struct __THE_1_fn$1000P) {2, 27, __THE_0_n_0 - 1});
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
void __THE_1_factorial_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_factorial_0X x) {
  size_t l = sizeof(struct __THE_1_factorial_0X);
  struct __THE_1_factorial_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_factorial_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test1_0 (void *px, struct __THE_1_fn$1001P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test1", p.line, p.col);
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$1002 *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  int32_t __THE_0_a_0 = p.n0;
  if (__THE_0_a_0 == 1) {
    r = 1;
    v = (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$1001P) {7, 12, __THE_0_a_0 + 10});
    goto L2;
  } else if (__THE_0_a_0 == 10) {
    r = 1;
    v = (*__THE_0_test2_0).f((*__THE_0_test2_0).x, (struct __THE_1_fn$1002P) {9, 12, __THE_0_a_0 + 100});
    goto L2;
  } else {
    r = 1;
    v = 2;
    goto L2;
  }
L2:
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
int32_t __THE_1_test2_0 (void *px, struct __THE_1_fn$1002P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test2", p.line, p.col);
  struct __THE_1_test2_0X *x = px;
  const struct __THE_1_fn$1002 *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const int32_t __THE_0_a_0 = p.n0;
  if (__THE_0_a_0 == 11) {
    r = 1;
    v = (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$1001P) {16, 12, __THE_0_a_0 - 10});
    goto L3;
  } else if (__THE_0_a_0 == 101) {
    r = 1;
    v = (*__THE_0_test2_0).f((*__THE_0_test2_0).x, (struct __THE_1_fn$1002P) {18, 12, __THE_0_a_0 - 100});
    goto L3;
  } else {
    r = 1;
    v = 21;
    goto L3;
  }
L3:
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test2_0X);
  struct __THE_1_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test2_0;
  n->x = r;
  n->l = l;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_factorial_0;
  const struct __THE_1_fn$1001 __THE_0_test1_0;
  const struct __THE_1_fn$1002 __THE_0_test2_0;
  __THE_1_factorial_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_factorial_0, (struct __THE_1_factorial_0X) {&__THE_0_factorial_0});
  __THE_1_test1_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_test2_0, &__THE_0_test1_0});
  __THE_1_test2_0_alloc((struct __THE_1_fn$1002 *) &__THE_0_test2_0, (struct __THE_1_test2_0X) {&__THE_0_test2_0, &__THE_0_test1_0});
  for (int32_t __THE_0_i_0 = -1; __THE_0_i_0 < 10; __THE_0_i_0++) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
    print(stdout, "szlz", str_concat_cstr(cstr_concat_str("factorial(", int_str(__THE_0_i_0)), "):"), " ", __THE_0_factorial_0.f(__THE_0_factorial_0.x, (struct __THE_1_fn$1000P) {26, 42, __THE_0_i_0}), THE_EOL);
L4:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L0;
  }
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
  print(stdout, "zziz", "test1(0):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {29, 22, 0}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(1):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {30, 22, 1}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(2):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {31, 22, 2}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(10):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {32, 23, 10}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(11):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {33, 23, 11}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(12):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {34, 23, 12}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(20):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {35, 23, 20}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(21):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {36, 23, 21}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(22):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {37, 23, 22}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(100):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {38, 24, 100}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(101):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {39, 24, 101}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test1(102):", " ", __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {40, 24, 102}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(0):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {41, 22, 0}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(1):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {42, 22, 1}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(2):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {43, 22, 2}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(10):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {44, 23, 10}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(11):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {45, 23, 11}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(12):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {46, 23, 12}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(20):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {47, 23, 20}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(21):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {48, 23, 21}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(22):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {49, 23, 22}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(100):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {50, 24, 100}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(101):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {51, 24, 101}), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  print(stdout, "zziz", "test2(102):", " ", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {52, 24, 102}), THE_EOL);
L5:
  err_state.buf_idx--;
L0:
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_test2_0);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_test1_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_factorial_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
factorial(-1): 1
factorial(0): 1
factorial(1): 1
factorial(2): 2
factorial(3): 6
factorial(4): 24
factorial(5): 120
factorial(6): 720
factorial(7): 5040
factorial(8): 40320
factorial(9): 362880
test1(0): 2
test1(1): 2
test1(2): 2
test1(10): 21
test1(11): 2
test1(12): 2
test1(20): 2
test1(21): 2
test1(22): 2
test1(100): 2
test1(101): 2
test1(102): 2
test2(0): 21
test2(1): 21
test2(2): 21
test2(10): 21
test2(11): 2
test2(12): 21
test2(20): 21
test2(21): 21
test2(22): 21
test2(100): 21
test2(101): 21
test2(102): 21
