======= stdin =======
main {
  print(fs_statSync("test" + path_SEP + "fixtures"))
  print(fs_statSync("test" + path_SEP + "fixtures" + path_SEP + "test.txt"))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct fs_Stats;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct fs_Stats {
  const uint64_t __THE_0_dev;
  const uint32_t __THE_0_mode;
  const int64_t __THE_0_nlink;
  const uint64_t __THE_0_ino;
  const int32_t __THE_0_uid;
  const int32_t __THE_0_gid;
  const uint64_t __THE_0_rdev;
  const int64_t __THE_0_atime;
  const int64_t __THE_0_atimeNs;
  const int64_t __THE_0_mtime;
  const int64_t __THE_0_mtimeNs;
  const int64_t __THE_0_ctime;
  const int64_t __THE_0_ctimeNs;
  const int64_t __THE_0_btime;
  const int64_t __THE_0_btimeNs;
  const int64_t __THE_0_size;
  const int64_t __THE_0_blocks;
  const int64_t __THE_0_blockSize;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct fs_Stats *fs_statSync (struct str);
struct str i32_str (int32_t);
struct str i64_str (int64_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
char *str_cstr (const struct str);
void str_free (struct str);
struct str u32_str (uint32_t);
struct str u64_str (uint64_t);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct fs_Stats *fs_Stats_alloc (uint64_t, uint32_t, int64_t, uint64_t, int32_t, int32_t, uint64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t);
void fs_Stats_free (struct fs_Stats *);
struct str fs_Stats_str (struct fs_Stats *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct fs_Stats *fs_statSync (struct str s) {
  char *c = str_cstr(s);
  struct fs_Stats *r;
  #ifdef THE_OS_WINDOWS
    struct _stat sb;
    if (_stat(c, &sb) != 0) {
      const char *fmt = "failed to stat file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_statSync_cleanup;
    }
    r = fs_Stats_alloc(sb.st_dev, sb.st_mode, sb.st_nlink, sb.st_ino, sb.st_uid, sb.st_gid, sb.st_rdev, sb.st_atime, 0, sb.st_mtime, 0, sb.st_ctime, 0, sb.st_ctime, 0, sb.st_size, 0, 4096);
  #else
    struct stat sb;
    if (stat(c, &sb) != 0) {
      const char *fmt = "failed to stat file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_statSync_cleanup;
    }
    #ifdef THE_OS_MACOS
      r = fs_Stats_alloc(sb.st_dev, sb.st_mode, sb.st_nlink, sb.st_ino, sb.st_uid, sb.st_gid, sb.st_rdev, sb.st_atimespec.tv_sec, sb.st_atimespec.tv_nsec, sb.st_mtimespec.tv_sec, sb.st_mtimespec.tv_nsec, sb.st_ctimespec.tv_sec, sb.st_ctimespec.tv_nsec, sb.st_birthtimespec.tv_sec, sb.st_birthtimespec.tv_nsec, sb.st_size, sb.st_blocks, sb.st_blksize);
    #else
      r = fs_Stats_alloc(sb.st_dev, sb.st_mode, sb.st_nlink, sb.st_ino, sb.st_uid, sb.st_gid, sb.st_rdev, sb.st_atim.tv_sec, sb.st_atim.tv_nsec, sb.st_mtim.tv_sec, sb.st_mtim.tv_nsec, sb.st_ctim.tv_sec, sb.st_ctim.tv_nsec, sb.st_ctim.tv_sec, sb.st_ctim.tv_nsec, sb.st_size, sb.st_blocks, sb.st_blksize);
    #endif
  #endif
fs_statSync_cleanup:
  free(c);
  str_free(s);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return r;
}
struct str i32_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str i64_str (int64_t d) {
  char buf[24];
  sprintf(buf, "%" PRId64, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct str u32_str (uint32_t d) {
  char buf[24];
  sprintf(buf, "%" PRIu32, d);
  return str_alloc(buf);
}
struct str u64_str (uint64_t d) {
  char buf[24];
  sprintf(buf, "%" PRIu64, d);
  return str_alloc(buf);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct fs_Stats *fs_Stats_alloc (uint64_t __THE_0_dev, uint32_t __THE_0_mode, int64_t __THE_0_nlink, uint64_t __THE_0_ino, int32_t __THE_0_uid, int32_t __THE_0_gid, uint64_t __THE_0_rdev, int64_t __THE_0_atime, int64_t __THE_0_atimeNs, int64_t __THE_0_mtime, int64_t __THE_0_mtimeNs, int64_t __THE_0_ctime, int64_t __THE_0_ctimeNs, int64_t __THE_0_btime, int64_t __THE_0_btimeNs, int64_t __THE_0_size, int64_t __THE_0_blocks, int64_t __THE_0_blockSize) {
  struct fs_Stats *r = alloc(sizeof(struct fs_Stats));
  struct fs_Stats s = {__THE_0_dev, __THE_0_mode, __THE_0_nlink, __THE_0_ino, __THE_0_uid, __THE_0_gid, __THE_0_rdev, __THE_0_atime, __THE_0_atimeNs, __THE_0_mtime, __THE_0_mtimeNs, __THE_0_ctime, __THE_0_ctimeNs, __THE_0_btime, __THE_0_btimeNs, __THE_0_size, __THE_0_blocks, __THE_0_blockSize};
  memcpy(r, &s, sizeof(struct fs_Stats));
  return r;
}
void fs_Stats_free (struct fs_Stats *n) {
  free(n);
}
struct str fs_Stats_str (struct fs_Stats *n) {
  struct str r = str_alloc("fs_Stats{");
  r = str_concat_cstr(r, "dev: ");
  r = str_concat_str(r, u64_str(n->__THE_0_dev));
  r = str_concat_cstr(r, ", mode: ");
  r = str_concat_str(r, u32_str(n->__THE_0_mode));
  r = str_concat_cstr(r, ", nlink: ");
  r = str_concat_str(r, i64_str(n->__THE_0_nlink));
  r = str_concat_cstr(r, ", ino: ");
  r = str_concat_str(r, u64_str(n->__THE_0_ino));
  r = str_concat_cstr(r, ", uid: ");
  r = str_concat_str(r, i32_str(n->__THE_0_uid));
  r = str_concat_cstr(r, ", gid: ");
  r = str_concat_str(r, i32_str(n->__THE_0_gid));
  r = str_concat_cstr(r, ", rdev: ");
  r = str_concat_str(r, u64_str(n->__THE_0_rdev));
  r = str_concat_cstr(r, ", atime: ");
  r = str_concat_str(r, i64_str(n->__THE_0_atime));
  r = str_concat_cstr(r, ", atimeNs: ");
  r = str_concat_str(r, i64_str(n->__THE_0_atimeNs));
  r = str_concat_cstr(r, ", mtime: ");
  r = str_concat_str(r, i64_str(n->__THE_0_mtime));
  r = str_concat_cstr(r, ", mtimeNs: ");
  r = str_concat_str(r, i64_str(n->__THE_0_mtimeNs));
  r = str_concat_cstr(r, ", ctime: ");
  r = str_concat_str(r, i64_str(n->__THE_0_ctime));
  r = str_concat_cstr(r, ", ctimeNs: ");
  r = str_concat_str(r, i64_str(n->__THE_0_ctimeNs));
  r = str_concat_cstr(r, ", btime: ");
  r = str_concat_str(r, i64_str(n->__THE_0_btime));
  r = str_concat_cstr(r, ", btimeNs: ");
  r = str_concat_str(r, i64_str(n->__THE_0_btimeNs));
  r = str_concat_cstr(r, ", size: ");
  r = str_concat_str(r, i64_str(n->__THE_0_size));
  r = str_concat_cstr(r, ", blocks: ");
  r = str_concat_str(r, i64_str(n->__THE_0_blocks));
  r = str_concat_cstr(r, ", blockSize: ");
  r = str_concat_str(r, i64_str(n->__THE_0_blockSize));
  fs_Stats_free((struct fs_Stats *) n);
  return str_concat_cstr(r, "}");
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  print(stdout, "sz", fs_Stats_str((error_stack_pos(&err_state, 2, 9), fs_statSync(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures")))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  print(stdout, "sz", fs_Stats_str((error_stack_pos(&err_state, 3, 9), fs_statSync(str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt")))), THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
fs_Stats{dev: {{ \d+ }}, mode: {{ \d+ }}, nlink: {{ \d+ }}, ino: {{ \d+ }}, uid: {{ \d+ }}, gid: {{ \d+ }}, rdev: {{ \d+ }}, atime: {{ \d+ }}, atimeNs: {{ \d+ }}, mtime: {{ \d+ }}, mtimeNs: {{ \d+ }}, ctime: {{ \d+ }}, ctimeNs: {{ \d+ }}, btime: {{ \d+ }}, btimeNs: {{ \d+ }}, size: {{ \d+ }}, blocks: {{ \d+ }}, blockSize: {{ \d+ }}}
fs_Stats{dev: {{ \d+ }}, mode: {{ \d+ }}, nlink: {{ \d+ }}, ino: {{ \d+ }}, uid: {{ \d+ }}, gid: {{ \d+ }}, rdev: {{ \d+ }}, atime: {{ \d+ }}, atimeNs: {{ \d+ }}, mtime: {{ \d+ }}, mtimeNs: {{ \d+ }}, ctime: {{ \d+ }}, ctimeNs: {{ \d+ }}, btime: {{ \d+ }}, btimeNs: {{ \d+ }}, size: {{ \d+ }}, blocks: {{ \d+ }}, blockSize: {{ \d+ }}}
