======= stdin =======
main {
  a := [
    { "key1": 1, "key2": 2, "key3": 3 },
    { "key1": 3, "key2": 4, "key3": 5 },
    { "key1": 5, "key2": 6, "key3": 7 }
  ]
  b: int[str][] = [
    { "key1": 8,  "key2": 9,  "key3": 10 },
    { "key1": 10, "key2": 11, "key3": 12 },
    { "key1": 12, "key2": 13, "key3": 14 }
  ]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair$0;
struct __THE_1_map$0;
struct __THE_1_array_map$0;

struct __THE_1_pair$0 {
  struct str f;
  int32_t s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};
struct __THE_1_array_map$0 {
  struct __THE_1_map$0 *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
void __THE_1_map$0_free (struct __THE_1_map$0);
struct __THE_1_array_map$0 __THE_1_array_map$0_alloc (size_t, ...);
void __THE_1_array_map$0_free (struct __THE_1_array_map$0);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_array_map$0 __THE_1_array_map$0_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_map$0) {NULL, 0};
  struct __THE_1_map$0 *d = alloc(x * sizeof(struct __THE_1_map$0));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_map$0);
  va_end(args);
  return (struct __THE_1_array_map$0) {d, x};
}
void __THE_1_array_map$0_free (struct __THE_1_array_map$0 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_map$0_free((struct __THE_1_map$0) n.d[i]);
  free(n.d);
}

int main () {
  const struct __THE_1_array_map$0 __THE_0_a_0 = __THE_1_array_map$0_alloc(3, __THE_1_map$0_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3), __THE_1_map$0_alloc(3, str_alloc("key1"), 3, str_alloc("key2"), 4, str_alloc("key3"), 5), __THE_1_map$0_alloc(3, str_alloc("key1"), 5, str_alloc("key2"), 6, str_alloc("key3"), 7));
  const struct __THE_1_array_map$0 __THE_0_b_0 = __THE_1_array_map$0_alloc(3, __THE_1_map$0_alloc(3, str_alloc("key1"), 8, str_alloc("key2"), 9, str_alloc("key3"), 10), __THE_1_map$0_alloc(3, str_alloc("key1"), 10, str_alloc("key2"), 11, str_alloc("key3"), 12), __THE_1_map$0_alloc(3, str_alloc("key1"), 12, str_alloc("key2"), 13, str_alloc("key3"), 14));
  __THE_1_array_map$0_free((struct __THE_1_array_map$0) __THE_0_b_0);
  __THE_1_array_map$0_free((struct __THE_1_array_map$0) __THE_0_a_0);
}
======= flags =======
======= stdout =======
