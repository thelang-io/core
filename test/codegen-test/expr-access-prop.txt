======= stdin =======
obj Test1 {
  b: int
  test2: Test2
}

obj Test2 {
  c: str
}

fn test3 () str {
  return "test"
}

main {
  test2 := Test2{c: "test"}
  test1 := Test1{b: 8, test2: test2}

  mut a := test1.b
  b := test1.test2.c
  c := (a = 2).str()
  d := ("test1" + "test2").len
  e := test3().len
  f := (1 > 2 ? "test1" : "test2").len
  g := true.str()
  h := false.str()
  m := 'a'.str()
  n := (1).str()
  o := (3.14).str()
  p := "test".len
  q := (ref a).str()
  r := (!2).str()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Test1_0 {
  const int32_t __THE_0_b;
  const struct __THE_1_Test2_0 *__THE_0_test2;
};
struct __THE_1_Test2_0 {
  const struct str __THE_0_c;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
};
struct __THE_1_fn$1000 {
  struct str (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str bool_str (bool);
struct str char_str (char);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str float_str (double);
struct str int_str (int32_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
size_t str_len (struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t, struct __THE_1_Test2_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str);
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct str __THE_1_test3_0 (void *, struct __THE_1_fn$1000P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str bool_str (bool t) {
  return str_alloc(t ? "true" : "false");
}
struct str char_str (char c) {
  char buf[2] = {c, '\0'};
  return str_alloc(buf);
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
size_t str_len (struct str s) {
  size_t l = s.l;
  free(s.d);
  return l;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t __THE_0_b, struct __THE_1_Test2_0 *__THE_0_test2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_b, __THE_0_test2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n->__THE_0_test2);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct str __THE_0_c) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_c};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *n) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {str_copy(n->__THE_0_c)};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  str_free((struct str) n->__THE_0_c);
  free(n);
}
struct str __THE_1_test3_0 (void *px, struct __THE_1_fn$1000P p) {
  struct str v;
  error_stack_push(&err_state, "/test", "test3", p.line, p.col);
  v = str_alloc("test");
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_test3_0 = (struct __THE_1_fn$1000) {&__THE_1_test3_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  const struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc(str_alloc("test"));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(8, __THE_1_Test2_0_copy(__THE_0_test2_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  int32_t __THE_0_a_0 = __THE_0_test1_0->__THE_0_b;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct str __THE_0_b_0 = str_copy(__THE_0_test1_0->__THE_0_test2->__THE_0_c);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const struct str __THE_0_c_0 = int_str(__THE_0_a_0 = 2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const int32_t __THE_0_d_0 = str_len((str_alloc("test1test2")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const int32_t __THE_0_e_0 = str_len(__THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$1000P) {22, 8}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const int32_t __THE_0_f_0 = str_len((1 > 2 ? str_alloc("test1") : str_alloc("test2")));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const struct str __THE_0_g_0 = bool_str(true);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  const struct str __THE_0_h_0 = bool_str(false);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const struct str __THE_0_m_0 = char_str('a');
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L9;
  const struct str __THE_0_n_0 = int_str(1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  const struct str __THE_0_o_0 = float_str(3.14);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L11;
  const int32_t __THE_0_p_0 = str_len(str_alloc("test"));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L11;
  const struct str __THE_0_q_0 = int_str(__THE_0_a_0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L12;
  const struct str __THE_0_r_0 = bool_str(!2);
  str_free((struct str) __THE_0_r_0);
L12:
  str_free((struct str) __THE_0_q_0);
L11:
  str_free((struct str) __THE_0_o_0);
L10:
  str_free((struct str) __THE_0_n_0);
L9:
  str_free((struct str) __THE_0_m_0);
L8:
  str_free((struct str) __THE_0_h_0);
L7:
  str_free((struct str) __THE_0_g_0);
L6:
  str_free((struct str) __THE_0_c_0);
L5:
  str_free((struct str) __THE_0_b_0);
L4:
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
L3:
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
L2:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
