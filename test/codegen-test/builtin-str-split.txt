======= stdin =======
main {
  result1 := "".split()
  result2 := "t".split()
  result3 := "test in test".split()
  result4 := "".split("")
  result5 := "t".split("")
  result6 := "test in test".split("")
  result7 := "".split("t")
  result8 := "t".split("t")
  result9 := "test in test".split("t")
  result10 := "".split("test")
  result11 := "t".split("test")
  result12 := "test in test".split("test")

  print("1:", result1)
  print("2:", result2)
  print("3:", result3)
  print("4:", result4)
  print("5:", result5)
  print("6:", result6)
  print("7:", result7)
  print("8:", result8)
  print("9:", result9)
  print("10:", result10)
  print("11:", result11)
  print("12:", result12)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_calloc (const char *, size_t);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct __THE_1_array_str str_split (struct str, unsigned char, struct str);
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str);
void __THE_1_array_str_free (struct __THE_1_array_str);
struct str __THE_1_array_str_str (struct __THE_1_array_str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_calloc (const char *r, size_t l) {
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_str str_split (struct str self, unsigned char o1, struct str n1) {
  struct str *r = NULL;
  size_t l = 0;
  if (self.l > 0 && n1.l == 0) {
    l = self.l;
    r = alloc(l * sizeof(struct str));
    for (size_t i = 0; i < l; i++) {
      r[i] = str_calloc(&self.d[i], 1);
    }
  } else if (self.l < n1.l) {
    r = re_alloc(r, ++l * sizeof(struct str));
    r[0] = str_calloc(self.d, self.l);
  } else if (n1.l > 0) {
    size_t i = 0;
    for (size_t j = 0; j <= self.l - n1.l; j++) {
      if (memcmp(&self.d[j], n1.d, n1.l) == 0) {
        r = re_alloc(r, ++l * sizeof(struct str));
        r[l - 1] = str_calloc(&self.d[i], j - i);
        j += n1.l;
        i = j;
      }
    }
    r = re_alloc(r, ++l * sizeof(struct str));
    r[l - 1] = str_calloc(&self.d[i], self.l - i);
  }
  free(n1.d);
  free(self.d);
  return (struct __THE_1_array_str) {r, l};
}
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str n) {
  if (n.l == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) d[i] = str_copy(n.d[i]);
  return (struct __THE_1_array_str) {d, n.l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
struct str __THE_1_array_str_str (struct __THE_1_array_str n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_cstr(r, "\"");
    r = str_concat_str(r, str_escape(n.d[i]));
    r = str_concat_cstr(r, "\"");
  }
  __THE_1_array_str_free((struct __THE_1_array_str) n);
  return str_concat_cstr(r, "]");
}

int main () {
  const struct __THE_1_array_str __THE_0_result1_0 = str_split(str_alloc(""), 0, (struct str) {});
  const struct __THE_1_array_str __THE_0_result2_0 = str_split(str_alloc("t"), 0, (struct str) {});
  const struct __THE_1_array_str __THE_0_result3_0 = str_split(str_alloc("test in test"), 0, (struct str) {});
  const struct __THE_1_array_str __THE_0_result4_0 = str_split(str_alloc(""), 1, str_alloc(""));
  const struct __THE_1_array_str __THE_0_result5_0 = str_split(str_alloc("t"), 1, str_alloc(""));
  const struct __THE_1_array_str __THE_0_result6_0 = str_split(str_alloc("test in test"), 1, str_alloc(""));
  const struct __THE_1_array_str __THE_0_result7_0 = str_split(str_alloc(""), 1, str_alloc("t"));
  const struct __THE_1_array_str __THE_0_result8_0 = str_split(str_alloc("t"), 1, str_alloc("t"));
  const struct __THE_1_array_str __THE_0_result9_0 = str_split(str_alloc("test in test"), 1, str_alloc("t"));
  const struct __THE_1_array_str __THE_0_result10_0 = str_split(str_alloc(""), 1, str_alloc("test"));
  const struct __THE_1_array_str __THE_0_result11_0 = str_split(str_alloc("t"), 1, str_alloc("test"));
  const struct __THE_1_array_str __THE_0_result12_0 = str_split(str_alloc("test in test"), 1, str_alloc("test"));
  print(stdout, "zzsz", "1:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result1_0)), THE_EOL);
  print(stdout, "zzsz", "2:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result2_0)), THE_EOL);
  print(stdout, "zzsz", "3:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result3_0)), THE_EOL);
  print(stdout, "zzsz", "4:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result4_0)), THE_EOL);
  print(stdout, "zzsz", "5:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result5_0)), THE_EOL);
  print(stdout, "zzsz", "6:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result6_0)), THE_EOL);
  print(stdout, "zzsz", "7:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result7_0)), THE_EOL);
  print(stdout, "zzsz", "8:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result8_0)), THE_EOL);
  print(stdout, "zzsz", "9:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result9_0)), THE_EOL);
  print(stdout, "zzsz", "10:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result10_0)), THE_EOL);
  print(stdout, "zzsz", "11:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result11_0)), THE_EOL);
  print(stdout, "zzsz", "12:", " ", __THE_1_array_str_str(__THE_1_array_str_copy(__THE_0_result12_0)), THE_EOL);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result12_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result11_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result10_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result9_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result8_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result7_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result6_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result5_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result4_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result3_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result2_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_result1_0);
}
======= flags =======
======= stdout =======
1: []
2: ["t"]
3: ["t", "e", "s", "t", " ", "i", "n", " ", "t", "e", "s", "t"]
4: []
5: ["t"]
6: ["t", "e", "s", "t", " ", "i", "n", " ", "t", "e", "s", "t"]
7: [""]
8: ["", ""]
9: ["", "es", " in ", "es", ""]
10: [""]
11: ["t"]
12: ["", " in ", ""]
