======= stdin =======
fn test1 () {}
fn test2 () {}
fn test3 () {}
main {
  a := { "key1": test1, "key2": test2, "key3": test3 }
  b: (() -> void)[str] = { "key1": test1, "key2": test2, "key3": test3 }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn_sFRvoidFE;
struct __THE_1_pair_strMSfn_sFRvoidFEME;
struct __THE_1_map_strMSfn_sFRvoidFEME;

struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_pair_strMSfn_sFRvoidFEME {
  struct str f;
  struct __THE_1_fn_sFRvoidFE s;
};
struct __THE_1_map_strMSfn_sFRvoidFEME {
  struct __THE_1_pair_strMSfn_sFRvoidFEME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_fn_sFRvoidFE __THE_1_fn_sFRvoidFE_copy (const struct __THE_1_fn_sFRvoidFE);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_test1_0 (void *);
void __THE_1_test2_0 (void *);
void __THE_1_test3_0 (void *);
struct __THE_1_map_strMSfn_sFRvoidFEME __THE_1_map_strMSfn_sFRvoidFEME_alloc (int, ...);
void __THE_1_map_strMSfn_sFRvoidFEME_free (struct __THE_1_map_strMSfn_sFRvoidFEME);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_fn_sFRvoidFE __THE_1_fn_sFRvoidFE_copy (const struct __THE_1_fn_sFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test1_0 (void *px) {
}
void __THE_1_test2_0 (void *px) {
}
void __THE_1_test3_0 (void *px) {
}
struct __THE_1_map_strMSfn_sFRvoidFEME __THE_1_map_strMSfn_sFRvoidFEME_alloc (int x, ...) {
  struct __THE_1_pair_strMSfn_sFRvoidFEME *d = alloc(x * sizeof(struct __THE_1_pair_strMSfn_sFRvoidFEME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSfn_sFRvoidFEME) {va_arg(args, struct str), va_arg(args, struct __THE_1_fn_sFRvoidFE)};
  va_end(args);
  return (struct __THE_1_map_strMSfn_sFRvoidFEME) {d, x, x};
}
void __THE_1_map_strMSfn_sFRvoidFEME_free (struct __THE_1_map_strMSfn_sFRvoidFEME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) n.d[i].s);
  }
  free(n.d);
}

int main () {
  const struct __THE_1_fn_sFRvoidFE __THE_0_test1_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn_sFRvoidFE __THE_0_test2_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn_sFRvoidFE __THE_0_test3_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_map_strMSfn_sFRvoidFEME __THE_0_a_0 = __THE_1_map_strMSfn_sFRvoidFEME_alloc(3, str_alloc("key1"), __THE_1_fn_sFRvoidFE_copy(__THE_0_test1_0), str_alloc("key2"), __THE_1_fn_sFRvoidFE_copy(__THE_0_test2_0), str_alloc("key3"), __THE_1_fn_sFRvoidFE_copy(__THE_0_test3_0));
  const struct __THE_1_map_strMSfn_sFRvoidFEME __THE_0_b_0 = __THE_1_map_strMSfn_sFRvoidFEME_alloc(3, str_alloc("key1"), __THE_1_fn_sFRvoidFE_copy(__THE_0_test1_0), str_alloc("key2"), __THE_1_fn_sFRvoidFE_copy(__THE_0_test2_0), str_alloc("key3"), __THE_1_fn_sFRvoidFE_copy(__THE_0_test3_0));
  __THE_1_map_strMSfn_sFRvoidFEME_free((struct __THE_1_map_strMSfn_sFRvoidFEME) __THE_0_b_0);
  __THE_1_map_strMSfn_sFRvoidFEME_free((struct __THE_1_map_strMSfn_sFRvoidFEME) __THE_0_a_0);
}
======= flags =======
======= stdout =======
