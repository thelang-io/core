======= stdin =======
main {
  test := [0, 1, 2]

  test.slice()
  test.slice(0)
  test.slice(1)
  test.slice(2)
  test.slice(3)
  test.slice(0, 0)
  test.slice(0, 1)
  test.slice(0, 2)
  test.slice(0, 3)
  test.slice(1, 0)
  test.slice(1, 1)
  test.slice(1, 2)
  test.slice(1, 3)
  test.slice(2, 0)
  test.slice(2, 1)
  test.slice(2, 2)
  test.slice(2, 3)
  test.slice(3, 0)
  test.slice(3, 1)
  test.slice(3, 2)
  test.slice(3, 3)
  test.slice(0, -1)
  test.slice(0, -2)
  test.slice(0, -3)
  test.slice(1, -1)
  test.slice(1, -2)
  test.slice(1, -3)
  test.slice(2, -1)
  test.slice(2, -2)
  test.slice(2, -3)
  test.slice(3, -1)
  test.slice(3, -2)
  test.slice(3, -3)
  test.slice(-1, 0)
  test.slice(-1, 1)
  test.slice(-1, 2)
  test.slice(-1, 3)
  test.slice(-2, 0)
  test.slice(-2, 1)
  test.slice(-2, 2)
  test.slice(-2, 3)
  test.slice(-3, 0)
  test.slice(-3, 1)
  test.slice(-3, 2)
  test.slice(-3, 3)
  test.slice(-1, -1)
  test.slice(-1, -2)
  test.slice(-1, -3)
  test.slice(-2, -1)
  test.slice(-2, -2)
  test.slice(-2, -3)
  test.slice(-3, -1)
  test.slice(-3, -2)
  test.slice(-3, -3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_slice (struct __THE_1_array_int, unsigned int, int32_t, unsigned int, int32_t);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_slice (struct __THE_1_array_int n, unsigned int o1, int32_t n1, unsigned int o2, int32_t n2) {
  int32_t i1 = o1 == 0 ? 0 : (int32_t) (n1 < 0 ? (n1 < -((int32_t) n.l) ? 0 : n1 + n.l) : (n1 > n.l ? n.l : n1));
  int32_t i2 = o2 == 0 ? (int32_t) n.l : (int32_t) (n2 < 0 ? (n2 < -((int32_t) n.l) ? 0 : n2 + n.l) : (n2 > n.l ? n.l : n2));
  if (i1 > i2 || i1 >= n.l) {
    __THE_1_array_int_free((struct __THE_1_array_int) n);
    return (struct __THE_1_array_int) {NULL, 0};
  }
  size_t l = i2 - i1;
  int32_t *d = alloc(l * sizeof(int32_t));
  for (size_t i = 0; i1 < i2; i1++) d[i++] = n.d[i1];
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return (struct __THE_1_array_int) {d, l};
}

int main () {
  const struct __THE_1_array_int __THE_0_test_0 = __THE_1_array_int_alloc(3, 0, 1, 2);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 0, 0, 0, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 0, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 0, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 0, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 0, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 0, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 1, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 2, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, 3, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, 3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -1, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -2, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, -1));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, -2));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_slice(__THE_1_array_int_copy(__THE_0_test_0), 1, -3, 1, -3));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test_0);
}
======= flags =======
======= stdout =======
