======= stdin =======
obj Test {
  a: () -> void
}

fn test () {}

main {
  Test{a: test}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_fn$1000;
struct __THE_1_Test_0;

struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_Test_0 {
  const struct __THE_1_fn$1000 __THE_0_a;
};

void *alloc (size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$1000);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
void __THE_1_test_0 (void *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$1000 __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n->__THE_0_a);
  free(n);
}
void __THE_1_test_0 (void *px) {
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test_0 = (struct __THE_1_fn$1000) {&__THE_1_test_0, NULL, 0};
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(__THE_1_fn$1000_copy(__THE_0_test_0)));
}
======= flags =======
======= stdout =======
