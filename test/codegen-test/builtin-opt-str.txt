======= stdin =======
obj Test1 {
  o: int?
}

fn testCall () int? {
  return 1
}

main {
  test: int? = 2
  refTest := ref test
  test1 := Test1{o: 3}
  mut test2: int? = nil

  v1 := test.str()
  v2 := test1.o.str()
  v3 := (test2 = 5).str()
  v5 := testCall().str()
  v6 := (1 > 2 ? test : test2).str()
  v7 := (ref test).str()
  v8 := refTest.str()

  fn testCtx () {
    v11 := test.str()
    v12 := test1.o.str()
    v13 := (test2 = 3).str()
    v14 := testCall().str()
    v15 := (ref test).str()
    v16 := refTest.str()
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_fn$0;
struct __THE_1_fn$1;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  const int32_t *__THE_0_o;
};
struct __THE_1_fn$0 {
  int32_t *(*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  int32_t **__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0;
  const int32_t ***__THE_0_refTest_0;
  const int32_t **__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0;
};

void *alloc (size_t);
struct str int_str (int32_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);
struct str __THE_1_opt_int_str (int32_t *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
int32_t *__THE_1_testCall_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtestCtx_0X);
void __THE_1_mainSDtestCtx_0 (void *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str int_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}
struct str __THE_1_opt_int_str (int32_t *n) {
  if (n == NULL) return str_alloc("nil");
  struct str r = int_str(*n);
  __THE_1_opt_int_free((int32_t *) n);
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t *__THE_0_o) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_o};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  __THE_1_opt_int_free((int32_t *) o->__THE_0_o);
  free(o);
}
int32_t *__THE_1_testCall_0 (void *px) {
  return __THE_1_opt_int_alloc(1);
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  int32_t **__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const int32_t ***__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const int32_t **__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$0 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  const struct str __THE_0_v11_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(*__THE_0_test_0));
  const struct str __THE_0_v12_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy((*__THE_0_test1_0)->__THE_0_o));
  const struct str __THE_0_v13_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(*__THE_0_test2_0 = __THE_1_opt_int_realloc(*__THE_0_test2_0, __THE_1_opt_int_alloc(3))));
  const struct str __THE_0_v14_0 = __THE_1_opt_int_str((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x));
  const struct str __THE_0_v15_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(*__THE_0_test_0));
  const struct str __THE_0_v16_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(**__THE_0_refTest_0));
  str_free((struct str) __THE_0_v16_0);
  str_free((struct str) __THE_0_v15_0);
  str_free((struct str) __THE_0_v14_0);
  str_free((struct str) __THE_0_v13_0);
  str_free((struct str) __THE_0_v12_0);
  str_free((struct str) __THE_0_v11_0);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testCall_0 = (struct __THE_1_fn$0) {&__THE_1_testCall_0, NULL, 0};
  const int32_t *__THE_0_test_0 = __THE_1_opt_int_alloc(2);
  const int32_t **__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_1_opt_int_alloc(3));
  int32_t *__THE_0_test2_0 = NULL;
  const struct str __THE_0_v1_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(__THE_0_test_0));
  const struct str __THE_0_v2_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(__THE_0_test1_0->__THE_0_o));
  const struct str __THE_0_v3_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(__THE_0_test2_0 = __THE_1_opt_int_realloc(__THE_0_test2_0, __THE_1_opt_int_alloc(5))));
  const struct str __THE_0_v5_0 = __THE_1_opt_int_str(__THE_0_testCall_0.f(__THE_0_testCall_0.x));
  const struct str __THE_0_v6_0 = __THE_1_opt_int_str(1 > 2 ? __THE_1_opt_int_copy(__THE_0_test_0) : __THE_1_opt_int_copy(__THE_0_test2_0));
  const struct str __THE_0_v7_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(__THE_0_test_0));
  const struct str __THE_0_v8_0 = __THE_1_opt_int_str(__THE_1_opt_int_copy(*__THE_0_refTest_0));
  const struct __THE_1_fn$1 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtestCtx_0);
  str_free((struct str) __THE_0_v8_0);
  str_free((struct str) __THE_0_v7_0);
  str_free((struct str) __THE_0_v6_0);
  str_free((struct str) __THE_0_v5_0);
  str_free((struct str) __THE_0_v3_0);
  str_free((struct str) __THE_0_v2_0);
  str_free((struct str) __THE_0_v1_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_test2_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_test_0);
}
======= flags =======
======= stdout =======
