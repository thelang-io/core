======= stdin =======
main {
  testArrayInt := [1]
  optArrayInt: int[]?
  optArrayIntNilInit: int[]? = nil
  optArrayIntValInit: int[]? = [1]
  optArrayIntValCopy: int[]? = testArrayInt
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

void *alloc (size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_int *__THE_1_opt_array_int_alloc (struct __THE_1_array_int);
void __THE_1_opt_array_int_free (struct __THE_1_array_int *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_int *__THE_1_opt_array_int_alloc (struct __THE_1_array_int n) {
  struct __THE_1_array_int *r = alloc(sizeof(struct __THE_1_array_int));
  *r = n;
  return r;
}
void __THE_1_opt_array_int_free (struct __THE_1_array_int *n) {
  if (n == NULL) return;
  __THE_1_array_int_free((struct __THE_1_array_int) *n);
  free(n);
}

int main () {
  const struct __THE_1_array_int __THE_0_testArrayInt_0 = __THE_1_array_int_alloc(1, 1);
  const struct __THE_1_array_int *__THE_0_optArrayInt_0 = NULL;
  const struct __THE_1_array_int *__THE_0_optArrayIntNilInit_0 = NULL;
  const struct __THE_1_array_int *__THE_0_optArrayIntValInit_0 = __THE_1_opt_array_int_alloc(__THE_1_array_int_alloc(1, 1));
  const struct __THE_1_array_int *__THE_0_optArrayIntValCopy_0 = __THE_1_opt_array_int_alloc(__THE_1_array_int_copy(__THE_0_testArrayInt_0));
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayIntValCopy_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayIntValInit_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayIntNilInit_0);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) __THE_0_optArrayInt_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_testArrayInt_0);
}
======= flags =======
======= stdout =======
