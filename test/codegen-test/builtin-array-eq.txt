======= stdin =======
obj TestObj { a: int }

main {
  intA := 1
  intB := 2
  optIntA: int? = intA
  optIntB: int? = nil

  print("[[1, 2], [3, 4]] == [[1, 2], [3, 4]]:", [[1, 2], [3, 4]] == [[1, 2], [3, 4]])
  print("[[1, 2], [3, 4]] != [[0, 1], [2, 3]]:", [[1, 2], [3, 4]] != [[0, 1], [2, 3]])
  print("[true] == [true]:", [true] == [true])
  print("[false] != [true]:", [false] != [true])
  print("['a'] == ['a']:", ['a'] == ['a'])
  print("['a'] != ['c']:", ['a'] != ['c'])
  print("[3.14] == [3.14]:", [3.14] == [3.14])
  print("[3.14] != [2.16]:", [3.14] != [2.16])
  print("[1] == [1]:", [1] == [1])
  print("[1] != [0]:", [1] != [0])
  print("[TestObj{a: 1}] == [TestObj{a: 1}]:", [TestObj{a: 1}] == [TestObj{a: 1}])
  print("[TestObj{a: 1}] != [TestObj{a: 2}]:", [TestObj{a: 1}] != [TestObj{a: 2}])
  print("[optIntA] == [optIntA]:", [optIntA] == [optIntA])
  print("[optIntA] != [optIntB]:", [optIntA] != [optIntB])
  print("[ref intA] == [ref intA]:", [ref intA] == [ref intA])
  print("[ref intA] != [ref intB]:", [ref intA] != [ref intB])
  print("[\"test1\"] == [\"test1\"]:", ["test1"] == ["test1"])
  print("[\"test1\"] != [\"test2\"]:", ["test1"] != ["test2"])
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;
struct __THE_1_TestObj_0;
struct __THE_1_array_int;
struct __THE_1_array_array_int;
struct __THE_1_array_bool;
struct __THE_1_array_char;
struct __THE_1_array_float;
struct __THE_1_array_TestObj;
struct __THE_1_array_opt_int;
struct __THE_1_array_ref_int;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_array_int {
  struct __THE_1_array_int *d;
  size_t l;
};
struct __THE_1_array_bool {
  bool *d;
  size_t l;
};
struct __THE_1_array_char {
  char *d;
  size_t l;
};
struct __THE_1_array_float {
  double *d;
  size_t l;
};
struct __THE_1_array_TestObj {
  struct __THE_1_TestObj_0 **d;
  size_t l;
};
struct __THE_1_array_opt_int {
  int32_t **d;
  size_t l;
};
struct __THE_1_array_ref_int {
  int32_t **d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
bool __THE_1_array_str_eq (struct __THE_1_array_str, struct __THE_1_array_str);
void __THE_1_array_str_free (struct __THE_1_array_str);
bool __THE_1_array_str_ne (struct __THE_1_array_str, struct __THE_1_array_str);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
bool __THE_1_TestObj_0_ne (struct __THE_1_TestObj_0 *, struct __THE_1_TestObj_0 *);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
bool __THE_1_array_int_eq (struct __THE_1_array_int, struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
bool __THE_1_array_int_ne (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t, ...);
bool __THE_1_array_array_int_eq (struct __THE_1_array_array_int, struct __THE_1_array_array_int);
void __THE_1_array_array_int_free (struct __THE_1_array_array_int);
bool __THE_1_array_array_int_ne (struct __THE_1_array_array_int, struct __THE_1_array_array_int);
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t, ...);
bool __THE_1_array_bool_eq (struct __THE_1_array_bool, struct __THE_1_array_bool);
void __THE_1_array_bool_free (struct __THE_1_array_bool);
bool __THE_1_array_bool_ne (struct __THE_1_array_bool, struct __THE_1_array_bool);
struct __THE_1_array_char __THE_1_array_char_alloc (size_t, ...);
bool __THE_1_array_char_eq (struct __THE_1_array_char, struct __THE_1_array_char);
void __THE_1_array_char_free (struct __THE_1_array_char);
bool __THE_1_array_char_ne (struct __THE_1_array_char, struct __THE_1_array_char);
struct __THE_1_array_float __THE_1_array_float_alloc (size_t, ...);
bool __THE_1_array_float_eq (struct __THE_1_array_float, struct __THE_1_array_float);
void __THE_1_array_float_free (struct __THE_1_array_float);
bool __THE_1_array_float_ne (struct __THE_1_array_float, struct __THE_1_array_float);
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t, ...);
bool __THE_1_array_TestObj_eq (struct __THE_1_array_TestObj, struct __THE_1_array_TestObj);
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj);
bool __THE_1_array_TestObj_ne (struct __THE_1_array_TestObj, struct __THE_1_array_TestObj);
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t, ...);
bool __THE_1_array_opt_int_eq (struct __THE_1_array_opt_int, struct __THE_1_array_opt_int);
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int);
bool __THE_1_array_opt_int_ne (struct __THE_1_array_opt_int, struct __THE_1_array_opt_int);
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t, ...);
bool __THE_1_array_ref_int_eq (struct __THE_1_array_ref_int, struct __THE_1_array_ref_int);
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int);
bool __THE_1_array_ref_int_ne (struct __THE_1_array_ref_int, struct __THE_1_array_ref_int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
bool __THE_1_array_str_eq (struct __THE_1_array_str n1, struct __THE_1_array_str n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i]), str_copy(n2.d[i]))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_str_free((struct __THE_1_array_str) n1);
  __THE_1_array_str_free((struct __THE_1_array_str) n2);
  return r;
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
bool __THE_1_array_str_ne (struct __THE_1_array_str n1, struct __THE_1_array_str n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i]), str_copy(n2.d[i]))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_str_free((struct __THE_1_array_str) n1);
  __THE_1_array_str_free((struct __THE_1_array_str) n2);
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *n) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *n) {
  free(n);
}
bool __THE_1_TestObj_0_ne (struct __THE_1_TestObj_0 *n1, struct __THE_1_TestObj_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n1);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n2);
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
bool __THE_1_array_int_eq (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
bool __THE_1_array_int_ne (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(x * sizeof(struct __THE_1_array_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_int);
  va_end(args);
  return (struct __THE_1_array_array_int) {d, x};
}
bool __THE_1_array_array_int_eq (struct __THE_1_array_array_int n1, struct __THE_1_array_array_int n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (__THE_1_array_int_ne(__THE_1_array_int_copy(n1.d[i]), __THE_1_array_int_copy(n2.d[i]))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) n1);
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) n2);
  return r;
}
void __THE_1_array_array_int_free (struct __THE_1_array_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_int_free((struct __THE_1_array_int) n.d[i]);
  free(n.d);
}
bool __THE_1_array_array_int_ne (struct __THE_1_array_array_int n1, struct __THE_1_array_array_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (__THE_1_array_int_ne(__THE_1_array_int_copy(n1.d[i]), __THE_1_array_int_copy(n2.d[i]))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) n1);
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) n2);
  return r;
}
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_bool) {NULL, 0};
  bool *d = alloc(x * sizeof(bool));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_bool) {d, x};
}
bool __THE_1_array_bool_eq (struct __THE_1_array_bool n1, struct __THE_1_array_bool n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_bool_free((struct __THE_1_array_bool) n1);
  __THE_1_array_bool_free((struct __THE_1_array_bool) n2);
  return r;
}
void __THE_1_array_bool_free (struct __THE_1_array_bool n) {
  free(n.d);
}
bool __THE_1_array_bool_ne (struct __THE_1_array_bool n1, struct __THE_1_array_bool n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_bool_free((struct __THE_1_array_bool) n1);
  __THE_1_array_bool_free((struct __THE_1_array_bool) n2);
  return r;
}
struct __THE_1_array_char __THE_1_array_char_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_char) {NULL, 0};
  char *d = alloc(x * sizeof(char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_char) {d, x};
}
bool __THE_1_array_char_eq (struct __THE_1_array_char n1, struct __THE_1_array_char n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_char_free((struct __THE_1_array_char) n1);
  __THE_1_array_char_free((struct __THE_1_array_char) n2);
  return r;
}
void __THE_1_array_char_free (struct __THE_1_array_char n) {
  free(n.d);
}
bool __THE_1_array_char_ne (struct __THE_1_array_char n1, struct __THE_1_array_char n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_char_free((struct __THE_1_array_char) n1);
  __THE_1_array_char_free((struct __THE_1_array_char) n2);
  return r;
}
struct __THE_1_array_float __THE_1_array_float_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_float) {NULL, 0};
  double *d = alloc(x * sizeof(double));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_float) {d, x};
}
bool __THE_1_array_float_eq (struct __THE_1_array_float n1, struct __THE_1_array_float n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_float_free((struct __THE_1_array_float) n1);
  __THE_1_array_float_free((struct __THE_1_array_float) n2);
  return r;
}
void __THE_1_array_float_free (struct __THE_1_array_float n) {
  free(n.d);
}
bool __THE_1_array_float_ne (struct __THE_1_array_float n1, struct __THE_1_array_float n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_float_free((struct __THE_1_array_float) n1);
  __THE_1_array_float_free((struct __THE_1_array_float) n2);
  return r;
}
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_TestObj) {NULL, 0};
  struct __THE_1_TestObj_0 **d = alloc(x * sizeof(struct __THE_1_TestObj_0 *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_TestObj_0 *);
  va_end(args);
  return (struct __THE_1_array_TestObj) {d, x};
}
bool __THE_1_array_TestObj_eq (struct __THE_1_array_TestObj n1, struct __THE_1_array_TestObj n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (__THE_1_TestObj_0_ne(__THE_1_TestObj_0_copy(n1.d[i]), __THE_1_TestObj_0_copy(n2.d[i]))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) n1);
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) n2);
  return r;
}
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n.d[i]);
  free(n.d);
}
bool __THE_1_array_TestObj_ne (struct __THE_1_array_TestObj n1, struct __THE_1_array_TestObj n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (__THE_1_TestObj_0_ne(__THE_1_TestObj_0_copy(n1.d[i]), __THE_1_TestObj_0_copy(n2.d[i]))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) n1);
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) n2);
  return r;
}
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_opt_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_opt_int) {d, x};
}
bool __THE_1_array_opt_int_eq (struct __THE_1_array_opt_int n1, struct __THE_1_array_opt_int n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(n1.d[i]), __THE_1_opt_int_copy(n2.d[i]))) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) n1);
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) n2);
  return r;
}
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_opt_int_free((int32_t *) n.d[i]);
  free(n.d);
}
bool __THE_1_array_opt_int_ne (struct __THE_1_array_opt_int n1, struct __THE_1_array_opt_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(n1.d[i]), __THE_1_opt_int_copy(n2.d[i]))) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) n1);
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) n2);
  return r;
}
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_ref_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_ref_int) {d, x};
}
bool __THE_1_array_ref_int_eq (struct __THE_1_array_ref_int n1, struct __THE_1_array_ref_int n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) n1);
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) n2);
  return r;
}
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int n) {
  free(n.d);
}
bool __THE_1_array_ref_int_ne (struct __THE_1_array_ref_int n1, struct __THE_1_array_ref_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) n1);
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) n2);
  return r;
}

int main () {
  const int32_t __THE_0_intA_0 = 1;
  const int32_t __THE_0_intB_0 = 2;
  const int32_t *__THE_0_optIntA_0 = __THE_1_opt_int_alloc(__THE_0_intA_0);
  const int32_t *__THE_0_optIntB_0 = NULL;
  print(stdout, "zztz", "[[1, 2], [3, 4]] == [[1, 2], [3, 4]]:", " ", __THE_1_array_array_int_eq(__THE_1_array_array_int_alloc(2, __THE_1_array_int_alloc(2, 1, 2), __THE_1_array_int_alloc(2, 3, 4)), __THE_1_array_array_int_alloc(2, __THE_1_array_int_alloc(2, 1, 2), __THE_1_array_int_alloc(2, 3, 4))), THE_EOL);
  print(stdout, "zztz", "[[1, 2], [3, 4]] != [[0, 1], [2, 3]]:", " ", __THE_1_array_array_int_ne(__THE_1_array_array_int_alloc(2, __THE_1_array_int_alloc(2, 1, 2), __THE_1_array_int_alloc(2, 3, 4)), __THE_1_array_array_int_alloc(2, __THE_1_array_int_alloc(2, 0, 1), __THE_1_array_int_alloc(2, 2, 3))), THE_EOL);
  print(stdout, "zztz", "[true] == [true]:", " ", __THE_1_array_bool_eq(__THE_1_array_bool_alloc(1, true), __THE_1_array_bool_alloc(1, true)), THE_EOL);
  print(stdout, "zztz", "[false] != [true]:", " ", __THE_1_array_bool_ne(__THE_1_array_bool_alloc(1, false), __THE_1_array_bool_alloc(1, true)), THE_EOL);
  print(stdout, "zztz", "['a'] == ['a']:", " ", __THE_1_array_char_eq(__THE_1_array_char_alloc(1, 'a'), __THE_1_array_char_alloc(1, 'a')), THE_EOL);
  print(stdout, "zztz", "['a'] != ['c']:", " ", __THE_1_array_char_ne(__THE_1_array_char_alloc(1, 'a'), __THE_1_array_char_alloc(1, 'c')), THE_EOL);
  print(stdout, "zztz", "[3.14] == [3.14]:", " ", __THE_1_array_float_eq(__THE_1_array_float_alloc(1, 3.14), __THE_1_array_float_alloc(1, 3.14)), THE_EOL);
  print(stdout, "zztz", "[3.14] != [2.16]:", " ", __THE_1_array_float_ne(__THE_1_array_float_alloc(1, 3.14), __THE_1_array_float_alloc(1, 2.16)), THE_EOL);
  print(stdout, "zztz", "[1] == [1]:", " ", __THE_1_array_int_eq(__THE_1_array_int_alloc(1, 1), __THE_1_array_int_alloc(1, 1)), THE_EOL);
  print(stdout, "zztz", "[1] != [0]:", " ", __THE_1_array_int_ne(__THE_1_array_int_alloc(1, 1), __THE_1_array_int_alloc(1, 0)), THE_EOL);
  print(stdout, "zztz", "[TestObj{a: 1}] == [TestObj{a: 1}]:", " ", __THE_1_array_TestObj_eq(__THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_alloc(1)), __THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_alloc(1))), THE_EOL);
  print(stdout, "zztz", "[TestObj{a: 1}] != [TestObj{a: 2}]:", " ", __THE_1_array_TestObj_ne(__THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_alloc(1)), __THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_alloc(2))), THE_EOL);
  print(stdout, "zztz", "[optIntA] == [optIntA]:", " ", __THE_1_array_opt_int_eq(__THE_1_array_opt_int_alloc(1, __THE_1_opt_int_copy(__THE_0_optIntA_0)), __THE_1_array_opt_int_alloc(1, __THE_1_opt_int_copy(__THE_0_optIntA_0))), THE_EOL);
  print(stdout, "zztz", "[optIntA] != [optIntB]:", " ", __THE_1_array_opt_int_ne(__THE_1_array_opt_int_alloc(1, __THE_1_opt_int_copy(__THE_0_optIntA_0)), __THE_1_array_opt_int_alloc(1, __THE_1_opt_int_copy(__THE_0_optIntB_0))), THE_EOL);
  print(stdout, "zztz", "[ref intA] == [ref intA]:", " ", __THE_1_array_ref_int_eq(__THE_1_array_ref_int_alloc(1, &__THE_0_intA_0), __THE_1_array_ref_int_alloc(1, &__THE_0_intA_0)), THE_EOL);
  print(stdout, "zztz", "[ref intA] != [ref intB]:", " ", __THE_1_array_ref_int_ne(__THE_1_array_ref_int_alloc(1, &__THE_0_intA_0), __THE_1_array_ref_int_alloc(1, &__THE_0_intB_0)), THE_EOL);
  print(stdout, "zztz", "[\"test1\"] == [\"test1\"]:", " ", __THE_1_array_str_eq(__THE_1_array_str_alloc(1, str_alloc("test1")), __THE_1_array_str_alloc(1, str_alloc("test1"))), THE_EOL);
  print(stdout, "zztz", "[\"test1\"] != [\"test2\"]:", " ", __THE_1_array_str_ne(__THE_1_array_str_alloc(1, str_alloc("test1")), __THE_1_array_str_alloc(1, str_alloc("test2"))), THE_EOL);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntB_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_optIntA_0);
}
======= flags =======
======= stdout =======
[[1, 2], [3, 4]] == [[1, 2], [3, 4]]: true
[[1, 2], [3, 4]] != [[0, 1], [2, 3]]: true
[true] == [true]: true
[false] != [true]: true
['a'] == ['a']: true
['a'] != ['c']: true
[3.14] == [3.14]: true
[3.14] != [2.16]: true
[1] == [1]: true
[1] != [0]: true
[TestObj{a: 1}] == [TestObj{a: 1}]: true
[TestObj{a: 1}] != [TestObj{a: 2}]: true
[optIntA] == [optIntA]: true
[optIntA] != [optIntB]: true
[ref intA] == [ref intA]: true
[ref intA] != [ref intB]: true
["test1"] == ["test1"]: true
["test1"] != ["test2"]: true
