======= stdin =======
main {
  testBool := true
  testByte: byte = 1
  testChar := 'a'
  testF32: f32 = 3.14
  testF64: f64 = 3.14
  testFloat := 3.14
  testI8: i8 = 1
  testI16: i16 = 1
  testI32: i32 = 1
  testI64: i64 = 1
  testInt := 1
  testU8: u8 = 10
  testU16: u16 = 10
  testU32: u32 = 10
  testU64: u64 = 10

  anyRawBool: any = true
  anyRawChar: any = 'a'
  anyRawFloat: any = 3.14
  anyRawInt: any = 1

  anyBool: any = testBool
  anyByte: any = testByte
  anyChar: any = testChar
  anyF32: any = testF32
  anyF64: any = testF64
  anyFloat: any = testFloat
  anyI8: any = testI8
  anyI16: any = testI16
  anyI32: any = testI32
  anyI64: any = testI64
  anyInt: any = testInt
  anyU8: any = testU8
  anyU16: any = testU16
  anyU32: any = testU32
  anyU64: any = testU64
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1
#define TYPE_bool 2
#define TYPE_char 3
#define TYPE_float 4
#define TYPE_int 5
#define TYPE_byte 6
#define TYPE_f32 7
#define TYPE_f64 8
#define TYPE_i8 9
#define TYPE_i16 10
#define TYPE_i32 11
#define TYPE_i64 12
#define TYPE_u8 13
#define TYPE_u16 14
#define TYPE_u32 15
#define TYPE_u64 16

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_any_bool;
struct __THE_1_any_char;
struct __THE_1_any_float;
struct __THE_1_any_int;
struct __THE_1_any_byte;
struct __THE_1_any_f32;
struct __THE_1_any_f64;
struct __THE_1_any_i8;
struct __THE_1_any_i16;
struct __THE_1_any_i32;
struct __THE_1_any_i64;
struct __THE_1_any_u8;
struct __THE_1_any_u16;
struct __THE_1_any_u32;
struct __THE_1_any_u64;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_any_bool {
  bool d;
};
struct __THE_1_any_char {
  char d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_any_int {
  int32_t d;
};
struct __THE_1_any_byte {
  unsigned char d;
};
struct __THE_1_any_f32 {
  float d;
};
struct __THE_1_any_f64 {
  double d;
};
struct __THE_1_any_i8 {
  int8_t d;
};
struct __THE_1_any_i16 {
  int16_t d;
};
struct __THE_1_any_i32 {
  int32_t d;
};
struct __THE_1_any_i64 {
  int64_t d;
};
struct __THE_1_any_u8 {
  uint8_t d;
};
struct __THE_1_any_u16 {
  uint16_t d;
};
struct __THE_1_any_u32 {
  uint32_t d;
};
struct __THE_1_any_u64 {
  uint64_t d;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void any_free (struct any);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct any __THE_1_any_bool_alloc (bool);
struct any __THE_1_any_bool_copy (const struct any);
void __THE_1_any_bool_free (struct any);
struct any __THE_1_any_char_alloc (char);
struct any __THE_1_any_char_copy (const struct any);
void __THE_1_any_char_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);
struct any __THE_1_any_byte_alloc (unsigned char);
struct any __THE_1_any_byte_copy (const struct any);
void __THE_1_any_byte_free (struct any);
struct any __THE_1_any_f32_alloc (float);
struct any __THE_1_any_f32_copy (const struct any);
void __THE_1_any_f32_free (struct any);
struct any __THE_1_any_f64_alloc (double);
struct any __THE_1_any_f64_copy (const struct any);
void __THE_1_any_f64_free (struct any);
struct any __THE_1_any_i8_alloc (int8_t);
struct any __THE_1_any_i8_copy (const struct any);
void __THE_1_any_i8_free (struct any);
struct any __THE_1_any_i16_alloc (int16_t);
struct any __THE_1_any_i16_copy (const struct any);
void __THE_1_any_i16_free (struct any);
struct any __THE_1_any_i32_alloc (int32_t);
struct any __THE_1_any_i32_copy (const struct any);
void __THE_1_any_i32_free (struct any);
struct any __THE_1_any_i64_alloc (int64_t);
struct any __THE_1_any_i64_copy (const struct any);
void __THE_1_any_i64_free (struct any);
struct any __THE_1_any_u8_alloc (uint8_t);
struct any __THE_1_any_u8_copy (const struct any);
void __THE_1_any_u8_free (struct any);
struct any __THE_1_any_u16_alloc (uint16_t);
struct any __THE_1_any_u16_copy (const struct any);
void __THE_1_any_u16_free (struct any);
struct any __THE_1_any_u32_alloc (uint32_t);
struct any __THE_1_any_u32_copy (const struct any);
void __THE_1_any_u32_free (struct any);
struct any __THE_1_any_u64_alloc (uint64_t);
struct any __THE_1_any_u64_copy (const struct any);
void __THE_1_any_u64_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct any __THE_1_any_bool_alloc (bool d) {
  size_t l = sizeof(struct __THE_1_any_bool);
  struct __THE_1_any_bool *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_bool, r, l, &__THE_1_any_bool_copy, &__THE_1_any_bool_free};
}
struct any __THE_1_any_bool_copy (const struct any n) {
  struct __THE_1_any_bool *o = n.d;
  struct __THE_1_any_bool *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_bool_free (struct any _n) {
  struct __THE_1_any_bool *n = _n.d;
  free(n);
}
struct any __THE_1_any_char_alloc (char d) {
  size_t l = sizeof(struct __THE_1_any_char);
  struct __THE_1_any_char *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_char, r, l, &__THE_1_any_char_copy, &__THE_1_any_char_free};
}
struct any __THE_1_any_char_copy (const struct any n) {
  struct __THE_1_any_char *o = n.d;
  struct __THE_1_any_char *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_char_free (struct any _n) {
  struct __THE_1_any_char *n = _n.d;
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}
struct any __THE_1_any_byte_alloc (unsigned char d) {
  size_t l = sizeof(struct __THE_1_any_byte);
  struct __THE_1_any_byte *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_byte, r, l, &__THE_1_any_byte_copy, &__THE_1_any_byte_free};
}
struct any __THE_1_any_byte_copy (const struct any n) {
  struct __THE_1_any_byte *o = n.d;
  struct __THE_1_any_byte *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_byte_free (struct any _n) {
  struct __THE_1_any_byte *n = _n.d;
  free(n);
}
struct any __THE_1_any_f32_alloc (float d) {
  size_t l = sizeof(struct __THE_1_any_f32);
  struct __THE_1_any_f32 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_f32, r, l, &__THE_1_any_f32_copy, &__THE_1_any_f32_free};
}
struct any __THE_1_any_f32_copy (const struct any n) {
  struct __THE_1_any_f32 *o = n.d;
  struct __THE_1_any_f32 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_f32_free (struct any _n) {
  struct __THE_1_any_f32 *n = _n.d;
  free(n);
}
struct any __THE_1_any_f64_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_f64);
  struct __THE_1_any_f64 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_f64, r, l, &__THE_1_any_f64_copy, &__THE_1_any_f64_free};
}
struct any __THE_1_any_f64_copy (const struct any n) {
  struct __THE_1_any_f64 *o = n.d;
  struct __THE_1_any_f64 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_f64_free (struct any _n) {
  struct __THE_1_any_f64 *n = _n.d;
  free(n);
}
struct any __THE_1_any_i8_alloc (int8_t d) {
  size_t l = sizeof(struct __THE_1_any_i8);
  struct __THE_1_any_i8 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_i8, r, l, &__THE_1_any_i8_copy, &__THE_1_any_i8_free};
}
struct any __THE_1_any_i8_copy (const struct any n) {
  struct __THE_1_any_i8 *o = n.d;
  struct __THE_1_any_i8 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_i8_free (struct any _n) {
  struct __THE_1_any_i8 *n = _n.d;
  free(n);
}
struct any __THE_1_any_i16_alloc (int16_t d) {
  size_t l = sizeof(struct __THE_1_any_i16);
  struct __THE_1_any_i16 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_i16, r, l, &__THE_1_any_i16_copy, &__THE_1_any_i16_free};
}
struct any __THE_1_any_i16_copy (const struct any n) {
  struct __THE_1_any_i16 *o = n.d;
  struct __THE_1_any_i16 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_i16_free (struct any _n) {
  struct __THE_1_any_i16 *n = _n.d;
  free(n);
}
struct any __THE_1_any_i32_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_i32);
  struct __THE_1_any_i32 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_i32, r, l, &__THE_1_any_i32_copy, &__THE_1_any_i32_free};
}
struct any __THE_1_any_i32_copy (const struct any n) {
  struct __THE_1_any_i32 *o = n.d;
  struct __THE_1_any_i32 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_i32_free (struct any _n) {
  struct __THE_1_any_i32 *n = _n.d;
  free(n);
}
struct any __THE_1_any_i64_alloc (int64_t d) {
  size_t l = sizeof(struct __THE_1_any_i64);
  struct __THE_1_any_i64 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_i64, r, l, &__THE_1_any_i64_copy, &__THE_1_any_i64_free};
}
struct any __THE_1_any_i64_copy (const struct any n) {
  struct __THE_1_any_i64 *o = n.d;
  struct __THE_1_any_i64 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_i64_free (struct any _n) {
  struct __THE_1_any_i64 *n = _n.d;
  free(n);
}
struct any __THE_1_any_u8_alloc (uint8_t d) {
  size_t l = sizeof(struct __THE_1_any_u8);
  struct __THE_1_any_u8 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_u8, r, l, &__THE_1_any_u8_copy, &__THE_1_any_u8_free};
}
struct any __THE_1_any_u8_copy (const struct any n) {
  struct __THE_1_any_u8 *o = n.d;
  struct __THE_1_any_u8 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_u8_free (struct any _n) {
  struct __THE_1_any_u8 *n = _n.d;
  free(n);
}
struct any __THE_1_any_u16_alloc (uint16_t d) {
  size_t l = sizeof(struct __THE_1_any_u16);
  struct __THE_1_any_u16 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_u16, r, l, &__THE_1_any_u16_copy, &__THE_1_any_u16_free};
}
struct any __THE_1_any_u16_copy (const struct any n) {
  struct __THE_1_any_u16 *o = n.d;
  struct __THE_1_any_u16 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_u16_free (struct any _n) {
  struct __THE_1_any_u16 *n = _n.d;
  free(n);
}
struct any __THE_1_any_u32_alloc (uint32_t d) {
  size_t l = sizeof(struct __THE_1_any_u32);
  struct __THE_1_any_u32 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_u32, r, l, &__THE_1_any_u32_copy, &__THE_1_any_u32_free};
}
struct any __THE_1_any_u32_copy (const struct any n) {
  struct __THE_1_any_u32 *o = n.d;
  struct __THE_1_any_u32 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_u32_free (struct any _n) {
  struct __THE_1_any_u32 *n = _n.d;
  free(n);
}
struct any __THE_1_any_u64_alloc (uint64_t d) {
  size_t l = sizeof(struct __THE_1_any_u64);
  struct __THE_1_any_u64 *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_u64, r, l, &__THE_1_any_u64_copy, &__THE_1_any_u64_free};
}
struct any __THE_1_any_u64_copy (const struct any n) {
  struct __THE_1_any_u64 *o = n.d;
  struct __THE_1_any_u64 *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_u64_free (struct any _n) {
  struct __THE_1_any_u64 *n = _n.d;
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const bool __THE_0_testBool_0 = true;
  const unsigned char __THE_0_testByte_0 = 1;
  const char __THE_0_testChar_0 = 'a';
  const float __THE_0_testF32_0 = 3.14;
  const double __THE_0_testF64_0 = 3.14;
  const double __THE_0_testFloat_0 = 3.14;
  const int8_t __THE_0_testI8_0 = 1;
  const int16_t __THE_0_testI16_0 = 1;
  const int32_t __THE_0_testI32_0 = 1;
  const int64_t __THE_0_testI64_0 = 1;
  const int32_t __THE_0_testInt_0 = 1;
  const uint8_t __THE_0_testU8_0 = 10;
  const uint16_t __THE_0_testU16_0 = 10;
  const uint32_t __THE_0_testU32_0 = 10;
  const uint64_t __THE_0_testU64_0 = 10;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const struct any __THE_0_anyRawBool_0 = __THE_1_any_bool_alloc(true);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  const struct any __THE_0_anyRawChar_0 = __THE_1_any_char_alloc('a');
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  const struct any __THE_0_anyRawFloat_0 = __THE_1_any_float_alloc(3.14);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L4;
  const struct any __THE_0_anyRawInt_0 = __THE_1_any_int_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L5;
  const struct any __THE_0_anyBool_0 = __THE_1_any_bool_alloc(__THE_0_testBool_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L6;
  const struct any __THE_0_anyByte_0 = __THE_1_any_byte_alloc(__THE_0_testByte_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L7;
  const struct any __THE_0_anyChar_0 = __THE_1_any_char_alloc(__THE_0_testChar_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L8;
  const struct any __THE_0_anyF32_0 = __THE_1_any_f32_alloc(__THE_0_testF32_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L9;
  const struct any __THE_0_anyF64_0 = __THE_1_any_f64_alloc(__THE_0_testF64_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L10;
  const struct any __THE_0_anyFloat_0 = __THE_1_any_float_alloc(__THE_0_testFloat_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L11;
  const struct any __THE_0_anyI8_0 = __THE_1_any_i8_alloc(__THE_0_testI8_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L12;
  const struct any __THE_0_anyI16_0 = __THE_1_any_i16_alloc(__THE_0_testI16_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L13;
  const struct any __THE_0_anyI32_0 = __THE_1_any_i32_alloc(__THE_0_testI32_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L14;
  const struct any __THE_0_anyI64_0 = __THE_1_any_i64_alloc(__THE_0_testI64_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L15;
  const struct any __THE_0_anyInt_0 = __THE_1_any_int_alloc(__THE_0_testInt_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L16;
  const struct any __THE_0_anyU8_0 = __THE_1_any_u8_alloc(__THE_0_testU8_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L17;
  const struct any __THE_0_anyU16_0 = __THE_1_any_u16_alloc(__THE_0_testU16_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L18;
  const struct any __THE_0_anyU32_0 = __THE_1_any_u32_alloc(__THE_0_testU32_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L19;
  const struct any __THE_0_anyU64_0 = __THE_1_any_u64_alloc(__THE_0_testU64_0);
  any_free((struct any) __THE_0_anyU64_0);
L19:
  any_free((struct any) __THE_0_anyU32_0);
L18:
  any_free((struct any) __THE_0_anyU16_0);
L17:
  any_free((struct any) __THE_0_anyU8_0);
L16:
  any_free((struct any) __THE_0_anyInt_0);
L15:
  any_free((struct any) __THE_0_anyI64_0);
L14:
  any_free((struct any) __THE_0_anyI32_0);
L13:
  any_free((struct any) __THE_0_anyI16_0);
L12:
  any_free((struct any) __THE_0_anyI8_0);
L11:
  any_free((struct any) __THE_0_anyFloat_0);
L10:
  any_free((struct any) __THE_0_anyF64_0);
L9:
  any_free((struct any) __THE_0_anyF32_0);
L8:
  any_free((struct any) __THE_0_anyChar_0);
L7:
  any_free((struct any) __THE_0_anyByte_0);
L6:
  any_free((struct any) __THE_0_anyBool_0);
L5:
  any_free((struct any) __THE_0_anyRawInt_0);
L4:
  any_free((struct any) __THE_0_anyRawFloat_0);
L3:
  any_free((struct any) __THE_0_anyRawChar_0);
L2:
  any_free((struct any) __THE_0_anyRawBool_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
