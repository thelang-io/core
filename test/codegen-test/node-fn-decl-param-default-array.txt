======= stdin =======
fn test1 (a: int[], b := [1, 2], c := [1, 2, 3]) int[] {
  mut d: int[]

  loop i := 0; i < a.len; i++ {
    d.push(a[i])
  }

  loop i := 0; i < b.len; i++ {
    d.push(b[i])
  }

  loop i := 0; i < c.len; i++ {
    d.push(c[i])
  }

  return d
}

main {
  test1([1, 2, 3])
  test1([1, 2, 3], [4, 5, 6])
  test1([1, 2, 3], [4, 5, 6], [7, 8, 9])
  test1([1, 2, 3], b: [4, 5, 6])
  test1([1, 2, 3], c: [7, 8, 9])
  test1([1, 2, 3], b: [4, 5, 6], c: [7, 8, 9])
  test1([1, 2, 3], c: [7, 8, 9], b: [4, 5, 6])

  mut a := [10, 11, 12]

  fn test2 (a2: int[], b := [13, 14, 15], c := [16, 17, 18]) {
    a = test1(a2, b, c)
  }

  test2([19, 20, 21])
  test2([19, 20, 21], [22, 23, 24])
  test2([19, 20, 21], [22, 23, 24], [25, 26, 27])
  test2([19, 20, 21], b: [22, 23, 24])
  test2([19, 20, 21], c: [25, 26, 27])
  test2([19, 20, 21], b: [22, 23, 24], c: [25, 26, 27])
  test2([19, 20, 21], c: [25, 26, 27], b: [22, 23, 24])
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_array_int;
struct __THE_1_fn$0;
struct __THE_1_fn$0P;
struct __THE_1_fn$1;
struct __THE_1_fn$1P;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn$0 {
  struct __THE_1_array_int (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$0P {
  struct __THE_1_array_int n0;
  unsigned char o1;
  struct __THE_1_array_int n1;
  unsigned char o2;
  struct __THE_1_array_int n2;
};
struct __THE_1_fn$1 {
  void (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct __THE_1_array_int n0;
  unsigned char o1;
  struct __THE_1_array_int n1;
  unsigned char o2;
  struct __THE_1_array_int n2;
};
struct __THE_1_mainSDtest2_0X {
  struct __THE_1_array_int *__THE_0_a_0;
  const struct __THE_1_fn$0 *__THE_0_test1_0;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
int32_t *__THE_1_array_int_at (struct __THE_1_array_int, int64_t);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, size_t, ...);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_test1_0 (void *, struct __THE_1_fn$0P);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtest2_0 (void *, struct __THE_1_fn$1P);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtest2_0X);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
int32_t *__THE_1_array_int_at (struct __THE_1_array_int n, int64_t i) {
  if ((i >= 0 && i >= n.l) || (i < 0 && i < -((int64_t) n.l))) {
    fprintf(stderr, "Error: index %" PRId64 " out of array bounds" THE_EOL, i);
    exit(EXIT_FAILURE);
  }
  return i < 0 ? &n.d[n.l + i] : &n.d[i];
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, size_t x, ...) {
  if (x == 0) return;
  n->l += x;
  n->d = re_alloc(n->d, n->l * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = n->l - x; i < n->l; i++) n->d[i] = va_arg(args, int32_t);
  va_end(args);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}
struct __THE_1_array_int __THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_array_int v;
  const struct __THE_1_array_int __THE_0_a_0 = p.n0;
  const struct __THE_1_array_int __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_array_int_alloc(2, 1, 2);
  const struct __THE_1_array_int __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_array_int_alloc(3, 1, 2, 3);
  struct __THE_1_array_int __THE_0_d_0 = __THE_1_array_int_alloc(0);
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_a_0)); __THE_0_i_0++) {
    __THE_1_array_int_push(&__THE_0_d_0, 1, *__THE_1_array_int_at(__THE_0_a_0, __THE_0_i_0));
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0)); __THE_0_i_0++) {
    __THE_1_array_int_push(&__THE_0_d_0, 1, *__THE_1_array_int_at(__THE_0_b_0, __THE_0_i_0));
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_c_0)); __THE_0_i_0++) {
    __THE_1_array_int_push(&__THE_0_d_0, 1, *__THE_1_array_int_at(__THE_0_c_0, __THE_0_i_0));
  }
  v = __THE_1_array_int_copy(__THE_0_d_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_d_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  return v;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest2_0 (void *px, struct __THE_1_fn$1P p) {
  struct __THE_1_mainSDtest2_0X *x = px;
  struct __THE_1_array_int *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$0 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_array_int __THE_0_a2_0 = p.n0;
  const struct __THE_1_array_int __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_array_int_alloc(3, 13, 14, 15);
  const struct __THE_1_array_int __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_array_int_alloc(3, 16, 17, 18);
  *__THE_0_a_0 = __THE_1_array_int_realloc(*__THE_0_a_0, (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$0P) {__THE_1_array_int_copy(__THE_0_a2_0), 1, __THE_1_array_int_copy(__THE_0_b_0), 1, __THE_1_array_int_copy(__THE_0_c_0)}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a2_0);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 0, (struct __THE_1_array_int) {}, 0, (struct __THE_1_array_int) {}}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 0, (struct __THE_1_array_int) {}}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 0, (struct __THE_1_array_int) {}}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 0, (struct __THE_1_array_int) {}, 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(3, 10, 11, 12);
  const struct __THE_1_fn$1 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 0, (struct __THE_1_array_int) {}, 0, (struct __THE_1_array_int) {}});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 0, (struct __THE_1_array_int) {}});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 0, (struct __THE_1_array_int) {}});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 0, (struct __THE_1_array_int) {}, 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtest2_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
