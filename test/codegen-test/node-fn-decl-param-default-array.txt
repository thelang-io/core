======= stdin =======
fn test1 (a: int[], b := [1, 2], c := [1, 2, 3]) int[] {
  mut d: int[]

  loop i := 0; i < a.len; i++ {
    d.push(a[i])
  }

  loop i := 0; i < b.len; i++ {
    d.push(b[i])
  }

  loop i := 0; i < c.len; i++ {
    d.push(c[i])
  }

  return d
}

main {
  test1([1, 2, 3])
  test1([1, 2, 3], [4, 5, 6])
  test1([1, 2, 3], [4, 5, 6], [7, 8, 9])
  test1([1, 2, 3], b: [4, 5, 6])
  test1([1, 2, 3], c: [7, 8, 9])
  test1([1, 2, 3], b: [4, 5, 6], c: [7, 8, 9])
  test1([1, 2, 3], c: [7, 8, 9], b: [4, 5, 6])

  mut a := [10, 11, 12]

  fn test2 (a2: int[], b := [13, 14, 15], c := [16, 17, 18]) {
    a = test1(a2, b, c)
  }

  test2([19, 20, 21])
  test2([19, 20, 21], [22, 23, 24])
  test2([19, 20, 21], [22, 23, 24], [25, 26, 27])
  test2([19, 20, 21], b: [22, 23, 24])
  test2([19, 20, 21], c: [25, 26, 27])
  test2([19, 20, 21], b: [22, 23, 24], c: [25, 26, 27])
  test2([19, 20, 21], c: [25, 26, 27], b: [22, 23, 24])
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_int;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1003;
struct __THE_1_fn$1004P;
struct __THE_1_fn$1004;
struct __THE_1_mainSDtest2_0X;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn$1003P {
  int line;
  int col;
  struct __THE_1_array_int n0;
  unsigned char o1;
  struct __THE_1_array_int n1;
  unsigned char o2;
  struct __THE_1_array_int n2;
};
struct __THE_1_fn$1003 {
  struct __THE_1_array_int (*f) (void *, struct __THE_1_fn$1003P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1004P {
  int line;
  int col;
  struct __THE_1_array_int n0;
  unsigned char o1;
  struct __THE_1_array_int n1;
  unsigned char o2;
  struct __THE_1_array_int n2;
};
struct __THE_1_fn$1004 {
  void (*f) (void *, struct __THE_1_fn$1004P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest2_0X {
  struct __THE_1_array_int *__THE_0_a_0;
  const struct __THE_1_fn$1003 *__THE_0_test1_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_assign (err_state_t *, int, void *, int, int);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void error_stack_str (err_state_t *);
void *re_alloc (void *, size_t);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
int32_t *__THE_1_array_int_at (struct __THE_1_array_int, int32_t, int, int);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_test1_0 (void *, struct __THE_1_fn$1003P);
void __THE_1_fn$1004_free (struct __THE_1_fn$1004);
void __THE_1_mainSDtest2_0 (void *, struct __THE_1_fn$1004P);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1004 *, struct __THE_1_mainSDtest2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_assign (err_state_t *state, int id, void *ctx, int line, int col) {
  state->id = id;
  state->ctx = ctx;
  error_stack_pos(state, line, col);
  error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
void error_stack_str (err_state_t *state) {
  struct str *stack = (struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack;
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  stack->l = message.l;
  stack->d = re_alloc(stack->d, stack->l);
  memcpy(stack->d, message.d, stack->l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    stack->d = re_alloc(stack->d, stack->l + z + 1);
    if (it.col == 0 && it.line == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line, it.col);
    }
    stack->l += z;
  }
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
int32_t *__THE_1_array_int_at (struct __THE_1_array_int n, int32_t i, int line, int col) {
  if ((i >= 0 && i >= n.l) || (i < 0 && i < -((int32_t) n.l))) {
    const char *fmt = "index %" PRId32 " out of array bounds";
    size_t z = snprintf(NULL, 0, fmt, i);
    char *d = alloc(z + 1);
    sprintf(d, fmt, i);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return i < 0 ? &n.d[n.l + i] : &n.d[i];
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, struct __THE_1_array_int m) {
  if (m.l == 0) return;
  n->l += m.l;
  n->d = re_alloc(n->d, n->l * sizeof(int32_t));
  size_t k = 0;
  for (size_t i = n->l - m.l; i < n->l; i++) n->d[i] = m.d[k++];
  free(m.d);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}
struct __THE_1_array_int __THE_1_test1_0 (void *px, struct __THE_1_fn$1003P p) {
  struct __THE_1_array_int v;
  error_stack_push(&err_state, "/test", "test1", p.line, p.col);
  const struct __THE_1_array_int __THE_0_a_0 = p.n0;
  const struct __THE_1_array_int __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_array_int_alloc(2, 1, 2);
  const struct __THE_1_array_int __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_array_int_alloc(3, 1, 2, 3);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  struct __THE_1_array_int __THE_0_d_0 = __THE_1_array_int_alloc(0);
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_a_0)); __THE_0_i_0++) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
    __THE_1_array_int_push(&__THE_0_d_0, __THE_1_array_int_alloc(1, *__THE_1_array_int_at(__THE_0_a_0, __THE_0_i_0, 5, 12)));
L3:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0)); __THE_0_i_0++) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
    __THE_1_array_int_push(&__THE_0_d_0, __THE_1_array_int_alloc(1, *__THE_1_array_int_at(__THE_0_b_0, __THE_0_i_0, 9, 12)));
L4:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_c_0)); __THE_0_i_0++) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
    __THE_1_array_int_push(&__THE_0_d_0, __THE_1_array_int_alloc(1, *__THE_1_array_int_at(__THE_0_c_0, __THE_0_i_0, 13, 12)));
L5:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  v = __THE_1_array_int_copy(__THE_0_d_0);
L2:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_d_0);
L1:
  err_state.buf_idx--;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
void __THE_1_fn$1004_free (struct __THE_1_fn$1004 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest2_0 (void *px, struct __THE_1_fn$1004P p) {
  error_stack_push(&err_state, "/test", "test2", p.line, p.col);
  struct __THE_1_mainSDtest2_0X *x = px;
  struct __THE_1_array_int *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1003 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_array_int __THE_0_a2_0 = p.n0;
  const struct __THE_1_array_int __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_array_int_alloc(3, 13, 14, 15);
  const struct __THE_1_array_int __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_array_int_alloc(3, 16, 17, 18);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L8;
  *__THE_0_a_0 = __THE_1_array_int_realloc(*__THE_0_a_0, (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$1003P) {31, 9, __THE_1_array_int_copy(__THE_0_a2_0), 1, __THE_1_array_int_copy(__THE_0_b_0), 1, __THE_1_array_int_copy(__THE_0_c_0)}));
L8:
  err_state.buf_idx--;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a2_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1004 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1003 __THE_0_test1_0 = (struct __THE_1_fn$1003) {&__THE_1_test1_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {20, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 0, (struct __THE_1_array_int) {}, 0, (struct __THE_1_array_int) {}}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {21, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 0, (struct __THE_1_array_int) {}}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {22, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {23, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 0, (struct __THE_1_array_int) {}}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {24, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 0, (struct __THE_1_array_int) {}, 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {25, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1003P) {26, 3, __THE_1_array_int_alloc(3, 1, 2, 3), 1, __THE_1_array_int_alloc(3, 4, 5, 6), 1, __THE_1_array_int_alloc(3, 7, 8, 9)}));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(3, 10, 11, 12);
  const struct __THE_1_fn$1004 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1004 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {34, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 0, (struct __THE_1_array_int) {}, 0, (struct __THE_1_array_int) {}});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {35, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 0, (struct __THE_1_array_int) {}});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {36, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {37, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 0, (struct __THE_1_array_int) {}});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {38, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 0, (struct __THE_1_array_int) {}, 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {39, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1004P) {40, 3, __THE_1_array_int_alloc(3, 19, 20, 21), 1, __THE_1_array_int_alloc(3, 22, 23, 24), 1, __THE_1_array_int_alloc(3, 25, 26, 27)});
L7:
  __THE_1_fn$1004_free((struct __THE_1_fn$1004) __THE_0_mainSDtest2_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
L6:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
