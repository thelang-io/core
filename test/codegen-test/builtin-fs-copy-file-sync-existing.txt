======= stdin =======
main {
  fromPath := "test" + path_SEP + "fixtures" + path_SEP + "test.txt"
  toPath := "test" + path_SEP + "fixtures" + path_SEP + "test3.txt"

  fs_writeFileSync(toPath, "test".toBuffer())
  fs_copyFileSync(fromPath, toPath)
  print(fs_readFileSync(toPath))
  fs_rmSync(toPath)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <fcntl.h>
  #include <unistd.h>
#endif

struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void buffer_free (struct buffer);
struct str buffer_str (struct buffer);
struct str cstr_concat_str (const char *, struct str);
void fs_copyFileSync (struct str, struct str);
struct buffer fs_readFileSync (struct str);
void fs_rmSync (struct str);
void fs_writeFileSync (struct str, struct buffer);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
char *str_cstr (const struct str);
void str_free (struct str);
struct buffer str_toBuffer (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void buffer_free (struct buffer o) {
  free(o.d);
}
struct str buffer_str (struct buffer b) {
  size_t l = 8 + (b.l * 3);
  char *d = alloc(l);
  memcpy(d, "[Buffer", 7);
  for (size_t i = 0; i < b.l; i++) sprintf(d + 7 + (i * 3), " %02x", b.d[i]);
  d[l - 1] = ']';
  free(b.d);
  return (struct str) {d, l};
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void fs_copyFileSync (struct str n1, struct str n2) {
  char *c1 = str_cstr(n1);
  char *c2 = str_cstr(n2);
  #ifdef THE_OS_WINDOWS
    if (CopyFile(c1, c2, 0) == 0) {
      fprintf(stderr, "Error: failed to copy file from `%s` to `%s`" THE_EOL, c1, c2);
      exit(EXIT_FAILURE);
    }
  #else
    int fd1 = open(c1, O_RDONLY);
    if (fd1 < 0) {
      fprintf(stderr, "Error: failed to open file descriptor of `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    struct stat sb1;
    if (fstat(fd1, &sb1) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    if ((sb1.st_mode & S_IFMT) != S_IFREG) {
      fprintf(stderr, "Error: cannot copy non-file `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    int fd2 = open(c2, O_WRONLY | O_CREAT);
    if (fd2 < 0) {
      fprintf(stderr, "Error: failed to open file descriptor of `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    struct stat sb2;
    if (fstat(fd2, &sb2) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    if (sb1.st_dev == sb2.st_dev && sb1.st_ino == sb2.st_ino) {
      fprintf(stderr, "Error: can't copy same file" THE_EOL);
      exit(EXIT_FAILURE);
    }
    if (sb2.st_size > 0 && ftruncate(fd2, 0) != 0) {
      fprintf(stderr, "Error: failed to truncate file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    if (fchmod(fd2, sb1.st_mode) != 0) {
      fprintf(stderr, "Error: failed to chmod file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    size_t bytes = sb1.st_size;
    size_t buf_len = 8192;
    char buf[buf_len];
    while (bytes != 0) {
      ssize_t read_bytes_raw = read(fd1, buf, bytes > buf_len ? buf_len : bytes);
      if (read_bytes_raw <= 0) {
        fprintf(stderr, "Error: failed to read data from file `%s`" THE_EOL, c1);
        exit(EXIT_FAILURE);
      }
      size_t read_bytes = read_bytes_raw;
      size_t written_bytes = 0;
      while (written_bytes != read_bytes) {
        ssize_t written_bytes_raw = write(fd2, &buf[written_bytes], read_bytes - written_bytes);
        if (written_bytes_raw <= 0) {
          fprintf(stderr, "Error: failed to write data to file `%s`" THE_EOL, c2);
          exit(EXIT_FAILURE);
        }
        written_bytes += (size_t) written_bytes_raw;
      }
      bytes -= written_bytes;
    }
    close(fd2);
    close(fd1);
  #endif
  free(c2);
  free(c1);
  str_free(n2);
  str_free(n1);
}
struct buffer fs_readFileSync (struct str s) {
  char *c = str_cstr(s);
  FILE *f = fopen(c, "rb");
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open file `%s` for reading" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  unsigned char *d = NULL;
  unsigned char b[4096];
  size_t l = 0;
  size_t y;
  while ((y = fread(b, 1, sizeof(b), f)) > 0) {
    d = re_alloc(d, l + y);
    memcpy(&d[l], b, y);
    l += y;
  }
  fclose(f);
  free(c);
  str_free((struct str) s);
  return (struct buffer) {d, l};
}
void fs_rmSync (struct str s) {
  char *c = str_cstr(s);
  if (remove(c) != 0) {
    fprintf(stderr, "Error: failed to remove file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free(s);
}
void fs_writeFileSync (struct str s, struct buffer b) {
  char *c = str_cstr(s);
  FILE *f = fopen(c, "wb");
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open file `%s` for writing" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  if (b.l != 0) {
    if (fwrite(b.d, b.l, 1, f) != 1) {
      fprintf(stderr, "Error: failed to write file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
  }
  fclose(f);
  free(c);
  str_free(s);
  buffer_free(b);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct buffer str_toBuffer (struct str s) {
  return (struct buffer) {(unsigned char *) s.d, s.l};
}

int main () {
  const struct str __THE_0_fromPath_0 = str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt");
  const struct str __THE_0_toPath_0 = str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test3.txt");
  fs_writeFileSync(str_copy(__THE_0_toPath_0), str_toBuffer(str_alloc("test")));
  fs_copyFileSync(str_copy(__THE_0_fromPath_0), str_copy(__THE_0_toPath_0));
  print(stdout, "sz", buffer_str(fs_readFileSync(str_copy(__THE_0_toPath_0))), THE_EOL);
  fs_rmSync(str_copy(__THE_0_toPath_0));
  str_free((struct str) __THE_0_toPath_0);
  str_free((struct str) __THE_0_fromPath_0);
}
======= flags =======
======= stdout =======
[Buffer 6c 6f 72 65 6d 20 69 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61 6d 65 74 0a]
