======= stdin =======
fn test1 () int {
  return 1
}

fn test2 () int {
  return 2
}

main {
  mut test1 := test1
  test1 = test2
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_fn$0;

struct __THE_1_fn$0 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0, struct __THE_1_fn$0);
int32_t __THE_1_test1_0 (void *);
int32_t __THE_1_test2_0 (void *);

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0 n1, struct __THE_1_fn$0 n2) {
  if (n1.x != NULL) free(n1.x);
  return n2;
}
int32_t __THE_1_test1_0 (void *px) {
  return 1;
}
int32_t __THE_1_test2_0 (void *px) {
  return 2;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_test2_0 = (struct __THE_1_fn$0) {&__THE_1_test2_0, NULL, 0};
  struct __THE_1_fn$0 __THE_0_test1_1 = __THE_1_fn$0_copy(__THE_0_test1_0);
  __THE_0_test1_1 = __THE_1_fn$0_realloc(__THE_0_test1_1, __THE_1_fn$0_copy(__THE_0_test2_0));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_1);
}
======= flags =======
======= stdout =======
