======= stdin =======
main {
  mut test1: int[str]
  mut test2 := { "key": 1 }
  mut test3 := { "key1": 1, "key2": 2 }
  test4 := { "key1": 0, "key3": 3, "key4": 4 }

  print(test1)
  test1.merge(test2)
  print(test1)

  print(test2)
  test2.merge(test3)
  print(test2)

  print(test3)
  test3.merge(test4)
  print(test3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;

struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_merge (struct __THE_1_map_strMSintME *, struct __THE_1_map_strMSintME);
struct str __THE_1_map_strMSintME_str (struct __THE_1_map_strMSintME);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_merge (struct __THE_1_map_strMSintME *n, struct __THE_1_map_strMSintME m) {
  if (n->l + m.l > n->c) n->d = re_alloc(n->d, (n->c = n->l + m.l) * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < m.l; i++) {
    for (size_t j = 0; j < n->l; j++) {
      if (str_eq_str(str_copy(n->d[j].f), str_copy(m.d[i].f))) {
        n->d[j].s = m.d[i].s;
        goto __THE_1_map_strMSintME_merge_next;
      }
    }
    n->d[n->l++] = (struct __THE_1_pair_strMSintME) {str_copy(m.d[i].f), m.d[i].s};
__THE_1_map_strMSintME_merge_next:;
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) m);
  return n;
}
struct str __THE_1_map_strMSintME_str (struct __THE_1_map_strMSintME n) {
  struct str r = str_alloc("{");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_cstr(r, "\"");
    r = str_concat_str(r, str_escape(n.d[i].f));
    r = str_concat_cstr(r, "\": ");
    r = str_concat_str(r, int_str(n.d[i].s));
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return str_concat_cstr(r, "}");
}

int main () {
  struct __THE_1_map_strMSintME __THE_0_test1_0 = __THE_1_map_strMSintME_alloc(0);
  struct __THE_1_map_strMSintME __THE_0_test2_0 = __THE_1_map_strMSintME_alloc(1, str_alloc("key"), 1);
  struct __THE_1_map_strMSintME __THE_0_test3_0 = __THE_1_map_strMSintME_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 2);
  const struct __THE_1_map_strMSintME __THE_0_test4_0 = __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 0, str_alloc("key3"), 3, str_alloc("key4"), 4);
  print(stdout, "sz", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_test1_0)), THE_EOL);
  __THE_1_map_strMSintME_merge(&__THE_0_test1_0, __THE_1_map_strMSintME_copy(__THE_0_test2_0));
  print(stdout, "sz", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_test1_0)), THE_EOL);
  print(stdout, "sz", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_test2_0)), THE_EOL);
  __THE_1_map_strMSintME_merge(&__THE_0_test2_0, __THE_1_map_strMSintME_copy(__THE_0_test3_0));
  print(stdout, "sz", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_test2_0)), THE_EOL);
  print(stdout, "sz", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_test3_0)), THE_EOL);
  __THE_1_map_strMSintME_merge(&__THE_0_test3_0, __THE_1_map_strMSintME_copy(__THE_0_test4_0));
  print(stdout, "sz", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_test3_0)), THE_EOL);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test4_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test3_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test2_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
{}
{"key": 1}
{"key": 1}
{"key": 1, "key1": 1, "key2": 2}
{"key1": 1, "key2": 2}
{"key1": 0, "key2": 2, "key3": 3, "key4": 4}
