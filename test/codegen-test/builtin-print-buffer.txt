======= stdin =======
main {
  buf1: buffer_Buffer = "".toBuffer()
  buf2: buffer_Buffer = "Aaron".toBuffer()

  print(buf1, buf2)
  print(buf1)
  print(buf2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct buffer buffer_copy (const struct buffer);
void buffer_free (struct buffer);
struct str buffer_str (struct buffer);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
void str_free (struct str);
struct buffer str_toBuffer (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct buffer buffer_copy (const struct buffer o) {
  unsigned char *d = alloc(o.l);
  memcpy(d, o.d, o.l);
  return (struct buffer) {d, o.l};
}
void buffer_free (struct buffer o) {
  free(o.d);
}
struct str buffer_str (struct buffer b) {
  size_t l = 8 + (b.l * 3);
  char *d = alloc(l);
  memcpy(d, "[Buffer", 7);
  for (size_t i = 0; i < b.l; i++) sprintf(d + 7 + (i * 3), " %02x", b.d[i]);
  d[l - 1] = ']';
  free(b.d);
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct buffer str_toBuffer (struct str s) {
  return (struct buffer) {(unsigned char *) s.d, s.l};
}

int main () {
  const struct buffer __THE_0_buf1_0 = str_toBuffer(str_alloc(""));
  const struct buffer __THE_0_buf2_0 = str_toBuffer(str_alloc("Aaron"));
  print(stdout, "szsz", buffer_str(buffer_copy(__THE_0_buf1_0)), " ", buffer_str(buffer_copy(__THE_0_buf2_0)), THE_EOL);
  print(stdout, "sz", buffer_str(buffer_copy(__THE_0_buf1_0)), THE_EOL);
  print(stdout, "sz", buffer_str(buffer_copy(__THE_0_buf2_0)), THE_EOL);
  buffer_free((struct buffer) __THE_0_buf2_0);
  buffer_free((struct buffer) __THE_0_buf1_0);
}
======= flags =======
======= stdout =======
[Buffer] [Buffer 41 61 72 6f 6e]
[Buffer]
[Buffer 41 61 72 6f 6e]
