======= stdin =======
fn test1 (mut a: int?) int? {
  a = 2
  return a
}
fn test2 (mut a: int?, mut b: int? = nil) int? {
  b = a
  a = b
  return a
}
main {
  test1(0)
  test2(2)
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;

struct __THE_1_fn$0P {
  int32_t *n0;
};
struct __THE_1_fn$0 {
  int32_t *(*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  int32_t *n0;
  unsigned char o1;
  int32_t *n1;
};
struct __THE_1_fn$1 {
  int32_t *(*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};

int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);
int32_t *__THE_1_test1_0 (void *, struct __THE_1_fn$0P);
int32_t *__THE_1_test2_0 (void *, struct __THE_1_fn$1P);

int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free(n1);
  return n2;
}
int32_t *__THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  int32_t *v;
  int32_t *__THE_0_a_0 = p.n0;
  __THE_0_a_0 = __THE_1_opt_int_realloc(__THE_0_a_0, __THE_1_opt_int_alloc(2));
  v = __THE_1_opt_int_copy(__THE_0_a_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
  return v;
}
int32_t *__THE_1_test2_0 (void *px, struct __THE_1_fn$1P p) {
  int32_t *v;
  int32_t *__THE_0_a_0 = p.n0;
  int32_t *__THE_0_b_0 = p.o1 == 1 ? p.n1 : NULL;
  __THE_0_b_0 = __THE_1_opt_int_realloc(__THE_0_b_0, __THE_1_opt_int_copy(__THE_0_a_0));
  __THE_0_a_0 = __THE_1_opt_int_realloc(__THE_0_a_0, __THE_1_opt_int_copy(__THE_0_b_0));
  v = __THE_1_opt_int_copy(__THE_0_a_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test2_0 = (struct __THE_1_fn$1) {&__THE_1_test2_0, NULL, 0};
  __THE_1_opt_int_free((int32_t *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_opt_int_alloc(0)}));
  __THE_1_opt_int_free((int32_t *) __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {__THE_1_opt_int_alloc(2), 0, NULL}));
}
======= flags =======
======= stdout =======
