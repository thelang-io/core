======= stdin =======
main {
  { "key": true };
  { "key": 'a' };
  { "key": 4.12 };
  { "key": 1 };
  { "key1": true, "key2": false };
  { "key1": 'a', "key2": 'z' };
  { "key1": 4.12, "key2": 4.12 };
  { "key1": 1, "key2": 1 };
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair$0;
struct __THE_1_map$0;
struct __THE_1_pair$1;
struct __THE_1_map$1;
struct __THE_1_pair$2;
struct __THE_1_map$2;
struct __THE_1_pair$3;
struct __THE_1_map$3;

struct __THE_1_pair$0 {
  struct str f;
  bool s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair$1 {
  struct str f;
  char s;
};
struct __THE_1_map$1 {
  struct __THE_1_pair$1 *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair$2 {
  struct str f;
  double s;
};
struct __THE_1_map$2 {
  struct __THE_1_pair$2 *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair$3 {
  struct str f;
  int32_t s;
};
struct __THE_1_map$3 {
  struct __THE_1_pair$3 *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
void __THE_1_map$0_free (struct __THE_1_map$0);
struct __THE_1_map$1 __THE_1_map$1_alloc (int, ...);
void __THE_1_map$1_free (struct __THE_1_map$1);
struct __THE_1_map$2 __THE_1_map$2_alloc (int, ...);
void __THE_1_map$2_free (struct __THE_1_map$2);
struct __THE_1_map$3 __THE_1_map$3_alloc (int, ...);
void __THE_1_map$3_free (struct __THE_1_map$3);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map$1 __THE_1_map$1_alloc (int x, ...) {
  struct __THE_1_pair$1 *d = alloc(x * sizeof(struct __THE_1_pair$1));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$1) {va_arg(args, struct str), va_arg(args, int)};
  va_end(args);
  return (struct __THE_1_map$1) {d, x, x};
}
void __THE_1_map$1_free (struct __THE_1_map$1 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map$2 __THE_1_map$2_alloc (int x, ...) {
  struct __THE_1_pair$2 *d = alloc(x * sizeof(struct __THE_1_pair$2));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$2) {va_arg(args, struct str), va_arg(args, double)};
  va_end(args);
  return (struct __THE_1_map$2) {d, x, x};
}
void __THE_1_map$2_free (struct __THE_1_map$2 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map$3 __THE_1_map$3_alloc (int x, ...) {
  struct __THE_1_pair$3 *d = alloc(x * sizeof(struct __THE_1_pair$3));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$3) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map$3) {d, x, x};
}
void __THE_1_map$3_free (struct __THE_1_map$3 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}

int main () {
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_1_map$0_alloc(1, str_alloc("key"), true));
  __THE_1_map$1_free((struct __THE_1_map$1) __THE_1_map$1_alloc(1, str_alloc("key"), 'a'));
  __THE_1_map$2_free((struct __THE_1_map$2) __THE_1_map$2_alloc(1, str_alloc("key"), 4.12));
  __THE_1_map$3_free((struct __THE_1_map$3) __THE_1_map$3_alloc(1, str_alloc("key"), 1));
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_1_map$0_alloc(2, str_alloc("key1"), true, str_alloc("key2"), false));
  __THE_1_map$1_free((struct __THE_1_map$1) __THE_1_map$1_alloc(2, str_alloc("key1"), 'a', str_alloc("key2"), 'z'));
  __THE_1_map$2_free((struct __THE_1_map$2) __THE_1_map$2_alloc(2, str_alloc("key1"), 4.12, str_alloc("key2"), 4.12));
  __THE_1_map$3_free((struct __THE_1_map$3) __THE_1_map$3_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 1));
}
======= flags =======
======= stdout =======
