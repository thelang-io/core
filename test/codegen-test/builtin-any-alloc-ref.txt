======= stdin =======
main {
  testInt := 1
  testOpt: int? = 1
  testRef := ref testInt
  testRefOpt := ref testOpt
  anyRawRefInt: any = ref testInt
  anyRef: any = testRef
  anyRefOpt: any = testRefOpt
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define TYPE_int 2
#define TYPE_ref_int 3
#define TYPE_ref_opt_int 4

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_any_int;
struct __THE_1_any_ref_int;
struct __THE_1_any_ref_opt_int;

struct __THE_1_any_int {
  int32_t d;
};
struct __THE_1_any_ref_int {
  int32_t *d;
};
struct __THE_1_any_ref_opt_int {
  int32_t **d;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void any_free (struct any);
void error_alloc (err_state_t *, size_t);
int32_t *__THE_1_opt_int_alloc (int32_t);
void __THE_1_opt_int_free (int32_t *);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);
struct any __THE_1_any_ref_int_alloc (int32_t *);
struct any __THE_1_any_ref_int_copy (const struct any);
void __THE_1_any_ref_int_free (struct any);
struct any __THE_1_any_ref_opt_int_alloc (int32_t **);
struct any __THE_1_any_ref_opt_int_copy (const struct any);
void __THE_1_any_ref_opt_int_free (struct any);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}
struct any __THE_1_any_ref_int_alloc (int32_t *d) {
  size_t l = sizeof(struct __THE_1_any_ref_int);
  struct __THE_1_any_ref_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ref_int, r, l, &__THE_1_any_ref_int_copy, &__THE_1_any_ref_int_free};
}
struct any __THE_1_any_ref_int_copy (const struct any n) {
  struct __THE_1_any_ref_int *o = n.d;
  struct __THE_1_any_ref_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_ref_int_free (struct any _n) {
  struct __THE_1_any_ref_int *n = _n.d;
  free(n);
}
struct any __THE_1_any_ref_opt_int_alloc (int32_t **d) {
  size_t l = sizeof(struct __THE_1_any_ref_opt_int);
  struct __THE_1_any_ref_opt_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ref_opt_int, r, l, &__THE_1_any_ref_opt_int_copy, &__THE_1_any_ref_opt_int_free};
}
struct any __THE_1_any_ref_opt_int_copy (const struct any n) {
  struct __THE_1_any_ref_opt_int *o = n.d;
  struct __THE_1_any_ref_opt_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_ref_opt_int_free (struct any _n) {
  struct __THE_1_any_ref_opt_int *n = _n.d;
  free(n);
}

int main () {
  const int32_t __THE_0_testInt_0 = 1;
  const int32_t *__THE_0_testOpt_0 = __THE_1_opt_int_alloc(1);
  const int32_t *__THE_0_testRef_0 = &__THE_0_testInt_0;
  const int32_t **__THE_0_testRefOpt_0 = &__THE_0_testOpt_0;
  const struct any __THE_0_anyRawRefInt_0 = __THE_1_any_int_alloc(__THE_0_testInt_0);
  const struct any __THE_0_anyRef_0 = __THE_1_any_ref_int_alloc(__THE_0_testRef_0);
  const struct any __THE_0_anyRefOpt_0 = __THE_1_any_ref_opt_int_alloc(__THE_0_testRefOpt_0);
  any_free((struct any) __THE_0_anyRefOpt_0);
  any_free((struct any) __THE_0_anyRef_0);
  any_free((struct any) __THE_0_anyRawRefInt_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_testOpt_0);
}
======= flags =======
======= stdout =======
