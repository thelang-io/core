======= stdin =======
main {
  _: str
  a := "test1"
  mut b := a
  b = a
  mut c := a + b
  c = b = a
  c = a + b
  mut d := "test2"
  d = c = b = a
  d = a + b + c
  d = true ? "test3" : "test4" + a
  d = true ? b = ("test5" + (c = "test6") + "test7") : "test8" + "test9"
  mut e := "test3"
  e += b += a
  e += a + b
  e += c += b += a
  e += a + b + c
  e += true ? "test3" : "test4" + a + d
  e += true ? b += ("test5" + (c += "test6") + "test7") : "test8" + "test9" + d
}
======= code =======
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

struct str cstr_concat_str (const char *, struct str);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_init (const char *);
struct str str_reinit (struct str, struct str);
void str_deinit (struct str);
void *alloc (size_t);

struct str cstr_concat_str (const char *c, struct str s) {
  return str_concat_cstr(s, c);
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  str_deinit(s);
  return (struct str) {r, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *r = alloc(l);
  memcpy(r, s1.c, s1.l);
  memcpy(&r[s1.l], s2.c, s2.l);
  str_deinit(s1);
  str_deinit(s2);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
struct str str_init (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_reinit (struct str s1, struct str s2) {
  str_deinit(s1);
  return s2;
}
void str_deinit (struct str s) {
  free(s.c);
}
void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int main () {
  const struct str __THE_0___0 = str_init("");
  const struct str __THE_0_a_0 = str_init("test1");
  struct str __THE_0_b_0 = str_copy(__THE_0_a_0);
  __THE_0_b_0 = str_reinit(__THE_0_b_0, str_copy(__THE_0_a_0));
  struct str __THE_0_c_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  __THE_0_c_0 = str_reinit(__THE_0_c_0, str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_copy(__THE_0_a_0))));
  __THE_0_c_0 = str_reinit(__THE_0_c_0, str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  struct str __THE_0_d_0 = str_init("test2");
  __THE_0_d_0 = str_reinit(__THE_0_d_0, str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_copy(__THE_0_a_0))))));
  __THE_0_d_0 = str_reinit(__THE_0_d_0, str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0)));
  __THE_0_d_0 = str_reinit(__THE_0_d_0, true ? str_init("test3") : cstr_concat_str("test4", str_copy(__THE_0_a_0)));
  __THE_0_d_0 = str_reinit(__THE_0_d_0, true ? str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, (str_concat_cstr(cstr_concat_str("test5", (str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_init("test6"))))), "test7")))) : str_init("test8test9"));
  struct str __THE_0_e_0 = str_init("test3");
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_a_0))))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_concat_str(str_copy(__THE_0_c_0), str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_a_0)))))))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), true ? str_init("test3") : str_concat_str(cstr_concat_str("test4", str_copy(__THE_0_a_0)), str_copy(__THE_0_d_0))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), true ? str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), (str_concat_cstr(cstr_concat_str("test5", (str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_concat_cstr(str_copy(__THE_0_c_0), "test6"))))), "test7"))))) : cstr_concat_str("test8test9", str_copy(__THE_0_d_0))));
  str_deinit((struct str) __THE_0_e_0);
  str_deinit((struct str) __THE_0_d_0);
  str_deinit((struct str) __THE_0_c_0);
  str_deinit((struct str) __THE_0_b_0);
  str_deinit((struct str) __THE_0_a_0);
  str_deinit((struct str) __THE_0___0);
}
======= code-windows =======
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

struct str cstr_concat_str (const char *, struct str);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_init (const char *);
struct str str_reinit (struct str, struct str);
void str_deinit (struct str);
void *alloc (size_t);

struct str cstr_concat_str (const char *c, struct str s) {
  return str_concat_cstr(s, c);
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  str_deinit(s);
  return (struct str) {r, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *r = alloc(l);
  memcpy(r, s1.c, s1.l);
  memcpy(&r[s1.l], s2.c, s2.l);
  str_deinit(s1);
  str_deinit(s2);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
struct str str_init (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_reinit (struct str s1, struct str s2) {
  str_deinit(s1);
  return s2;
}
void str_deinit (struct str s) {
  free(s.c);
}
void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\r\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int main () {
  const struct str __THE_0___0 = str_init("");
  const struct str __THE_0_a_0 = str_init("test1");
  struct str __THE_0_b_0 = str_copy(__THE_0_a_0);
  __THE_0_b_0 = str_reinit(__THE_0_b_0, str_copy(__THE_0_a_0));
  struct str __THE_0_c_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  __THE_0_c_0 = str_reinit(__THE_0_c_0, str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_copy(__THE_0_a_0))));
  __THE_0_c_0 = str_reinit(__THE_0_c_0, str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  struct str __THE_0_d_0 = str_init("test2");
  __THE_0_d_0 = str_reinit(__THE_0_d_0, str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_copy(__THE_0_a_0))))));
  __THE_0_d_0 = str_reinit(__THE_0_d_0, str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0)));
  __THE_0_d_0 = str_reinit(__THE_0_d_0, true ? str_init("test3") : cstr_concat_str("test4", str_copy(__THE_0_a_0)));
  __THE_0_d_0 = str_reinit(__THE_0_d_0, true ? str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, (str_concat_cstr(cstr_concat_str("test5", (str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_init("test6"))))), "test7")))) : str_init("test8test9"));
  struct str __THE_0_e_0 = str_init("test3");
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_a_0))))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_concat_str(str_copy(__THE_0_c_0), str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_a_0)))))))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), true ? str_init("test3") : str_concat_str(cstr_concat_str("test4", str_copy(__THE_0_a_0)), str_copy(__THE_0_d_0))));
  __THE_0_e_0 = str_reinit(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), true ? str_copy(__THE_0_b_0 = str_reinit(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), (str_concat_cstr(cstr_concat_str("test5", (str_copy(__THE_0_c_0 = str_reinit(__THE_0_c_0, str_concat_cstr(str_copy(__THE_0_c_0), "test6"))))), "test7"))))) : cstr_concat_str("test8test9", str_copy(__THE_0_d_0))));
  str_deinit((struct str) __THE_0_e_0);
  str_deinit((struct str) __THE_0_d_0);
  str_deinit((struct str) __THE_0_c_0);
  str_deinit((struct str) __THE_0_b_0);
  str_deinit((struct str) __THE_0_a_0);
  str_deinit((struct str) __THE_0___0);
}
======= flags =======
======= stdout =======
