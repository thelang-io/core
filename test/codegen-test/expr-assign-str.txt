======= stdin =======
main {
  _: str
  a := "test1"
  mut b := a
  b = a
  mut c := a + b
  c = b = a
  c = a + b
  mut d := "test2"
  d = c = b = a
  d = a + b + c
  d = true ? "test3" : "test4" + a
  d = true ? b = ("test5" + (c = "test6") + "test7") : "test8" + "test9"
  mut e := "test3"
  e += b += a
  e += a + b
  e += c += b += a
  e += a + b + c
  e += true ? "test3" : "test4" + a + d
  e += true ? b += ("test5" + (c += "test6") + "test7") : "test8" + "test9" + d
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}

int main () {
  const struct str __THE_0___0 = str_alloc("");
  const struct str __THE_0_a_0 = str_alloc("test1");
  struct str __THE_0_b_0 = str_copy(__THE_0_a_0);
  __THE_0_b_0 = str_realloc(__THE_0_b_0, str_copy(__THE_0_a_0));
  struct str __THE_0_c_0 = str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0));
  __THE_0_c_0 = str_realloc(__THE_0_c_0, str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, str_copy(__THE_0_a_0))));
  __THE_0_c_0 = str_realloc(__THE_0_c_0, str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  struct str __THE_0_d_0 = str_alloc("test2");
  __THE_0_d_0 = str_realloc(__THE_0_d_0, str_copy(__THE_0_c_0 = str_realloc(__THE_0_c_0, str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, str_copy(__THE_0_a_0))))));
  __THE_0_d_0 = str_realloc(__THE_0_d_0, str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0)));
  __THE_0_d_0 = str_realloc(__THE_0_d_0, true ? str_alloc("test3") : cstr_concat_str("test4", str_copy(__THE_0_a_0)));
  __THE_0_d_0 = str_realloc(__THE_0_d_0, true ? str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, (str_concat_cstr(cstr_concat_str("test5", (str_copy(__THE_0_c_0 = str_realloc(__THE_0_c_0, str_alloc("test6"))))), "test7")))) : str_alloc("test8test9"));
  struct str __THE_0_e_0 = str_alloc("test3");
  __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_a_0))))));
  __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0))));
  __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_copy(__THE_0_c_0 = str_realloc(__THE_0_c_0, str_concat_str(str_copy(__THE_0_c_0), str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), str_copy(__THE_0_a_0)))))))));
  __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), str_concat_str(str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)), str_copy(__THE_0_c_0))));
  __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), true ? str_alloc("test3") : str_concat_str(cstr_concat_str("test4", str_copy(__THE_0_a_0)), str_copy(__THE_0_d_0))));
  __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_str(str_copy(__THE_0_e_0), true ? str_copy(__THE_0_b_0 = str_realloc(__THE_0_b_0, str_concat_str(str_copy(__THE_0_b_0), (str_concat_cstr(cstr_concat_str("test5", (str_copy(__THE_0_c_0 = str_realloc(__THE_0_c_0, str_concat_cstr(str_copy(__THE_0_c_0), "test6"))))), "test7"))))) : cstr_concat_str("test8test9", str_copy(__THE_0_d_0))));
  str_free((struct str) __THE_0_e_0);
  str_free((struct str) __THE_0_d_0);
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
  str_free((struct str) __THE_0___0);
}
======= flags =======
======= stdout =======
