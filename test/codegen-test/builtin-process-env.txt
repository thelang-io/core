======= stdin =======
main {
  env := process_env

  print(env.keys.len, env.values.len)
  print(env.keys.len == env.values.len)
  print(process_env.get(os_NAME == "Windows" ? "USERNAME" : "USER"))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <sys/utsname.h>
  #include <unistd.h>
#endif

extern char **environ;

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;
struct __THE_1_pair_strMSstrME;
struct __THE_1_map_strMSstrME;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_pair_strMSstrME {
  struct str f;
  struct str s;
};
struct __THE_1_map_strMSstrME {
  struct __THE_1_pair_strMSstrME *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str os_name ();
void print (FILE *, const char *, ...);
struct __THE_1_map_strMSstrME process_env ();
struct str str_alloc (const char *);
struct str str_calloc (const char *, size_t);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
void __THE_1_array_str_free (struct __THE_1_array_str);
size_t __THE_1_array_str_len (struct __THE_1_array_str);
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_copy (const struct __THE_1_map_strMSstrME);
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME);
struct str __THE_1_map_strMSstrME_get (struct __THE_1_map_strMSstrME, struct str);
struct __THE_1_array_str __THE_1_map_strMSstrME_keys (struct __THE_1_map_strMSstrME);
struct __THE_1_array_str __THE_1_map_strMSstrME_values (struct __THE_1_map_strMSstrME);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str os_name () {
  #ifdef THE_OS_WINDOWS
    return str_alloc("Windows");
  #else
    struct utsname buf;
    if (uname(&buf) < 0) {
      fprintf(stderr, "Error: failed to retrieve uname information" THE_EOL);
      exit(EXIT_FAILURE);
    }
    if (strcmp(buf.sysname, "Darwin") == 0) return str_alloc("macOS");
    return str_alloc(buf.sysname);
  #endif
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct __THE_1_map_strMSstrME process_env () {
  size_t l = 0;
  while (environ[l] != NULL) l++;
  struct __THE_1_pair_strMSstrME *d = alloc(l * sizeof(struct __THE_1_pair_strMSstrME));
  for (size_t i = 0; i < l; i++) {
    char *p = environ[i];
    size_t pl = strlen(p);
    char *e = strchr(p, '=');
    if (e == NULL) {
      d[i] = (struct __THE_1_pair_strMSstrME) {str_calloc(p, pl), str_alloc("")};
    } else {
      size_t ei = e - p;
      d[i] = (struct __THE_1_pair_strMSstrME) {str_calloc(p, ei), (ei == pl - 1) ? str_alloc("") : str_calloc(&p[ei + 1], pl - ei - 1)};
    }
  }
  return (struct __THE_1_map_strMSstrME) {d, l, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_calloc (const char *r, size_t l) {
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
size_t __THE_1_array_str_len (struct __THE_1_array_str n) {
  size_t l = n.l;
  __THE_1_array_str_free((struct __THE_1_array_str) n);
  return l;
}
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_copy (const struct __THE_1_map_strMSstrME n) {
  struct __THE_1_pair_strMSstrME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSstrME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSstrME) {str_copy(n.d[i].f), str_copy(n.d[i].s)};
  return (struct __THE_1_map_strMSstrME) {d, n.c, n.l};
}
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    str_free((struct str) n.d[i].s);
  }
  free(n.d);
}
struct str __THE_1_map_strMSstrME_get (struct __THE_1_map_strMSstrME n, struct str k) {
  for (size_t i = 0; i < n.l; i++) {
    if (str_eq_str(str_copy(n.d[i].f), str_copy(k))) {
      struct str r = str_copy(n.d[i].s);
      __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n);
      str_free((struct str) k);
      return r;
    }
  }
  fprintf(stderr, "Error: failed to get map value" THE_EOL);
  exit(EXIT_FAILURE);
}
struct __THE_1_array_str __THE_1_map_strMSstrME_keys (struct __THE_1_map_strMSstrME n) {
  struct str *r = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) r[i] = str_copy(n.d[i].f);
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n);
  return (struct __THE_1_array_str) {r, n.l};
}
struct __THE_1_array_str __THE_1_map_strMSstrME_values (struct __THE_1_map_strMSstrME n) {
  struct str *r = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) r[i] = str_copy(n.d[i].s);
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n);
  return (struct __THE_1_array_str) {r, n.l};
}

int main () {
  const struct __THE_1_map_strMSstrME __THE_0_env_0 = process_env();
  print(stdout, "iziz", __THE_1_array_str_len(__THE_1_map_strMSstrME_keys(__THE_1_map_strMSstrME_copy(__THE_0_env_0))), " ", __THE_1_array_str_len(__THE_1_map_strMSstrME_values(__THE_1_map_strMSstrME_copy(__THE_0_env_0))), THE_EOL);
  print(stdout, "tz", __THE_1_array_str_len(__THE_1_map_strMSstrME_keys(__THE_1_map_strMSstrME_copy(__THE_0_env_0))) == __THE_1_array_str_len(__THE_1_map_strMSstrME_values(__THE_1_map_strMSstrME_copy(__THE_0_env_0))), THE_EOL);
  print(stdout, "sz", __THE_1_map_strMSstrME_get(process_env(), str_eq_cstr(os_name(), "Windows") ? str_alloc("USERNAME") : str_alloc("USER")), THE_EOL);
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) __THE_0_env_0);
}
======= flags =======
======= stdout =======
{{ \d+ }} {{ \d+ }}
true
{{ \w+ }}
