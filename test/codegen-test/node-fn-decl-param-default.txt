======= stdin =======
fn test1 (a: int, b := 1, c := 2) int {
  return a + b + c
}

main {
  test1(1)
  test1(1, 2)
  test1(1, 2, 3)
  test1(1, b: 2)
  test1(1, c: 3)
  test1(1, b: 2, c: 3)
  test1(1, c: 3, b: 2)

  mut a := 1

  fn test2 (a2: int, b := 1, c := 2) {
    a = a2 + b + c
  }

  test2(1)
  test2(1, 2)
  test2(1, 2, 3)
  test2(1, b: 2)
  test2(1, c: 3)
  test2(1, b: 2, c: 3)
  test2(1, c: 3, b: 2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_fn$0P {
  int32_t n0;
  unsigned char o1;
  int32_t n1;
  unsigned char o2;
  int32_t n2;
};
struct __THE_1_fn$0 {
  int32_t (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  int32_t n0;
  unsigned char o1;
  int32_t n1;
  unsigned char o2;
  int32_t n2;
};
struct __THE_1_fn$1 {
  void (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest2_0X {
  int32_t *__THE_0_a_0;
};

void *alloc (size_t);
int32_t __THE_1_test1_0 (void *, struct __THE_1_fn$0P);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_mainSDtest2_0X);
void __THE_1_mainSDtest2_0 (void *, struct __THE_1_fn$1P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
int32_t __THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.o1 == 1 ? p.n1 : 1;
  const int32_t __THE_0_c_0 = p.o2 == 1 ? p.n2 : 2;
  return __THE_0_a_0 + __THE_0_b_0 + __THE_0_c_0;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest2_0 (void *px, struct __THE_1_fn$1P p) {
  struct __THE_1_mainSDtest2_0X *x = px;
  int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const int32_t __THE_0_a2_0 = p.n0;
  const int32_t __THE_0_b_0 = p.o1 == 1 ? p.n1 : 1;
  const int32_t __THE_0_c_0 = p.o2 == 1 ? p.n2 : 2;
  *__THE_0_a_0 = __THE_0_a2_0 + __THE_0_b_0 + __THE_0_c_0;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 0, 0, 0, 0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 1, 2, 0, 0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 1, 2, 1, 3});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 1, 2, 0, 0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 0, 0, 1, 3});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 1, 2, 1, 3});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {1, 1, 2, 1, 3});
  int32_t __THE_0_a_0 = 1;
  const struct __THE_1_fn$1 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 0, 0, 0, 0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 1, 2, 0, 0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 1, 2, 1, 3});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 1, 2, 0, 0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 0, 0, 1, 3});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 1, 2, 1, 3});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$1P) {1, 1, 2, 1, 3});
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_mainSDtest2_0);
}
======= flags =======
======= stdout =======
