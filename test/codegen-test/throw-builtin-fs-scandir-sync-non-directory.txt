======= stdin =======
main {
  fs_scandirSync("test/fixtures/test.txt")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <dirent.h>
#endif

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
struct __THE_1_array_str fs_scandirSync (struct str);
void __THE_1_array_str_free (struct __THE_1_array_str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_str fs_scandirSync (struct str s) {
  char *c = str_cstr(s);
  struct str *r = NULL;
  size_t l = 0;
  #ifdef THE_OS_WINDOWS
    if (GetFileAttributes(c) == INVALID_FILE_ATTRIBUTES)) {
      fprintf(stderr, "Error: directory `%s` doesn't exist" THE_EOL, c);
      exit(EXIT_FAILURE);
    } else if (!(GetFileAttributes(c) & FILE_ATTRIBUTE_DIRECTORY)) {
      fprintf(stderr, "Error: failed to scan non-directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    const char *fmt = s.l == 0 ? "./*" : ((s.d[s.l - 1] == '/' || s.d[s.l - 1] == '\\') ? "%s*" : "%s\\*");
    char *b = alloc(s.l + 4);
    _snprintf(b, s.l + 3, fmt, c);
    WIN32_FIND_DATA m;
    HANDLE h = FindFirstFile(b, &m);
    free(b);
    if (h == INVALID_HANDLE_VALUE && GetLastError() != ERROR_FILE_NOT_FOUND) {
      fprintf(stderr, "Error: failed to open directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    } else if (h == INVALID_HANDLE_VALUE) {
      goto fs_scandirSync_cleanup;
    }
    WIN32_FIND_DATA *n = &m;
    while (true) {
      if (strcmp(n->cFileName, ".") != 0 && strcmp(n->cFileName, "..") != 0) {
        r = re_alloc(r, ++l * sizeof(struct str));
        r[l - 1] = str_alloc(n->cFileName);
      }
      bool g = FindNextFile(h, n);
      if (!g && GetLastError() == ERROR_NO_MORE_FILES) {
        break;
      } else if (!g) {
        fprintf(stderr, "Error: failed to scan next file of directory `%s`" THE_EOL, c);
        exit(EXIT_FAILURE);
      }
    }
    FindClose(h);
  #else
    struct stat sb;
    if (stat(c, &sb) != 0) {
      fprintf(stderr, "Error: directory `%s` doesn't exist" THE_EOL, c);
      exit(EXIT_FAILURE);
    } else if ((sb.st_mode & S_IFMT) != S_IFDIR) {
      fprintf(stderr, "Error: failed to scan non-directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    DIR *f = opendir(c);
    if (f == NULL) {
      fprintf(stderr, "Error: failed to open directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    struct dirent *a;
    while ((a = readdir(f)) != NULL) {
      if (strcmp(a->d_name, ".") == 0 || strcmp(a->d_name, "..") == 0) continue;
      r = re_alloc(r, ++l * sizeof(struct str));
      r[l - 1] = str_alloc(a->d_name);
    }
    closedir(f);
  #endif
fs_scandirSync_cleanup:
  free(c);
  str_free(s);
  return (struct __THE_1_array_str) {r, l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}

int main () {
  __THE_1_array_str_free((struct __THE_1_array_str) fs_scandirSync(str_alloc("test/fixtures/test.txt")));
}
======= flags =======
======= stderr =======
Error: failed to scan non-directory `test/fixtures/test.txt`
