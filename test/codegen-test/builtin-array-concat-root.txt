======= stdin =======
main {
  test0: str[]
  test1 := ["1"]
  test2 := ["1", "2"]
  test3 := ["1", "2", "3"]

  test0.concat([]);
  test0.concat(["4"]);
  test0.concat(["4", "5"]);
  test0.concat(["4", "5", "6"]);
  test1.concat([]);
  test1.concat(["4"]);
  test1.concat(["4", "5"]);
  test1.concat(["4", "5", "6"]);
  test2.concat([]);
  test2.concat(["4"]);
  test2.concat(["4", "5"]);
  test2.concat(["4", "5", "6"]);
  test3.concat([]);
  test3.concat(["4"]);
  test3.concat(["4", "5"]);
  test3.concat(["4", "5", "6"]);
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
struct __THE_1_array_str __THE_1_array_str_concat (struct __THE_1_array_str, struct __THE_1_array_str);
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str);
void __THE_1_array_str_free (struct __THE_1_array_str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
struct __THE_1_array_str __THE_1_array_str_concat (struct __THE_1_array_str self, struct __THE_1_array_str n1) {
  size_t l = self.l + n1.l;
  struct str *d = alloc(l * sizeof(struct str));
  size_t k = 0;
  for (size_t i = 0; i < self.l; i++) d[k++] = str_copy(self.d[i]);
  for (size_t i = 0; i < n1.l; i++) d[k++] = str_copy(n1.d[i]);
  __THE_1_array_str_free((struct __THE_1_array_str) n1);
  __THE_1_array_str_free((struct __THE_1_array_str) self);
  return (struct __THE_1_array_str) {d, l};
}
struct __THE_1_array_str __THE_1_array_str_copy (const struct __THE_1_array_str n) {
  if (n.l == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(n.l * sizeof(struct str));
  for (size_t i = 0; i < n.l; i++) d[i] = str_copy(n.d[i]);
  return (struct __THE_1_array_str) {d, n.l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}

int main () {
  const struct __THE_1_array_str __THE_0_test0_0 = __THE_1_array_str_alloc(0);
  const struct __THE_1_array_str __THE_0_test1_0 = __THE_1_array_str_alloc(1, str_alloc("1"));
  const struct __THE_1_array_str __THE_0_test2_0 = __THE_1_array_str_alloc(2, str_alloc("1"), str_alloc("2"));
  const struct __THE_1_array_str __THE_0_test3_0 = __THE_1_array_str_alloc(3, str_alloc("1"), str_alloc("2"), str_alloc("3"));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test0_0), __THE_1_array_str_alloc(0)));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test0_0), __THE_1_array_str_alloc(1, str_alloc("4"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test0_0), __THE_1_array_str_alloc(2, str_alloc("4"), str_alloc("5"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test0_0), __THE_1_array_str_alloc(3, str_alloc("4"), str_alloc("5"), str_alloc("6"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test1_0), __THE_1_array_str_alloc(0)));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test1_0), __THE_1_array_str_alloc(1, str_alloc("4"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test1_0), __THE_1_array_str_alloc(2, str_alloc("4"), str_alloc("5"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test1_0), __THE_1_array_str_alloc(3, str_alloc("4"), str_alloc("5"), str_alloc("6"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test2_0), __THE_1_array_str_alloc(0)));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test2_0), __THE_1_array_str_alloc(1, str_alloc("4"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test2_0), __THE_1_array_str_alloc(2, str_alloc("4"), str_alloc("5"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test2_0), __THE_1_array_str_alloc(3, str_alloc("4"), str_alloc("5"), str_alloc("6"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test3_0), __THE_1_array_str_alloc(0)));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test3_0), __THE_1_array_str_alloc(1, str_alloc("4"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test3_0), __THE_1_array_str_alloc(2, str_alloc("4"), str_alloc("5"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_concat(__THE_1_array_str_copy(__THE_0_test3_0), __THE_1_array_str_alloc(3, str_alloc("4"), str_alloc("5"), str_alloc("6"))));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test3_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test2_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test1_0);
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_0_test0_0);
}
======= flags =======
======= stdout =======
