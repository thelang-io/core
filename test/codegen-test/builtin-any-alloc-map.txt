======= stdin =======
main {
  testMap := { "key1": 0, "key2": 1, "key3": 2 }
  anyRawMap: any = { "key1": "0", "key2": "1", "key3": "2" }
  anyMap: any = testMap
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1
#define TYPE_map_strMSstrME 2
#define TYPE_map_strMSintME 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_pair_strMSstrME;
struct __THE_1_map_strMSstrME;
struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_any_map_strMSstrME;
struct __THE_1_any_map_strMSintME;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_pair_strMSstrME {
  struct str f;
  struct str s;
};
struct __THE_1_map_strMSstrME {
  struct __THE_1_pair_strMSstrME *d;
  size_t c;
  size_t l;
};
struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_any_map_strMSstrME {
  struct __THE_1_map_strMSstrME d;
};
struct __THE_1_any_map_strMSintME {
  struct __THE_1_map_strMSintME d;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void any_free (struct any);
void error_assign (err_state_t *, int, void *);
struct str error_stack_str (err_state_t *);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_alloc (int, ...);
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_copy (const struct __THE_1_map_strMSstrME);
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct any __THE_1_any_map_strMSstrME_alloc (struct __THE_1_map_strMSstrME);
struct any __THE_1_any_map_strMSstrME_copy (const struct any);
void __THE_1_any_map_strMSstrME_free (struct any);
struct any __THE_1_any_map_strMSintME_alloc (struct __THE_1_map_strMSintME);
struct any __THE_1_any_map_strMSintME_copy (const struct any);
void __THE_1_any_map_strMSintME_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_alloc (int x, ...) {
  struct __THE_1_pair_strMSstrME *d = alloc(x * sizeof(struct __THE_1_pair_strMSstrME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSstrME) {va_arg(args, struct str), va_arg(args, struct str)};
  va_end(args);
  return (struct __THE_1_map_strMSstrME) {d, x, x};
}
struct __THE_1_map_strMSstrME __THE_1_map_strMSstrME_copy (const struct __THE_1_map_strMSstrME n) {
  struct __THE_1_pair_strMSstrME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSstrME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSstrME) {str_copy(n.d[i].f), str_copy(n.d[i].s)};
  return (struct __THE_1_map_strMSstrME) {d, n.c, n.l};
}
void __THE_1_map_strMSstrME_free (struct __THE_1_map_strMSstrME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
    str_free((struct str) n.d[i].s);
  }
  free(n.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct any __THE_1_any_map_strMSstrME_alloc (struct __THE_1_map_strMSstrME d) {
  size_t l = sizeof(struct __THE_1_any_map_strMSstrME);
  struct __THE_1_any_map_strMSstrME *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_map_strMSstrME, r, l, &__THE_1_any_map_strMSstrME_copy, &__THE_1_any_map_strMSstrME_free};
}
struct any __THE_1_any_map_strMSstrME_copy (const struct any n) {
  struct __THE_1_any_map_strMSstrME *o = n.d;
  struct __THE_1_any_map_strMSstrME *r = alloc(n.l);
  r->d = __THE_1_map_strMSstrME_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_map_strMSstrME_free (struct any _n) {
  struct __THE_1_any_map_strMSstrME *n = _n.d;
  __THE_1_map_strMSstrME_free((struct __THE_1_map_strMSstrME) n->d);
  free(n);
}
struct any __THE_1_any_map_strMSintME_alloc (struct __THE_1_map_strMSintME d) {
  size_t l = sizeof(struct __THE_1_any_map_strMSintME);
  struct __THE_1_any_map_strMSintME *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_map_strMSintME, r, l, &__THE_1_any_map_strMSintME_copy, &__THE_1_any_map_strMSintME_free};
}
struct any __THE_1_any_map_strMSintME_copy (const struct any n) {
  struct __THE_1_any_map_strMSintME *o = n.d;
  struct __THE_1_any_map_strMSintME *r = alloc(n.l);
  r->d = __THE_1_map_strMSintME_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_map_strMSintME_free (struct any _n) {
  struct __THE_1_any_map_strMSintME *n = _n.d;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n->d);
  free(n);
}

int main () {
  const struct __THE_1_map_strMSintME __THE_0_testMap_0 = __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 0, str_alloc("key2"), 1, str_alloc("key3"), 2);
  const struct any __THE_0_anyRawMap_0 = __THE_1_any_map_strMSstrME_alloc(__THE_1_map_strMSstrME_alloc(3, str_alloc("key1"), str_alloc("0"), str_alloc("key2"), str_alloc("1"), str_alloc("key3"), str_alloc("2")));
  const struct any __THE_0_anyMap_0 = __THE_1_any_map_strMSintME_alloc(__THE_1_map_strMSintME_copy(__THE_0_testMap_0));
  any_free((struct any) __THE_0_anyMap_0);
  any_free((struct any) __THE_0_anyRawMap_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_testMap_0);
}
======= flags =======
======= stdout =======
