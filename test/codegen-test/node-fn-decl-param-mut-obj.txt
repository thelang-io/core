======= stdin =======
obj Test {
  mut v: int
}
fn test1 (mut a: Test) Test {
  a.v = 2
  return a
}
fn test2 (mut a: Test, mut b := Test{v: 2}) Test {
  b = a
  a.v += b.v
  return a
}
main {
  test1(Test{v: 1})
  test2(Test{v: 3})
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_test_Test_0;
struct __THE_1_fn_sFP5TestFRTestFE;
struct __THE_1_fn_sFP5TestFRTestFEP;
struct __THE_1_fn_sFP5TestFP2TestFRTestFE;
struct __THE_1_fn_sFP5TestFP2TestFRTestFEP;

struct __THE_1_test_Test_0 {
  int32_t __THE_0_v;
};
struct __THE_1_fn_sFP5TestFRTestFE {
  struct __THE_1_test_Test_0 *(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5TestFRTestFEP {
  struct __THE_1_test_Test_0 *n0;
};
struct __THE_1_fn_sFP5TestFP2TestFRTestFE {
  struct __THE_1_test_Test_0 *(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5TestFP2TestFRTestFEP {
  struct __THE_1_test_Test_0 *n0;
  unsigned char o1;
  struct __THE_1_test_Test_0 *n1;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_alloc (int32_t);
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_copy (const struct __THE_1_test_Test_0 *);
void __THE_1_test_Test_0_free (struct __THE_1_test_Test_0 *);
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_realloc (struct __THE_1_test_Test_0 *, struct __THE_1_test_Test_0 *);
struct __THE_1_test_Test_0 *__THE_1_test_test1_0 (void *, void *);
struct __THE_1_test_Test_0 *__THE_1_test_test2_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_alloc (int32_t __THE_0_v) {
  struct __THE_1_test_Test_0 *r = alloc(sizeof(struct __THE_1_test_Test_0));
  struct __THE_1_test_Test_0 s = {__THE_0_v};
  memcpy(r, &s, sizeof(struct __THE_1_test_Test_0));
  return r;
}
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_copy (const struct __THE_1_test_Test_0 *n) {
  struct __THE_1_test_Test_0 *r = alloc(sizeof(struct __THE_1_test_Test_0));
  struct __THE_1_test_Test_0 s = {n->__THE_0_v};
  memcpy(r, &s, sizeof(struct __THE_1_test_Test_0));
  return r;
}
void __THE_1_test_Test_0_free (struct __THE_1_test_Test_0 *n) {
  free(n);
}
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_realloc (struct __THE_1_test_Test_0 *n1, struct __THE_1_test_Test_0 *n2) {
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) n1);
  return n2;
}
struct __THE_1_test_Test_0 *__THE_1_test_test1_0 (void *px, void *pp) {
  struct __THE_1_test_Test_0 *v;
  struct __THE_1_fn_sFP5TestFRTestFEP *p = pp;
  struct __THE_1_test_Test_0 *__THE_0_a_0 = p->n0;
  __THE_0_a_0->__THE_0_v = 2;
  v = __THE_1_test_Test_0_copy(__THE_0_a_0);
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_a_0);
  free(pp);
  return v;
}
struct __THE_1_test_Test_0 *__THE_1_test_test2_0 (void *px, void *pp) {
  struct __THE_1_test_Test_0 *v;
  struct __THE_1_fn_sFP5TestFP2TestFRTestFEP *p = pp;
  struct __THE_1_test_Test_0 *__THE_0_a_0 = p->n0;
  struct __THE_1_test_Test_0 *__THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_test_Test_0_alloc(2);
  __THE_0_b_0 = __THE_1_test_Test_0_realloc(__THE_0_b_0, __THE_1_test_Test_0_copy(__THE_0_a_0));
  __THE_0_a_0->__THE_0_v += __THE_0_b_0->__THE_0_v;
  v = __THE_1_test_Test_0_copy(__THE_0_a_0);
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_b_0);
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_a_0);
  free(pp);
  return v;
}

int main () {
  const struct __THE_1_fn_sFP5TestFRTestFE __THE_0_test_test1_0 = (struct __THE_1_fn_sFP5TestFRTestFE) {&__THE_1_test_test1_0, NULL, 0};
  const struct __THE_1_fn_sFP5TestFP2TestFRTestFE __THE_0_test_test2_0 = (struct __THE_1_fn_sFP5TestFP2TestFRTestFE) {&__THE_1_test_test2_0, NULL, 0};
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_test_test1_0.f(__THE_0_test_test1_0.x, xalloc(&(struct __THE_1_fn_sFP5TestFRTestFEP) {__THE_1_test_Test_0_alloc(1)}, sizeof(struct __THE_1_fn_sFP5TestFRTestFEP))));
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_test_test2_0.f(__THE_0_test_test2_0.x, xalloc(&(struct __THE_1_fn_sFP5TestFP2TestFRTestFEP) {__THE_1_test_Test_0_alloc(3), 0, NULL}, sizeof(struct __THE_1_fn_sFP5TestFP2TestFRTestFEP))));
}
======= flags =======
======= stdout =======
