======= stdin =======
obj Test {
  mut v: int
}
fn test1 (mut a: Test) Test {
  a.v = 2
  return a
}
fn test2 (mut a: Test, mut b := Test{v: 2}) Test {
  b = a
  a.v += b.v
  return a
}
main {
  test1(Test{v: 1})
  test2(Test{v: 3})
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_Test_0;
struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;

struct __THE_1_Test_0 {
  int32_t __THE_0_v;
};
struct __THE_1_fn$0P {
  struct __THE_1_Test_0 *n0;
};
struct __THE_1_fn$0 {
  struct __THE_1_Test_0 *(*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct __THE_1_Test_0 *n0;
  unsigned char o1;
  struct __THE_1_Test_0 *n1;
};
struct __THE_1_fn$1 {
  struct __THE_1_Test_0 *(*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *, struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_test1_0 (void *, struct __THE_1_fn$0P);
struct __THE_1_Test_0 *__THE_1_test2_0 (void *, struct __THE_1_fn$1P);

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_v) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_v};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *o) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {o->__THE_0_v};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  free(o);
}
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *o1, struct __THE_1_Test_0 *o2) {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) o1);
  return o2;
}
struct __THE_1_Test_0 *__THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_Test_0 *v;
  struct __THE_1_Test_0 *__THE_0_a_0 = p.n0;
  __THE_0_a_0->__THE_0_v = 2;
  v = __THE_1_Test_0_copy(__THE_0_a_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_a_0);
  return v;
}
struct __THE_1_Test_0 *__THE_1_test2_0 (void *px, struct __THE_1_fn$1P p) {
  struct __THE_1_Test_0 *v;
  struct __THE_1_Test_0 *__THE_0_a_0 = p.n0;
  struct __THE_1_Test_0 *__THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_Test_0_alloc(2);
  __THE_0_b_0 = __THE_1_Test_0_realloc(__THE_0_b_0, __THE_1_Test_0_copy(__THE_0_a_0));
  __THE_0_a_0->__THE_0_v += __THE_0_b_0->__THE_0_v;
  v = __THE_1_Test_0_copy(__THE_0_a_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_b_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test2_0 = (struct __THE_1_fn$1) {&__THE_1_test2_0, NULL, 0};
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_Test_0_alloc(1)}));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {__THE_1_Test_0_alloc(3), 0, NULL}));
}
======= flags =======
======= stdout =======
