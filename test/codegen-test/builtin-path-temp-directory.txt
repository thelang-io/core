======= stdin =======
main {
  dir1 := path_tempDirectory()
  dir2 := path_tempDirectory()

  print(dir1)
  print(dir2)
  print(dir1 == dir2)

  fs_rmdirSync(dir1)
  fs_rmdirSync(dir2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

#ifdef THE_OS_WINDOWS
  extern unsigned char NTAPI SystemFunction036 (void *, unsigned long);
#endif

#define TYPE_error_Error 1

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_assign (err_state_t *, int, void *, void (*f) (void *), int, int);
void error_buf_decrease (err_state_t *);
err_buf_t *error_buf_increase (err_state_t *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void error_stack_str (err_state_t *);
void fs_rmdirSync (err_state_t *, int, int, struct str);
char *path_mktemp (err_state_t *, int, int, unsigned char (*f) (char *));
struct str path_tempDirectory (err_state_t *, int, int);
unsigned char path_tempDirectoryFunctor (char *);
char *path_tmpdir (err_state_t *, int, int);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
char *str_cstr (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_assign (err_state_t *fn_err_state, int id, void *ctx, void (*f) (void *), int line, int col) {
  fn_err_state->id = id;
  fn_err_state->ctx = ctx;
  fn_err_state->_free = f;
  error_stack_pos(fn_err_state, line, col);
  error_stack_str(fn_err_state);
}
void error_buf_decrease (err_state_t *fn_err_state) {
  err_buf_t *buf = fn_err_state->buf_last;
  fn_err_state->buf_last = buf->prev;
  free(buf);
}
err_buf_t *error_buf_increase (err_state_t *fn_err_state) {
  err_buf_t *buf = alloc(sizeof(err_buf_t));
  buf->next = NULL;
  buf->prev = fn_err_state->buf_last;
  if (fn_err_state->buf_first == NULL) fn_err_state->buf_first = buf;
  if (fn_err_state->buf_last != NULL) fn_err_state->buf_last->next = buf;
  fn_err_state->buf_last = buf;
  return fn_err_state->buf_last;
}
void error_stack_pop (err_state_t *fn_err_state) {
  err_stack_t *stack = fn_err_state->stack_last;
  fn_err_state->stack_last = stack->prev;
  free(stack);
}
void error_stack_pos (err_state_t *fn_err_state, int line, int col) {
  if (line != 0) fn_err_state->stack_last->line = line;
  if (col != 0) fn_err_state->stack_last->col = col;
}
void error_stack_push (err_state_t *fn_err_state, const char *file, const char *name, int line, int col) {
  error_stack_pos(fn_err_state, line, col);
  err_stack_t *stack = alloc(sizeof(err_stack_t));
  stack->file = file;
  stack->name = name;
  stack->next = NULL;
  stack->prev = fn_err_state->stack_last;
  if (fn_err_state->stack_first == NULL) fn_err_state->stack_first = stack;
  if (fn_err_state->stack_last != NULL) fn_err_state->stack_last->next = stack;
  fn_err_state->stack_last = stack;
}
void error_stack_str (err_state_t *fn_err_state) {
  struct str *stack = (struct str *) &((struct error_Error *) fn_err_state->ctx)->__THE_0_stack;
  struct str message = ((struct error_Error *) fn_err_state->ctx)->__THE_0_message;
  stack->l = message.l;
  stack->d = re_alloc(stack->d, stack->l);
  memcpy(stack->d, message.d, stack->l);
  int i = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    size_t z;
    char *fmt;
    if (it->col == 0 && it->line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it->name, it->file);
    } else if (it->col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it->name, it->file, it->line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it->name, it->file, it->line, it->col);
    }
    stack->d = re_alloc(stack->d, stack->l + z + 1);
    if (it->col == 0 && it->line == 0) {
      sprintf(&stack->d[stack->l], fmt, it->name, it->file);
    } else if (it->col == 0) {
      sprintf(&stack->d[stack->l], fmt, it->name, it->file, it->line);
    } else {
      sprintf(&stack->d[stack->l], fmt, it->name, it->file, it->line, it->col);
    }
    stack->l += z;
    i++;
  }
}
void fs_rmdirSync (err_state_t *fn_err_state, int line, int col, struct str s) {
  char *c = str_cstr(s);
  #ifdef THE_OS_WINDOWS
    bool r = RemoveDirectory(c);
  #else
    bool r = rmdir(c) == 0;
  #endif
  if (!r) {
    const char *fmt = "failed to remove directory `%s`";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    error_assign(fn_err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    goto fs_rmdirSync_cleanup;
  }
fs_rmdirSync_cleanup:
  free(c);
  str_free(s);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
}
char *path_mktemp (err_state_t *fn_err_state, int line, int col, unsigned char (*f) (char *)) {
  static const char *chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  static const size_t chars_len = 62;
  static const size_t x = 6;
  char *d = path_tmpdir(fn_err_state, line, col);
  size_t l = strlen(d) + x;
  d = re_alloc(d, l + 1);
  memcpy(&d[l - x], "XXXXXX", x + 1);
  #ifdef THE_OS_WINDOWS
    size_t j = TMP_MAX;
    unsigned long long v;
    do {
      if (!SystemFunction036((void *) &v, sizeof(v))) {
        free(d);
        error_assign(fn_err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to generate random with `SystemFunction036`"), (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
        longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
      }
      char *p = &d[l - x];
      for (size_t i = 0; i < x; i++) {
        *p++ = chars[v % chars_len];
        v /= chars_len;
      }
      if (f(d)) return d;
    } while (--j);
    free(d);
    return NULL;
  #else
    if (!f(d)) {
      free(d);
      return NULL;
    }
    return d;
  #endif
}
struct str path_tempDirectory (err_state_t *fn_err_state, int line, int col) {
  char *d = path_mktemp(fn_err_state, line, col, path_tempDirectoryFunctor);
  if (d == NULL) {
    error_assign(fn_err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to create temporary directory"), (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
  }
  struct str r = str_alloc(d);
  free(d);
  return r;
}
unsigned char path_tempDirectoryFunctor (char *c) {
  #ifdef THE_OS_WINDOWS
    return CreateDirectory(c, NULL) == 0 ? 0 : 1;
  #else
    return mkdtemp(c) == NULL ? 0 : 1;
  #endif
}
char *path_tmpdir (err_state_t *fn_err_state, int line, int col) {
  char *d;
  #ifdef THE_OS_WINDOWS
    size_t l = GetTempPath(0, NULL);
    if (l == 0) {
      error_assign(fn_err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to get temporary path"), (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
      longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
    }
    l -= 1;
    d = alloc(l + 1);
    if (GetTempPath(l + 1, d) == 0) {
      free(d);
      error_assign(fn_err_state, TYPE_error_Error, (void *) error_Error_alloc(str_alloc("failed to get temporary path"), (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
      longjmp(fn_err_state->buf_last->buf, fn_err_state->id);
    }
    if (d[l - 1] != '\\' && d[l - 1] != '/') {
      d[l] = '\\';
      d = re_alloc(d, ++l + 1);
    }
    d[l] = '\0';
  #else
    char *f;
    if (
      (f = getenv("TMPDIR")) == NULL &&
      (f = getenv("TMP")) == NULL &&
      (f = getenv("TEMP")) == NULL &&
      (f = getenv("TEMPDIR")) == NULL
    ) {
      f = "/tmp/";
    }
    size_t l = strlen(f);
    d = alloc(l + 1);
    memcpy(d, f, l);
    if (f[l - 1] != '/') {
      d[l] = '/';
      d = re_alloc(d, ++l + 1);
    }
    d[l] = '\0';
  #endif
  return d;
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(error_buf_increase(&err_state)->buf) != 0) goto L1;
  const struct str __THE_0_dir1_0 = path_tempDirectory(&err_state, 2, 11);
  if (setjmp(err_state.buf_last->buf) != 0) goto L2;
  const struct str __THE_0_dir2_0 = path_tempDirectory(&err_state, 3, 11);
  if (setjmp(err_state.buf_last->buf) != 0) goto L3;
  print(stdout, "sz", str_copy(__THE_0_dir1_0), THE_EOL);
  if (setjmp(err_state.buf_last->buf) != 0) goto L3;
  print(stdout, "sz", str_copy(__THE_0_dir2_0), THE_EOL);
  if (setjmp(err_state.buf_last->buf) != 0) goto L3;
  print(stdout, "tz", str_eq_str(str_copy(__THE_0_dir1_0), str_copy(__THE_0_dir2_0)), THE_EOL);
  if (setjmp(err_state.buf_last->buf) != 0) goto L3;
  fs_rmdirSync(&err_state, 9, 3, str_copy(__THE_0_dir1_0));
  if (setjmp(err_state.buf_last->buf) != 0) goto L3;
  fs_rmdirSync(&err_state, 10, 3, str_copy(__THE_0_dir2_0));
L3:
  str_free((struct str) __THE_0_dir2_0);
L2:
  str_free((struct str) __THE_0_dir1_0);
L1:
  error_buf_decrease(&err_state);
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
W:-ladvapi32
======= stdout =======
{{ (/var/folders/\w+/\w+/\w+/\w+|/tmp/\w+|C:\\\w+\\[\w~]+\\\w+\\\w+\\\w+\\\w+) }}
{{ (/var/folders/\w+/\w+/\w+/\w+|/tmp/\w+|C:\\\w+\\[\w~]+\\\w+\\\w+\\\w+\\\w+) }}
false
