======= stdin =======
main {
  fs_isDirectorySync("delasy.txt")
  fs_isDirectorySync("LICENSE.txt")
  fs_isDirectorySync("test")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <sys/stat.h>
#endif

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
bool fs_isDirectorySync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
bool fs_isDirectorySync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  struct stat r;
  bool b = false;
  if (stat(c, &r) == 0) {
    b = S_ISDIR(r.st_mode);
  }
  free(c);
  str_free(s);
  return b;
}

int main () {
  fs_isDirectorySync(str_alloc("delasy.txt"));
  fs_isDirectorySync(str_alloc("LICENSE.txt"));
  fs_isDirectorySync(str_alloc("test"));
}
======= flags =======
======= stdout =======
