======= stdin =======
obj Test {
  a: fn () void
}

fn job1 () {}
fn job2 () {}

main {
  test1 := Test{a: job1}
  mut test2 := test1
  test2 = Test{a: job2}
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_fn$0;
struct __THE_1_Test_0;

struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_Test_0 {
  struct __THE_1_fn$0 __THE_0_a;
};

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$0);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *, struct __THE_1_Test_0 *);
void __THE_1_job1_0 (void *);
void __THE_1_job2_0 (void *);

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$0 __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *o) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_1_fn$0_copy(o->__THE_0_a);
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  __THE_1_fn$0_free((struct __THE_1_fn$0) o->__THE_0_a);
  free(o);
}
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *o1, struct __THE_1_Test_0 *o2) {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) o1);
  return o2;
}
void __THE_1_job1_0 (void *px) {
}
void __THE_1_job2_0 (void *px) {
}

int main () {
  const struct __THE_1_fn$0 __THE_0_job1_0 = (struct __THE_1_fn$0) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_job2_0 = (struct __THE_1_fn$0) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_Test_0 *__THE_0_test1_0 = __THE_1_Test_0_alloc(__THE_1_fn$0_copy(__THE_0_job1_0));
  struct __THE_1_Test_0 *__THE_0_test2_0 = __THE_1_Test_0_copy(__THE_0_test1_0);
  __THE_0_test2_0 = __THE_1_Test_0_realloc(__THE_0_test2_0, __THE_1_Test_0_alloc(__THE_1_fn$0_copy(__THE_0_job2_0)));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test2_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
