======= stdin =======
main {
  test1 := "test"
  test1[5]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
char *str_at (struct str, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
char *str_at (struct str s, int32_t i) {
  if ((i >= 0 && i >= s.l) || (i < 0 && i < -((int32_t) s.l))) {
    fprintf(stderr, "Error: index %" PRId32 " out of string bounds" THE_EOL, i);
    exit(EXIT_FAILURE);
  }
  return i < 0 ? &s.d[s.l + i] : &s.d[i];
}

int main () {
  const struct str __THE_0_test1_0 = str_alloc("test");
  str_at(__THE_0_test1_0, 5);
  str_free((struct str) __THE_0_test1_0);
}
======= flags =======
======= stderr =======
Error: index 5 out of string bounds
