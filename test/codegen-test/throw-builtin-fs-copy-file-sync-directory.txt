======= stdin =======
main {
  fs_copyFileSync(
    "test" + path_SEP + "fixtures",
    "test" + path_SEP + "fixtures" + path_SEP + "test3.txt"
  )
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <fcntl.h>
  #include <unistd.h>
#endif

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void fs_copyFileSync (struct str, struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
char *str_cstr (const struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void fs_copyFileSync (struct str n1, struct str n2) {
  char *c1 = str_cstr(n1);
  char *c2 = str_cstr(n2);
  #ifdef THE_OS_WINDOWS
    if (CopyFile(c1, c2, 0) == 0) {
      const char *fmt = "failed to copy file from `%s` to `%s`";
      size_t z = snprintf(NULL, 0, fmt, c1, c2);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c1, c2);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup1;
    }
  #else
    size_t buf_len = 8192;
    char buf[buf_len];
    int fd1 = open(c1, O_RDONLY);
    if (fd1 < 0) {
      const char *fmt = "failed to open file descriptor of `%s`";
      size_t z = snprintf(NULL, 0, fmt, c1);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c1);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup1;
    }
    struct stat sb1;
    if (fstat(fd1, &sb1) != 0) {
      const char *fmt = "failed to stat file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c1);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c1);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup2;
    }
    if ((sb1.st_mode & S_IFMT) != S_IFREG) {
      const char *fmt = "cannot copy non-file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c1);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c1);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup2;
    }
    int fd2 = open(c2, O_WRONLY | O_CREAT);
    if (fd2 < 0) {
      const char *fmt = "failed to open file descriptor of `%s`";
      size_t z = snprintf(NULL, 0, fmt, c2);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c2);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup2;
    }
    struct stat sb2;
    if (fstat(fd2, &sb2) != 0) {
      const char *fmt = "failed to stat file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c2);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c2);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup3;
    }
    if (sb1.st_dev == sb2.st_dev && sb1.st_ino == sb2.st_ino) {
      const char *fmt = "can't copy same file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c2);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c2);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup3;
    }
    if (sb2.st_size > 0 && ftruncate(fd2, 0) != 0) {
      const char *fmt = "failed to truncate file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c2);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c2);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup3;
    }
    if (fchmod(fd2, sb1.st_mode) != 0) {
      const char *fmt = "failed to chmod file `%s`";
      size_t z = snprintf(NULL, 0, fmt, c2);
      char *d = alloc(z + 1);
      sprintf(d, fmt, c2);
      error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
      goto fs_copyFileSync_cleanup3;
    }
    size_t bytes = sb1.st_size;
    while (bytes != 0) {
      ssize_t read_bytes_raw = read(fd1, buf, bytes > buf_len ? buf_len : bytes);
      if (read_bytes_raw <= 0) {
        const char *fmt = "failed to read data from file `%s`";
        size_t z = snprintf(NULL, 0, fmt, c1);
        char *d = alloc(z + 1);
        sprintf(d, fmt, c1);
        error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
        goto fs_copyFileSync_cleanup3;
      }
      size_t read_bytes = read_bytes_raw;
      size_t written_bytes = 0;
      while (written_bytes != read_bytes) {
        ssize_t written_bytes_raw = write(fd2, &buf[written_bytes], read_bytes - written_bytes);
        if (written_bytes_raw <= 0) {
          const char *fmt = "failed to write data to file `%s`";
          size_t z = snprintf(NULL, 0, fmt, c2);
          char *d = alloc(z + 1);
          sprintf(d, fmt, c2);
          error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
          goto fs_copyFileSync_cleanup3;
        }
        written_bytes += (size_t) written_bytes_raw;
      }
      bytes -= written_bytes;
    }
fs_copyFileSync_cleanup3:
    close(fd2);
fs_copyFileSync_cleanup2:
    close(fd1);
  #endif
fs_copyFileSync_cleanup1:
  free(c2);
  free(c1);
  str_free(n2);
  str_free(n1);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  (error_stack_pos(&err_state, 2, 3), fs_copyFileSync(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test3.txt")));
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stderr =======
Uncaught Error: {{ (cannot copy non\-file `test/fixtures`|failed to copy file from `test\\fixtures` to `test\\fixtures\\test3\.txt`) }}
  at main (/test:2:3)
