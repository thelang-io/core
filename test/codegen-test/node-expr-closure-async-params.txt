======= stdin =======
main {
  async (param1: int) -> void {
    print(param1)
  };
  async (param1: int, mut param2: str) -> void {
    param2 += " string"
    print(param1, param2)
  };
  async (param1 := 10, param2: str? = "test") -> void {
    print(param1, param2)
  };
  async (param1: int, param2: int...) -> void {
    print(param1, param2)
  };
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

struct threadpool_cond;
struct threadpool_mutex;
struct threadpool;
struct threadpool_job;
struct threadpool_thread;

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};
typedef struct threadpool_cond {
  #ifdef THE_OS_WINDOWS
    CONDITION_VARIABLE v;
  #else
    pthread_cond_t v;
  #endif
} threadpool_cond_t;
typedef struct threadpool_mutex {
  #ifdef THE_OS_WINDOWS
    CRITICAL_SECTION v;
  #else
    pthread_mutex_t v;
  #endif
} threadpool_mutex_t;
typedef struct threadpool {
  bool active;
  struct threadpool_cond cond1;
  struct threadpool_cond cond2;
  struct threadpool_job *jobs;
  struct threadpool_job *jobs_tail;
  struct threadpool_mutex lock1;
  struct threadpool_mutex lock2;
  struct threadpool_mutex lock3;
  struct threadpool_thread *threads;
  int working_threads;
  int alive_threads;
} threadpool_t;
typedef void (*threadpool_func_t) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
typedef struct threadpool_job {
  struct threadpool_job *parent;
  threadpool_func_t func;
  void *ctx;
  void *params;
  void *ret;
  int step;
  unsigned char init;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  #ifdef THE_OS_WINDOWS
    HANDLE id;
  #else
    pthread_t id;
  #endif
  struct threadpool *tp;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn_aFP3intFRvoidFE;
struct __THE_1_fn_aFP3intFRvoidFEP;
struct __THE_1_fn_aFP3intFP5strFRvoidFE;
struct __THE_1_fn_aFP3intFP5strFRvoidFEP;
struct __THE_1_fn_aFP1intFP1opt_strFRvoidFE;
struct __THE_1_fn_aFP1intFP1opt_strFRvoidFEP;
struct __THE_1_fn_aFP3intFP4array_intFRvoidFE;
struct __THE_1_array_int;
struct __THE_1_fn_aFP3intFP4array_intFRvoidFEP;

struct __THE_1_fn_aFP3intFRvoidFE {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn_aFP3intFRvoidFEP {
  int32_t n0;
};
struct __THE_1_fn_aFP3intFP5strFRvoidFE {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn_aFP3intFP5strFRvoidFEP {
  int32_t n0;
  struct str n1;
};
struct __THE_1_fn_aFP1intFP1opt_strFRvoidFE {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn_aFP1intFP1opt_strFRvoidFEP {
  unsigned char o0;
  int32_t n0;
  unsigned char o1;
  struct str *n1;
};
struct __THE_1_fn_aFP3intFP4array_intFRvoidFE {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn_aFP3intFP4array_intFRvoidFEP {
  int32_t n0;
  struct __THE_1_array_int n1;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
void threadpool_cond_signal (threadpool_cond_t *);
void threadpool_insert (threadpool_t *, threadpool_job_t *);
void threadpool_job_deinit (threadpool_job_t *);
void threadpool_mutex_lock (threadpool_mutex_t *);
void threadpool_mutex_unlock (threadpool_mutex_t *);
void __THE_1_mainSD$_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_mainSD$_1 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
struct str *__THE_1_opt_str_alloc (struct str);
struct str *__THE_1_opt_str_copy (const struct str *);
void __THE_1_opt_str_free (struct str *);
struct str __THE_1_opt_str_str (struct str *);
void __THE_1_mainSD$_2 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct str __THE_1_array_int_str (struct __THE_1_array_int);
void __THE_1_mainSD$_3 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
void threadpool_cond_signal (threadpool_cond_t *self) {
  #ifdef THE_OS_WINDOWS
    WakeConditionVariable(&self->v);
  #else
    pthread_cond_signal(&self->v);
  #endif
}
void threadpool_insert (threadpool_t *self, threadpool_job_t *job) {
  threadpool_mutex_lock(&self->lock2);
  if (self->jobs == NULL) {
    self->jobs = job;
    self->jobs_tail = job;
  } else {
    self->jobs_tail->next = job;
    self->jobs_tail = self->jobs_tail->next;
  }
  threadpool_mutex_lock(&self->lock3);
  threadpool_cond_signal(&self->cond2);
  threadpool_mutex_unlock(&self->lock3);
  threadpool_mutex_unlock(&self->lock2);
}
void threadpool_job_deinit (threadpool_job_t *self) {
  if (self->ctx != NULL) free(self->ctx);
  free(self);
}
void threadpool_mutex_lock (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    EnterCriticalSection(&self->v);
  #else
    pthread_mutex_lock(&self->v);
  #endif
}
void threadpool_mutex_unlock (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    LeaveCriticalSection(&self->v);
  #else
    pthread_mutex_unlock(&self->v);
  #endif
}
void __THE_1_mainSD$_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn_aFP3intFRvoidFEP *p = pp;
  const int32_t *__THE_0_param1_0 = &p->n0;
  job->init = 1;
  switch (step) {
    case 0: {
      print(stdout, "iz", *__THE_0_param1_0, THE_EOL);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
void __THE_1_mainSD$_1 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn_aFP3intFP5strFRvoidFEP *p = pp;
  const int32_t *__THE_0_param1_0 = &p->n0;
  struct str *__THE_0_param2_0 = &p->n1;
  job->init = 1;
  switch (step) {
    case 0: {
      *__THE_0_param2_0 = str_realloc(*__THE_0_param2_0, str_concat_cstr(str_copy(*__THE_0_param2_0), " string"));
      print(stdout, "izsz", *__THE_0_param1_0, " ", str_copy(*__THE_0_param2_0), THE_EOL);
      str_free((struct str) *__THE_0_param2_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
struct str *__THE_1_opt_str_alloc (struct str n) {
  struct str *r = alloc(sizeof(struct str));
  *r = n;
  return r;
}
struct str *__THE_1_opt_str_copy (const struct str *n) {
  if (n == NULL) return NULL;
  struct str *r = alloc(sizeof(struct str));
  *r = str_copy(*n);
  return r;
}
void __THE_1_opt_str_free (struct str *n) {
  if (n == NULL) return;
  str_free((struct str) *n);
  free(n);
}
struct str __THE_1_opt_str_str (struct str *n) {
  if (n == NULL) return str_alloc("nil");
  struct str r = str_alloc("\"");
  r = str_concat_str(r, str_escape(*n));
  r = str_concat_cstr(r, "\"");
  __THE_1_opt_str_free((struct str *) n);
  return r;
}
void __THE_1_mainSD$_2 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn_aFP1intFP1opt_strFRvoidFEP *p = pp;
  if (job->init == 0 && p->o0 != 1) p->n0 = 10;
  const int32_t *__THE_0_param1_0 = &p->n0;
  if (job->init == 0 && p->o1 != 1) p->n1 = __THE_1_opt_str_alloc(str_alloc("test"));
  const struct str **__THE_0_param2_0 = &p->n1;
  job->init = 1;
  switch (step) {
    case 0: {
      print(stdout, "izsz", *__THE_0_param1_0, " ", __THE_1_opt_str_str(__THE_1_opt_str_copy(*__THE_0_param2_0)), THE_EOL);
      __THE_1_opt_str_free((struct str *) *__THE_0_param2_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}
void __THE_1_mainSD$_3 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn_aFP3intFP4array_intFRvoidFEP *p = pp;
  const int32_t *__THE_0_param1_0 = &p->n0;
  const struct __THE_1_array_int *__THE_0_param2_0 = &p->n1;
  job->init = 1;
  switch (step) {
    case 0: {
      print(stdout, "izsz", *__THE_0_param1_0, " ", __THE_1_array_int_str(__THE_1_array_int_copy(*__THE_0_param2_0)), THE_EOL);
      __THE_1_array_int_free((struct __THE_1_array_int) *__THE_0_param2_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}

int main () {
  const struct __THE_1_fn_aFP3intFRvoidFE __THE_0_mainSD$_0 = (struct __THE_1_fn_aFP3intFRvoidFE) {&__THE_1_mainSD$_0, NULL, 0};
  __THE_0_mainSD$_0;
  const struct __THE_1_fn_aFP3intFP5strFRvoidFE __THE_0_mainSD$_1 = (struct __THE_1_fn_aFP3intFP5strFRvoidFE) {&__THE_1_mainSD$_1, NULL, 0};
  __THE_0_mainSD$_1;
  const struct __THE_1_fn_aFP1intFP1opt_strFRvoidFE __THE_0_mainSD$_2 = (struct __THE_1_fn_aFP1intFP1opt_strFRvoidFE) {&__THE_1_mainSD$_2, NULL, 0};
  __THE_0_mainSD$_2;
  const struct __THE_1_fn_aFP3intFP4array_intFRvoidFE __THE_0_mainSD$_3 = (struct __THE_1_fn_aFP3intFP4array_intFRvoidFE) {&__THE_1_mainSD$_3, NULL, 0};
  __THE_0_mainSD$_3;
}
======= flags =======
U:-pthread
======= stdout =======
