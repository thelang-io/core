======= stdin =======
main {
  test := [0, 1, 2]
  num1: int = test[0]
  num2: int = test[1]
  num3: int = test[2]
  num4: int = test[-1]
  num5: int = test[-2]
  num6: int = test[-3]

  print(num1, num2, num3, num4, num5, num6)
}
======= code =======
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
int32_t *__THE_1_array_int_at (struct __THE_1_array_int, int64_t);
void __THE_1_array_int_free (struct __THE_1_array_int);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
int32_t *__THE_1_array_int_at (struct __THE_1_array_int n, int64_t i) {
  if ((i >= 0 && i >= n.l) || (i < 0 && i < -n.l)) {
    fprintf(stderr, "Error: index %" PRId64 " out of array bounds\n", i);
    exit(EXIT_FAILURE);
  }
  return i < 0 ? &n.d[n.l + (size_t) i] : &n.d[(size_t) i];
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}

int main () {
  const struct __THE_1_array_int __THE_0_test_0 = __THE_1_array_int_alloc(3, 0, 1, 2);
  const int32_t __THE_0_num1_0 = *__THE_1_array_int_at(__THE_0_test_0, 0);
  const int32_t __THE_0_num2_0 = *__THE_1_array_int_at(__THE_0_test_0, 1);
  const int32_t __THE_0_num3_0 = *__THE_1_array_int_at(__THE_0_test_0, 2);
  const int32_t __THE_0_num4_0 = *__THE_1_array_int_at(__THE_0_test_0, -1);
  const int32_t __THE_0_num5_0 = *__THE_1_array_int_at(__THE_0_test_0, -2);
  const int32_t __THE_0_num6_0 = *__THE_1_array_int_at(__THE_0_test_0, -3);
  print(stdout, "iziziziziziz", __THE_0_num1_0, " ", __THE_0_num2_0, " ", __THE_0_num3_0, " ", __THE_0_num4_0, " ", __THE_0_num5_0, " ", __THE_0_num6_0, "\n");
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test_0);
}
======= flags =======
======= stdout =======
0 1 2 2 1 0
