======= stdin =======
main {
  s1 := "str1"
  s2 := "str2"

  if "" == "hello" {
  }
  if "hello" == "hello" {
  }

  if s1 == "str" {
  }
  if s1 == "str1" {
  }

  if "str" == s1 {
  }
  if "str1" == s1 {
  }

  if s1 == s2 {
  }
  if s1 == s1 {
  }

  if "hello" != "hello" {
  }
  if "" != "hello" {
  }

  if s1 != "str1" {
  }
  if s1 != "str" {
  }

  if "str1" != s1 {
  }
  if "str" != s1 {
  }

  if s1 != s1 {
  }
  if s1 != s2 {
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
bool cstr_eq_cstr (const char *, const char *);
bool cstr_eq_str (const char *, struct str);
bool cstr_ne_cstr (const char *, const char *);
bool cstr_ne_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
bool str_ne_cstr (struct str, const char *);
bool str_ne_str (struct str, struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
bool cstr_eq_cstr (const char *c1, const char *c2) {
  size_t l = strlen(c1);
  return l == strlen(c2) && memcmp(c1, c2, l) == 0;
}
bool cstr_eq_str (const char *c, struct str s) {
  bool r = s.l == strlen(c) && memcmp(s.d, c, s.l) == 0;
  free(s.d);
  return r;
}
bool cstr_ne_cstr (const char *c1, const char *c2) {
  size_t l = strlen(c1);
  return l != strlen(c2) || memcmp(c1, c2, l) != 0;
}
bool cstr_ne_str (const char *d, struct str s) {
  bool r = s.l != strlen(d) || memcmp(s.d, d, s.l) != 0;
  free(s.d);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_cstr (struct str s, const char *c) {
  bool r = s.l != strlen(c) || memcmp(s.d, c, s.l) != 0;
  free(s.d);
  return r;
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}

int main () {
  const struct str __THE_0_s1_0 = str_alloc("str1");
  const struct str __THE_0_s2_0 = str_alloc("str2");
  if (cstr_eq_cstr("", "hello")) {
  }
  if (cstr_eq_cstr("hello", "hello")) {
  }
  if (str_eq_cstr(str_copy(__THE_0_s1_0), "str")) {
  }
  if (str_eq_cstr(str_copy(__THE_0_s1_0), "str1")) {
  }
  if (cstr_eq_str("str", str_copy(__THE_0_s1_0))) {
  }
  if (cstr_eq_str("str1", str_copy(__THE_0_s1_0))) {
  }
  if (str_eq_str(str_copy(__THE_0_s1_0), str_copy(__THE_0_s2_0))) {
  }
  if (str_eq_str(str_copy(__THE_0_s1_0), str_copy(__THE_0_s1_0))) {
  }
  if (cstr_ne_cstr("hello", "hello")) {
  }
  if (cstr_ne_cstr("", "hello")) {
  }
  if (str_ne_cstr(str_copy(__THE_0_s1_0), "str1")) {
  }
  if (str_ne_cstr(str_copy(__THE_0_s1_0), "str")) {
  }
  if (cstr_ne_str("str1", str_copy(__THE_0_s1_0))) {
  }
  if (cstr_ne_str("str", str_copy(__THE_0_s1_0))) {
  }
  if (str_ne_str(str_copy(__THE_0_s1_0), str_copy(__THE_0_s1_0))) {
  }
  if (str_ne_str(str_copy(__THE_0_s1_0), str_copy(__THE_0_s2_0))) {
  }
  str_free((struct str) __THE_0_s2_0);
  str_free((struct str) __THE_0_s1_0);
}
======= flags =======
======= stdout =======
