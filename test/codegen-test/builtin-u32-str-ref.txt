======= stdin =======
main {
  a: u32 = 0
  b: u32 = 1
  c: u32 = 999
  arr := [a, b, c]

  loop i := 0; i < arr.len; i++ {
    print(arr[i].str())
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_u32;

struct __THE_1_array_u32 {
  uint32_t *d;
  size_t l;
};

void *alloc (size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
void str_free (struct str);
struct str u32_str (uint32_t);
struct __THE_1_array_u32 __THE_1_array_u32_alloc (size_t, ...);
uint32_t *__THE_1_array_u32_at (struct __THE_1_array_u32, int64_t);
struct __THE_1_array_u32 __THE_1_array_u32_copy (const struct __THE_1_array_u32);
void __THE_1_array_u32_free (struct __THE_1_array_u32);
size_t __THE_1_array_u32_len (struct __THE_1_array_u32);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str u32_str (uint32_t d) {
  char buf[512];
  sprintf(buf, "%" PRIu32, d);
  return str_alloc(buf);
}
struct __THE_1_array_u32 __THE_1_array_u32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u32) {NULL, 0};
  uint32_t *d = alloc(x * sizeof(uint32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, uint32_t);
  va_end(args);
  return (struct __THE_1_array_u32) {d, x};
}
uint32_t *__THE_1_array_u32_at (struct __THE_1_array_u32 n, int64_t i) {
  if ((i >= 0 && i >= n.l) || (i < 0 && i < -((int64_t) n.l))) {
    fprintf(stderr, "Error: index %" PRId64 " out of array bounds" THE_EOL, i);
    exit(EXIT_FAILURE);
  }
  return i < 0 ? &n.d[n.l + i] : &n.d[i];
}
struct __THE_1_array_u32 __THE_1_array_u32_copy (const struct __THE_1_array_u32 n) {
  if (n.l == 0) return (struct __THE_1_array_u32) {NULL, 0};
  uint32_t *d = alloc(n.l * sizeof(uint32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_u32) {d, n.l};
}
void __THE_1_array_u32_free (struct __THE_1_array_u32 n) {
  free(n.d);
}
size_t __THE_1_array_u32_len (struct __THE_1_array_u32 n) {
  size_t l = n.l;
  __THE_1_array_u32_free((struct __THE_1_array_u32) n);
  return l;
}

int main () {
  const uint32_t __THE_0_a_0 = 0;
  const uint32_t __THE_0_b_0 = 1;
  const uint32_t __THE_0_c_0 = 999;
  const struct __THE_1_array_u32 __THE_0_arr_0 = __THE_1_array_u32_alloc(3, __THE_0_a_0, __THE_0_b_0, __THE_0_c_0);
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < __THE_1_array_u32_len(__THE_1_array_u32_copy(__THE_0_arr_0)); __THE_0_i_0++) {
    print(stdout, "sz", u32_str(*__THE_1_array_u32_at(__THE_0_arr_0, __THE_0_i_0)), THE_EOL);
  }
  __THE_1_array_u32_free((struct __THE_1_array_u32) __THE_0_arr_0);
}
======= flags =======
======= stdout =======
0
1
999
