======= stdin =======
fn test1 (a: int?, b: int? = 3, c: int? = 4) int {
  mut d: int

  if a != nil { d += a }
  if b != nil { d += b }
  if c != nil { d += c }

  return d
}

main {
  test1(1)
  test1(1, 2)
  test1(1, 2, 3)
  test1(1, b: 2)
  test1(1, c: 3)
  test1(1, b: 2, c: 3)
  test1(1, c: 3, b: 2)

  test1(nil)
  test1(nil, nil)
  test1(nil, nil, nil)
  test1(nil, b: nil)
  test1(nil, c: nil)
  test1(nil, b: nil, c: nil)
  test1(nil, c: nil, b: nil)

  mut a: int? = nil

  fn test2 (a2: int?, b: int? = 5, c: int? = 6) {
    a = test1(a2, b, c)
  }

  test2(7)
  test2(7, 8)
  test2(7, 8, 9)
  test2(7, b: 8)
  test2(7, c: 9)
  test2(7, b: 8, c: 9)
  test2(7, c: 9, b: 8)

  test2(nil)
  test2(nil, nil)
  test2(nil, nil, nil)
  test2(nil, b: nil)
  test2(nil, c: nil)
  test2(nil, b: nil, c: nil)
  test2(nil, c: nil, b: nil)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_fn$1000 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t *n0;
  unsigned char o1;
  int32_t *n1;
  unsigned char o2;
  int32_t *n2;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int32_t *n0;
  unsigned char o1;
  int32_t *n1;
  unsigned char o2;
  int32_t *n2;
};
struct __THE_1_mainSDtest2_0X {
  int32_t **__THE_0_a_0;
  const struct __THE_1_fn$1000 *__THE_0_test1_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);
int32_t __THE_1_test1_0 (void *, void *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_mainSDtest2_0 (void *, void *);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_mainSDtest2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}
int32_t __THE_1_test1_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn$1000P *p = pp;
  const int32_t *__THE_0_a_0 = p->n0;
  const int32_t *__THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_opt_int_alloc(3);
  const int32_t *__THE_0_c_0 = p->o2 == 1 ? p->n2 : __THE_1_opt_int_alloc(4);
  int32_t __THE_0_d_0 = 0;
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_a_0), NULL)) {
    __THE_0_d_0 += *__THE_0_a_0;
  }
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_b_0), NULL)) {
    __THE_0_d_0 += *__THE_0_b_0;
  }
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_c_0), NULL)) {
    __THE_0_d_0 += *__THE_0_c_0;
  }
  v = __THE_0_d_0;
  __THE_1_opt_int_free((int32_t *) __THE_0_c_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
  free(pp);
  return v;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest2_0 (void *px, void *pp) {
  struct __THE_1_fn$1001P *p = pp;
  struct __THE_1_mainSDtest2_0X *x = px;
  int32_t **__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1000 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const int32_t *__THE_0_a2_0 = p->n0;
  const int32_t *__THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_opt_int_alloc(5);
  const int32_t *__THE_0_c_0 = p->o2 == 1 ? p->n2 : __THE_1_opt_int_alloc(6);
  *__THE_0_a_0 = __THE_1_opt_int_realloc(*__THE_0_a_0, __THE_1_opt_int_alloc((*__THE_0_test1_0).f((*__THE_0_test1_0).x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_copy(__THE_0_a2_0), 1, __THE_1_opt_int_copy(__THE_0_b_0), 1, __THE_1_opt_int_copy(__THE_0_c_0)}, sizeof(struct __THE_1_fn$1000P)))));
  __THE_1_opt_int_free((int32_t *) __THE_0_c_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a2_0);
  free(pp);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 0, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 1, __THE_1_opt_int_alloc(2), 0, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 1, __THE_1_opt_int_alloc(2), 1, __THE_1_opt_int_alloc(3)}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 1, __THE_1_opt_int_alloc(2), 0, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 0, NULL, 1, __THE_1_opt_int_alloc(3)}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 1, __THE_1_opt_int_alloc(2), 1, __THE_1_opt_int_alloc(3)}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_opt_int_alloc(1), 1, __THE_1_opt_int_alloc(2), 1, __THE_1_opt_int_alloc(3)}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 0, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 1, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 1, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 1, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 0, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 1, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1000P)));
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {NULL, 1, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1000P)));
  int32_t *__THE_0_a_0 = NULL;
  const struct __THE_1_fn$1001 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 0, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 1, __THE_1_opt_int_alloc(8), 0, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 1, __THE_1_opt_int_alloc(8), 1, __THE_1_opt_int_alloc(9)}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 1, __THE_1_opt_int_alloc(8), 0, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 0, NULL, 1, __THE_1_opt_int_alloc(9)}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 1, __THE_1_opt_int_alloc(8), 1, __THE_1_opt_int_alloc(9)}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_opt_int_alloc(7), 1, __THE_1_opt_int_alloc(8), 1, __THE_1_opt_int_alloc(9)}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 0, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 1, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 1, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 1, NULL, 0, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 0, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 1, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1001P) {NULL, 1, NULL, 1, NULL}, sizeof(struct __THE_1_fn$1001P)));
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_mainSDtest2_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
