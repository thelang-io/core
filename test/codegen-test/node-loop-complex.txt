======= stdin =======
fn test () int {
  mut result := 0

  loop i := ""; i != "aaa"; i += "a" {
    j := "b" + i

    if j == "ba" {
      result = 1
      continue
    }

    k := j + "a"

    if k == "ba" {
      result = 2
      break
    }

    l := k + "a"

    if l == "ba" {
      return 3
    }
  }

  loop i := ""; i != "aaa"; i += "a" {
    j := "b" + i
    break
    k := j + "a"
  }

  loop i := ""; i != "aaa"; i += "a" {
    j := "b" + i
    continue
    k := j + "a"
  }

  loop {
    break
  }

  loop i := 0; i < 10; i++ {
    continue
  }

  if result == 2 {
    result = 4
  } elif result == 1 {
    return -1
  }

  loop {
    test2 := ""
    break
  }

  return result
}

main {
  test()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
void str_free (struct str);
bool str_ne_cstr (struct str, const char *);
struct str str_realloc (struct str, struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
int32_t __THE_1_test_0 (void *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_cstr (struct str s, const char *c) {
  bool r = s.l != strlen(c) || memcmp(s.d, c, s.l) != 0;
  free(s.d);
  return r;
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
int32_t __THE_1_test_0 (void *px) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  int32_t __THE_0_result_0 = 0;
  {
    struct str __THE_0_i_0 = str_alloc("");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "aaa"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "a"))) {
      unsigned char b1 = 0;
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
      const struct str __THE_0_j_0 = cstr_concat_str("b", str_copy(__THE_0_i_0));
      if (str_eq_cstr(str_copy(__THE_0_j_0), "ba")) {
        if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
        __THE_0_result_0 = 1;
        goto L5;
L5:
        err_state.buf_idx--;
        if (err_state.id != -1) goto L4;
      }
      if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
      const struct str __THE_0_k_0 = str_concat_cstr(str_copy(__THE_0_j_0), "a");
      if (str_eq_cstr(str_copy(__THE_0_k_0), "ba")) {
        if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L7;
        __THE_0_result_0 = 2;
        b1 = 1;
        goto L7;
L7:
        err_state.buf_idx--;
        if (err_state.id != -1) goto L6;
      }
      if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
      const struct str __THE_0_l_0 = str_concat_cstr(str_copy(__THE_0_k_0), "a");
      if (str_eq_cstr(str_copy(__THE_0_l_0), "ba")) {
        r = 1;
        v = 3;
        goto L8;
      }
L8:
      str_free((struct str) __THE_0_l_0);
L6:
      str_free((struct str) __THE_0_k_0);
L4:
      str_free((struct str) __THE_0_j_0);
L3:
      err_state.buf_idx--;
      if (b1 == 1) break;
      if (r == 1) goto L2;
      if (err_state.id != -1) goto L2;
    }
L2:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) goto L1;
  }
  {
    struct str __THE_0_i_0 = str_alloc("");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "aaa"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "a"))) {
      unsigned char b1 = 0;
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L10;
      const struct str __THE_0_j_0 = cstr_concat_str("b", str_copy(__THE_0_i_0));
      b1 = 1;
      goto L11;
      if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L11;
      const struct str __THE_0_k_0 = str_concat_cstr(str_copy(__THE_0_j_0), "a");
      str_free((struct str) __THE_0_k_0);
L11:
      str_free((struct str) __THE_0_j_0);
L10:
      err_state.buf_idx--;
      if (b1 == 1) break;
      if (err_state.id != -1) goto L9;
    }
L9:
    str_free((struct str) __THE_0_i_0);
  }
  {
    struct str __THE_0_i_0 = str_alloc("");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "aaa"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "a"))) {
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L14;
      const struct str __THE_0_j_0 = cstr_concat_str("b", str_copy(__THE_0_i_0));
      goto L15;
      if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L15;
      const struct str __THE_0_k_0 = str_concat_cstr(str_copy(__THE_0_j_0), "a");
      str_free((struct str) __THE_0_k_0);
L15:
      str_free((struct str) __THE_0_j_0);
L14:
      err_state.buf_idx--;
      if (err_state.id != -1) goto L13;
    }
L13:
    str_free((struct str) __THE_0_i_0);
  }
  while (1) {
    break;
  }
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    continue;
  }
  if (__THE_0_result_0 == 2) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L17;
    __THE_0_result_0 = 4;
L17:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L1;
  } else if (__THE_0_result_0 == 1) {
    r = 1;
    v = -1;
    goto L1;
  }
  while (1) {
    unsigned char b1 = 0;
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L18;
    const struct str __THE_0_test2_0 = str_alloc("");
    b1 = 1;
    str_free((struct str) __THE_0_test2_0);
L18:
    err_state.buf_idx--;
    if (b1 == 1) break;
    if (err_state.id != -1) goto L1;
  }
  v = __THE_0_result_0;
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const struct __THE_1_fn$1000 __THE_0_test_0 = (struct __THE_1_fn$1000) {&__THE_1_test_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L20;
  (error_stack_pos(&err_state, 61, 3), __THE_0_test_0.f(__THE_0_test_0.x));
L20:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
