======= stdin =======
obj StaticTest {
  fn staticMethod () {
    print("Static method")
  }
}

fn sub (i: int, amount := 1) int {
  return i - amount
}

obj Counter {
  mut _i: int

  fn get (self: Self) int {
    return self._i
  }

  fn decrease (mut self: ref Self, by := 1) ref Self {
    self._i = sub(self._i, by)
    return self
  }

  fn increase (mut self: ref Self, by := 1) ref Self {
    self._i = add(self._i, by)
    return self
  }

  fn ridiculousStuff (mut self: ref Self) {
    mut self2 := self
    print("For testing:", self2.get())

    obj Counter2 {
      mut _i: int

      fn decrease (mut self: ref Self) {
        self2._i = self._i = sub(self._i)
        print("Parent scope:", self2.get())
        print("Current scope:", self.get())
      }

      fn increase (mut self: ref Self) {
        self2._i = self._i = add(self._i)
        print("Parent scope:", self2.get())
        print("Current scope", self.get())
      }

      fn get (self: ref Self) int {
        return self._i
      }
    }

    mut counter := Counter2{}
    print("Counter2:", counter.get(), self.get())
    counter.increase()
    print("Counter2:", counter.get(), self.get())
    counter.increase()
    print("Counter2:", counter.get(), self.get())
    counter.decrease()
    print("Counter2:", counter.get(), self.get())
  }
}

fn add (i: int, amount := 1) int {
  return i + amount
}

main {
  staticTest := StaticTest{}
  staticTest.staticMethod()

  mut counter := Counter{}
  print("Counter:", counter.get())
  counter.increase()
  print("Counter:", counter.get())
  counter.increase().increase().increase().increase()
  print("Counter:", counter.get())
  counter.decrease().decrease()
  print("Counter:", counter.get())

  counter.ridiculousStuff()

  print("Counter Again:", counter.get())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_test_StaticTest_0;
struct __THE_1_fn_sFP3intFP1intFRintFE;
struct __THE_1_fn_sFP3intFP1intFRintFEP;
struct __THE_1_test_Counter_0;
struct __THE_1_fn_sFRvoidFE;
struct __THE_1_fn_sFSCounterFRintFE;
struct __THE_1_fn_sFSCounterFRintFEP;
struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE;
struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP;
struct __THE_1_test_CounterSDdecrease_0X;
struct __THE_1_test_CounterSDincrease_0X;
struct __THE_1_fn_sFSref_CounterFRvoidFE;
struct __THE_1_fn_sFSref_CounterFRvoidFEP;
struct __THE_1_test_CounterSDridiculousStuff_0X;
struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0;
struct __THE_1_fn_sFSref_Counter2FRvoidFE;
struct __THE_1_fn_sFSref_Counter2FRvoidFEP;
struct __THE_1_fn_sFSref_Counter2FRintFE;
struct __THE_1_fn_sFSref_Counter2FRintFEP;
struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X;
struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X;

struct __THE_1_test_StaticTest_0 {
  void *_;
};
struct __THE_1_fn_sFP3intFP1intFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFP1intFRintFEP {
  int32_t n0;
  unsigned char o1;
  int32_t n1;
};
struct __THE_1_test_Counter_0 {
  int32_t __THE_0__i;
};
struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSCounterFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSCounterFRintFEP {
  const struct __THE_1_test_Counter_0 *self;
};
struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE {
  struct __THE_1_test_Counter_0 **(*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP {
  struct __THE_1_test_Counter_0 **self;
  unsigned char o0;
  int32_t n0;
};
struct __THE_1_test_CounterSDdecrease_0X {
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_sub_0;
};
struct __THE_1_test_CounterSDincrease_0X {
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_add_0;
};
struct __THE_1_fn_sFSref_CounterFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSref_CounterFRvoidFEP {
  struct __THE_1_test_Counter_0 **self;
};
struct __THE_1_test_CounterSDridiculousStuff_0X {
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_add_0;
  const struct __THE_1_fn_sFSCounterFRintFE *__THE_0_test_CounterSDget_0;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_sub_0;
};
struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 {
  int32_t __THE_0__i;
};
struct __THE_1_fn_sFSref_Counter2FRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSref_Counter2FRvoidFEP {
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 **self;
};
struct __THE_1_fn_sFSref_Counter2FRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFSref_Counter2FRintFEP {
  const struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 **self;
};
struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X {
  struct __THE_1_test_Counter_0 ***__THE_0_self2_0;
  const struct __THE_1_fn_sFSref_Counter2FRintFE *__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0;
  const struct __THE_1_fn_sFSCounterFRintFE *__THE_0_test_CounterSDget_0;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_sub_0;
};
struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X {
  struct __THE_1_test_Counter_0 ***__THE_0_self2_0;
  const struct __THE_1_fn_sFSref_Counter2FRintFE *__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_add_0;
  const struct __THE_1_fn_sFSCounterFRintFE *__THE_0_test_CounterSDget_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_test_StaticTest_0 *__THE_1_test_StaticTest_0_alloc ();
void __THE_1_test_StaticTest_0_free (struct __THE_1_test_StaticTest_0 *);
int32_t __THE_1_test_sub_0 (void *, void *);
struct __THE_1_test_Counter_0 *__THE_1_test_Counter_0_alloc (int32_t);
struct __THE_1_test_Counter_0 *__THE_1_test_Counter_0_copy (const struct __THE_1_test_Counter_0 *);
void __THE_1_test_Counter_0_free (struct __THE_1_test_Counter_0 *);
int32_t __THE_1_test_add_0 (void *, void *);
void __THE_1_test_StaticTestSDstaticMethod_0 (void *);
int32_t __THE_1_test_CounterSDget_0 (void *, void *);
void __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE_free (struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE);
struct __THE_1_test_Counter_0 **__THE_1_test_CounterSDdecrease_0 (void *, void *);
void __THE_1_test_CounterSDdecrease_0_alloc (struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE *, struct __THE_1_test_CounterSDdecrease_0X);
struct __THE_1_test_Counter_0 **__THE_1_test_CounterSDincrease_0 (void *, void *);
void __THE_1_test_CounterSDincrease_0_alloc (struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE *, struct __THE_1_test_CounterSDincrease_0X);
void __THE_1_fn_sFSref_CounterFRvoidFE_free (struct __THE_1_fn_sFSref_CounterFRvoidFE);
void __THE_1_test_CounterSDridiculousStuff_0 (void *, void *);
struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *__THE_1_test_CounterSDridiculousStuffSDCounter2_0_alloc (int32_t);
void __THE_1_test_CounterSDridiculousStuffSDCounter2_0_free (struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *);
void __THE_1_fn_sFSref_Counter2FRvoidFE_free (struct __THE_1_fn_sFSref_Counter2FRvoidFE);
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0 (void *, void *);
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0_alloc (struct __THE_1_fn_sFSref_Counter2FRvoidFE *, struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X);
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0 (void *, void *);
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0_alloc (struct __THE_1_fn_sFSref_Counter2FRvoidFE *, struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X);
int32_t __THE_1_test_CounterSDridiculousStuffSDCounter2SDget_0 (void *, void *);
void __THE_1_test_CounterSDridiculousStuff_0_alloc (struct __THE_1_fn_sFSref_CounterFRvoidFE *, struct __THE_1_test_CounterSDridiculousStuff_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_test_StaticTest_0 *__THE_1_test_StaticTest_0_alloc () {
  struct __THE_1_test_StaticTest_0 *r = alloc(sizeof(struct __THE_1_test_StaticTest_0));
  struct __THE_1_test_StaticTest_0 s = {NULL};
  memcpy(r, &s, sizeof(struct __THE_1_test_StaticTest_0));
  return r;
}
void __THE_1_test_StaticTest_0_free (struct __THE_1_test_StaticTest_0 *n) {
  free(n);
}
int32_t __THE_1_test_sub_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP3intFP1intFRintFEP *p = pp;
  const int32_t __THE_0_i_0 = p->n0;
  const int32_t __THE_0_amount_0 = p->o1 == 1 ? p->n1 : 1;
  v = __THE_0_i_0 - __THE_0_amount_0;
  free(pp);
  return v;
}
struct __THE_1_test_Counter_0 *__THE_1_test_Counter_0_alloc (int32_t __THE_0__i) {
  struct __THE_1_test_Counter_0 *r = alloc(sizeof(struct __THE_1_test_Counter_0));
  struct __THE_1_test_Counter_0 s = {__THE_0__i};
  memcpy(r, &s, sizeof(struct __THE_1_test_Counter_0));
  return r;
}
struct __THE_1_test_Counter_0 *__THE_1_test_Counter_0_copy (const struct __THE_1_test_Counter_0 *n) {
  struct __THE_1_test_Counter_0 *r = alloc(sizeof(struct __THE_1_test_Counter_0));
  struct __THE_1_test_Counter_0 s = {n->__THE_0__i};
  memcpy(r, &s, sizeof(struct __THE_1_test_Counter_0));
  return r;
}
void __THE_1_test_Counter_0_free (struct __THE_1_test_Counter_0 *n) {
  free(n);
}
int32_t __THE_1_test_add_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP3intFP1intFRintFEP *p = pp;
  const int32_t __THE_0_i_0 = p->n0;
  const int32_t __THE_0_amount_0 = p->o1 == 1 ? p->n1 : 1;
  v = __THE_0_i_0 + __THE_0_amount_0;
  free(pp);
  return v;
}
void __THE_1_test_StaticTestSDstaticMethod_0 (void *px) {
  print(stdout, "zz", "Static method", THE_EOL);
}
int32_t __THE_1_test_CounterSDget_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFSCounterFRintFEP *p = pp;
  const struct __THE_1_test_Counter_0 *__THE_0_self_0 = p->self;
  v = __THE_0_self_0->__THE_0__i;
  __THE_1_test_Counter_0_free((struct __THE_1_test_Counter_0 *) __THE_0_self_0);
  free(pp);
  return v;
}
void __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE_free (struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_test_Counter_0 **__THE_1_test_CounterSDdecrease_0 (void *px, void *pp) {
  struct __THE_1_test_Counter_0 **v;
  struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP *p = pp;
  struct __THE_1_test_CounterSDdecrease_0X *x = px;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_sub_0 = x->__THE_0_test_sub_0;
  struct __THE_1_test_Counter_0 **__THE_0_self_0 = p->self;
  const int32_t __THE_0_by_0 = p->o0 == 1 ? p->n0 : 1;
  (*__THE_0_self_0)->__THE_0__i = (*__THE_0_test_sub_0).f((*__THE_0_test_sub_0).x, xalloc(&(struct __THE_1_fn_sFP3intFP1intFRintFEP) {(*__THE_0_self_0)->__THE_0__i, 1, __THE_0_by_0}, sizeof(struct __THE_1_fn_sFP3intFP1intFRintFEP)));
  v = __THE_0_self_0;
  free(pp);
  return v;
}
void __THE_1_test_CounterSDdecrease_0_alloc (struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE *n, struct __THE_1_test_CounterSDdecrease_0X x) {
  size_t l = sizeof(struct __THE_1_test_CounterSDdecrease_0X);
  struct __THE_1_test_CounterSDdecrease_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_CounterSDdecrease_0;
  n->x = r;
  n->l = l;
}
struct __THE_1_test_Counter_0 **__THE_1_test_CounterSDincrease_0 (void *px, void *pp) {
  struct __THE_1_test_Counter_0 **v;
  struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP *p = pp;
  struct __THE_1_test_CounterSDincrease_0X *x = px;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_add_0 = x->__THE_0_test_add_0;
  struct __THE_1_test_Counter_0 **__THE_0_self_0 = p->self;
  const int32_t __THE_0_by_0 = p->o0 == 1 ? p->n0 : 1;
  (*__THE_0_self_0)->__THE_0__i = (*__THE_0_test_add_0).f((*__THE_0_test_add_0).x, xalloc(&(struct __THE_1_fn_sFP3intFP1intFRintFEP) {(*__THE_0_self_0)->__THE_0__i, 1, __THE_0_by_0}, sizeof(struct __THE_1_fn_sFP3intFP1intFRintFEP)));
  v = __THE_0_self_0;
  free(pp);
  return v;
}
void __THE_1_test_CounterSDincrease_0_alloc (struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE *n, struct __THE_1_test_CounterSDincrease_0X x) {
  size_t l = sizeof(struct __THE_1_test_CounterSDincrease_0X);
  struct __THE_1_test_CounterSDincrease_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_CounterSDincrease_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn_sFSref_CounterFRvoidFE_free (struct __THE_1_fn_sFSref_CounterFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test_CounterSDridiculousStuff_0 (void *px, void *pp) {
  struct __THE_1_fn_sFSref_CounterFRvoidFEP *p = pp;
  struct __THE_1_test_CounterSDridiculousStuff_0X *x = px;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_add_0 = x->__THE_0_test_add_0;
  const struct __THE_1_fn_sFSCounterFRintFE *__THE_0_test_CounterSDget_0 = x->__THE_0_test_CounterSDget_0;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_sub_0 = x->__THE_0_test_sub_0;
  struct __THE_1_test_Counter_0 **__THE_0_self_0 = p->self;
  struct __THE_1_test_Counter_0 **__THE_0_self2_0 = __THE_0_self_0;
  print(stdout, "zziz", "For testing:", " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(*__THE_0_self2_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  const struct __THE_1_fn_sFSref_Counter2FRvoidFE __THE_0_test_CounterSDridiculousStuffSDCounter2SDdecrease_0;
  const struct __THE_1_fn_sFSref_Counter2FRvoidFE __THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0;
  const struct __THE_1_fn_sFSref_Counter2FRintFE __THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0 = (struct __THE_1_fn_sFSref_Counter2FRintFE) {&__THE_1_test_CounterSDridiculousStuffSDCounter2SDget_0, NULL, 0};
  __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0_alloc((struct __THE_1_fn_sFSref_Counter2FRvoidFE *) &__THE_0_test_CounterSDridiculousStuffSDCounter2SDdecrease_0, (struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X) {&__THE_0_self2_0, &__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0, __THE_0_test_CounterSDget_0, __THE_0_test_sub_0});
  __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0_alloc((struct __THE_1_fn_sFSref_Counter2FRvoidFE *) &__THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0, (struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X) {&__THE_0_self2_0, &__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0, __THE_0_test_add_0, __THE_0_test_CounterSDget_0});
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *__THE_0_counter_0 = __THE_1_test_CounterSDridiculousStuffSDCounter2_0_alloc(0);
  print(stdout, "zziziz", "Counter2:", " ", __THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRintFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRintFEP))), " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(*__THE_0_self_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRvoidFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRvoidFEP)));
  print(stdout, "zziziz", "Counter2:", " ", __THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRintFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRintFEP))), " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(*__THE_0_self_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRvoidFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRvoidFEP)));
  print(stdout, "zziziz", "Counter2:", " ", __THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRintFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRintFEP))), " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(*__THE_0_self_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDridiculousStuffSDCounter2SDdecrease_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDdecrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRvoidFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRvoidFEP)));
  print(stdout, "zziziz", "Counter2:", " ", __THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.f(__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0.x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRintFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_Counter2FRintFEP))), " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(*__THE_0_self_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_1_test_CounterSDridiculousStuffSDCounter2_0_free((struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *) __THE_0_counter_0);
  __THE_1_fn_sFSref_Counter2FRvoidFE_free((struct __THE_1_fn_sFSref_Counter2FRvoidFE) __THE_0_test_CounterSDridiculousStuffSDCounter2SDincrease_0);
  __THE_1_fn_sFSref_Counter2FRvoidFE_free((struct __THE_1_fn_sFSref_Counter2FRvoidFE) __THE_0_test_CounterSDridiculousStuffSDCounter2SDdecrease_0);
  free(pp);
}
struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *__THE_1_test_CounterSDridiculousStuffSDCounter2_0_alloc (int32_t __THE_0__i) {
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *r = alloc(sizeof(struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0));
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 s = {__THE_0__i};
  memcpy(r, &s, sizeof(struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0));
  return r;
}
void __THE_1_test_CounterSDridiculousStuffSDCounter2_0_free (struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 *n) {
  free(n);
}
void __THE_1_fn_sFSref_Counter2FRvoidFE_free (struct __THE_1_fn_sFSref_Counter2FRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0 (void *px, void *pp) {
  struct __THE_1_fn_sFSref_Counter2FRvoidFEP *p = pp;
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X *x = px;
  struct __THE_1_test_Counter_0 ***__THE_0_self2_0 = x->__THE_0_self2_0;
  const struct __THE_1_fn_sFSref_Counter2FRintFE *__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0 = x->__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0;
  const struct __THE_1_fn_sFSCounterFRintFE *__THE_0_test_CounterSDget_0 = x->__THE_0_test_CounterSDget_0;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_sub_0 = x->__THE_0_test_sub_0;
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 **__THE_0_self_1 = p->self;
  (**__THE_0_self2_0)->__THE_0__i = (*__THE_0_self_1)->__THE_0__i = (*__THE_0_test_sub_0).f((*__THE_0_test_sub_0).x, xalloc(&(struct __THE_1_fn_sFP3intFP1intFRintFEP) {(*__THE_0_self_1)->__THE_0__i, 0, 0}, sizeof(struct __THE_1_fn_sFP3intFP1intFRintFEP)));
  print(stdout, "zziz", "Parent scope:", " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(**__THE_0_self2_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  print(stdout, "zziz", "Current scope:", " ", (*__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0).f((*__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0).x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRintFEP) {__THE_0_self_1}, sizeof(struct __THE_1_fn_sFSref_Counter2FRintFEP))), THE_EOL);
  free(pp);
}
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0_alloc (struct __THE_1_fn_sFSref_Counter2FRvoidFE *n, struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X x) {
  size_t l = sizeof(struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X);
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_CounterSDridiculousStuffSDCounter2SDdecrease_0;
  n->x = r;
  n->l = l;
}
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0 (void *px, void *pp) {
  struct __THE_1_fn_sFSref_Counter2FRvoidFEP *p = pp;
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X *x = px;
  struct __THE_1_test_Counter_0 ***__THE_0_self2_0 = x->__THE_0_self2_0;
  const struct __THE_1_fn_sFSref_Counter2FRintFE *__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0 = x->__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0;
  const struct __THE_1_fn_sFP3intFP1intFRintFE *__THE_0_test_add_0 = x->__THE_0_test_add_0;
  const struct __THE_1_fn_sFSCounterFRintFE *__THE_0_test_CounterSDget_0 = x->__THE_0_test_CounterSDget_0;
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 **__THE_0_self_1 = p->self;
  (**__THE_0_self2_0)->__THE_0__i = (*__THE_0_self_1)->__THE_0__i = (*__THE_0_test_add_0).f((*__THE_0_test_add_0).x, xalloc(&(struct __THE_1_fn_sFP3intFP1intFRintFEP) {(*__THE_0_self_1)->__THE_0__i, 0, 0}, sizeof(struct __THE_1_fn_sFP3intFP1intFRintFEP)));
  print(stdout, "zziz", "Parent scope:", " ", (*__THE_0_test_CounterSDget_0).f((*__THE_0_test_CounterSDget_0).x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(**__THE_0_self2_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  print(stdout, "zziz", "Current scope", " ", (*__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0).f((*__THE_0_test_CounterSDridiculousStuffSDCounter2SDget_0).x, xalloc(&(struct __THE_1_fn_sFSref_Counter2FRintFEP) {__THE_0_self_1}, sizeof(struct __THE_1_fn_sFSref_Counter2FRintFEP))), THE_EOL);
  free(pp);
}
void __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0_alloc (struct __THE_1_fn_sFSref_Counter2FRvoidFE *n, struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X x) {
  size_t l = sizeof(struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X);
  struct __THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_CounterSDridiculousStuffSDCounter2SDincrease_0;
  n->x = r;
  n->l = l;
}
int32_t __THE_1_test_CounterSDridiculousStuffSDCounter2SDget_0 (void *px, void *pp) {
  unsigned char r = 0;
  int32_t v;
  struct __THE_1_fn_sFSref_Counter2FRintFEP *p = pp;
  const struct __THE_1_test_CounterSDridiculousStuffSDCounter2_0 **__THE_0_self_1 = p->self;
  r = 1;
  v = (*__THE_0_self_1)->__THE_0__i;
  free(pp);
  return v;
}
void __THE_1_test_CounterSDridiculousStuff_0_alloc (struct __THE_1_fn_sFSref_CounterFRvoidFE *n, struct __THE_1_test_CounterSDridiculousStuff_0X x) {
  size_t l = sizeof(struct __THE_1_test_CounterSDridiculousStuff_0X);
  struct __THE_1_test_CounterSDridiculousStuff_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_CounterSDridiculousStuff_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn_sFP3intFP1intFRintFE __THE_0_test_sub_0 = (struct __THE_1_fn_sFP3intFP1intFRintFE) {&__THE_1_test_sub_0, NULL, 0};
  const struct __THE_1_fn_sFP3intFP1intFRintFE __THE_0_test_add_0 = (struct __THE_1_fn_sFP3intFP1intFRintFE) {&__THE_1_test_add_0, NULL, 0};
  const struct __THE_1_fn_sFRvoidFE __THE_0_test_StaticTestSDstaticMethod_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_test_StaticTestSDstaticMethod_0, NULL, 0};
  const struct __THE_1_fn_sFSCounterFRintFE __THE_0_test_CounterSDget_0 = (struct __THE_1_fn_sFSCounterFRintFE) {&__THE_1_test_CounterSDget_0, NULL, 0};
  const struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE __THE_0_test_CounterSDdecrease_0;
  const struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE __THE_0_test_CounterSDincrease_0;
  const struct __THE_1_fn_sFSref_CounterFRvoidFE __THE_0_test_CounterSDridiculousStuff_0;
  __THE_1_test_CounterSDdecrease_0_alloc((struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE *) &__THE_0_test_CounterSDdecrease_0, (struct __THE_1_test_CounterSDdecrease_0X) {&__THE_0_test_sub_0});
  __THE_1_test_CounterSDincrease_0_alloc((struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE *) &__THE_0_test_CounterSDincrease_0, (struct __THE_1_test_CounterSDincrease_0X) {&__THE_0_test_add_0});
  __THE_1_test_CounterSDridiculousStuff_0_alloc((struct __THE_1_fn_sFSref_CounterFRvoidFE *) &__THE_0_test_CounterSDridiculousStuff_0, (struct __THE_1_test_CounterSDridiculousStuff_0X) {&__THE_0_test_add_0, &__THE_0_test_CounterSDget_0, &__THE_0_test_sub_0});
  const struct __THE_1_test_StaticTest_0 *__THE_0_staticTest_0 = __THE_1_test_StaticTest_0_alloc();
  __THE_0_test_StaticTestSDstaticMethod_0.f(__THE_0_test_StaticTestSDstaticMethod_0.x);
  struct __THE_1_test_Counter_0 *__THE_0_counter_0 = __THE_1_test_Counter_0_alloc(0);
  print(stdout, "zziz", "Counter:", " ", __THE_0_test_CounterSDget_0.f(__THE_0_test_CounterSDget_0.x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(__THE_0_counter_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDincrease_0.f(__THE_0_test_CounterSDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {&__THE_0_counter_0, 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP)));
  print(stdout, "zziz", "Counter:", " ", __THE_0_test_CounterSDget_0.f(__THE_0_test_CounterSDget_0.x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(__THE_0_counter_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDincrease_0.f(__THE_0_test_CounterSDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {__THE_0_test_CounterSDincrease_0.f(__THE_0_test_CounterSDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {__THE_0_test_CounterSDincrease_0.f(__THE_0_test_CounterSDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {__THE_0_test_CounterSDincrease_0.f(__THE_0_test_CounterSDincrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {&__THE_0_counter_0, 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP))), 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP))), 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP))), 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP)));
  print(stdout, "zziz", "Counter:", " ", __THE_0_test_CounterSDget_0.f(__THE_0_test_CounterSDget_0.x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(__THE_0_counter_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDdecrease_0.f(__THE_0_test_CounterSDdecrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {__THE_0_test_CounterSDdecrease_0.f(__THE_0_test_CounterSDdecrease_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP) {&__THE_0_counter_0, 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP))), 0, 0}, sizeof(struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFEP)));
  print(stdout, "zziz", "Counter:", " ", __THE_0_test_CounterSDget_0.f(__THE_0_test_CounterSDget_0.x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(__THE_0_counter_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_0_test_CounterSDridiculousStuff_0.f(__THE_0_test_CounterSDridiculousStuff_0.x, xalloc(&(struct __THE_1_fn_sFSref_CounterFRvoidFEP) {&__THE_0_counter_0}, sizeof(struct __THE_1_fn_sFSref_CounterFRvoidFEP)));
  print(stdout, "zziz", "Counter Again:", " ", __THE_0_test_CounterSDget_0.f(__THE_0_test_CounterSDget_0.x, xalloc(&(struct __THE_1_fn_sFSCounterFRintFEP) {__THE_1_test_Counter_0_copy(__THE_0_counter_0)}, sizeof(struct __THE_1_fn_sFSCounterFRintFEP))), THE_EOL);
  __THE_1_test_Counter_0_free((struct __THE_1_test_Counter_0 *) __THE_0_counter_0);
  __THE_1_test_StaticTest_0_free((struct __THE_1_test_StaticTest_0 *) __THE_0_staticTest_0);
  __THE_1_fn_sFSref_CounterFRvoidFE_free((struct __THE_1_fn_sFSref_CounterFRvoidFE) __THE_0_test_CounterSDridiculousStuff_0);
  __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE_free((struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE) __THE_0_test_CounterSDincrease_0);
  __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE_free((struct __THE_1_fn_sFSref_CounterFP1intFRref_CounterFE) __THE_0_test_CounterSDdecrease_0);
}
======= flags =======
======= stdout =======
Static method
Counter: 0
Counter: 1
Counter: 5
Counter: 3
For testing: 3
Counter2: 0 3
Parent scope: 1
Current scope 1
Counter2: 1 1
Parent scope: 2
Current scope 2
Counter2: 2 2
Parent scope: 1
Current scope: 1
Counter2: 1 1
Counter Again: 1
