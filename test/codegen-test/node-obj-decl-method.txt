======= stdin =======
obj StaticTest {
  fn staticMethod () {
    print("Static method")
  }
}

fn sub (i: int, amount := 1) int {
  return i - amount
}

obj Counter {
  mut _i: int

  fn get (self: Self) int {
    return self._i
  }

  fn decrease (mut self: ref Self, by := 1) ref Self {
    self._i = sub(self._i, by)
    return self
  }

  fn increase (mut self: ref Self, by := 1) ref Self {
    self._i = add(self._i, by)
    return self
  }

  fn ridiculousStuff (mut self: ref Self) {
    mut self2 := self
    print("For testing:", self2.get())

    obj Counter2 {
      mut _i: int

      fn decrease (mut self: ref Self) {
        self2._i = self._i = sub(self._i)
        print("Parent scope:", self2.get())
        print("Current scope:", self.get())
      }

      fn increase (mut self: ref Self) {
        self2._i = self._i = add(self._i)
        print("Parent scope:", self2.get())
        print("Current scope", self.get())
      }

      fn get (self: ref Self) int {
        return self._i
      }
    }

    mut counter := Counter2{}
    print("Counter2:", counter.get(), self.get())
    counter.increase()
    print("Counter2:", counter.get(), self.get())
    counter.increase()
    print("Counter2:", counter.get(), self.get())
    counter.decrease()
    print("Counter2:", counter.get(), self.get())
  }
}

fn add (i: int, amount := 1) int {
  return i + amount
}

main {
  staticTest := StaticTest{}
  staticTest.staticMethod()

  mut counter := Counter{}
  print("Counter:", counter.get())
  counter.increase()
  print("Counter:", counter.get())
  counter.increase().increase().increase().increase()
  print("Counter:", counter.get())
  counter.decrease().decrease()
  print("Counter:", counter.get())

  counter.ridiculousStuff()

  print("Counter Again:", counter.get())
}
======= code =======
======= flags =======
======= stdout =======
Static method
Counter: 0
Counter: 1
Counter: 5
Counter: 3
For testing: 3
Counter2: 0 3
Parent scope: 1
Current scope 1
Counter2: 1 1
Parent scope: 2
Current scope 2
Counter2: 2 2
Parent scope: 1
Current scope: 1
Counter2: 1 1
Counter Again: 1
