======= stdin =======
fn job1 () int { return 1 }
fn job2 () int { return 2 }
fn test1 (mut a: () -> int) int {
  a = job2
  return a()
}
fn test2 (mut a: () -> int, mut b := job2) int {
  b = a
  return a() + b()
}
main {
  test1(job1)
  test2(job2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn_sFRintFE;
struct __THE_1_fn_sFP5fn_sFRintFEFRintFE;
struct __THE_1_fn_sFP5fn_sFRintFEFRintFEP;
struct __THE_1_test_test1_0X;
struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE;
struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFEP;
struct __THE_1_test_test2_0X;

struct __THE_1_fn_sFRintFE {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5fn_sFRintFEFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5fn_sFRintFEFRintFEP {
  struct __THE_1_fn_sFRintFE n0;
};
struct __THE_1_test_test1_0X {
  const struct __THE_1_fn_sFRintFE *__THE_0_test_job2_0;
};
struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFEP {
  struct __THE_1_fn_sFRintFE n0;
  unsigned char o1;
  struct __THE_1_fn_sFRintFE n1;
};
struct __THE_1_test_test2_0X {
  const struct __THE_1_fn_sFRintFE *__THE_0_test_job2_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_copy (const struct __THE_1_fn_sFRintFE);
void __THE_1_fn_sFRintFE_free (struct __THE_1_fn_sFRintFE);
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_realloc (struct __THE_1_fn_sFRintFE, struct __THE_1_fn_sFRintFE);
int32_t __THE_1_test_job1_0 (void *);
int32_t __THE_1_test_job2_0 (void *);
void __THE_1_fn_sFP5fn_sFRintFEFRintFE_free (struct __THE_1_fn_sFP5fn_sFRintFEFRintFE);
int32_t __THE_1_test_test1_0 (void *, void *);
void __THE_1_test_test1_0_alloc (struct __THE_1_fn_sFP5fn_sFRintFEFRintFE *, struct __THE_1_test_test1_0X);
void __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE_free (struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE);
int32_t __THE_1_test_test2_0 (void *, void *);
void __THE_1_test_test2_0_alloc (struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE *, struct __THE_1_test_test2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_copy (const struct __THE_1_fn_sFRintFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFRintFE) {n.f, x, n.l};
}
void __THE_1_fn_sFRintFE_free (struct __THE_1_fn_sFRintFE n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn_sFRintFE __THE_1_fn_sFRintFE_realloc (struct __THE_1_fn_sFRintFE n1, struct __THE_1_fn_sFRintFE n2) {
  __THE_1_fn_sFRintFE_free((struct __THE_1_fn_sFRintFE) n1);
  return n2;
}
int32_t __THE_1_test_job1_0 (void *px) {
  return 1;
}
int32_t __THE_1_test_job2_0 (void *px) {
  return 2;
}
void __THE_1_fn_sFP5fn_sFRintFEFRintFE_free (struct __THE_1_fn_sFP5fn_sFRintFEFRintFE n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test_test1_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP5fn_sFRintFEFRintFEP *p = pp;
  struct __THE_1_test_test1_0X *x = px;
  const struct __THE_1_fn_sFRintFE *__THE_0_test_job2_0 = x->__THE_0_test_job2_0;
  struct __THE_1_fn_sFRintFE __THE_0_a_0 = p->n0;
  __THE_0_a_0 = __THE_1_fn_sFRintFE_realloc(__THE_0_a_0, __THE_1_fn_sFRintFE_copy(*__THE_0_test_job2_0));
  v = __THE_0_a_0.f(__THE_0_a_0.x);
  __THE_1_fn_sFRintFE_free((struct __THE_1_fn_sFRintFE) __THE_0_a_0);
  free(pp);
  return v;
}
void __THE_1_test_test1_0_alloc (struct __THE_1_fn_sFP5fn_sFRintFEFRintFE *n, struct __THE_1_test_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test_test1_0X);
  struct __THE_1_test_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_test1_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE_free (struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test_test2_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFEP *p = pp;
  struct __THE_1_test_test2_0X *x = px;
  const struct __THE_1_fn_sFRintFE *__THE_0_test_job2_0 = x->__THE_0_test_job2_0;
  struct __THE_1_fn_sFRintFE __THE_0_a_0 = p->n0;
  struct __THE_1_fn_sFRintFE __THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_fn_sFRintFE_copy(*__THE_0_test_job2_0);
  __THE_0_b_0 = __THE_1_fn_sFRintFE_realloc(__THE_0_b_0, __THE_1_fn_sFRintFE_copy(__THE_0_a_0));
  v = __THE_0_a_0.f(__THE_0_a_0.x) + __THE_0_b_0.f(__THE_0_b_0.x);
  __THE_1_fn_sFRintFE_free((struct __THE_1_fn_sFRintFE) __THE_0_b_0);
  __THE_1_fn_sFRintFE_free((struct __THE_1_fn_sFRintFE) __THE_0_a_0);
  free(pp);
  return v;
}
void __THE_1_test_test2_0_alloc (struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE *n, struct __THE_1_test_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test_test2_0X);
  struct __THE_1_test_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_test2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn_sFRintFE __THE_0_test_job1_0 = (struct __THE_1_fn_sFRintFE) {&__THE_1_test_job1_0, NULL, 0};
  const struct __THE_1_fn_sFRintFE __THE_0_test_job2_0 = (struct __THE_1_fn_sFRintFE) {&__THE_1_test_job2_0, NULL, 0};
  const struct __THE_1_fn_sFP5fn_sFRintFEFRintFE __THE_0_test_test1_0;
  const struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE __THE_0_test_test2_0;
  __THE_1_test_test1_0_alloc((struct __THE_1_fn_sFP5fn_sFRintFEFRintFE *) &__THE_0_test_test1_0, (struct __THE_1_test_test1_0X) {&__THE_0_test_job2_0});
  __THE_1_test_test2_0_alloc((struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE *) &__THE_0_test_test2_0, (struct __THE_1_test_test2_0X) {&__THE_0_test_job2_0});
  __THE_0_test_test1_0.f(__THE_0_test_test1_0.x, xalloc(&(struct __THE_1_fn_sFP5fn_sFRintFEFRintFEP) {__THE_1_fn_sFRintFE_copy(__THE_0_test_job1_0)}, sizeof(struct __THE_1_fn_sFP5fn_sFRintFEFRintFEP)));
  __THE_0_test_test2_0.f(__THE_0_test_test2_0.x, xalloc(&(struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFEP) {__THE_1_fn_sFRintFE_copy(__THE_0_test_job2_0), 0, (struct __THE_1_fn_sFRintFE) {}}, sizeof(struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFEP)));
  __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE_free((struct __THE_1_fn_sFP5fn_sFRintFEFP2fn_sFRintFEFRintFE) __THE_0_test_test2_0);
  __THE_1_fn_sFP5fn_sFRintFEFRintFE_free((struct __THE_1_fn_sFP5fn_sFRintFEFRintFE) __THE_0_test_test1_0);
}
======= flags =======
======= stdout =======
