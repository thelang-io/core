======= stdin =======
fn job1 () int { return 1 }
fn job2 () int { return 2 }
fn test1 (mut a: fn () int) int {
  a = job2
  return a()
}
fn test2 (mut a: fn () int, mut b := job2) int {
  b = a
  return a() + b()
}
main {
  test1(job1)
  test2(job2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;
struct __THE_1_test1_0X;
struct __THE_1_fn$2P;
struct __THE_1_fn$2;
struct __THE_1_test2_0X;

struct __THE_1_fn$0 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct __THE_1_fn$0 n0;
};
struct __THE_1_fn$1 {
  int32_t (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$0 *__THE_0_job2_0;
};
struct __THE_1_fn$2P {
  struct __THE_1_fn$0 n0;
  unsigned char o1;
  struct __THE_1_fn$0 n1;
};
struct __THE_1_fn$2 {
  int32_t (*f) (void *, struct __THE_1_fn$2P);
  void *x;
  size_t l;
};
struct __THE_1_test2_0X {
  const struct __THE_1_fn$0 *__THE_0_job2_0;
};

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0, struct __THE_1_fn$0);
int32_t __THE_1_job1_0 (void *);
int32_t __THE_1_job2_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_test1_0X);
int32_t __THE_1_test1_0 (void *, struct __THE_1_fn$1P);
void __THE_1_fn$2_free (struct __THE_1_fn$2);
void __THE_1_test2_0_alloc (struct __THE_1_fn$2 *, struct __THE_1_test2_0X);
int32_t __THE_1_test2_0 (void *, struct __THE_1_fn$2P);

struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0 n1, struct __THE_1_fn$0 n2) {
  if (n1.x != NULL) free(n1.x);
  return n2;
}
int32_t __THE_1_job1_0 (void *px) {
  return 1;
}
int32_t __THE_1_job2_0 (void *px) {
  return 2;
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
int32_t __THE_1_test1_0 (void *px, struct __THE_1_fn$1P p) {
  int32_t v;
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$0 *__THE_0_job2_0 = x->__THE_0_job2_0;
  struct __THE_1_fn$0 __THE_0_a_0 = p.n0;
  __THE_0_a_0 = __THE_1_fn$0_realloc(__THE_0_a_0, __THE_1_fn$0_copy(*__THE_0_job2_0));
  v = __THE_0_a_0.f(__THE_0_a_0.x);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_a_0);
  return v;
}
void __THE_1_fn$2_free (struct __THE_1_fn$2 n) {
  free(n.x);
}
void __THE_1_test2_0_alloc (struct __THE_1_fn$2 *n, struct __THE_1_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test2_0X);
  struct __THE_1_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test2_0;
  n->x = r;
  n->l = l;
}
int32_t __THE_1_test2_0 (void *px, struct __THE_1_fn$2P p) {
  int32_t v;
  struct __THE_1_test2_0X *x = px;
  const struct __THE_1_fn$0 *__THE_0_job2_0 = x->__THE_0_job2_0;
  struct __THE_1_fn$0 __THE_0_a_0 = p.n0;
  struct __THE_1_fn$0 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_fn$0_copy(*__THE_0_job2_0);
  __THE_0_b_0 = __THE_1_fn$0_realloc(__THE_0_b_0, __THE_1_fn$0_copy(__THE_0_a_0));
  v = __THE_0_a_0.f(__THE_0_a_0.x) + __THE_0_b_0.f(__THE_0_b_0.x);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_b_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_job1_0 = (struct __THE_1_fn$0) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_job2_0 = (struct __THE_1_fn$0) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test1_0;
  const struct __THE_1_fn$2 __THE_0_test2_0;
  __THE_1_test1_0_alloc((struct __THE_1_fn$1 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_job2_0});
  __THE_1_test2_0_alloc((struct __THE_1_fn$2 *) &__THE_0_test2_0, (struct __THE_1_test2_0X) {&__THE_0_job2_0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_job1_0)});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_job2_0), 0, (struct __THE_1_fn$0) {}});
  __THE_1_fn$2_free((struct __THE_1_fn$2) __THE_0_test2_0);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
