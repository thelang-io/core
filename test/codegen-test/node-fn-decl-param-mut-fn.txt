======= stdin =======
fn job1 () int { return 1 }
fn job2 () int { return 2 }
fn test1 (mut a: () -> int) int {
  a = job2
  return a()
}
fn test2 (mut a: () -> int, mut b := job2) int {
  b = a
  return a() + b()
}
main {
  test1(job1)
  test2(job2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1001;
struct __THE_1_test1_0X;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1002;
struct __THE_1_test2_0X;

struct __THE_1_fn$1000 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  struct __THE_1_fn$1000 n0;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$1000 *__THE_0_job2_0;
};
struct __THE_1_fn$1002P {
  struct __THE_1_fn$1000 n0;
  unsigned char o1;
  struct __THE_1_fn$1000 n1;
};
struct __THE_1_fn$1002 {
  int32_t (*f) (void *, struct __THE_1_fn$1002P);
  void *x;
  size_t l;
};
struct __THE_1_test2_0X {
  const struct __THE_1_fn$1000 *__THE_0_job2_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000, struct __THE_1_fn$1000);
int32_t __THE_1_job1_0 (void *);
int32_t __THE_1_job2_0 (void *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
int32_t __THE_1_test1_0 (void *, struct __THE_1_fn$1001P);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_test1_0X);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
int32_t __THE_1_test2_0 (void *, struct __THE_1_fn$1002P);
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_test2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000 n1, struct __THE_1_fn$1000 n2) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n1);
  return n2;
}
int32_t __THE_1_job1_0 (void *px) {
  return 1;
}
int32_t __THE_1_job2_0 (void *px) {
  return 2;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test1_0 (void *px, struct __THE_1_fn$1001P p) {
  int32_t v;
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_job2_0 = x->__THE_0_job2_0;
  struct __THE_1_fn$1000 __THE_0_a_0 = p.n0;
  __THE_0_a_0 = __THE_1_fn$1000_realloc(__THE_0_a_0, __THE_1_fn$1000_copy(*__THE_0_job2_0));
  v = __THE_0_a_0.f(__THE_0_a_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_a_0);
  return v;
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test2_0 (void *px, struct __THE_1_fn$1002P p) {
  int32_t v;
  struct __THE_1_test2_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_job2_0 = x->__THE_0_job2_0;
  struct __THE_1_fn$1000 __THE_0_a_0 = p.n0;
  struct __THE_1_fn$1000 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_fn$1000_copy(*__THE_0_job2_0);
  __THE_0_b_0 = __THE_1_fn$1000_realloc(__THE_0_b_0, __THE_1_fn$1000_copy(__THE_0_a_0));
  v = __THE_0_a_0.f(__THE_0_a_0.x) + __THE_0_b_0.f(__THE_0_b_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_b_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_a_0);
  return v;
}
void __THE_1_test2_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test2_0X);
  struct __THE_1_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_job1_0 = (struct __THE_1_fn$1000) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_job2_0 = (struct __THE_1_fn$1000) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_test1_0;
  const struct __THE_1_fn$1002 __THE_0_test2_0;
  __THE_1_test1_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_job2_0});
  __THE_1_test2_0_alloc((struct __THE_1_fn$1002 *) &__THE_0_test2_0, (struct __THE_1_test2_0X) {&__THE_0_job2_0});
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_job1_0)});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_job2_0), 0, (struct __THE_1_fn$1000) {}});
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_test2_0);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
