======= stdin =======
fn test1 () {}
fn test2 () {}
fn test3 () {}
main {
  [test1, test2, test3];
  [test1, test2, test3]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_array_fn$1000;

struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_array_fn$1000 {
  struct __THE_1_fn$1000 *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_test1_0 (void *);
void __THE_1_test2_0 (void *);
void __THE_1_test3_0 (void *);
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_alloc (size_t, ...);
void __THE_1_array_fn$1000_free (struct __THE_1_array_fn$1000);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test1_0 (void *px) {
}
void __THE_1_test2_0 (void *px) {
}
void __THE_1_test3_0 (void *px) {
}
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_fn$1000) {NULL, 0};
  struct __THE_1_fn$1000 *d = alloc(x * sizeof(struct __THE_1_fn$1000));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_fn$1000);
  va_end(args);
  return (struct __THE_1_array_fn$1000) {d, x};
}
void __THE_1_array_fn$1000_free (struct __THE_1_array_fn$1000 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_fn$1000_free((struct __THE_1_fn$1000) n.d[i]);
  free(n.d);
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test2_0 = (struct __THE_1_fn$1000) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test3_0 = (struct __THE_1_fn$1000) {&__THE_1_test3_0, NULL, 0};
  __THE_1_array_fn$1000_free((struct __THE_1_array_fn$1000) __THE_1_array_fn$1000_alloc(3, __THE_1_fn$1000_copy(__THE_0_test1_0), __THE_1_fn$1000_copy(__THE_0_test2_0), __THE_1_fn$1000_copy(__THE_0_test3_0)));
  __THE_1_array_fn$1000_free((struct __THE_1_array_fn$1000) __THE_1_array_fn$1000_alloc(3, __THE_1_fn$1000_copy(__THE_0_test1_0), __THE_1_fn$1000_copy(__THE_0_test2_0), __THE_1_fn$1000_copy(__THE_0_test3_0)));
}
======= flags =======
======= stdout =======
