======= stdin =======
fn test1 (mut a: int | str) int | str {
  a = "test2"
  return a
}
fn test2 (mut a: int | str, mut b: int | str = "test3") int | str {
  b = a
  a = b
  return a
}
main {
  test1(1)
  test2(4)
  test2("test6", 5)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2
#define TYPE_str 3

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_intUSstrUE;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;

struct __THE_1_union_intUSstrUE {
  int t;
  union {
    int32_t v2;
    struct str v3;
  };
};
struct __THE_1_fn$1000 {
  struct __THE_1_union_intUSstrUE (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  struct __THE_1_union_intUSstrUE n0;
};
struct __THE_1_fn$1001 {
  struct __THE_1_union_intUSstrUE (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  struct __THE_1_union_intUSstrUE n0;
  unsigned char o1;
  struct __THE_1_union_intUSstrUE n1;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
void *xalloc (void *, size_t);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int, ...);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE);
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_realloc (struct __THE_1_union_intUSstrUE, struct __THE_1_union_intUSstrUE);
struct __THE_1_union_intUSstrUE __THE_1_test1_0 (void *, void *);
struct __THE_1_union_intUSstrUE __THE_1_test2_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int t, ...) {
  struct __THE_1_union_intUSstrUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v2 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v3 = va_arg(args, struct str);
  va_end(args);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE n) {
  struct __THE_1_union_intUSstrUE r = {n.t};
  if (n.t == TYPE_int) r.v2 = n.v2;
  if (n.t == TYPE_str) r.v3 = str_copy(n.v3);
  return r;
}
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v3);
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_realloc (struct __THE_1_union_intUSstrUE n1, struct __THE_1_union_intUSstrUE n2) {
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n1);
  return n2;
}
struct __THE_1_union_intUSstrUE __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_union_intUSstrUE v;
  struct __THE_1_fn$1000P *p = pp;
  struct __THE_1_union_intUSstrUE __THE_0_a_0 = p->n0;
  __THE_0_a_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_a_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test2")));
  v = __THE_1_union_intUSstrUE_copy(__THE_0_a_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_a_0);
  return v;
}
struct __THE_1_union_intUSstrUE __THE_1_test2_0 (void *px, void *pp) {
  struct __THE_1_union_intUSstrUE v;
  struct __THE_1_fn$1001P *p = pp;
  struct __THE_1_union_intUSstrUE __THE_0_a_0 = p->n0;
  struct __THE_1_union_intUSstrUE __THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test3"));
  __THE_0_b_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_b_0, __THE_1_union_intUSstrUE_copy(__THE_0_a_0));
  __THE_0_a_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_a_0, __THE_1_union_intUSstrUE_copy(__THE_0_b_0));
  v = __THE_1_union_intUSstrUE_copy(__THE_0_a_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_b_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_test2_0 = (struct __THE_1_fn$1001) {&__THE_1_test2_0, NULL, 0};
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1000P) {__THE_1_union_intUSstrUE_alloc(TYPE_int, 1)}, sizeof(struct __THE_1_fn$1000P))));
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_union_intUSstrUE_alloc(TYPE_int, 4), 0, (struct __THE_1_union_intUSstrUE) {}}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test6")), 1, __THE_1_union_intUSstrUE_alloc(TYPE_int, 5)}, sizeof(struct __THE_1_fn$1001P))));
}
======= flags =======
======= stdout =======
