======= stdin =======
main {
  a := [[1, 2, 3], [3, 4, 5], [5, 6, 7]]
  b: int[][] = [[8, 9, 10], [10, 11, 12], [12, 13, 14]]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct __THE_1_array_int;
struct __THE_1_array_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_array_int {
  struct __THE_1_array_int *d;
  size_t l;
};

void *alloc (size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t, ...);
void __THE_1_array_array_int_free (struct __THE_1_array_array_int);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(x * sizeof(struct __THE_1_array_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_int);
  va_end(args);
  return (struct __THE_1_array_array_int) {d, x};
}
void __THE_1_array_array_int_free (struct __THE_1_array_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_int_free((struct __THE_1_array_int) n.d[i]);
  free(n.d);
}

int main () {
  const struct __THE_1_array_array_int __THE_0_a_0 = __THE_1_array_array_int_alloc(3, __THE_1_array_int_alloc(3, 1, 2, 3), __THE_1_array_int_alloc(3, 3, 4, 5), __THE_1_array_int_alloc(3, 5, 6, 7));
  const struct __THE_1_array_array_int __THE_0_b_0 = __THE_1_array_array_int_alloc(3, __THE_1_array_int_alloc(3, 8, 9, 10), __THE_1_array_int_alloc(3, 10, 11, 12), __THE_1_array_int_alloc(3, 12, 13, 14));
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) __THE_0_b_0);
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
