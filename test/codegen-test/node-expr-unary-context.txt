======= stdin =======
main {
  mut a := 0

  fn test () int {
    return a++
  }

  test()
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_fn$0;
struct __THE_1_mainSDtest_0X;

struct __THE_1_fn$0 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest_0X {
  int32_t *__THE_0_a_0;
};

void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *, struct __THE_1_mainSDtest_0X);
int32_t __THE_1_mainSDtest_0 (void *);

void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *n, struct __THE_1_mainSDtest_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest_0X);
  struct __THE_1_mainSDtest_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest_0;
  n->x = r;
  n->l = l;
}
int32_t __THE_1_mainSDtest_0 (void *px) {
  struct __THE_1_mainSDtest_0X *x = px;
  int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  return (*__THE_0_a_0)++;
}

int main () {
  int32_t __THE_0_a_0 = 0;
  const struct __THE_1_fn$0 __THE_0_mainSDtest_0;
  __THE_1_mainSDtest_0_alloc((struct __THE_1_fn$0 *) &__THE_0_mainSDtest_0, (struct __THE_1_mainSDtest_0X) {&__THE_0_a_0});
  __THE_0_mainSDtest_0.f(__THE_0_mainSDtest_0.x);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_mainSDtest_0);
}
======= flags =======
======= stdout =======
