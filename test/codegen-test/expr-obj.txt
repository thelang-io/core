======= stdin =======
obj Point {
  mut x: float
  mut y: float
}

obj Test {
  a: int
}

obj Human {
  mut name: str
  age: int
}

main {
  mut a1 := Point{x: 37.7681251, y: -122.5138329}
  mut a2 := Point{y: -122.5138329, x: 37.7681251}

  a1.x += 2
  a2.y /= 0.2

  b := Test{a: 2}

  tina := Human{
    name: "Tina",
    age: 45
  }

  mut nina := Human{
    name: "Nina",
    age: 33
  }

  nina.name += "Test"
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Point_0;
struct __THE_1_Test_0;
struct __THE_1_Human_0;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Point_0 {
  double __THE_0_x;
  double __THE_0_y;
};
struct __THE_1_Test_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_Human_0 {
  struct str __THE_0_name;
  const int32_t __THE_0_age;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
struct __THE_1_Point_0 *__THE_1_Point_0_alloc (double, double);
void __THE_1_Point_0_free (struct __THE_1_Point_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Human_0 *__THE_1_Human_0_alloc (struct str, int32_t);
void __THE_1_Human_0_free (struct __THE_1_Human_0 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
struct __THE_1_Point_0 *__THE_1_Point_0_alloc (double __THE_0_x, double __THE_0_y) {
  struct __THE_1_Point_0 *r = alloc(sizeof(struct __THE_1_Point_0));
  struct __THE_1_Point_0 s = {__THE_0_x, __THE_0_y};
  memcpy(r, &s, sizeof(struct __THE_1_Point_0));
  return r;
}
void __THE_1_Point_0_free (struct __THE_1_Point_0 *n) {
  free(n);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
struct __THE_1_Human_0 *__THE_1_Human_0_alloc (struct str __THE_0_name, int32_t __THE_0_age) {
  struct __THE_1_Human_0 *r = alloc(sizeof(struct __THE_1_Human_0));
  struct __THE_1_Human_0 s = {__THE_0_name, __THE_0_age};
  memcpy(r, &s, sizeof(struct __THE_1_Human_0));
  return r;
}
void __THE_1_Human_0_free (struct __THE_1_Human_0 *n) {
  str_free((struct str) n->__THE_0_name);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  struct __THE_1_Point_0 *__THE_0_a1_0 = __THE_1_Point_0_alloc(37.7681251, -122.5138329);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  struct __THE_1_Point_0 *__THE_0_a2_0 = __THE_1_Point_0_alloc(37.7681251, -122.5138329);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_a1_0->__THE_0_x += 2;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  __THE_0_a2_0->__THE_0_y /= 0.2;
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  const struct __THE_1_Test_0 *__THE_0_b_0 = __THE_1_Test_0_alloc(2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_Human_0 *__THE_0_tina_0 = __THE_1_Human_0_alloc(str_alloc("Tina"), 45);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  struct __THE_1_Human_0 *__THE_0_nina_0 = __THE_1_Human_0_alloc(str_alloc("Nina"), 33);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_nina_0->__THE_0_name = str_realloc(__THE_0_nina_0->__THE_0_name, str_concat_cstr(str_copy(__THE_0_nina_0->__THE_0_name), "Test"));
L6:
  __THE_1_Human_0_free((struct __THE_1_Human_0 *) __THE_0_nina_0);
L5:
  __THE_1_Human_0_free((struct __THE_1_Human_0 *) __THE_0_tina_0);
L4:
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_b_0);
L3:
  __THE_1_Point_0_free((struct __THE_1_Point_0 *) __THE_0_a2_0);
L2:
  __THE_1_Point_0_free((struct __THE_1_Point_0 *) __THE_0_a1_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
