======= stdin =======
main {
  "".replace("", "");
  "".replace("", "t");
  "".replace("", "test");
  "".replace("t", "");
  "".replace("test", "");
  "".replace("t", "test");
  "".replace("test", "t");
  "".replace("test", "test");
  "t".replace("", "");
  "t".replace("", "t");
  "t".replace("", "test");
  "t".replace("t", "");
  "t".replace("test", "");
  "t".replace("t", "test");
  "t".replace("test", "t");
  "t".replace("test", "test");
  "test in test".replace("", "");
  "test in test".replace("", "t");
  "test in test".replace("", "test");
  "test in test".replace("t", "");
  "test in test".replace("test", "");
  "test in test".replace("t", "test");
  "test in test".replace("test", "t");
  "test in test".replace("test", "test");
  "".replace("", "", 1);
  "".replace("", "t", 1);
  "".replace("", "test", 1);
  "".replace("t", "", 1);
  "".replace("test", "", 1);
  "".replace("t", "test", 1);
  "".replace("test", "t", 1);
  "".replace("test", "test", 1);
  "t".replace("", "", 1);
  "t".replace("", "t", 1);
  "t".replace("", "test", 1);
  "t".replace("t", "", 1);
  "t".replace("test", "", 1);
  "t".replace("t", "test", 1);
  "t".replace("test", "t", 1);
  "t".replace("test", "test", 1);
  "test in test".replace("", "", 1);
  "test in test".replace("", "t", 1);
  "test in test".replace("", "test", 1);
  "test in test".replace("t", "", 1);
  "test in test".replace("test", "", 1);
  "test in test".replace("t", "test", 1);
  "test in test".replace("test", "t", 1);
  "test in test".replace("test", "test", 1);
  "".replace("", "", count: 2);
  "".replace("", "t", count: 2);
  "".replace("", "test", count: 2);
  "".replace("t", "", count: 2);
  "".replace("test", "", count: 2);
  "".replace("t", "test", count: 2);
  "".replace("test", "t", count: 2);
  "".replace("test", "test", count: 2);
  "t".replace("", "", count: 2);
  "t".replace("", "t", count: 2);
  "t".replace("", "test", count: 2);
  "t".replace("t", "", count: 2);
  "t".replace("test", "", count: 2);
  "t".replace("t", "test", count: 2);
  "t".replace("test", "t", count: 2);
  "t".replace("test", "test", count: 2);
  "test in test".replace("", "", count: 2);
  "test in test".replace("", "t", count: 2);
  "test in test".replace("", "test", count: 2);
  "test in test".replace("t", "", count: 2);
  "test in test".replace("test", "", count: 2);
  "test in test".replace("t", "test", count: 2);
  "test in test".replace("test", "t", count: 2);
  "test in test".replace("test", "test", count: 2);
  "".replace("", "", count: 3);
  "".replace("", "t", count: 3);
  "".replace("", "test", count: 3);
  "".replace("t", "", count: 3);
  "".replace("test", "", count: 3);
  "".replace("t", "test", count: 3);
  "".replace("test", "t", count: 3);
  "".replace("test", "test", count: 3);
  "t".replace("", "", count: 3);
  "t".replace("", "t", count: 3);
  "t".replace("", "test", count: 3);
  "t".replace("t", "", count: 3);
  "t".replace("test", "", count: 3);
  "t".replace("t", "test", count: 3);
  "t".replace("test", "t", count: 3);
  "t".replace("test", "test", count: 3);
  "test in test".replace("", "", count: 3);
  "test in test".replace("", "t", count: 3);
  "test in test".replace("", "test", count: 3);
  "test in test".replace("t", "", count: 3);
  "test in test".replace("test", "", count: 3);
  "test in test".replace("t", "test", count: 3);
  "test in test".replace("test", "t", count: 3);
  "test in test".replace("test", "test", count: 3);
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct str str_replace (struct str, struct str, struct str, unsigned char, int32_t);
struct error_Error *error_Error_alloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_replace (struct str self, struct str n1, struct str n2, unsigned char _o3, int32_t n3) {
  size_t l = 0;
  char *d = NULL;
  int32_t k = 0;
  if (n1.l == 0 && n2.l > 0) {
    l = self.l + (n3 > 0 && n3 <= self.l ? n3 : self.l + 1) * n2.l;
    d = alloc(l);
    memcpy(d, n2.d, n2.l);
    size_t j = n2.l;
    for (size_t i = 0; i < self.l; i++) {
      d[j++] = self.d[i];
      if (n3 <= 0 || ++k < n3) {
        memcpy(&d[j], n2.d, n2.l);
        j += n2.l;
      }
    }
  } else if (self.l == n1.l && n1.l > 0) {
    if (memcmp(self.d, n1.d, n1.l) != 0) {
      l = self.l;
      d = alloc(l);
      memcpy(d, self.d, l);
    } else if (n2.l > 0) {
      l = n2.l;
      d = alloc(l);
      memcpy(d, n2.d, l);
    }
  } else if (self.l > n1.l && n1.l > 0 && n2.l == 0) {
    d = alloc(self.l);
    for (size_t i = 0; i < self.l; i++) {
      if (i <= self.l - n1.l && memcmp(&self.d[i], n1.d, n1.l) == 0 && (n3 <= 0 || k++ < n3)) {
        i += n1.l - 1;
      } else {
        d[l++] = self.d[i];
      }
    }
    if (l == 0) {
      free(d);
      d = NULL;
    } else if (l != self.l) {
      d = re_alloc(d, l);
    }
  } else if (self.l > n1.l && n1.l > 0 && n2.l > 0) {
    l = self.l;
    d = alloc(l);
    size_t j = 0;
    for (size_t i = 0; i < self.l; i++) {
      if (i <= self.l - n1.l && memcmp(&self.d[i], n1.d, n1.l) == 0 && (n3 <= 0 || k++ < n3)) {
        if (n1.l < n2.l) {
          l += n2.l - n1.l;
          if (l > self.l) {
            d = re_alloc(d, l);
          }
        } else if (n1.l > n2.l) {
          l -= n1.l - n2.l;
        }
        memcpy(&d[j], n2.d, n2.l);
        j += n2.l;
        i += n1.l - 1;
      } else {
        d[j++] = self.d[i];
      }
    }
    d = re_alloc(d, l);
  } else if (self.l > 0) {
    l = self.l;
    d = alloc(l);
    memcpy(d, self.d, l);
  }
  free(n2.d);
  free(n1.d);
  free(self.d);
  return (struct str) {d, l};
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 2, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 3, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 4, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 5, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 6, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 7, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 8, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 9, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 10, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 11, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 12, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 13, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 14, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 15, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 16, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 17, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 18, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 19, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 20, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 21, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 22, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 23, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 24, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 25, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 0, 0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 26, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 27, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 28, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 29, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 30, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 31, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 32, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 33, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 34, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 35, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 36, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 37, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 38, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 39, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 40, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 41, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 42, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 43, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 44, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 45, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 46, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 47, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 48, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 49, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 1, 1)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 50, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 51, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 52, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 53, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 54, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 55, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 56, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 57, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 58, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 59, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 60, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 61, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 62, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 63, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 64, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 65, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 66, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 67, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 68, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 69, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 70, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 71, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 72, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 73, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 1, 2)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 74, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 75, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 76, 3), str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 77, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 78, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 79, 3), str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 80, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 81, 3), str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 82, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 83, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 84, 3), str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 85, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 86, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 87, 3), str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 88, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 89, 3), str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 90, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 91, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 92, 3), str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 93, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 94, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 95, 3), str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 96, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 1, 3)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  str_free((struct str) (error_stack_pos(&err_state, 97, 3), str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 1, 3)));
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
