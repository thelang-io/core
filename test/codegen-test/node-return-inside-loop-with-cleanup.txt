======= stdin =======
fn test1 () {
  v1 := "test1"

  loop i := 0; i < 10; i++ {
    v2 := "test2"
    v3 := "test3"
    print("1 start", i)
    v4 := "test4"
    if i == 5 {
      v5 := "test5"
      return
    }
    v6 := "test6"
    print("1 end", i)
    v7 := "test7"
  }
}

fn test2 () {
  v1 := "test1"

  loop i := 0; i < 10; i++ {
    print("2 start", i)
    if i == 5 {
      v2 := "test1"
      return
    }
    print("2 end", i)
  }
}

fn test3 () {
  v1 := "test1"

  loop i := 0; i < 10; i++ {
    v2 := "test1"
    print("3 start", i)
    if i == 5 { return }
    print("3 end", i)
  }
}

fn test4 () {
  v1 := "test1"

  loop i := 0; i < 10; i++ {
    print("4 start", i)
    if i == 5 { return }
    print("4 end", i)
  }
}

fn test5 () {
  loop i := 0; i < 10; i++ {
    v2 := "test2"
    v3 := "test3"
    print("1 start", i)
    v4 := "test4"
    if i == 5 {
      v5 := "test5"
      return
    }
    v6 := "test6"
    print("1 end", i)
    v7 := "test7"
  }
}

fn test6 () {
  loop i := 0; i < 10; i++ {
    print("2 start", i)
    if i == 5 {
      v2 := "test1"
      return
    }
    print("2 end", i)
  }
}

fn test7 () {
  loop i := 0; i < 10; i++ {
    v2 := "test1"
    print("3 start", i)
    if i == 5 { return }
    print("3 end", i)
  }
}

fn test8 () {
  loop i := 0; i < 10; i++ {
    print("4 start", i)
    if i == 5 { return }
    print("4 end", i)
  }
}

fn test9 () {
  v1 := "test1"

  loop i := "1"; i != "1111111111"; i += "1" {
    v2 := "test2"
    v3 := "test3"
    print("1 start", i)
    v4 := "test4"
    if i == "11111" {
      v5 := "test5"
      return
    }
    v6 := "test6"
    print("1 end", i)
    v7 := "test7"
  }
}

fn test10 () {
  v1 := "test1"

  loop i := "1"; i != "1111111111"; i += "1" {
    print("2 start", i)
    if i == "11111" {
      v2 := "test1"
      return
    }
    print("2 end", i)
  }
}

fn test11 () {
  v1 := "test1"

  loop i := "1"; i != "1111111111"; i += "1" {
    v2 := "test1"
    print("3 start", i)
    if i == "11111" { return }
    print("3 end", i)
  }
}

fn test12 () {
  v1 := "test1"

  loop i := "1"; i != "1111111111"; i += "1" {
    print("4 start", i)
    if i == "11111" { return }
    print("4 end", i)
  }
}

fn test13 () {
  loop i := "1"; i != "1111111111"; i += "1" {
    v2 := "test2"
    v3 := "test3"
    print("1 start", i)
    v4 := "test4"
    if i == "11111" {
      v5 := "test5"
      return
    }
    v6 := "test6"
    print("1 end", i)
    v7 := "test7"
  }
}

fn test14 () {
  loop i := "1"; i != "1111111111"; i += "1" {
    print("2 start", i)
    if i == "11111" {
      v2 := "test1"
      return
    }
    print("2 end", i)
  }
}

fn test15 () {
  loop i := "1"; i != "1111111111"; i += "1" {
    v2 := "test1"
    print("3 start", i)
    if i == "11111" { return }
    print("3 end", i)
  }
}

fn test16 () {
  loop i := "1"; i != "1111111111"; i += "1" {
    print("4 start", i)
    if i == "11111" { return }
    print("4 end", i)
  }
}

main {
  test1()
  test2()
  test3()
  test4()
  test5()
  test6()
  test7()
  test8()
  test9()
  test10()
  test11()
  test12()
  test13()
  test14()
  test15()
  test16()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;

struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
void str_free (struct str);
bool str_ne_cstr (struct str, const char *);
struct str str_realloc (struct str, struct str);
void __THE_1_test1_0 (void *);
void __THE_1_test2_0 (void *);
void __THE_1_test3_0 (void *);
void __THE_1_test4_0 (void *);
void __THE_1_test5_0 (void *);
void __THE_1_test6_0 (void *);
void __THE_1_test7_0 (void *);
void __THE_1_test8_0 (void *);
void __THE_1_test9_0 (void *);
void __THE_1_test10_0 (void *);
void __THE_1_test11_0 (void *);
void __THE_1_test12_0 (void *);
void __THE_1_test13_0 (void *);
void __THE_1_test14_0 (void *);
void __THE_1_test15_0 (void *);
void __THE_1_test16_0 (void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_cstr (struct str s, const char *c) {
  bool r = s.l != strlen(c) || memcmp(s.d, c, s.l) != 0;
  free(s.d);
  return r;
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
void __THE_1_test1_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    const struct str __THE_0_v2_0 = str_alloc("test2");
    const struct str __THE_0_v3_0 = str_alloc("test3");
    print(stdout, "zziz", "1 start", " ", __THE_0_i_0, THE_EOL);
    const struct str __THE_0_v4_0 = str_alloc("test4");
    if (__THE_0_i_0 == 5) {
      const struct str __THE_0_v5_0 = str_alloc("test5");
      r = 1;
      str_free((struct str) __THE_0_v5_0);
      if (r == 1) goto L1;
    }
    const struct str __THE_0_v6_0 = str_alloc("test6");
    print(stdout, "zziz", "1 end", " ", __THE_0_i_0, THE_EOL);
    const struct str __THE_0_v7_0 = str_alloc("test7");
    str_free((struct str) __THE_0_v7_0);
    str_free((struct str) __THE_0_v6_0);
L1:
    str_free((struct str) __THE_0_v4_0);
    str_free((struct str) __THE_0_v3_0);
    str_free((struct str) __THE_0_v2_0);
    if (r == 1) goto L0;
  }
L0:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test2_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "zziz", "2 start", " ", __THE_0_i_0, THE_EOL);
    if (__THE_0_i_0 == 5) {
      const struct str __THE_0_v2_0 = str_alloc("test1");
      r = 1;
      str_free((struct str) __THE_0_v2_0);
      if (r == 1) goto L4;
    }
    print(stdout, "zziz", "2 end", " ", __THE_0_i_0, THE_EOL);
  }
L4:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test3_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    const struct str __THE_0_v2_0 = str_alloc("test1");
    print(stdout, "zziz", "3 start", " ", __THE_0_i_0, THE_EOL);
    if (__THE_0_i_0 == 5) {
      r = 1;
      goto L7;
    }
    print(stdout, "zziz", "3 end", " ", __THE_0_i_0, THE_EOL);
L7:
    str_free((struct str) __THE_0_v2_0);
    if (r == 1) goto L6;
  }
L6:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test4_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "zziz", "4 start", " ", __THE_0_i_0, THE_EOL);
    if (__THE_0_i_0 == 5) {
      r = 1;
      goto L8;
    }
    print(stdout, "zziz", "4 end", " ", __THE_0_i_0, THE_EOL);
  }
L8:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test5_0 (void *px) {
  unsigned char r = 0;
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    const struct str __THE_0_v2_0 = str_alloc("test2");
    const struct str __THE_0_v3_0 = str_alloc("test3");
    print(stdout, "zziz", "1 start", " ", __THE_0_i_0, THE_EOL);
    const struct str __THE_0_v4_0 = str_alloc("test4");
    if (__THE_0_i_0 == 5) {
      const struct str __THE_0_v5_0 = str_alloc("test5");
      r = 1;
      str_free((struct str) __THE_0_v5_0);
      if (r == 1) goto L9;
    }
    const struct str __THE_0_v6_0 = str_alloc("test6");
    print(stdout, "zziz", "1 end", " ", __THE_0_i_0, THE_EOL);
    const struct str __THE_0_v7_0 = str_alloc("test7");
    str_free((struct str) __THE_0_v7_0);
    str_free((struct str) __THE_0_v6_0);
L9:
    str_free((struct str) __THE_0_v4_0);
    str_free((struct str) __THE_0_v3_0);
    str_free((struct str) __THE_0_v2_0);
    if (r == 1) return;
  }
}
void __THE_1_test6_0 (void *px) {
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "zziz", "2 start", " ", __THE_0_i_0, THE_EOL);
    if (__THE_0_i_0 == 5) {
      const struct str __THE_0_v2_0 = str_alloc("test1");
      str_free((struct str) __THE_0_v2_0);
    }
    print(stdout, "zziz", "2 end", " ", __THE_0_i_0, THE_EOL);
  }
}
void __THE_1_test7_0 (void *px) {
  unsigned char r = 0;
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    const struct str __THE_0_v2_0 = str_alloc("test1");
    print(stdout, "zziz", "3 start", " ", __THE_0_i_0, THE_EOL);
    if (__THE_0_i_0 == 5) {
      r = 1;
      goto L13;
    }
    print(stdout, "zziz", "3 end", " ", __THE_0_i_0, THE_EOL);
L13:
    str_free((struct str) __THE_0_v2_0);
    if (r == 1) return;
  }
}
void __THE_1_test8_0 (void *px) {
  for (int32_t __THE_0_i_0 = 0; __THE_0_i_0 < 10; __THE_0_i_0++) {
    print(stdout, "zziz", "4 start", " ", __THE_0_i_0, THE_EOL);
    if (__THE_0_i_0 == 5) {
      return;
    }
    print(stdout, "zziz", "4 end", " ", __THE_0_i_0, THE_EOL);
  }
}
void __THE_1_test9_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      const struct str __THE_0_v2_0 = str_alloc("test2");
      const struct str __THE_0_v3_0 = str_alloc("test3");
      print(stdout, "zzsz", "1 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      const struct str __THE_0_v4_0 = str_alloc("test4");
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        const struct str __THE_0_v5_0 = str_alloc("test5");
        r = 1;
        str_free((struct str) __THE_0_v5_0);
        if (r == 1) goto L16;
      }
      const struct str __THE_0_v6_0 = str_alloc("test6");
      print(stdout, "zzsz", "1 end", " ", str_copy(__THE_0_i_0), THE_EOL);
      const struct str __THE_0_v7_0 = str_alloc("test7");
      str_free((struct str) __THE_0_v7_0);
      str_free((struct str) __THE_0_v6_0);
L16:
      str_free((struct str) __THE_0_v4_0);
      str_free((struct str) __THE_0_v3_0);
      str_free((struct str) __THE_0_v2_0);
      if (r == 1) goto L15;
    }
L15:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) goto L14;
  }
L14:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test10_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      print(stdout, "zzsz", "2 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        const struct str __THE_0_v2_0 = str_alloc("test1");
        r = 1;
        str_free((struct str) __THE_0_v2_0);
        if (r == 1) goto L20;
      }
      print(stdout, "zzsz", "2 end", " ", str_copy(__THE_0_i_0), THE_EOL);
    }
L20:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) goto L19;
  }
L19:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test11_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      const struct str __THE_0_v2_0 = str_alloc("test1");
      print(stdout, "zzsz", "3 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        r = 1;
        goto L24;
      }
      print(stdout, "zzsz", "3 end", " ", str_copy(__THE_0_i_0), THE_EOL);
L24:
      str_free((struct str) __THE_0_v2_0);
      if (r == 1) goto L23;
    }
L23:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) goto L22;
  }
L22:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test12_0 (void *px) {
  unsigned char r = 0;
  const struct str __THE_0_v1_0 = str_alloc("test1");
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      print(stdout, "zzsz", "4 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        r = 1;
        goto L26;
      }
      print(stdout, "zzsz", "4 end", " ", str_copy(__THE_0_i_0), THE_EOL);
    }
L26:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) goto L25;
  }
L25:
  str_free((struct str) __THE_0_v1_0);
}
void __THE_1_test13_0 (void *px) {
  unsigned char r = 0;
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      const struct str __THE_0_v2_0 = str_alloc("test2");
      const struct str __THE_0_v3_0 = str_alloc("test3");
      print(stdout, "zzsz", "1 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      const struct str __THE_0_v4_0 = str_alloc("test4");
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        const struct str __THE_0_v5_0 = str_alloc("test5");
        r = 1;
        str_free((struct str) __THE_0_v5_0);
        if (r == 1) goto L28;
      }
      const struct str __THE_0_v6_0 = str_alloc("test6");
      print(stdout, "zzsz", "1 end", " ", str_copy(__THE_0_i_0), THE_EOL);
      const struct str __THE_0_v7_0 = str_alloc("test7");
      str_free((struct str) __THE_0_v7_0);
      str_free((struct str) __THE_0_v6_0);
L28:
      str_free((struct str) __THE_0_v4_0);
      str_free((struct str) __THE_0_v3_0);
      str_free((struct str) __THE_0_v2_0);
      if (r == 1) goto L27;
    }
L27:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) return;
  }
}
void __THE_1_test14_0 (void *px) {
  unsigned char r = 0;
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      print(stdout, "zzsz", "2 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        const struct str __THE_0_v2_0 = str_alloc("test1");
        r = 1;
        str_free((struct str) __THE_0_v2_0);
        if (r == 1) goto L31;
      }
      print(stdout, "zzsz", "2 end", " ", str_copy(__THE_0_i_0), THE_EOL);
    }
L31:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) return;
  }
}
void __THE_1_test15_0 (void *px) {
  unsigned char r = 0;
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      const struct str __THE_0_v2_0 = str_alloc("test1");
      print(stdout, "zzsz", "3 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        r = 1;
        goto L34;
      }
      print(stdout, "zzsz", "3 end", " ", str_copy(__THE_0_i_0), THE_EOL);
L34:
      str_free((struct str) __THE_0_v2_0);
      if (r == 1) goto L33;
    }
L33:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) return;
  }
}
void __THE_1_test16_0 (void *px) {
  unsigned char r = 0;
  {
    struct str __THE_0_i_0 = str_alloc("1");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "1111111111"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "1"))) {
      print(stdout, "zzsz", "4 start", " ", str_copy(__THE_0_i_0), THE_EOL);
      if (str_eq_cstr(str_copy(__THE_0_i_0), "11111")) {
        r = 1;
        goto L35;
      }
      print(stdout, "zzsz", "4 end", " ", str_copy(__THE_0_i_0), THE_EOL);
    }
L35:
    str_free((struct str) __THE_0_i_0);
    if (r == 1) return;
  }
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test2_0 = (struct __THE_1_fn$1000) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test3_0 = (struct __THE_1_fn$1000) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test4_0 = (struct __THE_1_fn$1000) {&__THE_1_test4_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test5_0 = (struct __THE_1_fn$1000) {&__THE_1_test5_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test6_0 = (struct __THE_1_fn$1000) {&__THE_1_test6_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test7_0 = (struct __THE_1_fn$1000) {&__THE_1_test7_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test8_0 = (struct __THE_1_fn$1000) {&__THE_1_test8_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test9_0 = (struct __THE_1_fn$1000) {&__THE_1_test9_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test10_0 = (struct __THE_1_fn$1000) {&__THE_1_test10_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test11_0 = (struct __THE_1_fn$1000) {&__THE_1_test11_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test12_0 = (struct __THE_1_fn$1000) {&__THE_1_test12_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test13_0 = (struct __THE_1_fn$1000) {&__THE_1_test13_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test14_0 = (struct __THE_1_fn$1000) {&__THE_1_test14_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test15_0 = (struct __THE_1_fn$1000) {&__THE_1_test15_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test16_0 = (struct __THE_1_fn$1000) {&__THE_1_test16_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x);
  __THE_0_test2_0.f(__THE_0_test2_0.x);
  __THE_0_test3_0.f(__THE_0_test3_0.x);
  __THE_0_test4_0.f(__THE_0_test4_0.x);
  __THE_0_test5_0.f(__THE_0_test5_0.x);
  __THE_0_test6_0.f(__THE_0_test6_0.x);
  __THE_0_test7_0.f(__THE_0_test7_0.x);
  __THE_0_test8_0.f(__THE_0_test8_0.x);
  __THE_0_test9_0.f(__THE_0_test9_0.x);
  __THE_0_test10_0.f(__THE_0_test10_0.x);
  __THE_0_test11_0.f(__THE_0_test11_0.x);
  __THE_0_test12_0.f(__THE_0_test12_0.x);
  __THE_0_test13_0.f(__THE_0_test13_0.x);
  __THE_0_test14_0.f(__THE_0_test14_0.x);
  __THE_0_test15_0.f(__THE_0_test15_0.x);
  __THE_0_test16_0.f(__THE_0_test16_0.x);
}
======= flags =======
======= stdout =======
1 start 0
1 end 0
1 start 1
1 end 1
1 start 2
1 end 2
1 start 3
1 end 3
1 start 4
1 end 4
1 start 5
2 start 0
2 end 0
2 start 1
2 end 1
2 start 2
2 end 2
2 start 3
2 end 3
2 start 4
2 end 4
2 start 5
3 start 0
3 end 0
3 start 1
3 end 1
3 start 2
3 end 2
3 start 3
3 end 3
3 start 4
3 end 4
3 start 5
4 start 0
4 end 0
4 start 1
4 end 1
4 start 2
4 end 2
4 start 3
4 end 3
4 start 4
4 end 4
4 start 5
1 start 0
1 end 0
1 start 1
1 end 1
1 start 2
1 end 2
1 start 3
1 end 3
1 start 4
1 end 4
1 start 5
2 start 0
2 end 0
2 start 1
2 end 1
2 start 2
2 end 2
2 start 3
2 end 3
2 start 4
2 end 4
2 start 5
2 end 5
2 start 6
2 end 6
2 start 7
2 end 7
2 start 8
2 end 8
2 start 9
2 end 9
3 start 0
3 end 0
3 start 1
3 end 1
3 start 2
3 end 2
3 start 3
3 end 3
3 start 4
3 end 4
3 start 5
4 start 0
4 end 0
4 start 1
4 end 1
4 start 2
4 end 2
4 start 3
4 end 3
4 start 4
4 end 4
4 start 5
1 start 1
1 end 1
1 start 11
1 end 11
1 start 111
1 end 111
1 start 1111
1 end 1111
1 start 11111
2 start 1
2 end 1
2 start 11
2 end 11
2 start 111
2 end 111
2 start 1111
2 end 1111
2 start 11111
3 start 1
3 end 1
3 start 11
3 end 11
3 start 111
3 end 111
3 start 1111
3 end 1111
3 start 11111
4 start 1
4 end 1
4 start 11
4 end 11
4 start 111
4 end 111
4 start 1111
4 end 1111
4 start 11111
1 start 1
1 end 1
1 start 11
1 end 11
1 start 111
1 end 111
1 start 1111
1 end 1111
1 start 11111
2 start 1
2 end 1
2 start 11
2 end 11
2 start 111
2 end 111
2 start 1111
2 end 1111
2 start 11111
3 start 1
3 end 1
3 start 11
3 end 11
3 start 111
3 end 111
3 start 1111
3 end 1111
3 start 11111
4 start 1
4 end 1
4 start 11
4 end 11
4 start 111
4 end 111
4 start 1111
4 end 1111
4 start 11111
