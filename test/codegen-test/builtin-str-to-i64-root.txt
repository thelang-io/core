======= stdin =======
main {
  "0".toI64();
  "01".toI64();
  "1".toI64();
  "10".toI64();
  "100".toI64();
  "9223372036854775807".toI64();
  "-0".toI64();
  "-1".toI64();
  "-010".toI64();
  "-10".toI64();
  "-100".toI64();
  "-9223372036854775808".toI64();
  "0000".toI64(2);
  "0001".toI64(2);
  "1010".toI64(2);
  "01100100".toI64(2);
  "0111111111111111111111111111111111111111111111111111111111111111".toI64(2);
  "-0000".toI64(2);
  "-0001".toI64(2);
  "-1010".toI64(2);
  "-01100100".toI64(2);
  "-1000000000000000000000000000000000000000000000000000000000000000".toI64(2);
  "0".toI64(8);
  "1".toI64(8);
  "12".toI64(8);
  "144".toI64(8);
  "777777777777777777777".toI64(8);
  "-0".toI64(8);
  "-1".toI64(8);
  "-12".toI64(8);
  "-144".toI64(8);
  "-1000000000000000000000".toI64(8);
  "0".toI64(10);
  "01".toI64(10);
  "1".toI64(10);
  "10".toI64(10);
  "100".toI64(10);
  "9223372036854775807".toI64(10);
  "-0".toI64(10);
  "-1".toI64(10);
  "-010".toI64(10);
  "-10".toI64(10);
  "-100".toI64(10);
  "-9223372036854775808".toI64(10);
  "0".toI64(16);
  "1".toI64(16);
  "A".toI64(16);
  "64".toI64(16);
  "7FFFFFFFFFFFFFFF".toI64(16);
  "-0".toI64(16);
  "-1".toI64(16);
  "-A".toI64(16);
  "-64".toI64(16);
  "-8000000000000000".toI64(16);
  "0".toI64(36);
  "1".toI64(36);
  "A".toI64(36);
  "2S".toI64(36);
  "1Y2P0IJ32E8E7".toI64(36);
  "-0".toI64(36);
  "-1".toI64(36);
  "-A".toI64(36);
  "-2S".toI64(36);
  "-1Y2P0IJ32E8E8".toI64(36);
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <inttypes.h>
#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_assign (err_state_t *, int, void *, void (*f) (void *), int, int);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void error_stack_str (err_state_t *);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
int64_t str_toI64 (struct str, unsigned char, int32_t, int, int);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_assign (err_state_t *state, int id, void *ctx, void (*f) (void *), int line, int col) {
  state->id = id;
  state->ctx = ctx;
  state->_free = f;
  error_stack_pos(state, line, col);
  error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
void error_stack_str (err_state_t *state) {
  struct str *stack = (struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack;
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  stack->l = message.l;
  stack->d = re_alloc(stack->d, stack->l);
  memcpy(stack->d, message.d, stack->l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    stack->d = re_alloc(stack->d, stack->l + z + 1);
    if (it.col == 0 && it.line == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line, it.col);
    }
    stack->l += z;
  }
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
int64_t str_toI64 (struct str self, unsigned char o1, int32_t n1, int line, int col) {
  if (o1 == 1 && (n1 < 2 || n1 > 36) && n1 != 0) {
    const char *fmt = "radix %" PRId32 " is invalid, must be >= 2 and <= 36, or 0";
    size_t z = snprintf(NULL, 0, fmt, n1);
    char *d = alloc(z + 1);
    sprintf(d, fmt, n1);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  long long r = strtoll(c, &e, o1 == 0 ? 10 : n1);
  if (errno == ERANGE || r < INT64_MIN || INT64_MAX < r) {
    const char *fmt = "value `%s` out of range";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  } else if (errno != 0 || e == c || *e != 0) {
    const char *fmt = "value `%s` has invalid syntax";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z + 1);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}), (void (*) (void *)) &error_Error_free, line, col);
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  free(c);
  free(self.d);
  return (int64_t) r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  str_toI64(str_alloc("0"), 0, 0, 2, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("01"), 0, 0, 3, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1"), 0, 0, 4, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("10"), 0, 0, 5, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("100"), 0, 0, 6, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("9223372036854775807"), 0, 0, 7, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0"), 0, 0, 8, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1"), 0, 0, 9, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-010"), 0, 0, 10, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-10"), 0, 0, 11, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-100"), 0, 0, 12, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-9223372036854775808"), 0, 0, 13, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0000"), 1, 2, 14, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0001"), 1, 2, 15, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1010"), 1, 2, 16, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("01100100"), 1, 2, 17, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0111111111111111111111111111111111111111111111111111111111111111"), 1, 2, 18, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0000"), 1, 2, 19, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0001"), 1, 2, 20, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1010"), 1, 2, 21, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-01100100"), 1, 2, 22, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1000000000000000000000000000000000000000000000000000000000000000"), 1, 2, 23, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0"), 1, 8, 24, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1"), 1, 8, 25, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("12"), 1, 8, 26, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("144"), 1, 8, 27, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("777777777777777777777"), 1, 8, 28, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0"), 1, 8, 29, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1"), 1, 8, 30, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-12"), 1, 8, 31, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-144"), 1, 8, 32, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1000000000000000000000"), 1, 8, 33, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0"), 1, 10, 34, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("01"), 1, 10, 35, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1"), 1, 10, 36, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("10"), 1, 10, 37, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("100"), 1, 10, 38, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("9223372036854775807"), 1, 10, 39, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0"), 1, 10, 40, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1"), 1, 10, 41, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-010"), 1, 10, 42, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-10"), 1, 10, 43, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-100"), 1, 10, 44, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-9223372036854775808"), 1, 10, 45, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0"), 1, 16, 46, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1"), 1, 16, 47, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("A"), 1, 16, 48, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("64"), 1, 16, 49, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("7FFFFFFFFFFFFFFF"), 1, 16, 50, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0"), 1, 16, 51, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1"), 1, 16, 52, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-A"), 1, 16, 53, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-64"), 1, 16, 54, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-8000000000000000"), 1, 16, 55, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("0"), 1, 36, 56, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1"), 1, 36, 57, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("A"), 1, 36, 58, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("2S"), 1, 36, 59, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("1Y2P0IJ32E8E7"), 1, 36, 60, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-0"), 1, 36, 61, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1"), 1, 36, 62, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-A"), 1, 36, 63, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-2S"), 1, 36, 64, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L1;
  str_toI64(str_alloc("-1Y2P0IJ32E8E8"), 1, 36, 65, 3);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
