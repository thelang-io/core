======= stdin =======
main {
  fs_isFileSync("test/fixtures/builtin-fs-is-file-sync-root.txt")
  fs_isFileSync("test/fixtures")
  fs_isFileSync("test/fixtures/test.txt")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
bool fs_isFileSync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
bool fs_isFileSync (struct str s) {
  char *c = str_cstr(s);
  bool b = false;
  #ifdef THE_OS_WINDOWS
    struct _stat sb;
    if (_stat(c, &sb) == 0) {
      b = (sb.st_mode & _S_IFMT) == _S_IFREG;
    }
  #else
    struct stat sb;
    if (stat(c, &sb) == 0) {
      b = (sb.st_mode & S_IFMT) == S_IFREG;
    }
  #endif
  free(c);
  str_free(s);
  return b;
}

int main () {
  fs_isFileSync(str_alloc("test/fixtures/builtin-fs-is-file-sync-root.txt"));
  fs_isFileSync(str_alloc("test/fixtures"));
  fs_isFileSync(str_alloc("test/fixtures/test.txt"));
}
======= flags =======
======= stdout =======
