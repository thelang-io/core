======= stdin =======
main {
  a: any = { "key1": 1, "key2": 2, "key3": 3 }
  if a is int[str] { print("int[str] " + a.str()) }
  else { print("any") }

  b: any = 3.14
  if b is int[str] { print("int[str] " + b.str()) }
  else { print("any") }

  c: int[str] | float = { "key1": 1, "key2": 2, "key3": 3 }
  if c is int[str] { print("int[str] " + c.str()) }
  else { print("float " + c.str()) }

  d: int[str] | float = 3.14
  if d is int[str] { print("int[str] " + d.str()) }
  else { print("float " + d.str()) }

  mut e: any = { "key1": 1, "key2": 2, "key3": 3 }
  if (e = { "key1": 1, "key2": 2, "key3": 3 }) is int[str] { print("int[str] " + e.str()) }
  else { print("any") }

  mut f: any = 3.14
  if (f = 3.14) is int[str] { print("int[str] " + f.str()) }
  else { print("any") }

  mut g: int[str] | float = { "key1": 1, "key2": 2, "key3": 3 }
  if (g = { "key1": 1, "key2": 2, "key3": 3 }) is int[str] { print("int[str] " + g.str()) }
  else { print("float " + g.str()) }

  mut h: int[str] | float = 3.14
  if (h = 3.14) is int[str] { print("int[str] " + h.str()) }
  else { print("float " + h.str()) }

  print((a is int[str]) ? "int[str] " + a.str() : "any")
  print((b is int[str]) ? "int[str] " + b.str() : "any")
  print((c is int[str]) ? "int[str] " + c.str() : "float " + c.str())
  print((d is int[str]) ? "int[str] " + d.str() : "float " + d.str())
  print(((e = { "key1": 1, "key2": 2, "key3": 3 }) is int[str]) ? "int[str] " + e.str() : "any")
  print(((f = 3.14) is int[str]) ? "int[str] " + f.str() : "any")
  print(((g = { "key1": 1, "key2": 2, "key3": 3 }) is int[str]) ? "int[str] " + g.str() : "float " + g.str())
  print(((h = 3.14) is int[str]) ? "int[str] " + h.str() : "float " + h.str())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_map_strMSintME 2
#define TYPE_float 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;
struct __THE_1_any_map_strMSintME;
struct __THE_1_any_float;
struct __THE_1_union_map_strMSintMEUSfloatUE;

struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};
struct __THE_1_any_map_strMSintME {
  struct __THE_1_map_strMSintME d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_union_map_strMSintMEUSfloatUE {
  int t;
  union {
    struct __THE_1_map_strMSintME v2;
    double v3;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str cstr_concat_str (const char *, struct str);
void error_alloc (err_state_t *, size_t);
struct str float_str (double);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
struct str __THE_1_map_strMSintME_str (struct __THE_1_map_strMSintME);
struct any __THE_1_any_map_strMSintME_alloc (struct __THE_1_map_strMSintME);
struct any __THE_1_any_map_strMSintME_copy (const struct any);
void __THE_1_any_map_strMSintME_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct __THE_1_union_map_strMSintMEUSfloatUE __THE_1_union_map_strMSintMEUSfloatUE_alloc (int, ...);
void __THE_1_union_map_strMSintMEUSfloatUE_free (struct __THE_1_union_map_strMSintMEUSfloatUE);
struct __THE_1_union_map_strMSintMEUSfloatUE __THE_1_union_map_strMSintMEUSfloatUE_realloc (struct __THE_1_union_map_strMSintMEUSfloatUE, struct __THE_1_union_map_strMSintMEUSfloatUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct str __THE_1_map_strMSintME_str (struct __THE_1_map_strMSintME n) {
  struct str r = str_alloc("{");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_cstr(r, "\"");
    r = str_concat_str(r, str_escape(n.d[i].f));
    r = str_concat_cstr(r, "\": ");
    r = str_concat_str(r, int_str(n.d[i].s));
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return str_concat_cstr(r, "}");
}
struct any __THE_1_any_map_strMSintME_alloc (struct __THE_1_map_strMSintME d) {
  size_t l = sizeof(struct __THE_1_any_map_strMSintME);
  struct __THE_1_any_map_strMSintME *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_map_strMSintME, r, l, &__THE_1_any_map_strMSintME_copy, &__THE_1_any_map_strMSintME_free};
}
struct any __THE_1_any_map_strMSintME_copy (const struct any n) {
  struct __THE_1_any_map_strMSintME *o = n.d;
  struct __THE_1_any_map_strMSintME *r = alloc(n.l);
  r->d = __THE_1_map_strMSintME_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_map_strMSintME_free (struct any _n) {
  struct __THE_1_any_map_strMSintME *n = _n.d;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n->d);
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct __THE_1_union_map_strMSintMEUSfloatUE __THE_1_union_map_strMSintMEUSfloatUE_alloc (int t, ...) {
  struct __THE_1_union_map_strMSintMEUSfloatUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_map_strMSintME) r.v2 = va_arg(args, struct __THE_1_map_strMSintME);
  if (t == TYPE_float) r.v3 = va_arg(args, double);
  va_end(args);
  return r;
}
void __THE_1_union_map_strMSintMEUSfloatUE_free (struct __THE_1_union_map_strMSintMEUSfloatUE n) {
  if (n.t == TYPE_map_strMSintME) __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n.v2);
}
struct __THE_1_union_map_strMSintMEUSfloatUE __THE_1_union_map_strMSintMEUSfloatUE_realloc (struct __THE_1_union_map_strMSintMEUSfloatUE n1, struct __THE_1_union_map_strMSintMEUSfloatUE n2) {
  __THE_1_union_map_strMSintMEUSfloatUE_free((struct __THE_1_union_map_strMSintMEUSfloatUE) n1);
  return n2;
}

int main () {
  const struct any __THE_0_a_0 = __THE_1_any_map_strMSintME_alloc(__THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3));
  if (__THE_0_a_0.t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_a_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct any __THE_0_b_0 = __THE_1_any_float_alloc(3.14);
  if (__THE_0_b_0.t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_b_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct __THE_1_union_map_strMSintMEUSfloatUE __THE_0_c_0 = __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_map_strMSintME, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3));
  if (__THE_0_c_0.t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_c_0.v2))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_c_0.v3)), THE_EOL);
  }
  const struct __THE_1_union_map_strMSintMEUSfloatUE __THE_0_d_0 = __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_float, 3.14);
  if (__THE_0_d_0.t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_d_0.v2))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_d_0.v3)), THE_EOL);
  }
  struct any __THE_0_e_0 = __THE_1_any_map_strMSintME_alloc(__THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3));
  if ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_map_strMSintME_alloc(__THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3)))).t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_e_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct any __THE_0_f_0 = __THE_1_any_float_alloc(3.14);
  if ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_f_0.d)->d))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct __THE_1_union_map_strMSintMEUSfloatUE __THE_0_g_0 = __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_map_strMSintME, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3));
  if ((__THE_0_g_0 = __THE_1_union_map_strMSintMEUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_map_strMSintME, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3)))).t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_g_0.v2))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_g_0.v3)), THE_EOL);
  }
  struct __THE_1_union_map_strMSintMEUSfloatUE __THE_0_h_0 = __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_float, 3.14);
  if ((__THE_0_h_0 = __THE_1_union_map_strMSintMEUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_map_strMSintME) {
    print(stdout, "sz", cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_h_0.v2))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", float_str(__THE_0_h_0.v3)), THE_EOL);
  }
  print(stdout, "sz", (__THE_0_a_0.t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_a_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_b_0.t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_b_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_c_0.t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_c_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_c_0.v3)), THE_EOL);
  print(stdout, "sz", (__THE_0_d_0.t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_d_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_d_0.v3)), THE_EOL);
  print(stdout, "sz", ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_map_strMSintME_alloc(__THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3)))).t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_e_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(((struct __THE_1_any_map_strMSintME *) __THE_0_f_0.d)->d))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_g_0 = __THE_1_union_map_strMSintMEUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_map_strMSintME, __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3)))).t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_g_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_g_0.v3)), THE_EOL);
  print(stdout, "sz", ((__THE_0_h_0 = __THE_1_union_map_strMSintMEUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_map_strMSintMEUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_map_strMSintME) ? cstr_concat_str("int[str] ", __THE_1_map_strMSintME_str(__THE_1_map_strMSintME_copy(__THE_0_h_0.v2))) : cstr_concat_str("float ", float_str(__THE_0_h_0.v3)), THE_EOL);
  __THE_1_union_map_strMSintMEUSfloatUE_free((struct __THE_1_union_map_strMSintMEUSfloatUE) __THE_0_h_0);
  __THE_1_union_map_strMSintMEUSfloatUE_free((struct __THE_1_union_map_strMSintMEUSfloatUE) __THE_0_g_0);
  any_free((struct any) __THE_0_f_0);
  any_free((struct any) __THE_0_e_0);
  __THE_1_union_map_strMSintMEUSfloatUE_free((struct __THE_1_union_map_strMSintMEUSfloatUE) __THE_0_d_0);
  __THE_1_union_map_strMSintMEUSfloatUE_free((struct __THE_1_union_map_strMSintMEUSfloatUE) __THE_0_c_0);
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
int[str] {"key1": 1, "key2": 2, "key3": 3}
any
int[str] {"key1": 1, "key2": 2, "key3": 3}
float 3.140000
int[str] {"key1": 1, "key2": 2, "key3": 3}
any
int[str] {"key1": 1, "key2": 2, "key3": 3}
float 3.140000
int[str] {"key1": 1, "key2": 2, "key3": 3}
any
int[str] {"key1": 1, "key2": 2, "key3": 3}
float 3.140000
int[str] {"key1": 1, "key2": 2, "key3": 3}
any
int[str] {"key1": 1, "key2": 2, "key3": 3}
float 3.140000
