======= stdin =======
main {
  fs_copyDirectorySync(
    "test" + path_SEP + "fixtures" + path_SEP + "test.txt",
    "test" + path_SEP + "fixtures" + path_SEP + "test"
  )
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <io.h>
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <fcntl.h>
  #include <dirent.h>
  #include <unistd.h>
#endif

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void fs_copyDirectorySync (struct str, struct str);
void fs_copyFileSync (struct str, struct str);
bool fs_existsSync (struct str);
bool fs_isDirectorySync (struct str);
void fs_mkdirSync (struct str);
void fs_rmSync (struct str);
void fs_rmdirSync (struct str);
struct __THE_1_array_str fs_scandirSync (struct str);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
char *str_cstr (const struct str);
void str_free (struct str);
void __THE_1_array_str_free (struct __THE_1_array_str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void fs_copyDirectorySync (struct str n1, struct str n2) {
  if (fs_existsSync(str_copy(n2))) {
    if (fs_isDirectorySync(str_copy(n2))) {
      fs_rmdirSync(str_copy(n2));
    } else {
      fs_rmSync(str_copy(n2));
    }
  }
  if (n1.l > 0 && n1.d[n1.l - 1] != (THE_PATH_SEP)[0] && n1.d[n1.l - 1] != '/') {
    n1.d = re_alloc(n1.d, ++n1.l);
    n1.d[n1.l - 1] = (THE_PATH_SEP)[0];
  }
  if (n2.l > 0 && n2.d[n2.l - 1] != (THE_PATH_SEP)[0] && n2.d[n2.l - 1] != '/') {
    n2.d = re_alloc(n2.d, ++n2.l);
    n2.d[n2.l - 1] = (THE_PATH_SEP)[0];
  }
  struct __THE_1_array_str files = fs_scandirSync(str_copy(n1));
  fs_mkdirSync(str_copy(n2));
  for (size_t i = 0; i < files.l; i++) {
    struct str file = str_concat_str(str_copy(n1), str_copy(files.d[i]));
    if (fs_isDirectorySync(str_copy(file))) {
      fs_copyDirectorySync(file, str_concat_str(str_copy(n2), str_copy(files.d[i])));
    } else {
      fs_copyFileSync(file, str_concat_str(str_copy(n2), str_copy(files.d[i])));
    }
  }
  __THE_1_array_str_free(files);
  str_free(n2);
  str_free(n1);
}
void fs_copyFileSync (struct str n1, struct str n2) {
  char *c1 = str_cstr(n1);
  char *c2 = str_cstr(n2);
  #ifdef THE_OS_WINDOWS
    if (CopyFile(c1, c2, 0) == 0) {
      fprintf(stderr, "Error: failed to copy file from `%s` to `%s`" THE_EOL, c1, c2);
      exit(EXIT_FAILURE);
    }
  #else
    int fd1 = open(c1, O_RDONLY);
    if (fd1 < 0) {
      fprintf(stderr, "Error: failed to open file descriptor of `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    struct stat sb1;
    if (fstat(fd1, &sb1) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    if ((sb1.st_mode & S_IFMT) != S_IFREG) {
      fprintf(stderr, "Error: cannot copy non-file `%s`" THE_EOL, c1);
      exit(EXIT_FAILURE);
    }
    int fd2 = open(c2, O_WRONLY | O_CREAT);
    if (fd2 < 0) {
      fprintf(stderr, "Error: failed to open file descriptor of `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    struct stat sb2;
    if (fstat(fd2, &sb2) != 0) {
      fprintf(stderr, "Error: failed to stat file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    if (sb1.st_dev == sb2.st_dev && sb1.st_ino == sb2.st_ino) {
      fprintf(stderr, "Error: can't copy same file" THE_EOL);
      exit(EXIT_FAILURE);
    }
    if (sb2.st_size > 0 && ftruncate(fd2, 0) != 0) {
      fprintf(stderr, "Error: failed to truncate file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    if (fchmod(fd2, sb1.st_mode) != 0) {
      fprintf(stderr, "Error: failed to chmod file `%s`" THE_EOL, c2);
      exit(EXIT_FAILURE);
    }
    size_t bytes = sb1.st_size;
    size_t buf_len = 8192;
    char buf[buf_len];
    while (bytes != 0) {
      ssize_t read_bytes_raw = read(fd1, buf, bytes > buf_len ? buf_len : bytes);
      if (read_bytes_raw <= 0) {
        fprintf(stderr, "Error: failed to read data from file `%s`" THE_EOL, c1);
        exit(EXIT_FAILURE);
      }
      size_t read_bytes = read_bytes_raw;
      size_t written_bytes = 0;
      while (written_bytes != read_bytes) {
        ssize_t written_bytes_raw = write(fd2, &buf[written_bytes], read_bytes - written_bytes);
        if (written_bytes_raw <= 0) {
          fprintf(stderr, "Error: failed to write data to file `%s`" THE_EOL, c2);
          exit(EXIT_FAILURE);
        }
        written_bytes += (size_t) written_bytes_raw;
      }
      bytes -= written_bytes;
    }
    close(fd2);
    close(fd1);
  #endif
  free(c2);
  free(c1);
  str_free(n2);
  str_free(n1);
}
bool fs_existsSync (struct str s) {
  char *c = str_cstr(s);
  #ifdef THE_OS_WINDOWS
    bool r = _access(c, 0) == 0;
  #else
    bool r = access(c, 0) == 0;
  #endif
  str_free(s);
  free(c);
  return r;
}
bool fs_isDirectorySync (struct str s) {
  char *c = str_cstr(s);
  bool b = false;
  #ifdef THE_OS_WINDOWS
    struct _stat sb;
    if (_stat(c, &sb) == 0) {
      b = (sb.st_mode & _S_IFMT) == _S_IFDIR;
    }
  #else
    struct stat sb;
    if (stat(c, &sb) == 0) {
      b = (sb.st_mode & S_IFMT) == S_IFDIR;
    }
  #endif
  free(c);
  str_free(s);
  return b;
}
void fs_mkdirSync (struct str s) {
  char *c = str_cstr(s);
  #ifdef THE_OS_WINDOWS
    bool r = CreateDirectory(c, NULL);
  #else
    bool r = mkdir(c, 0777) == 0;
  #endif
  if (!r) {
    fprintf(stderr, "Error: failed to create directory `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free(s);
}
void fs_rmSync (struct str s) {
  char *c = str_cstr(s);
  if (remove(c) != 0) {
    fprintf(stderr, "Error: failed to remove file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free(s);
}
void fs_rmdirSync (struct str s) {
  char *c = str_cstr(s);
  #ifdef THE_OS_WINDOWS
    bool r = RemoveDirectory(c);
  #else
    bool r = rmdir(c) == 0;
  #endif
  if (!r) {
    fprintf(stderr, "Error: failed to remove directory `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free(s);
}
struct __THE_1_array_str fs_scandirSync (struct str s) {
  char *c = str_cstr(s);
  struct str *r = NULL;
  size_t l = 0;
  #ifdef THE_OS_WINDOWS
    if (GetFileAttributes(c) == INVALID_FILE_ATTRIBUTES) {
      fprintf(stderr, "Error: directory `%s` doesn't exist" THE_EOL, c);
      exit(EXIT_FAILURE);
    } else if (!(GetFileAttributes(c) & FILE_ATTRIBUTE_DIRECTORY)) {
      fprintf(stderr, "Error: failed to scan non-directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    const char *fmt = s.l == 0 ? "./*" : ((s.d[s.l - 1] == '/' || s.d[s.l - 1] == '\\') ? "%s*" : "%s\\*");
    char *b = alloc(s.l + 4);
    snprintf(b, s.l + 3, fmt, c);
    WIN32_FIND_DATA m;
    HANDLE h = FindFirstFile(b, &m);
    free(b);
    if (h == INVALID_HANDLE_VALUE && GetLastError() != ERROR_FILE_NOT_FOUND) {
      fprintf(stderr, "Error: failed to open directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    } else if (h == INVALID_HANDLE_VALUE) {
      goto fs_scandirSync_cleanup;
    }
    WIN32_FIND_DATA *n = &m;
    while (true) {
      if (strcmp(n->cFileName, ".") != 0 && strcmp(n->cFileName, "..") != 0) {
        r = re_alloc(r, ++l * sizeof(struct str));
        r[l - 1] = str_alloc(n->cFileName);
      }
      bool g = FindNextFile(h, n);
      if (!g && GetLastError() == ERROR_NO_MORE_FILES) {
        break;
      } else if (!g) {
        fprintf(stderr, "Error: failed to scan next file of directory `%s`" THE_EOL, c);
        exit(EXIT_FAILURE);
      }
    }
    FindClose(h);
  #else
    struct stat sb;
    if (stat(c, &sb) != 0) {
      fprintf(stderr, "Error: directory `%s` doesn't exist" THE_EOL, c);
      exit(EXIT_FAILURE);
    } else if ((sb.st_mode & S_IFMT) != S_IFDIR) {
      fprintf(stderr, "Error: failed to scan non-directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    DIR *f = opendir(c);
    if (f == NULL) {
      fprintf(stderr, "Error: failed to open directory `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    struct dirent *a;
    while ((a = readdir(f)) != NULL) {
      if (strcmp(a->d_name, ".") == 0 || strcmp(a->d_name, "..") == 0) continue;
      r = re_alloc(r, ++l * sizeof(struct str));
      r[l - 1] = str_alloc(a->d_name);
    }
    closedir(f);
  #endif
fs_scandirSync_cleanup:
  free(c);
  str_free(s);
  for (size_t j = 0; j < l; j++) {
    for (size_t k = j + 1; k < l; k++) {
      if (memcmp(r[j].d, r[k].d, r[j].l > r[k].l ? r[k].l : r[j].l) > 0) {
        struct str t = r[j];
        r[j] = r[k];
        r[k] = t;
      }
    }
  }
  return (struct __THE_1_array_str) {r, l};
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}

int main () {
  fs_copyDirectorySync(str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt"), str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test"));
}
======= flags =======
======= stderr =======
Error: directory `test{{ (\/|\\) }}fixtures{{ (\/|\\) }}test.txt{{ (\/|\\) }}` doesn't exist
