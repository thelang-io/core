======= stdin =======
main {
  a: any = [1, 2, 3]
  if a is int[] { print("int[] " + a.str()) }
  else { print("any") }

  b: any = 3.14
  if b is int[] { print("int[] " + b.str()) }
  else { print("any") }

  c: int[] | float = [1, 2, 3]
  if c is int[] { print("int[] " + c.str()) }
  else { print("float " + c.str()) }

  d: int[] | float = 3.14
  if d is int[] { print("int[] " + d.str()) }
  else { print("float " + d.str()) }

  mut e: any = [1, 2, 3]
  if (e = [1, 2, 3]) is int[] { print("int[] " + e.str()) }
  else { print("any") }

  mut f: any = 3.14
  if (f = 3.14) is int[] { print("int[] " + f.str()) }
  else { print("any") }

  mut g: int[] | float = [1, 2, 3]
  if (g = [1, 2, 3]) is int[] { print("int[] " + g.str()) }
  else { print("float " + g.str()) }

  mut h: int[] | float = 3.14
  if (h = 3.14) is int[] { print("int[] " + h.str()) }
  else { print("float " + h.str()) }

  print((a is int[]) ? "int[] " + a.str() : "any")
  print((b is int[]) ? "int[] " + b.str() : "any")
  print((c is int[]) ? "int[] " + c.str() : "float " + c.str())
  print((d is int[]) ? "int[] " + d.str() : "float " + d.str())
  print(((e = [1, 2, 3]) is int[]) ? "int[] " + e.str() : "any")
  print(((f = 3.14) is int[]) ? "int[] " + f.str() : "any")
  print(((g = [1, 2, 3]) is int[]) ? "int[] " + g.str() : "float " + g.str())
  print(((h = 3.14) is int[]) ? "int[] " + h.str() : "float " + h.str())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1
#define TYPE_array_int 2
#define TYPE_float 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_array_int;
struct __THE_1_any_array_int;
struct __THE_1_any_float;
struct __THE_1_union_array_intUSfloatUE;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_any_array_int {
  struct __THE_1_array_int d;
};
struct __THE_1_any_float {
  double d;
};
struct __THE_1_union_array_intUSfloatUE {
  int t;
  union {
    struct __THE_1_array_int v2;
    double v3;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pos (err_state_t *, int, int);
struct str error_stack_str (err_state_t *);
struct str float_str (double);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct str __THE_1_array_int_str (struct __THE_1_array_int);
struct any __THE_1_any_array_int_alloc (struct __THE_1_array_int);
struct any __THE_1_any_array_int_copy (const struct any);
void __THE_1_any_array_int_free (struct any);
struct any __THE_1_any_float_alloc (double);
struct any __THE_1_any_float_copy (const struct any);
void __THE_1_any_float_free (struct any);
struct __THE_1_union_array_intUSfloatUE __THE_1_union_array_intUSfloatUE_alloc (int, ...);
void __THE_1_union_array_intUSfloatUE_free (struct __THE_1_union_array_intUSfloatUE);
struct __THE_1_union_array_intUSfloatUE __THE_1_union_array_intUSfloatUE_realloc (struct __THE_1_union_array_intUSfloatUE, struct __THE_1_union_array_intUSfloatUE);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str float_str (double f) {
  char buf[512];
  sprintf(buf, "%f", f);
  return str_alloc(buf);
}
struct str int_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}
struct any __THE_1_any_array_int_alloc (struct __THE_1_array_int d) {
  size_t l = sizeof(struct __THE_1_any_array_int);
  struct __THE_1_any_array_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_array_int, r, l, &__THE_1_any_array_int_copy, &__THE_1_any_array_int_free};
}
struct any __THE_1_any_array_int_copy (const struct any n) {
  struct __THE_1_any_array_int *o = n.d;
  struct __THE_1_any_array_int *r = alloc(n.l);
  r->d = __THE_1_array_int_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_array_int_free (struct any _n) {
  struct __THE_1_any_array_int *n = _n.d;
  __THE_1_array_int_free((struct __THE_1_array_int) n->d);
  free(n);
}
struct any __THE_1_any_float_alloc (double d) {
  size_t l = sizeof(struct __THE_1_any_float);
  struct __THE_1_any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_float, r, l, &__THE_1_any_float_copy, &__THE_1_any_float_free};
}
struct any __THE_1_any_float_copy (const struct any n) {
  struct __THE_1_any_float *o = n.d;
  struct __THE_1_any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_float_free (struct any _n) {
  struct __THE_1_any_float *n = _n.d;
  free(n);
}
struct __THE_1_union_array_intUSfloatUE __THE_1_union_array_intUSfloatUE_alloc (int t, ...) {
  struct __THE_1_union_array_intUSfloatUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_array_int) r.v2 = va_arg(args, struct __THE_1_array_int);
  if (t == TYPE_float) r.v3 = va_arg(args, double);
  va_end(args);
  return r;
}
void __THE_1_union_array_intUSfloatUE_free (struct __THE_1_union_array_intUSfloatUE n) {
  if (n.t == TYPE_array_int) __THE_1_array_int_free((struct __THE_1_array_int) n.v2);
}
struct __THE_1_union_array_intUSfloatUE __THE_1_union_array_intUSfloatUE_realloc (struct __THE_1_union_array_intUSfloatUE n1, struct __THE_1_union_array_intUSfloatUE n2) {
  __THE_1_union_array_intUSfloatUE_free((struct __THE_1_union_array_intUSfloatUE) n1);
  return n2;
}

int main () {
  const struct any __THE_0_a_0 = __THE_1_any_array_int_alloc(__THE_1_array_int_alloc(3, 1, 2, 3));
  if (__THE_0_a_0.t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 3, 36), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_a_0.d)->d)))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct any __THE_0_b_0 = __THE_1_any_float_alloc(3.14);
  if (__THE_0_b_0.t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 7, 36), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_b_0.d)->d)))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  const struct __THE_1_union_array_intUSfloatUE __THE_0_c_0 = __THE_1_union_array_intUSfloatUE_alloc(TYPE_array_int, __THE_1_array_int_alloc(3, 1, 2, 3));
  if (__THE_0_c_0.t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 11, 36), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_c_0.v2)))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 12, 27), float_str(__THE_0_c_0.v3))), THE_EOL);
  }
  const struct __THE_1_union_array_intUSfloatUE __THE_0_d_0 = __THE_1_union_array_intUSfloatUE_alloc(TYPE_float, 3.14);
  if (__THE_0_d_0.t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 15, 36), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_d_0.v2)))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 16, 27), float_str(__THE_0_d_0.v3))), THE_EOL);
  }
  struct any __THE_0_e_0 = __THE_1_any_array_int_alloc(__THE_1_array_int_alloc(3, 1, 2, 3));
  if ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_array_int_alloc(__THE_1_array_int_alloc(3, 1, 2, 3)))).t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 19, 50), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_e_0.d)->d)))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct any __THE_0_f_0 = __THE_1_any_float_alloc(3.14);
  if ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 23, 45), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_f_0.d)->d)))), THE_EOL);
  } else {
    print(stdout, "zz", "any", THE_EOL);
  }
  struct __THE_1_union_array_intUSfloatUE __THE_0_g_0 = __THE_1_union_array_intUSfloatUE_alloc(TYPE_array_int, __THE_1_array_int_alloc(3, 1, 2, 3));
  if ((__THE_0_g_0 = __THE_1_union_array_intUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_array_intUSfloatUE_alloc(TYPE_array_int, __THE_1_array_int_alloc(3, 1, 2, 3)))).t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 27, 50), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_g_0.v2)))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 28, 27), float_str(__THE_0_g_0.v3))), THE_EOL);
  }
  struct __THE_1_union_array_intUSfloatUE __THE_0_h_0 = __THE_1_union_array_intUSfloatUE_alloc(TYPE_float, 3.14);
  if ((__THE_0_h_0 = __THE_1_union_array_intUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_array_intUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_array_int) {
    print(stdout, "sz", cstr_concat_str("int[] ", (error_stack_pos(&err_state, 31, 45), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_h_0.v2)))), THE_EOL);
  } else {
    print(stdout, "sz", cstr_concat_str("float ", (error_stack_pos(&err_state, 32, 27), float_str(__THE_0_h_0.v3))), THE_EOL);
  }
  print(stdout, "sz", (__THE_0_a_0.t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 34, 35), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_a_0.d)->d)))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_b_0.t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 35, 35), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_b_0.d)->d)))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", (__THE_0_c_0.t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 36, 35), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_c_0.v2)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 36, 56), float_str(__THE_0_c_0.v3))), THE_EOL);
  print(stdout, "sz", (__THE_0_d_0.t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 37, 35), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_d_0.v2)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 37, 56), float_str(__THE_0_d_0.v3))), THE_EOL);
  print(stdout, "sz", ((__THE_0_e_0 = any_realloc(__THE_0_e_0, __THE_1_any_array_int_alloc(__THE_1_array_int_alloc(3, 1, 2, 3)))).t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 38, 49), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_e_0.d)->d)))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_f_0 = any_realloc(__THE_0_f_0, __THE_1_any_float_alloc(3.14))).t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 39, 44), __THE_1_array_int_str(__THE_1_array_int_copy(((struct __THE_1_any_array_int *) __THE_0_f_0.d)->d)))) : str_alloc("any"), THE_EOL);
  print(stdout, "sz", ((__THE_0_g_0 = __THE_1_union_array_intUSfloatUE_realloc(__THE_0_g_0, __THE_1_union_array_intUSfloatUE_alloc(TYPE_array_int, __THE_1_array_int_alloc(3, 1, 2, 3)))).t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 40, 49), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_g_0.v2)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 40, 70), float_str(__THE_0_g_0.v3))), THE_EOL);
  print(stdout, "sz", ((__THE_0_h_0 = __THE_1_union_array_intUSfloatUE_realloc(__THE_0_h_0, __THE_1_union_array_intUSfloatUE_alloc(TYPE_float, 3.14))).t == TYPE_array_int) ? cstr_concat_str("int[] ", (error_stack_pos(&err_state, 41, 44), __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_h_0.v2)))) : cstr_concat_str("float ", (error_stack_pos(&err_state, 41, 65), float_str(__THE_0_h_0.v3))), THE_EOL);
  __THE_1_union_array_intUSfloatUE_free((struct __THE_1_union_array_intUSfloatUE) __THE_0_h_0);
  __THE_1_union_array_intUSfloatUE_free((struct __THE_1_union_array_intUSfloatUE) __THE_0_g_0);
  any_free((struct any) __THE_0_f_0);
  any_free((struct any) __THE_0_e_0);
  __THE_1_union_array_intUSfloatUE_free((struct __THE_1_union_array_intUSfloatUE) __THE_0_d_0);
  __THE_1_union_array_intUSfloatUE_free((struct __THE_1_union_array_intUSfloatUE) __THE_0_c_0);
  any_free((struct any) __THE_0_b_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
int[] [1, 2, 3]
any
int[] [1, 2, 3]
float 3.140000
int[] [1, 2, 3]
any
int[] [1, 2, 3]
float 3.140000
int[] [1, 2, 3]
any
int[] [1, 2, 3]
float 3.140000
int[] [1, 2, 3]
any
int[] [1, 2, 3]
float 3.140000
