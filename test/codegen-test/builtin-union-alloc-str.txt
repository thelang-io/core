======= stdin =======
main {
  g1: str | char = ""
  g2: str | char = "test"
  g3: str | char = 'a'
  g4: str | char = 'z'
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_str 1
#define TYPE_char 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_union$0;

struct __THE_1_union$0 {
  int t;
  union {
    struct str v1;
    char v2;
  };
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_union$0 __THE_1_union$0_alloc (int, ...);
void __THE_1_union$0_free (struct __THE_1_union$0);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_union$0 __THE_1_union$0_alloc (int t, ...) {
  struct __THE_1_union$0 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_str) r.v1 = va_arg(args, struct str);
  if (t == TYPE_char) r.v2 = va_arg(args, int);
  va_end(args);
  return r;
}
void __THE_1_union$0_free (struct __THE_1_union$0 n) {
  if (n.t == TYPE_str) str_free((struct str) n.v1);
}

int main () {
  const struct __THE_1_union$0 __THE_0_g1_0 = __THE_1_union$0_alloc(TYPE_str, str_alloc(""));
  const struct __THE_1_union$0 __THE_0_g2_0 = __THE_1_union$0_alloc(TYPE_str, str_alloc("test"));
  const struct __THE_1_union$0 __THE_0_g3_0 = __THE_1_union$0_alloc(TYPE_char, 'a');
  const struct __THE_1_union$0 __THE_0_g4_0 = __THE_1_union$0_alloc(TYPE_char, 'z');
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_g4_0);
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_g3_0);
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_g2_0);
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_g1_0);
}
======= flags =======
======= stdout =======
