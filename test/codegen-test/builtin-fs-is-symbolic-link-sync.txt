======= stdin =======
main {
  fileName := "test/fixtures/builtin-fs-is-symbolic-sync.txt"

  print(fs_isSymbolicLinkSync(fileName))
  print(fs_isSymbolicLinkSync("test/fixtures"))
  print(fs_isSymbolicLinkSync("test/fixtures/test.txt"))

  fs_linkSync("test/fixtures/test.txt", fs_realpathSync(fileName))
  print(fs_isSymbolicLinkSync(fileName))
  fs_rmSync(fileName)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

struct str {
  char *d;
  size_t l;
};
#ifdef THE_OS_WINDOWS
  struct win_reparse_data_buffer {
    ULONG ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    union {
      struct {
        USHORT SubstituteNameOffset;
        USHORT SubstituteNameLength;
        USHORT PrintNameOffset;
        USHORT PrintNameLength;
        ULONG Flags;
        char PathBuffer[1];
      } SymbolicLinkReparseBuffer;
      struct {
        USHORT SubstituteNameOffset;
        USHORT SubstituteNameLength;
        USHORT PrintNameOffset;
        USHORT PrintNameLength;
        char PathBuffer[1];
      } MountPointReparseBuffer;
      struct {
        UCHAR DataBuffer[1];
      } GenericReparseBuffer;
      struct {
        ULONG Version;
        char StringList[1];
      } AppExecLinkReparseBuffer;
    };
  };
#endif

void *alloc (size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool fs_isSymbolicLinkSync (struct str);
void fs_linkSync (struct str, struct str);
struct str fs_realpathSync (struct str);
void fs_rmSync (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool fs_isSymbolicLinkSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  bool b = false;
  #ifdef THE_OS_WINDOWS
    HANDLE h = CreateFileA(c, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
    if (h == INVALID_HANDLE_VALUE) {
      fprintf(stderr, "Error: failed to create handle to check if file `%s` is symbolic link" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    char d[MAXIMUM_REPARSE_DATA_BUFFER_SIZE];
    struct win_reparse_data_buffer *r = (struct win_reparse_data_buffer *) d;
    DWORD y;
    if (DeviceIoControl(h, FSCTL_GET_REPARSE_POINT, NULL, 0, &d, sizeof(d), &y, NULL)) {
      if (r->ReparseTag == IO_REPARSE_TAG_SYMLINK) {
        b = true;
      } else if (r->ReparseTag == IO_REPARSE_TAG_MOUNT_POINT) {
        char *t = r->MountPointReparseBuffer.PathBuffer + r->MountPointReparseBuffer.SubstituteNameOffset;
        if (
          r->MountPointReparseBuffer.SubstituteNameLength >= 6 &&
          t[0] == '\\' && t[1] == '?' && t[2] == '?' && t[3] == '\\' &&
          ((t[4] >= 'A' && t[4] <= 'Z') || (t[4] >= 'a' && t[4] <= 'z')) &&
          t[5] == ':' && (r->MountPointReparseBuffer.SubstituteNameLength == 6 || t[6] == '\\')
        ) {
          b = true;
        }
      } else if (r->ReparseTag == IO_REPARSE_TAG_APPEXECLINK && r->AppExecLinkReparseBuffer.Version == 3) {
        char *t = r->AppExecLinkReparseBuffer.StringList;
        bool f = false;
        for (size_t i = 0; i < 2; i++) {
          size_t l = strlen(t);
          if (l == 0) {
            f = true;
            break;
          }
          t += l + 1;
        }
        if (!f) {
          if (strlen(t) >= 3 && ((t[0] >= 'a' && t[0] <= 'z') || (t[0] >= 'A' && t[0] <= 'Z')) && t[1] == ':' && t[2] == '\\') {
            b = true;
          }
        }
      }
    }
    CloseHandle(h);
  #else
    struct stat sb;
    if (lstat(c, &sb) == 0) {
      b = (sb.st_mode & S_IFMT) == S_IFLNK;
    }
  #endif
  free(c);
  str_free(s);
  return b;
}
void fs_linkSync (struct str s1, struct str s2) {
  char *c1 = alloc(s1.l + 1);
  memcpy(c1, s1.d, s1.l);
  c1[s1.l] = '\0';
  char *c2 = alloc(s2.l + 1);
  memcpy(c2, s2.d, s2.l);
  c2[s2.l] = '\0';
  #ifdef THE_OS_WINDOWS
    bool r = CreateSymbolicLinkA(c2, c1, 0);
  #else
    bool r = symlink(c1, c2) != 0);
  #endif
  if (!r) {
    fprintf(stderr, "Error: failed to create symbolic link from `%s` to `%s`" THE_EOL, c1, c2);
    exit(EXIT_FAILURE);
  }
  str_free(s1);
  str_free(s2);
  free(c1);
  free(c2);
}
struct str fs_realpathSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  #ifdef THE_OS_WINDOWS
    HANDLE h = CreateFileA(c, 0, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS, NULL);
    if (h == INVALID_HANDLE_VALUE) {
      fprintf(stderr, "Error: failed to create handle to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    size_t l = GetFinalPathNameByHandleA(h, NULL, 0, VOLUME_NAME_DOS);
    if (l == 0) {
      fprintf(stderr, "Error: failed to find size of real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    char *d = alloc(l + 1);
    if (GetFinalPathNameByHandleA(h, d, l, VOLUME_NAME_DOS) != 0) {
      fprintf(stderr, "Error: failed to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    if (strncmp(d, "\\\\?\\UNC\\", 8) == 0) {
      d += 6;
      d[0] = '\\';
      l -= 6;
    } else if (strncmp(d, "\\\\?\\", 4) == 0) {
      d += 4;
      l -= 4;
    } else {
      fprintf(stderr, "Error: failed to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    CloseHandle(h);
  #else
    char *d = realpath(c, NULL);
    if (d == NULL) {
      fprintf(stderr, "Error: failed to get real path of file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
    size_t l = strlen(d);
  #endif
  free(c);
  str_free((struct str) s);
  return (struct str) {d, l};
}
void fs_rmSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  if (remove(c) != 0) {
    fprintf(stderr, "Error: failed to remove file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free(s);
}

int main () {
  const struct str __THE_0_fileName_0 = str_alloc("test/fixtures/builtin-fs-is-symbolic-sync.txt");
  print(stdout, "tz", fs_isSymbolicLinkSync(str_copy(__THE_0_fileName_0)), THE_EOL);
  print(stdout, "tz", fs_isSymbolicLinkSync(str_alloc("test/fixtures")), THE_EOL);
  print(stdout, "tz", fs_isSymbolicLinkSync(str_alloc("test/fixtures/test.txt")), THE_EOL);
  fs_linkSync(str_alloc("test/fixtures/test.txt"), fs_realpathSync(str_copy(__THE_0_fileName_0)));
  print(stdout, "tz", fs_isSymbolicLinkSync(str_copy(__THE_0_fileName_0)), THE_EOL);
  fs_rmSync(str_copy(__THE_0_fileName_0));
  str_free((struct str) __THE_0_fileName_0);
}
======= flags =======
======= stdout =======
false
false
false
true
