======= stdin =======
type Alias = u64
main {
  mut a: Alias = 1
  mut b: Alias = 0xFF

  mut ref1 := ref a

  ref1.str()
  ref1 = ref b
  ref1.str()

  v4 := true ? a : ref1
  v5 := false ? ref1 : b
  v6 := false ? ref1 : ref1
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct str u64_str (uint64_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str u64_str (uint64_t d) {
  char buf[512];
  sprintf(buf, "%" PRIu64, d);
  return str_alloc(buf);
}

int main () {
  uint64_t __THE_0_a_0 = 1;
  uint64_t __THE_0_b_0 = 0xFF;
  uint64_t *__THE_0_ref1_0 = &__THE_0_a_0;
  str_free((struct str) u64_str(*__THE_0_ref1_0));
  __THE_0_ref1_0 = &__THE_0_b_0;
  str_free((struct str) u64_str(*__THE_0_ref1_0));
  const uint64_t __THE_0_v4_0 = true ? __THE_0_a_0 : *__THE_0_ref1_0;
  const uint64_t __THE_0_v5_0 = false ? *__THE_0_ref1_0 : __THE_0_b_0;
  const uint64_t *__THE_0_v6_0 = false ? __THE_0_ref1_0 : __THE_0_ref1_0;
}
======= flags =======
======= stdout =======
