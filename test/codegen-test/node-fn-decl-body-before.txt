======= stdin =======
fn test1 () void
fn test2 (a: int, b: int) int

fn test1 () {
  print(1)
}

fn test2 (a: int, b: int) int {
  return a + b + 2
}

main {
  test1()
  print(test2(4, 2))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$0;
struct __THE_1_fn$1;
struct __THE_1_fn$1P;

struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1 {
  int32_t (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  int32_t n0;
  int32_t n1;
};

void print (FILE *, const char *, ...);
void str_free (struct str);
void __THE_1_test1_0 (void *);
int32_t __THE_1_test2_0 (void *, struct __THE_1_fn$1P);

void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}
void __THE_1_test1_0 (void *px) {
  print(stdout, "iz", 1, THE_EOL);
}
int32_t __THE_1_test2_0 (void *px, struct __THE_1_fn$1P p) {
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  return __THE_0_a_0 + __THE_0_b_0 + 2;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test2_0 = (struct __THE_1_fn$1) {&__THE_1_test2_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x);
  print(stdout, "iz", __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {4, 2}), THE_EOL);
}
======= flags =======
======= stdout =======
1
8
