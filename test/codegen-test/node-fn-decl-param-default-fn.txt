======= stdin =======
fn jobA () str {
  return "a"
}

fn jobA2 () str {
  return "a2"
}

fn jobB () str {
  return "b"
}

fn jobC () str {
  return "c"
}

fn test1 (a: () -> str, b := jobB, c := jobC) () -> str {
  fn jobTmp () str {
    return a() + b() + c()
  }

  return jobTmp
}

main{
  test1(jobA)
  test1(jobA, jobB)
  test1(jobA, jobB, jobC)
  test1(jobA, b: jobB)
  test1(jobA, c: jobC)
  test1(jobA, b: jobB, c: jobC)
  test1(jobA, c: jobC, b: jobB)

  mut a := jobA

  fn test2 (a2: () -> str, b := jobB, c := jobC) {
    a = test1(a2, b, c)
  }

  test2(jobA2)
  test2(jobA2, jobB)
  test2(jobA2, jobB, jobC)
  test2(jobA2, b: jobB)
  test2(jobA2, c: jobC)
  test2(jobA2, b: jobB, c: jobC)
  test2(jobA2, c: jobC, b: jobB)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_test1_0X;
struct __THE_1_test1SDjobTmp_0X;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_fn$1000 {
  struct str (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001 {
  struct __THE_1_fn$1000 (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  struct __THE_1_fn$1000 n0;
  unsigned char o1;
  struct __THE_1_fn$1000 n1;
  unsigned char o2;
  struct __THE_1_fn$1000 n2;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$1000 *__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0;
};
struct __THE_1_test1SDjobTmp_0X {
  const struct __THE_1_fn$1000 *__THE_0_c_0;
  const struct __THE_1_fn$1000 *__THE_0_b_0;
  const struct __THE_1_fn$1000 *__THE_0_a_0;
};
struct __THE_1_fn$1002 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  struct __THE_1_fn$1000 n0;
  unsigned char o1;
  struct __THE_1_fn$1000 n1;
  unsigned char o2;
  struct __THE_1_fn$1000 n2;
};
struct __THE_1_mainSDtest2_0X {
  struct __THE_1_fn$1000 *__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
void *xalloc (void *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000, struct __THE_1_fn$1000);
struct str __THE_1_jobA_0 (void *);
struct str __THE_1_jobA2_0 (void *);
struct str __THE_1_jobB_0 (void *);
struct str __THE_1_jobC_0 (void *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
struct __THE_1_fn$1000 __THE_1_test1_0 (void *, void *);
struct str __THE_1_test1SDjobTmp_0 (void *);
void __THE_1_test1SDjobTmp_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_test1SDjobTmp_0X);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_test1_0X);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
void __THE_1_mainSDtest2_0 (void *, void *);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_mainSDtest2_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000 n1, struct __THE_1_fn$1000 n2) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n1);
  return n2;
}
struct str __THE_1_jobA_0 (void *px) {
  return str_alloc("a");
}
struct str __THE_1_jobA2_0 (void *px) {
  return str_alloc("a2");
}
struct str __THE_1_jobB_0 (void *px) {
  return str_alloc("b");
}
struct str __THE_1_jobC_0 (void *px) {
  return str_alloc("c");
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1000 __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_fn$1000 v;
  struct __THE_1_fn$1001P *p = pp;
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  const struct __THE_1_fn$1000 __THE_0_a_0 = p->n0;
  const struct __THE_1_fn$1000 __THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_fn$1000_copy(*__THE_0_jobB_0);
  const struct __THE_1_fn$1000 __THE_0_c_0 = p->o2 == 1 ? p->n2 : __THE_1_fn$1000_copy(*__THE_0_jobC_0);
  const struct __THE_1_fn$1000 __THE_0_test1SDjobTmp_0;
  __THE_1_test1SDjobTmp_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_test1SDjobTmp_0, (struct __THE_1_test1SDjobTmp_0X) {&__THE_0_c_0, &__THE_0_b_0, &__THE_0_a_0});
  v = __THE_1_fn$1000_copy(__THE_0_test1SDjobTmp_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1SDjobTmp_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_c_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_b_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_a_0);
  return v;
}
struct str __THE_1_test1SDjobTmp_0 (void *px) {
  struct __THE_1_test1SDjobTmp_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_c_0 = x->__THE_0_c_0;
  const struct __THE_1_fn$1000 *__THE_0_b_0 = x->__THE_0_b_0;
  const struct __THE_1_fn$1000 *__THE_0_a_0 = x->__THE_0_a_0;
  return str_concat_str(str_concat_str((*__THE_0_a_0).f((*__THE_0_a_0).x), (*__THE_0_b_0).f((*__THE_0_b_0).x)), (*__THE_0_c_0).f((*__THE_0_c_0).x));
}
void __THE_1_test1SDjobTmp_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_test1SDjobTmp_0X x) {
  size_t l = sizeof(struct __THE_1_test1SDjobTmp_0X);
  struct __THE_1_test1SDjobTmp_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1SDjobTmp_0;
  n->x = r;
  n->l = l;
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtest2_0 (void *px, void *pp) {
  struct __THE_1_fn$1002P *p = pp;
  struct __THE_1_mainSDtest2_0X *x = px;
  struct __THE_1_fn$1000 *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  const struct __THE_1_fn$1000 __THE_0_a2_0 = p->n0;
  const struct __THE_1_fn$1000 __THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_fn$1000_copy(*__THE_0_jobB_0);
  const struct __THE_1_fn$1000 __THE_0_c_0 = p->o2 == 1 ? p->n2 : __THE_1_fn$1000_copy(*__THE_0_jobC_0);
  *__THE_0_a_0 = __THE_1_fn$1000_realloc(*__THE_0_a_0, (*__THE_0_test1_0).f((*__THE_0_test1_0).x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_a2_0), 1, __THE_1_fn$1000_copy(__THE_0_b_0), 1, __THE_1_fn$1000_copy(__THE_0_c_0)}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_c_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_b_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_a2_0);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_jobA_0 = (struct __THE_1_fn$1000) {&__THE_1_jobA_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_jobA2_0 = (struct __THE_1_fn$1000) {&__THE_1_jobA2_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_jobB_0 = (struct __THE_1_fn$1000) {&__THE_1_jobB_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_jobC_0 = (struct __THE_1_fn$1000) {&__THE_1_jobC_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_test1_0;
  __THE_1_test1_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_jobC_0, &__THE_0_jobB_0});
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 0, (struct __THE_1_fn$1000) {}, 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 0, (struct __THE_1_fn$1000) {}, 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P))));
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P))));
  struct __THE_1_fn$1000 __THE_0_a_0 = __THE_1_fn$1000_copy(__THE_0_jobA_0);
  const struct __THE_1_fn$1002 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1002 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0, &__THE_0_jobC_0, &__THE_0_jobB_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 0, (struct __THE_1_fn$1000) {}, 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 0, (struct __THE_1_fn$1000) {}, 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)));
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)));
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_mainSDtest2_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_a_0);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
