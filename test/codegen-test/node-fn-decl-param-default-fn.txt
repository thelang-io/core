======= stdin =======
fn jobA () str {
  return "a"
}

fn jobA2 () str {
  return "a2"
}

fn jobB () str {
  return "b"
}

fn jobC () str {
  return "c"
}

fn test1 (a: fn () str, b := jobB, c := jobC) fn () str {
  fn jobTmp () str {
    return a() + b() + c()
  }

  return jobTmp
}

main{
  test1(jobA)
  test1(jobA, jobB)
  test1(jobA, jobB, jobC)
  test1(jobA, b: jobB)
  test1(jobA, c: jobC)
  test1(jobA, b: jobB, c: jobC)
  test1(jobA, c: jobC, b: jobB)

  mut a := jobA

  fn test2 (a2: fn () str, b := jobB, c := jobC) {
    a = test1(a2, b, c)
  }

  test2(jobA2)
  test2(jobA2, jobB)
  test2(jobA2, jobB, jobC)
  test2(jobA2, b: jobB)
  test2(jobA2, c: jobC)
  test2(jobA2, b: jobB, c: jobC)
  test2(jobA2, c: jobC, b: jobB)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;
struct __THE_1_test1_0X;
struct __THE_1_test1SDjobTmp_0X;
struct __THE_1_fn$2P;
struct __THE_1_fn$2;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_fn$0 {
  struct str (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct __THE_1_fn$0 n0;
  unsigned char o1;
  struct __THE_1_fn$0 n1;
  unsigned char o2;
  struct __THE_1_fn$0 n2;
};
struct __THE_1_fn$1 {
  struct __THE_1_fn$0 (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$0 *__THE_0_jobC_0;
  const struct __THE_1_fn$0 *__THE_0_jobB_0;
};
struct __THE_1_test1SDjobTmp_0X {
  const struct __THE_1_fn$0 *__THE_0_c_0;
  const struct __THE_1_fn$0 *__THE_0_b_0;
  const struct __THE_1_fn$0 *__THE_0_a_0;
};
struct __THE_1_fn$2P {
  struct __THE_1_fn$0 n0;
  unsigned char o1;
  struct __THE_1_fn$0 n1;
  unsigned char o2;
  struct __THE_1_fn$0 n2;
};
struct __THE_1_fn$2 {
  void (*f) (void *, struct __THE_1_fn$2P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest2_0X {
  struct __THE_1_fn$0 *__THE_0_a_0;
  const struct __THE_1_fn$1 *__THE_0_test1_0;
  const struct __THE_1_fn$0 *__THE_0_jobC_0;
  const struct __THE_1_fn$0 *__THE_0_jobB_0;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0, struct __THE_1_fn$0);
struct str __THE_1_jobA_0 (void *);
struct str __THE_1_jobA2_0 (void *);
struct str __THE_1_jobB_0 (void *);
struct str __THE_1_jobC_0 (void *);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1 *, struct __THE_1_test1_0X);
void __THE_1_test1SDjobTmp_0_alloc (struct __THE_1_fn$0 *, struct __THE_1_test1SDjobTmp_0X);
struct str __THE_1_test1SDjobTmp_0 (void *);
struct __THE_1_fn$0 __THE_1_test1_0 (void *, struct __THE_1_fn$1P);
void __THE_1_fn$2_free (struct __THE_1_fn$2);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$2 *, struct __THE_1_mainSDtest2_0X);
void __THE_1_mainSDtest2_0 (void *, struct __THE_1_fn$2P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0 n1, struct __THE_1_fn$0 n2) {
  if (n1.x != NULL) free(n1.x);
  return n2;
}
struct str __THE_1_jobA_0 (void *px) {
  return str_alloc("a");
}
struct str __THE_1_jobA2_0 (void *px) {
  return str_alloc("a2");
}
struct str __THE_1_jobB_0 (void *px) {
  return str_alloc("b");
}
struct str __THE_1_jobC_0 (void *px) {
  return str_alloc("c");
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
void __THE_1_test1SDjobTmp_0_alloc (struct __THE_1_fn$0 *n, struct __THE_1_test1SDjobTmp_0X x) {
  size_t l = sizeof(struct __THE_1_test1SDjobTmp_0X);
  struct __THE_1_test1SDjobTmp_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1SDjobTmp_0;
  n->x = r;
  n->l = l;
}
struct str __THE_1_test1SDjobTmp_0 (void *px) {
  struct __THE_1_test1SDjobTmp_0X *x = px;
  const struct __THE_1_fn$0 *__THE_0_c_0 = x->__THE_0_c_0;
  const struct __THE_1_fn$0 *__THE_0_b_0 = x->__THE_0_b_0;
  const struct __THE_1_fn$0 *__THE_0_a_0 = x->__THE_0_a_0;
  return str_concat_str(str_concat_str((*__THE_0_a_0).f((*__THE_0_a_0).x), (*__THE_0_b_0).f((*__THE_0_b_0).x)), (*__THE_0_c_0).f((*__THE_0_c_0).x));
}
struct __THE_1_fn$0 __THE_1_test1_0 (void *px, struct __THE_1_fn$1P p) {
  struct __THE_1_fn$0 v;
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$0 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$0 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  const struct __THE_1_fn$0 __THE_0_a_0 = p.n0;
  const struct __THE_1_fn$0 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_fn$0_copy(*__THE_0_jobB_0);
  const struct __THE_1_fn$0 __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_fn$0_copy(*__THE_0_jobC_0);
  const struct __THE_1_fn$0 __THE_0_test1SDjobTmp_0;
  __THE_1_test1SDjobTmp_0_alloc((struct __THE_1_fn$0 *) &__THE_0_test1SDjobTmp_0, (struct __THE_1_test1SDjobTmp_0X) {&__THE_0_c_0, &__THE_0_b_0, &__THE_0_a_0});
  v = __THE_1_fn$0_copy(__THE_0_test1SDjobTmp_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1SDjobTmp_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_c_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_b_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_a_0);
  return v;
}
void __THE_1_fn$2_free (struct __THE_1_fn$2 n) {
  free(n.x);
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$2 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest2_0 (void *px, struct __THE_1_fn$2P p) {
  struct __THE_1_mainSDtest2_0X *x = px;
  struct __THE_1_fn$0 *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_fn$0 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$0 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  const struct __THE_1_fn$0 __THE_0_a2_0 = p.n0;
  const struct __THE_1_fn$0 __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_fn$0_copy(*__THE_0_jobB_0);
  const struct __THE_1_fn$0 __THE_0_c_0 = p.o2 == 1 ? p.n2 : __THE_1_fn$0_copy(*__THE_0_jobC_0);
  *__THE_0_a_0 = __THE_1_fn$0_realloc(*__THE_0_a_0, (*__THE_0_test1_0).f((*__THE_0_test1_0).x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_a2_0), 1, __THE_1_fn$0_copy(__THE_0_b_0), 1, __THE_1_fn$0_copy(__THE_0_c_0)}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_c_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_b_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_a2_0);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_jobA_0 = (struct __THE_1_fn$0) {&__THE_1_jobA_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_jobA2_0 = (struct __THE_1_fn$0) {&__THE_1_jobA2_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_jobB_0 = (struct __THE_1_fn$0) {&__THE_1_jobB_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_jobC_0 = (struct __THE_1_fn$0) {&__THE_1_jobC_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test1_0;
  __THE_1_test1_0_alloc((struct __THE_1_fn$1 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_jobC_0, &__THE_0_jobB_0});
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 0, (struct __THE_1_fn$0) {}, 0, (struct __THE_1_fn$0) {}}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$0) {}}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 1, __THE_1_fn$0_copy(__THE_0_jobC_0)}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$0) {}}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 0, (struct __THE_1_fn$0) {}, 1, __THE_1_fn$0_copy(__THE_0_jobC_0)}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 1, __THE_1_fn$0_copy(__THE_0_jobC_0)}));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1P) {__THE_1_fn$0_copy(__THE_0_jobA_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 1, __THE_1_fn$0_copy(__THE_0_jobC_0)}));
  struct __THE_1_fn$0 __THE_0_a_0 = __THE_1_fn$0_copy(__THE_0_jobA_0);
  const struct __THE_1_fn$2 __THE_0_mainSDtest2_0;
  __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$2 *) &__THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {&__THE_0_a_0, &__THE_0_test1_0, &__THE_0_jobC_0, &__THE_0_jobB_0});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 0, (struct __THE_1_fn$0) {}, 0, (struct __THE_1_fn$0) {}});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$0) {}});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 1, __THE_1_fn$0_copy(__THE_0_jobC_0)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 0, (struct __THE_1_fn$0) {}});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 0, (struct __THE_1_fn$0) {}, 1, __THE_1_fn$0_copy(__THE_0_jobC_0)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 1, __THE_1_fn$0_copy(__THE_0_jobC_0)});
  __THE_0_mainSDtest2_0.f(__THE_0_mainSDtest2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$0_copy(__THE_0_jobA2_0), 1, __THE_1_fn$0_copy(__THE_0_jobB_0), 1, __THE_1_fn$0_copy(__THE_0_jobC_0)});
  __THE_1_fn$2_free((struct __THE_1_fn$2) __THE_0_mainSDtest2_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_a_0);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
