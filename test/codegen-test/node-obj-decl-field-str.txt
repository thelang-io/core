======= stdin =======
obj Test {
  a: str
}

main {
  test1 := Test{a: "test1"}
  mut test2 := test1
  test2 = Test{a: "test2"}
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_Test_0;

struct __THE_1_Test_0 {
  struct str __THE_0_a;
};

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct str);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *, struct __THE_1_Test_0 *);

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct str __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (const struct __THE_1_Test_0 *o) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = str_copy(o->__THE_0_a);
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  str_free((struct str) o->__THE_0_a);
  free(o);
}
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *o1, struct __THE_1_Test_0 *o2) {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) o1);
  return o2;
}

int main () {
  const struct __THE_1_Test_0 *__THE_0_test1_0 = __THE_1_Test_0_alloc(str_alloc("test1"));
  struct __THE_1_Test_0 *__THE_0_test2_0 = __THE_1_Test_0_copy(__THE_0_test1_0);
  __THE_0_test2_0 = __THE_1_Test_0_realloc(__THE_0_test2_0, __THE_1_Test_0_alloc(str_alloc("test2")));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test2_0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
