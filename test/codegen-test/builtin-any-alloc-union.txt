======= stdin =======
main {
  testUnion1: int | str = 3
  testUnion2: int | str = "test"
  anyUnion1: any = testUnion1
  anyUnion2: any = testUnion2
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 1
#define TYPE_str 2
#define TYPE_union_intUSstrUE 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_intUSstrUE;
struct __THE_1_any_union_intUSstrUE;

struct __THE_1_union_intUSstrUE {
  int t;
  union {
    int32_t v1;
    struct str v2;
  };
};
struct __THE_1_any_union_intUSstrUE {
  struct __THE_1_union_intUSstrUE d;
};

void *alloc (size_t);
void any_free (struct any);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int, ...);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE);
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE);
struct any __THE_1_any_union_intUSstrUE_alloc (struct __THE_1_union_intUSstrUE);
struct any __THE_1_any_union_intUSstrUE_copy (const struct any);
void __THE_1_any_union_intUSstrUE_free (struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int t, ...) {
  struct __THE_1_union_intUSstrUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v1 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v2 = va_arg(args, struct str);
  va_end(args);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE n) {
  struct __THE_1_union_intUSstrUE r = {n.t};
  if (n.t == TYPE_int) r.v1 = n.v1;
  if (n.t == TYPE_str) r.v2 = str_copy(n.v2);
  return r;
}
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v2);
}
struct any __THE_1_any_union_intUSstrUE_alloc (struct __THE_1_union_intUSstrUE d) {
  size_t l = sizeof(struct __THE_1_any_union_intUSstrUE);
  struct __THE_1_any_union_intUSstrUE *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_union_intUSstrUE, r, l, &__THE_1_any_union_intUSstrUE_copy, &__THE_1_any_union_intUSstrUE_free};
}
struct any __THE_1_any_union_intUSstrUE_copy (const struct any n) {
  struct __THE_1_any_union_intUSstrUE *o = n.d;
  struct __THE_1_any_union_intUSstrUE *r = alloc(n.l);
  r->d = __THE_1_union_intUSstrUE_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_union_intUSstrUE_free (struct any _n) {
  struct __THE_1_any_union_intUSstrUE *n = _n.d;
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n->d);
  free(n);
}

int main () {
  const struct __THE_1_union_intUSstrUE __THE_0_testUnion1_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 3);
  const struct __THE_1_union_intUSstrUE __THE_0_testUnion2_0 = __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test"));
  const struct any __THE_0_anyUnion1_0 = __THE_1_any_union_intUSstrUE_alloc(__THE_1_union_intUSstrUE_copy(__THE_0_testUnion1_0));
  const struct any __THE_0_anyUnion2_0 = __THE_1_any_union_intUSstrUE_alloc(__THE_1_union_intUSstrUE_copy(__THE_0_testUnion2_0));
  any_free((struct any) __THE_0_anyUnion2_0);
  any_free((struct any) __THE_0_anyUnion1_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_testUnion2_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_testUnion1_0);
}
======= flags =======
======= stdout =======
