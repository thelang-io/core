======= stdin =======
obj TestObj {
  a: int
}

fn testFn () {}

main {
  testInt := 1
  testOptInt: int? = nil

  ;[true]
  ;[1]
  ;['a']
  ;[3.14]
  ;[testFn]
  ;[TestObj{a: 1}]
  ;[ref testInt]
  ;[ref testOptInt]
  ;["hello"]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;
struct __THE_1_TestObj_0;
struct __THE_1_fn$1000;
struct __THE_1_array_bool;
struct __THE_1_array_int;
struct __THE_1_array_char;
struct __THE_1_array_float;
struct __THE_1_array_fn$1000;
struct __THE_1_array_TestObj;
struct __THE_1_array_ref_int;
struct __THE_1_array_ref_opt_int;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_array_bool {
  bool *d;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_char {
  char *d;
  size_t l;
};
struct __THE_1_array_float {
  double *d;
  size_t l;
};
struct __THE_1_array_fn$1000 {
  struct __THE_1_fn$1000 *d;
  size_t l;
};
struct __THE_1_array_TestObj {
  struct __THE_1_TestObj_0 **d;
  size_t l;
};
struct __THE_1_array_ref_int {
  int32_t **d;
  size_t l;
};
struct __THE_1_array_ref_opt_int {
  int32_t ***d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
void __THE_1_array_str_free (struct __THE_1_array_str);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_testFn_0 (void *);
void __THE_1_opt_int_free (int32_t *);
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t, ...);
void __THE_1_array_bool_free (struct __THE_1_array_bool);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_char __THE_1_array_char_alloc (size_t, ...);
void __THE_1_array_char_free (struct __THE_1_array_char);
struct __THE_1_array_float __THE_1_array_float_alloc (size_t, ...);
void __THE_1_array_float_free (struct __THE_1_array_float);
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_alloc (size_t, ...);
void __THE_1_array_fn$1000_free (struct __THE_1_array_fn$1000);
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t, ...);
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj);
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t, ...);
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int);
struct __THE_1_array_ref_opt_int __THE_1_array_ref_opt_int_alloc (size_t, ...);
void __THE_1_array_ref_opt_int_free (struct __THE_1_array_ref_opt_int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *n) {
  free(n);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_testFn_0 (void *px) {
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_bool) {NULL, 0};
  bool *d = alloc(x * sizeof(bool));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_bool) {d, x};
}
void __THE_1_array_bool_free (struct __THE_1_array_bool n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_char __THE_1_array_char_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_char) {NULL, 0};
  char *d = alloc(x * sizeof(char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_char) {d, x};
}
void __THE_1_array_char_free (struct __THE_1_array_char n) {
  free(n.d);
}
struct __THE_1_array_float __THE_1_array_float_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_float) {NULL, 0};
  double *d = alloc(x * sizeof(double));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_float) {d, x};
}
void __THE_1_array_float_free (struct __THE_1_array_float n) {
  free(n.d);
}
struct __THE_1_array_fn$1000 __THE_1_array_fn$1000_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_fn$1000) {NULL, 0};
  struct __THE_1_fn$1000 *d = alloc(x * sizeof(struct __THE_1_fn$1000));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_fn$1000);
  va_end(args);
  return (struct __THE_1_array_fn$1000) {d, x};
}
void __THE_1_array_fn$1000_free (struct __THE_1_array_fn$1000 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_fn$1000_free((struct __THE_1_fn$1000) n.d[i]);
  free(n.d);
}
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_TestObj) {NULL, 0};
  struct __THE_1_TestObj_0 **d = alloc(x * sizeof(struct __THE_1_TestObj_0 *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_TestObj_0 *);
  va_end(args);
  return (struct __THE_1_array_TestObj) {d, x};
}
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n.d[i]);
  free(n.d);
}
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_ref_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_ref_int) {d, x};
}
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int n) {
  free(n.d);
}
struct __THE_1_array_ref_opt_int __THE_1_array_ref_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_ref_opt_int) {NULL, 0};
  int32_t ***d = alloc(x * sizeof(int32_t **));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t **);
  va_end(args);
  return (struct __THE_1_array_ref_opt_int) {d, x};
}
void __THE_1_array_ref_opt_int_free (struct __THE_1_array_ref_opt_int n) {
  free(n.d);
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_testFn_0 = (struct __THE_1_fn$1000) {&__THE_1_testFn_0, NULL, 0};
  const int32_t __THE_0_testInt_0 = 1;
  const int32_t *__THE_0_testOptInt_0 = NULL;
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_1_array_bool_alloc(1, true));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_alloc(1, 1));
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_1_array_char_alloc(1, 'a'));
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_1_array_float_alloc(1, 3.14));
  __THE_1_array_fn$1000_free((struct __THE_1_array_fn$1000) __THE_1_array_fn$1000_alloc(1, __THE_1_fn$1000_copy(__THE_0_testFn_0)));
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) __THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_alloc(1)));
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) __THE_1_array_ref_int_alloc(1, &__THE_0_testInt_0));
  __THE_1_array_ref_opt_int_free((struct __THE_1_array_ref_opt_int) __THE_1_array_ref_opt_int_alloc(1, &__THE_0_testOptInt_0));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_alloc(1, str_alloc("hello")));
  __THE_1_opt_int_free((int32_t *) __THE_0_testOptInt_0);
}
======= flags =======
======= stdout =======
