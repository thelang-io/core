======= stdin =======
obj TestObj {
  a: int
}

fn testFn () {}

main {
  testArrayInt := [1]
  testBool := true
  testByte: byte = 1
  testChar := 'a'
  testF32: f32 = 3.14
  testF64: f64 = 3.14
  testFloat := 3.14
  testI8: i8 = 1
  testI16: i16 = 1
  testI32: i32 = 1
  testI64: i64 = 1
  testInt := 1
  testObj := TestObj{a: 1}
  testOptInt: int? = nil
  testOptRefInt: (ref int)? = nil
  testRefInt := ref testInt
  testRefOptInt := ref testOptInt
  testStr := "test"
  testU8: u8 = 10
  testU16: u16 = 10
  testU32: u32 = 10
  testU64: u64 = 10

  ;[true]
  ;[1]
  ;['a']
  ;[3.14]
  ;[TestObj{a: 1}]
  ;[ref testInt]
  ;[ref testOptInt]
  ;["hello"]
  ;[testArrayInt]
  ;[testBool]
  ;[testByte]
  ;[testChar]
  ;[testF32]
  ;[testF64]
  ;[testFloat]
  ;[testFn]
  ;[testI8]
  ;[testI16]
  ;[testI32]
  ;[testI64]
  ;[testInt]
  ;[testObj]
  ;[testOptInt]
  ;[testOptRefInt]
  ;[testRefInt]
  ;[testRefOptInt]
  ;[testStr]
  ;[testU8]
  ;[testU16]
  ;[testU32]
  ;[testU64]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_TestObj_0;
struct __THE_1_fn$0;
struct __THE_1_array_int;
struct __THE_1_array_bool;
struct __THE_1_array_char;
struct __THE_1_array_float;
struct __THE_1_array_TestObj;
struct __THE_1_array_ref_int;
struct __THE_1_array_ref_opt_int;
struct __THE_1_array_str;
struct __THE_1_array_array_int;
struct __THE_1_array_byte;
struct __THE_1_array_f32;
struct __THE_1_array_f64;
struct __THE_1_array_fn$0;
struct __THE_1_array_i8;
struct __THE_1_array_i16;
struct __THE_1_array_i32;
struct __THE_1_array_i64;
struct __THE_1_array_opt_int;
struct __THE_1_array_opt_ref_int;
struct __THE_1_array_u8;
struct __THE_1_array_u16;
struct __THE_1_array_u32;
struct __THE_1_array_u64;

struct __THE_1_TestObj_0 {
  int32_t __THE_0_a;
};
struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_bool {
  bool *d;
  size_t l;
};
struct __THE_1_array_char {
  char *d;
  size_t l;
};
struct __THE_1_array_float {
  double *d;
  size_t l;
};
struct __THE_1_array_TestObj {
  struct __THE_1_TestObj_0 **d;
  size_t l;
};
struct __THE_1_array_ref_int {
  int32_t **d;
  size_t l;
};
struct __THE_1_array_ref_opt_int {
  int32_t ***d;
  size_t l;
};
struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_array_array_int {
  struct __THE_1_array_int *d;
  size_t l;
};
struct __THE_1_array_byte {
  unsigned char *d;
  size_t l;
};
struct __THE_1_array_f32 {
  float *d;
  size_t l;
};
struct __THE_1_array_f64 {
  double *d;
  size_t l;
};
struct __THE_1_array_fn$0 {
  struct __THE_1_fn$0 *d;
  size_t l;
};
struct __THE_1_array_i8 {
  int8_t *d;
  size_t l;
};
struct __THE_1_array_i16 {
  int16_t *d;
  size_t l;
};
struct __THE_1_array_i32 {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_i64 {
  int64_t *d;
  size_t l;
};
struct __THE_1_array_opt_int {
  int32_t **d;
  size_t l;
};
struct __THE_1_array_opt_ref_int {
  int32_t ***d;
  size_t l;
};
struct __THE_1_array_u8 {
  uint8_t *d;
  size_t l;
};
struct __THE_1_array_u16 {
  uint16_t *d;
  size_t l;
};
struct __THE_1_array_u32 {
  uint32_t *d;
  size_t l;
};
struct __THE_1_array_u64 {
  uint64_t *d;
  size_t l;
};

struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_testFn_0 (void *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
int32_t **__THE_1_opt_ref_int_copy (const int32_t **);
void __THE_1_opt_ref_int_free (int32_t **);
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t, ...);
void __THE_1_array_bool_free (struct __THE_1_array_bool);
struct __THE_1_array_char __THE_1_array_char_alloc (size_t, ...);
void __THE_1_array_char_free (struct __THE_1_array_char);
struct __THE_1_array_float __THE_1_array_float_alloc (size_t, ...);
void __THE_1_array_float_free (struct __THE_1_array_float);
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t, ...);
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj);
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t, ...);
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int);
struct __THE_1_array_ref_opt_int __THE_1_array_ref_opt_int_alloc (size_t, ...);
void __THE_1_array_ref_opt_int_free (struct __THE_1_array_ref_opt_int);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
void __THE_1_array_str_free (struct __THE_1_array_str);
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t, ...);
void __THE_1_array_array_int_free (struct __THE_1_array_array_int);
struct __THE_1_array_byte __THE_1_array_byte_alloc (size_t, ...);
void __THE_1_array_byte_free (struct __THE_1_array_byte);
struct __THE_1_array_f32 __THE_1_array_f32_alloc (size_t, ...);
void __THE_1_array_f32_free (struct __THE_1_array_f32);
struct __THE_1_array_f64 __THE_1_array_f64_alloc (size_t, ...);
void __THE_1_array_f64_free (struct __THE_1_array_f64);
struct __THE_1_array_fn$0 __THE_1_array_fn$0_alloc (size_t, ...);
void __THE_1_array_fn$0_free (struct __THE_1_array_fn$0);
struct __THE_1_array_i8 __THE_1_array_i8_alloc (size_t, ...);
void __THE_1_array_i8_free (struct __THE_1_array_i8);
struct __THE_1_array_i16 __THE_1_array_i16_alloc (size_t, ...);
void __THE_1_array_i16_free (struct __THE_1_array_i16);
struct __THE_1_array_i32 __THE_1_array_i32_alloc (size_t, ...);
void __THE_1_array_i32_free (struct __THE_1_array_i32);
struct __THE_1_array_i64 __THE_1_array_i64_alloc (size_t, ...);
void __THE_1_array_i64_free (struct __THE_1_array_i64);
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t, ...);
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int);
struct __THE_1_array_opt_ref_int __THE_1_array_opt_ref_int_alloc (size_t, ...);
void __THE_1_array_opt_ref_int_free (struct __THE_1_array_opt_ref_int);
struct __THE_1_array_u8 __THE_1_array_u8_alloc (size_t, ...);
void __THE_1_array_u8_free (struct __THE_1_array_u8);
struct __THE_1_array_u16 __THE_1_array_u16_alloc (size_t, ...);
void __THE_1_array_u16_free (struct __THE_1_array_u16);
struct __THE_1_array_u32 __THE_1_array_u32_alloc (size_t, ...);
void __THE_1_array_u32_free (struct __THE_1_array_u32);
struct __THE_1_array_u64 __THE_1_array_u64_alloc (size_t, ...);
void __THE_1_array_u64_free (struct __THE_1_array_u64);

struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  r->__THE_0_a = __THE_0_a;
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *o) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  r->__THE_0_a = o->__THE_0_a;
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *o) {
  free(o);
}
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_testFn_0 (void *px) {
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
int32_t **__THE_1_opt_ref_int_copy (const int32_t **n) {
  if (n == NULL) return NULL;
  int32_t **r = alloc(sizeof(int32_t *));
  *r = *n;
  return r;
}
void __THE_1_opt_ref_int_free (int32_t **n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_array_bool __THE_1_array_bool_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_bool) {NULL, 0};
  bool *d = alloc(x * sizeof(bool));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_bool) {d, x};
}
void __THE_1_array_bool_free (struct __THE_1_array_bool n) {
  free(n.d);
}
struct __THE_1_array_char __THE_1_array_char_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_char) {NULL, 0};
  char *d = alloc(x * sizeof(char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_char) {d, x};
}
void __THE_1_array_char_free (struct __THE_1_array_char n) {
  free(n.d);
}
struct __THE_1_array_float __THE_1_array_float_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_float) {NULL, 0};
  double *d = alloc(x * sizeof(double));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_float) {d, x};
}
void __THE_1_array_float_free (struct __THE_1_array_float n) {
  free(n.d);
}
struct __THE_1_array_TestObj __THE_1_array_TestObj_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_TestObj) {NULL, 0};
  struct __THE_1_TestObj_0 **d = alloc(x * sizeof(struct __THE_1_TestObj_0 *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_TestObj_0 *);
  va_end(args);
  return (struct __THE_1_array_TestObj) {d, x};
}
void __THE_1_array_TestObj_free (struct __THE_1_array_TestObj n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n.d[i]);
  free(n.d);
}
struct __THE_1_array_ref_int __THE_1_array_ref_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_ref_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_ref_int) {d, x};
}
void __THE_1_array_ref_int_free (struct __THE_1_array_ref_int n) {
  free(n.d);
}
struct __THE_1_array_ref_opt_int __THE_1_array_ref_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_ref_opt_int) {NULL, 0};
  int32_t ***d = alloc(x * sizeof(int32_t **));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t **);
  va_end(args);
  return (struct __THE_1_array_ref_opt_int) {d, x};
}
void __THE_1_array_ref_opt_int_free (struct __THE_1_array_ref_opt_int n) {
  free(n.d);
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_int __THE_1_array_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_int) {NULL, 0};
  struct __THE_1_array_int *d = alloc(x * sizeof(struct __THE_1_array_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_int);
  va_end(args);
  return (struct __THE_1_array_array_int) {d, x};
}
void __THE_1_array_array_int_free (struct __THE_1_array_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_int_free((struct __THE_1_array_int) n.d[i]);
  free(n.d);
}
struct __THE_1_array_byte __THE_1_array_byte_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_byte) {NULL, 0};
  unsigned char *d = alloc(x * sizeof(unsigned char));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_byte) {d, x};
}
void __THE_1_array_byte_free (struct __THE_1_array_byte n) {
  free(n.d);
}
struct __THE_1_array_f32 __THE_1_array_f32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_f32) {NULL, 0};
  float *d = alloc(x * sizeof(float));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_f32) {d, x};
}
void __THE_1_array_f32_free (struct __THE_1_array_f32 n) {
  free(n.d);
}
struct __THE_1_array_f64 __THE_1_array_f64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_f64) {NULL, 0};
  double *d = alloc(x * sizeof(double));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, double);
  va_end(args);
  return (struct __THE_1_array_f64) {d, x};
}
void __THE_1_array_f64_free (struct __THE_1_array_f64 n) {
  free(n.d);
}
struct __THE_1_array_fn$0 __THE_1_array_fn$0_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_fn$0) {NULL, 0};
  struct __THE_1_fn$0 *d = alloc(x * sizeof(struct __THE_1_fn$0));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_fn$0);
  va_end(args);
  return (struct __THE_1_array_fn$0) {d, x};
}
void __THE_1_array_fn$0_free (struct __THE_1_array_fn$0 n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_fn$0_free((struct __THE_1_fn$0) n.d[i]);
  free(n.d);
}
struct __THE_1_array_i8 __THE_1_array_i8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i8) {NULL, 0};
  int8_t *d = alloc(x * sizeof(int8_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_i8) {d, x};
}
void __THE_1_array_i8_free (struct __THE_1_array_i8 n) {
  free(n.d);
}
struct __THE_1_array_i16 __THE_1_array_i16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i16) {NULL, 0};
  int16_t *d = alloc(x * sizeof(int16_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_i16) {d, x};
}
void __THE_1_array_i16_free (struct __THE_1_array_i16 n) {
  free(n.d);
}
struct __THE_1_array_i32 __THE_1_array_i32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i32) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_i32) {d, x};
}
void __THE_1_array_i32_free (struct __THE_1_array_i32 n) {
  free(n.d);
}
struct __THE_1_array_i64 __THE_1_array_i64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_i64) {NULL, 0};
  int64_t *d = alloc(x * sizeof(int64_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int64_t);
  va_end(args);
  return (struct __THE_1_array_i64) {d, x};
}
void __THE_1_array_i64_free (struct __THE_1_array_i64 n) {
  free(n.d);
}
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_opt_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_opt_int) {d, x};
}
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_opt_int_free((int32_t *) n.d[i]);
  free(n.d);
}
struct __THE_1_array_opt_ref_int __THE_1_array_opt_ref_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_opt_ref_int) {NULL, 0};
  int32_t ***d = alloc(x * sizeof(int32_t **));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t **);
  va_end(args);
  return (struct __THE_1_array_opt_ref_int) {d, x};
}
void __THE_1_array_opt_ref_int_free (struct __THE_1_array_opt_ref_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_opt_ref_int_free((int32_t **) n.d[i]);
  free(n.d);
}
struct __THE_1_array_u8 __THE_1_array_u8_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u8) {NULL, 0};
  uint8_t *d = alloc(x * sizeof(uint8_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_u8) {d, x};
}
void __THE_1_array_u8_free (struct __THE_1_array_u8 n) {
  free(n.d);
}
struct __THE_1_array_u16 __THE_1_array_u16_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u16) {NULL, 0};
  uint16_t *d = alloc(x * sizeof(uint16_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int);
  va_end(args);
  return (struct __THE_1_array_u16) {d, x};
}
void __THE_1_array_u16_free (struct __THE_1_array_u16 n) {
  free(n.d);
}
struct __THE_1_array_u32 __THE_1_array_u32_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u32) {NULL, 0};
  uint32_t *d = alloc(x * sizeof(uint32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, uint32_t);
  va_end(args);
  return (struct __THE_1_array_u32) {d, x};
}
void __THE_1_array_u32_free (struct __THE_1_array_u32 n) {
  free(n.d);
}
struct __THE_1_array_u64 __THE_1_array_u64_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_u64) {NULL, 0};
  uint64_t *d = alloc(x * sizeof(uint64_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, uint64_t);
  va_end(args);
  return (struct __THE_1_array_u64) {d, x};
}
void __THE_1_array_u64_free (struct __THE_1_array_u64 n) {
  free(n.d);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_testFn_0 = (struct __THE_1_fn$0) {&__THE_1_testFn_0, NULL, 0};
  const struct __THE_1_array_int __THE_0_testArrayInt_0 = __THE_1_array_int_alloc(1, 1);
  const bool __THE_0_testBool_0 = true;
  const unsigned char __THE_0_testByte_0 = 1;
  const char __THE_0_testChar_0 = 'a';
  const float __THE_0_testF32_0 = 3.14;
  const double __THE_0_testF64_0 = 3.14;
  const double __THE_0_testFloat_0 = 3.14;
  const int8_t __THE_0_testI8_0 = 1;
  const int16_t __THE_0_testI16_0 = 1;
  const int32_t __THE_0_testI32_0 = 1;
  const int64_t __THE_0_testI64_0 = 1;
  const int32_t __THE_0_testInt_0 = 1;
  const struct __THE_1_TestObj_0 *__THE_0_testObj_0 = __THE_1_TestObj_0_alloc(1);
  const int32_t *__THE_0_testOptInt_0 = NULL;
  const int32_t **__THE_0_testOptRefInt_0 = NULL;
  const int32_t *__THE_0_testRefInt_0 = &__THE_0_testInt_0;
  const int32_t **__THE_0_testRefOptInt_0 = &__THE_0_testOptInt_0;
  const struct str __THE_0_testStr_0 = str_alloc("test");
  const uint8_t __THE_0_testU8_0 = 10;
  const uint16_t __THE_0_testU16_0 = 10;
  const uint32_t __THE_0_testU32_0 = 10;
  const uint64_t __THE_0_testU64_0 = 10;
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_1_array_bool_alloc(1, true));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_alloc(1, 1));
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_1_array_char_alloc(1, 'a'));
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_1_array_float_alloc(1, 3.14));
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) __THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_alloc(1)));
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) __THE_1_array_ref_int_alloc(1, &__THE_0_testInt_0));
  __THE_1_array_ref_opt_int_free((struct __THE_1_array_ref_opt_int) __THE_1_array_ref_opt_int_alloc(1, &__THE_0_testOptInt_0));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_alloc(1, str_alloc("hello")));
  __THE_1_array_array_int_free((struct __THE_1_array_array_int) __THE_1_array_array_int_alloc(1, __THE_1_array_int_copy(__THE_0_testArrayInt_0)));
  __THE_1_array_bool_free((struct __THE_1_array_bool) __THE_1_array_bool_alloc(1, __THE_0_testBool_0));
  __THE_1_array_byte_free((struct __THE_1_array_byte) __THE_1_array_byte_alloc(1, __THE_0_testByte_0));
  __THE_1_array_char_free((struct __THE_1_array_char) __THE_1_array_char_alloc(1, __THE_0_testChar_0));
  __THE_1_array_f32_free((struct __THE_1_array_f32) __THE_1_array_f32_alloc(1, __THE_0_testF32_0));
  __THE_1_array_f64_free((struct __THE_1_array_f64) __THE_1_array_f64_alloc(1, __THE_0_testF64_0));
  __THE_1_array_float_free((struct __THE_1_array_float) __THE_1_array_float_alloc(1, __THE_0_testFloat_0));
  __THE_1_array_fn$0_free((struct __THE_1_array_fn$0) __THE_1_array_fn$0_alloc(1, __THE_1_fn$0_copy(__THE_0_testFn_0)));
  __THE_1_array_i8_free((struct __THE_1_array_i8) __THE_1_array_i8_alloc(1, __THE_0_testI8_0));
  __THE_1_array_i16_free((struct __THE_1_array_i16) __THE_1_array_i16_alloc(1, __THE_0_testI16_0));
  __THE_1_array_i32_free((struct __THE_1_array_i32) __THE_1_array_i32_alloc(1, __THE_0_testI32_0));
  __THE_1_array_i64_free((struct __THE_1_array_i64) __THE_1_array_i64_alloc(1, __THE_0_testI64_0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_1_array_int_alloc(1, __THE_0_testInt_0));
  __THE_1_array_TestObj_free((struct __THE_1_array_TestObj) __THE_1_array_TestObj_alloc(1, __THE_1_TestObj_0_copy(__THE_0_testObj_0)));
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) __THE_1_array_opt_int_alloc(1, __THE_1_opt_int_copy(__THE_0_testOptInt_0)));
  __THE_1_array_opt_ref_int_free((struct __THE_1_array_opt_ref_int) __THE_1_array_opt_ref_int_alloc(1, __THE_1_opt_ref_int_copy(__THE_0_testOptRefInt_0)));
  __THE_1_array_ref_int_free((struct __THE_1_array_ref_int) __THE_1_array_ref_int_alloc(1, __THE_0_testRefInt_0));
  __THE_1_array_ref_opt_int_free((struct __THE_1_array_ref_opt_int) __THE_1_array_ref_opt_int_alloc(1, __THE_0_testRefOptInt_0));
  __THE_1_array_str_free((struct __THE_1_array_str) __THE_1_array_str_alloc(1, str_copy(__THE_0_testStr_0)));
  __THE_1_array_u8_free((struct __THE_1_array_u8) __THE_1_array_u8_alloc(1, __THE_0_testU8_0));
  __THE_1_array_u16_free((struct __THE_1_array_u16) __THE_1_array_u16_alloc(1, __THE_0_testU16_0));
  __THE_1_array_u32_free((struct __THE_1_array_u32) __THE_1_array_u32_alloc(1, __THE_0_testU32_0));
  __THE_1_array_u64_free((struct __THE_1_array_u64) __THE_1_array_u64_alloc(1, __THE_0_testU64_0));
  str_free((struct str) __THE_0_testStr_0);
  __THE_1_opt_ref_int_free((int32_t **) __THE_0_testOptRefInt_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_testOptInt_0);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) __THE_0_testObj_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_testArrayInt_0);
}
======= flags =======
======= stdout =======
