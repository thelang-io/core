======= stdin =======
main {
  mut a := "test1"
  mut b := "test2"

  ref a;
  ref b;
  a + ref b;
  ref a + b;
  ref a + ref b;
  true ? a : ref b;
  false ? ref a : b;
  false ? ref a : ref b;
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}

int main () {
  struct str __THE_0_a_0 = str_alloc("test1");
  struct str __THE_0_b_0 = str_alloc("test2");
  &__THE_0_a_0;
  &__THE_0_b_0;
  str_free((struct str) str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  str_free((struct str) str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  str_free((struct str) str_concat_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)));
  str_free((struct str) (true ? str_copy(__THE_0_a_0) : str_copy(__THE_0_b_0)));
  str_free((struct str) (false ? str_copy(__THE_0_a_0) : str_copy(__THE_0_b_0)));
  false ? &__THE_0_a_0 : &__THE_0_b_0;
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
