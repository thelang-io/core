======= stdin =======
main {
  mut v1 := ""

  a01 := true ? "str" : "test1" + v1
  a02 := false ? "str" : "test1" + v1
  a03 := !"str" ? v1 = "test" : v1
  a04 := !!"str" ? v1 = "test" : v1
  a05 := !"str" ? v1 : v1 = "test"
  a06 := !!"str" ? v1 : v1 = "test"
  a07 := true ? !"str" : !""
  a08 := false ? !"str" : !""
  a09 := true ? !!"str" : !!""
  a10 := false ? !!"str" : !!""
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_not (struct str);
struct str str_realloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_not (struct str s) {
  bool r = s.l == 0;
  free(s.d);
  return r;
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}

int main () {
  struct str __THE_0_v1_0 = str_alloc("");
  const struct str __THE_0_a01_0 = true ? str_alloc("str") : cstr_concat_str("test1", str_copy(__THE_0_v1_0));
  const struct str __THE_0_a02_0 = false ? str_alloc("str") : cstr_concat_str("test1", str_copy(__THE_0_v1_0));
  const struct str __THE_0_a03_0 = str_not(str_alloc("str")) ? str_copy(__THE_0_v1_0 = str_realloc(__THE_0_v1_0, str_alloc("test"))) : str_copy(__THE_0_v1_0);
  const struct str __THE_0_a04_0 = !str_not(str_alloc("str")) ? str_copy(__THE_0_v1_0 = str_realloc(__THE_0_v1_0, str_alloc("test"))) : str_copy(__THE_0_v1_0);
  const struct str __THE_0_a05_0 = str_not(str_alloc("str")) ? str_copy(__THE_0_v1_0) : str_copy(__THE_0_v1_0 = str_realloc(__THE_0_v1_0, str_alloc("test")));
  const struct str __THE_0_a06_0 = !str_not(str_alloc("str")) ? str_copy(__THE_0_v1_0) : str_copy(__THE_0_v1_0 = str_realloc(__THE_0_v1_0, str_alloc("test")));
  const bool __THE_0_a07_0 = true ? str_not(str_alloc("str")) : str_not(str_alloc(""));
  const bool __THE_0_a08_0 = false ? str_not(str_alloc("str")) : str_not(str_alloc(""));
  const bool __THE_0_a09_0 = true ? !str_not(str_alloc("str")) : !str_not(str_alloc(""));
  const bool __THE_0_a10_0 = false ? !str_not(str_alloc("str")) : !str_not(str_alloc(""));
  str_free((struct str) __THE_0_a06_0);
  str_free((struct str) __THE_0_a05_0);
  str_free((struct str) __THE_0_a04_0);
  str_free((struct str) __THE_0_a03_0);
  str_free((struct str) __THE_0_a02_0);
  str_free((struct str) __THE_0_a01_0);
  str_free((struct str) __THE_0_v1_0);
}
======= flags =======
======= stdout =======
