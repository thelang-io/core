======= stdin =======
main {
  loop i := ""; i != "aaa"; i += "a" {
  }

  mut a := ""
  loop ; a != "aaa"; a += "a" {
  }

  mut b := ""
  loop ; b != "aaa"; {
    b += "a"
  }

  mut c := ""
  loop {
    if c == "aaa" {
      break
    }

    c += "a"
  }

  loop d := ""; d != "aaa"; {
    d += "a"
  }

  loop e := "";; e += "a" {
    if e == "aaa" {
      break
    }
  }
}
======= code =======
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
void str_free (struct str);
bool str_ne_cstr (struct str, const char *);
struct str str_realloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_cstr (struct str s, const char *c) {
  bool r = s.l != strlen(c) || memcmp(s.d, c, s.l) != 0;
  free(s.d);
  return r;
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}

int main () {
  {
    struct str __THE_0_i_0 = str_alloc("");
    for (; str_ne_cstr(str_copy(__THE_0_i_0), "aaa"); __THE_0_i_0 = str_realloc(__THE_0_i_0, str_concat_cstr(str_copy(__THE_0_i_0), "a"))) {
    }
    str_free((struct str) __THE_0_i_0);
  }
  struct str __THE_0_a_0 = str_alloc("");
  for (; str_ne_cstr(str_copy(__THE_0_a_0), "aaa"); __THE_0_a_0 = str_realloc(__THE_0_a_0, str_concat_cstr(str_copy(__THE_0_a_0), "a"))) {
  }
  struct str __THE_0_b_0 = str_alloc("");
  while (str_ne_cstr(str_copy(__THE_0_b_0), "aaa")) {
    __THE_0_b_0 = str_realloc(__THE_0_b_0, str_concat_cstr(str_copy(__THE_0_b_0), "a"));
  }
  struct str __THE_0_c_0 = str_alloc("");
  while (1) {
    if (str_eq_cstr(str_copy(__THE_0_c_0), "aaa")) {
      break;
    }
    __THE_0_c_0 = str_realloc(__THE_0_c_0, str_concat_cstr(str_copy(__THE_0_c_0), "a"));
  }
  {
    struct str __THE_0_d_0 = str_alloc("");
    for (; str_ne_cstr(str_copy(__THE_0_d_0), "aaa");) {
      __THE_0_d_0 = str_realloc(__THE_0_d_0, str_concat_cstr(str_copy(__THE_0_d_0), "a"));
    }
    str_free((struct str) __THE_0_d_0);
  }
  {
    struct str __THE_0_e_0 = str_alloc("");
    for (;; __THE_0_e_0 = str_realloc(__THE_0_e_0, str_concat_cstr(str_copy(__THE_0_e_0), "a"))) {
      if (str_eq_cstr(str_copy(__THE_0_e_0), "aaa")) {
        break;
      }
    }
    str_free((struct str) __THE_0_e_0);
  }
  str_free((struct str) __THE_0_c_0);
  str_free((struct str) __THE_0_b_0);
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
