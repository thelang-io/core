======= stdin =======
async fn jobA () str {
  return "a"
}

async fn jobA2 () str {
  return "a2"
}

async fn jobB () str {
  return "b"
}

async fn jobC () str {
  return "c"
}

async fn test1 (a: async () -> str, b := jobB, c := jobC) async () -> str {
  async fn jobTmp () str {
    return await a() + await b() + await c()
  }

  return jobTmp
}

main{
  await test1(jobA)
  await test1(jobA, jobB)
  await test1(jobA, jobB, jobC)
  await test1(jobA, b: jobB)
  await test1(jobA, c: jobC)
  await test1(jobA, b: jobB, c: jobC)
  await test1(jobA, c: jobC, b: jobB)

  mut a := jobA

  async fn test2 (a2: async () -> str, b := jobB, c := jobC) {
    a = await test1(a2, b, c)
  }

  await test2(jobA2)
  await test2(jobA2, jobB)
  await test2(jobA2, jobB, jobC)
  await test2(jobA2, b: jobB)
  await test2(jobA2, c: jobC)
  await test2(jobA2, b: jobB, c: jobC)
  await test2(jobA2, c: jobC, b: jobB)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

struct threadpool_cond;
struct threadpool_mutex;
struct threadpool;
struct threadpool_job;
struct threadpool_thread;

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};
typedef struct threadpool_cond {
  #ifdef THE_OS_WINDOWS
    CONDITION_VARIABLE v;
  #else
    pthread_cond_t v;
  #endif
} threadpool_cond_t;
typedef struct threadpool_mutex {
  #ifdef THE_OS_WINDOWS
    CRITICAL_SECTION v;
  #else
    pthread_mutex_t v;
  #endif
} threadpool_mutex_t;
typedef struct threadpool {
  bool active;
  struct threadpool_cond cond1;
  struct threadpool_cond cond2;
  struct threadpool_job *jobs;
  struct threadpool_job *jobs_tail;
  struct threadpool_mutex lock1;
  struct threadpool_mutex lock2;
  struct threadpool_mutex lock3;
  struct threadpool_thread *threads;
  int working_threads;
  int alive_threads;
} threadpool_t;
typedef void (*threadpool_func_t) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
typedef struct threadpool_job {
  struct threadpool_job *parent;
  threadpool_func_t func;
  void *ctx;
  void *params;
  void *ret;
  int step;
  unsigned char init;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  #ifdef THE_OS_WINDOWS
    HANDLE id;
  #else
    pthread_t id;
  #endif
  struct threadpool *tp;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn$1000;
struct __THE_1_jobA_0X;
struct __THE_1_jobA2_0X;
struct __THE_1_jobB_0X;
struct __THE_1_jobC_0X;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_test1_0X;
struct __THE_1_test1SDjobTmp_0X;
struct __THE_1_fn$1003;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_async_mainX;
struct __THE_1_mainSDtest2_0X;

struct __THE_1_fn$1000 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_jobA_0X {
  unsigned char r;
};
struct __THE_1_jobA2_0X {
  unsigned char r;
};
struct __THE_1_jobB_0X {
  unsigned char r;
};
struct __THE_1_jobC_0X {
  unsigned char r;
};
struct __THE_1_fn$1001 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  struct __THE_1_fn$1000 n0;
  unsigned char o1;
  struct __THE_1_fn$1000 n1;
  unsigned char o2;
  struct __THE_1_fn$1000 n2;
};
struct __THE_1_test1_0X {
  const struct __THE_1_fn$1000 *__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0;
  struct __THE_1_fn$1000 __THE_0_test1SDjobTmp_0;
  unsigned char r;
};
struct __THE_1_test1SDjobTmp_0X {
  const struct __THE_1_fn$1000 *__THE_0_c_0;
  const struct __THE_1_fn$1000 *__THE_0_b_0;
  const struct __THE_1_fn$1000 *__THE_0_a_0;
  unsigned char r;
  struct str t1;
  struct str t2;
  struct str t3;
};
struct __THE_1_fn$1003 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  struct __THE_1_fn$1000 n0;
  unsigned char o1;
  struct __THE_1_fn$1000 n1;
  unsigned char o2;
  struct __THE_1_fn$1000 n2;
};
struct __THE_1_async_mainX {
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0;
  const struct __THE_1_fn$1000 *__THE_0_jobA2_0;
  const struct __THE_1_fn$1000 *__THE_0_jobA_0;
  struct __THE_1_fn$1000 __THE_0_a_0;
  struct __THE_1_fn$1002 __THE_0_mainSDtest2_0;
  struct __THE_1_fn$1000 t1;
  struct __THE_1_fn$1000 t2;
  struct __THE_1_fn$1000 t3;
  struct __THE_1_fn$1000 t4;
  struct __THE_1_fn$1000 t5;
  struct __THE_1_fn$1000 t6;
  struct __THE_1_fn$1000 t7;
};
struct __THE_1_mainSDtest2_0X {
  struct __THE_1_fn$1000 *__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0;
  struct __THE_1_fn$1000 t1;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_concat_str (struct str, struct str);
void str_free (struct str);
void threadpool_add (threadpool_t *, threadpool_func_t, void *, void *, void *, threadpool_job_t *);
void threadpool_cond_deinit (threadpool_cond_t *);
void threadpool_cond_init (threadpool_cond_t *);
void threadpool_cond_signal (threadpool_cond_t *);
void threadpool_cond_wait (threadpool_cond_t *, threadpool_mutex_t *);
void threadpool_deinit (threadpool_t *);
threadpool_job_t *threadpool_get (threadpool_t *);
threadpool_t *threadpool_init (int);
void threadpool_insert (threadpool_t *, threadpool_job_t *);
void threadpool_job_deinit (threadpool_job_t *);
void threadpool_mutex_deinit (threadpool_mutex_t *);
void threadpool_mutex_init (threadpool_mutex_t *);
void threadpool_mutex_lock (threadpool_mutex_t *);
void threadpool_mutex_unlock (threadpool_mutex_t *);
void threadpool_thread_deinit (threadpool_thread_t *);
threadpool_thread_t *threadpool_thread_init (threadpool_t *, threadpool_thread_t *);
void threadpool_wait (threadpool_t *);
void *threadpool_worker (void *);
void *xalloc (void *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000, struct __THE_1_fn$1000);
void __THE_1_jobA_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_jobA_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_jobA_0X);
void __THE_1_jobA2_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_jobA2_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_jobA2_0X);
void __THE_1_jobB_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_jobB_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_jobB_0X);
void __THE_1_jobC_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_jobC_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_jobC_0X);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_test1_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_test1SDjobTmp_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_test1SDjobTmp_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_test1SDjobTmp_0X);
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_test1_0X);
void __THE_1_fn$1003_free (struct __THE_1_fn$1003);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
void __THE_1_async_main (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_mainSDtest2_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_mainSDtest2_0X);
void __THE_1_async_main_alloc (struct __THE_1_fn$1003 *, struct __THE_1_async_mainX);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
void threadpool_add (threadpool_t *self, threadpool_func_t func, void *ctx, void *params, void *ret, threadpool_job_t *parent) {
  threadpool_job_t *job = alloc(sizeof(threadpool_job_t));
  job->parent = parent;
  job->func = func;
  job->ctx = ctx;
  job->params = params;
  job->ret = ret;
  job->step = 0;
  job->init = 0;
  job->next = NULL;
  threadpool_insert(self, job);
}
void threadpool_cond_deinit (threadpool_cond_t *self) {
  #ifdef THE_OS_WINDOWS
    (void) &self;
  #else
    pthread_cond_destroy(&self->v);
  #endif
}
void threadpool_cond_init (threadpool_cond_t *self) {
  #ifdef THE_OS_WINDOWS
    InitializeConditionVariable(&self->v);
  #else
    pthread_cond_init(&self->v, NULL);
  #endif
}
void threadpool_cond_signal (threadpool_cond_t *self) {
  #ifdef THE_OS_WINDOWS
    WakeConditionVariable(&self->v);
  #else
    pthread_cond_signal(&self->v);
  #endif
}
void threadpool_cond_wait (threadpool_cond_t *self, threadpool_mutex_t *mutex) {
  #ifdef THE_OS_WINDOWS
    SleepConditionVariableCS(&self->v, &mutex->v, INFINITE);
  #else
    pthread_cond_wait(&self->v, &mutex->v);
  #endif
}
void threadpool_deinit (threadpool_t *self) {
  self->active = false;
  threadpool_mutex_lock(&self->lock1);
  while (self->alive_threads != 0) {
    threadpool_mutex_lock(&self->lock3);
    threadpool_cond_signal(&self->cond2);
    threadpool_mutex_unlock(&self->lock3);
    threadpool_cond_wait(&self->cond1, &self->lock1);
  }
  threadpool_mutex_unlock(&self->lock1);
  while (self->jobs != NULL) {
    threadpool_job_t *next = self->jobs->next;
    threadpool_job_deinit(self->jobs);
    self->jobs = next;
  }
  while (self->threads != NULL) {
    threadpool_thread_t *next = self->threads->next;
    threadpool_thread_deinit(self->threads);
    self->threads = next;
  }
  threadpool_cond_deinit(&self->cond1);
  threadpool_cond_deinit(&self->cond2);
  threadpool_mutex_deinit(&self->lock1);
  threadpool_mutex_deinit(&self->lock2);
  threadpool_mutex_deinit(&self->lock3);
  free(self);
}
threadpool_job_t *threadpool_get (threadpool_t *self) {
  threadpool_mutex_lock(&self->lock2);
  threadpool_job_t *job = self->jobs;
  if (job != NULL) {
    self->jobs = self->jobs->next;
    job->next = NULL;
    if (self->jobs == NULL) {
      self->jobs_tail = NULL;
    } else {
      threadpool_mutex_lock(&self->lock3);
      threadpool_cond_signal(&self->cond2);
      threadpool_mutex_unlock(&self->lock3);
    }
  }
  threadpool_mutex_unlock(&self->lock2);
  return job;
}
threadpool_t *threadpool_init (int count) {
  threadpool_t *self = alloc(sizeof(threadpool_t));
  self->active = true;
  self->jobs = NULL;
  self->jobs_tail = NULL;
  self->working_threads = 0;
  self->alive_threads = 0;
  threadpool_cond_init(&self->cond1);
  threadpool_cond_init(&self->cond2);
  threadpool_mutex_init(&self->lock1);
  threadpool_mutex_init(&self->lock2);
  threadpool_mutex_init(&self->lock3);
  self->threads = NULL;
  for (int i = 0; i < count; i++) self->threads = threadpool_thread_init(self, self->threads);
  threadpool_mutex_lock(&self->lock1);
  while (self->alive_threads != count) threadpool_cond_wait(&self->cond1, &self->lock1);
  threadpool_mutex_unlock(&self->lock1);
  return self;
}
void threadpool_insert (threadpool_t *self, threadpool_job_t *job) {
  threadpool_mutex_lock(&self->lock2);
  if (self->jobs == NULL) {
    self->jobs = job;
    self->jobs_tail = job;
  } else {
    self->jobs_tail->next = job;
    self->jobs_tail = self->jobs_tail->next;
  }
  threadpool_mutex_lock(&self->lock3);
  threadpool_cond_signal(&self->cond2);
  threadpool_mutex_unlock(&self->lock3);
  threadpool_mutex_unlock(&self->lock2);
}
void threadpool_job_deinit (threadpool_job_t *self) {
  if (self->ctx != NULL) free(self->ctx);
  free(self);
}
void threadpool_mutex_deinit (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    DeleteCriticalSection(&self->v);
  #else
    pthread_mutex_destroy(&self->v);
  #endif
}
void threadpool_mutex_init (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    InitializeCriticalSection(&self->v);
  #else
    pthread_mutex_init(&self->v, NULL);
  #endif
}
void threadpool_mutex_lock (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    EnterCriticalSection(&self->v);
  #else
    pthread_mutex_lock(&self->v);
  #endif
}
void threadpool_mutex_unlock (threadpool_mutex_t *self) {
  #ifdef THE_OS_WINDOWS
    LeaveCriticalSection(&self->v);
  #else
    pthread_mutex_unlock(&self->v);
  #endif
}
void threadpool_thread_deinit (threadpool_thread_t *self) {
  #ifdef THE_OS_WINDOWS
    WaitForSingleObject(self->id, INFINITE);
    CloseHandle(self->id);
    MemoryBarrier();
  #else
    pthread_join(self->id, NULL);
  #endif
  free(self);
}
threadpool_thread_t *threadpool_thread_init (threadpool_t *tp, threadpool_thread_t *next) {
  threadpool_thread_t *self = alloc(sizeof(threadpool_thread_t));
  self->tp = tp;
  self->next = next;
  #ifdef THE_OS_WINDOWS
    self->id = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE) threadpool_worker, self, CREATE_SUSPENDED, NULL);
    ResumeThread(self->id);
  #else
    pthread_create(&self->id, NULL, threadpool_worker, self);
  #endif
  return self;
}
void threadpool_wait (threadpool_t *self) {
  threadpool_mutex_lock(&self->lock1);
  while ((self->working_threads != 0 || self->jobs != NULL) && err_state.id == -1) {
    threadpool_cond_wait(&self->cond1, &self->lock1);
  }
  threadpool_mutex_unlock(&self->lock1);
}
void *threadpool_worker (void *n) {
  threadpool_thread_t *thread = n;
  threadpool_t *self = thread->tp;
  threadpool_mutex_lock(&self->lock1);
  self->alive_threads++;
  threadpool_cond_signal(&self->cond1);
  threadpool_mutex_unlock(&self->lock1);
  while (self->active) {
    threadpool_mutex_lock(&self->lock3);
    while (self->active && self->jobs == NULL) threadpool_cond_wait(&self->cond2, &self->lock3);
    threadpool_mutex_unlock(&self->lock3);
    if (!self->active) break;
    threadpool_mutex_lock(&self->lock1);
    self->working_threads++;
    threadpool_mutex_unlock(&self->lock1);
    threadpool_job_t *job = threadpool_get(self);
    if (job != NULL) job->func(self, job, job->ctx, job->params, job->ret, job->step);
    threadpool_mutex_lock(&self->lock1);
    self->working_threads--;
    if ((self->working_threads == 0 && self->jobs == NULL) || err_state.id != -1) threadpool_cond_signal(&self->cond1);
    threadpool_mutex_unlock(&self->lock1);
  }
  threadpool_mutex_lock(&self->lock1);
  self->alive_threads--;
  threadpool_cond_signal(&self->cond1);
  threadpool_mutex_unlock(&self->lock1);
  return NULL;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_realloc (struct __THE_1_fn$1000 n1, struct __THE_1_fn$1000 n2) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n1);
  return n2;
}
void __THE_1_jobA_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct str *v = pv;
  struct __THE_1_jobA_0X *x = px;
  unsigned char *r = &x->r;
  job->init = 1;
  switch (step) {
    case 0: {
      *r = 1;
      struct str _v = str_alloc("a");
      v == NULL ? str_free((struct str) _v) : (*v = _v);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_jobA_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_jobA_0X x) {
  size_t l = sizeof(struct __THE_1_jobA_0X);
  struct __THE_1_jobA_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_jobA_0;
  n->x = r;
  n->l = l;
}
void __THE_1_jobA2_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct str *v = pv;
  struct __THE_1_jobA2_0X *x = px;
  unsigned char *r = &x->r;
  job->init = 1;
  switch (step) {
    case 0: {
      *r = 1;
      struct str _v = str_alloc("a2");
      v == NULL ? str_free((struct str) _v) : (*v = _v);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_jobA2_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_jobA2_0X x) {
  size_t l = sizeof(struct __THE_1_jobA2_0X);
  struct __THE_1_jobA2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_jobA2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_jobB_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct str *v = pv;
  struct __THE_1_jobB_0X *x = px;
  unsigned char *r = &x->r;
  job->init = 1;
  switch (step) {
    case 0: {
      *r = 1;
      struct str _v = str_alloc("b");
      v == NULL ? str_free((struct str) _v) : (*v = _v);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_jobB_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_jobB_0X x) {
  size_t l = sizeof(struct __THE_1_jobB_0X);
  struct __THE_1_jobB_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_jobB_0;
  n->x = r;
  n->l = l;
}
void __THE_1_jobC_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct str *v = pv;
  struct __THE_1_jobC_0X *x = px;
  unsigned char *r = &x->r;
  job->init = 1;
  switch (step) {
    case 0: {
      *r = 1;
      struct str _v = str_alloc("c");
      v == NULL ? str_free((struct str) _v) : (*v = _v);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_jobC_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_jobC_0X x) {
  size_t l = sizeof(struct __THE_1_jobC_0X);
  struct __THE_1_jobC_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_jobC_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test1_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn$1000 *v = pv;
  struct __THE_1_fn$1001P *p = pp;
  struct __THE_1_test1_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  struct __THE_1_fn$1000 *__THE_0_test1SDjobTmp_0 = &x->__THE_0_test1SDjobTmp_0;
  unsigned char *r = &x->r;
  const struct __THE_1_fn$1000 *__THE_0_a_0 = &p->n0;
  if (job->init == 0 && p->o1 != 1) p->n1 = __THE_1_fn$1000_copy(*__THE_0_jobB_0);
  const struct __THE_1_fn$1000 *__THE_0_b_0 = &p->n1;
  if (job->init == 0 && p->o2 != 1) p->n2 = __THE_1_fn$1000_copy(*__THE_0_jobC_0);
  const struct __THE_1_fn$1000 *__THE_0_c_0 = &p->n2;
  job->init = 1;
  switch (step) {
    case 0: {
      __THE_1_test1SDjobTmp_0_alloc((struct __THE_1_fn$1000 *) __THE_0_test1SDjobTmp_0, (struct __THE_1_test1SDjobTmp_0X) {__THE_0_c_0, __THE_0_b_0, __THE_0_a_0});
      *r = 1;
      struct __THE_1_fn$1000 _v = __THE_1_fn$1000_copy(*__THE_0_test1SDjobTmp_0);
      v == NULL ? __THE_1_fn$1000_free((struct __THE_1_fn$1000) _v) : (*v = _v);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_test1SDjobTmp_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_c_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_b_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_a_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
void __THE_1_test1SDjobTmp_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct str *v = pv;
  struct __THE_1_test1SDjobTmp_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_c_0 = x->__THE_0_c_0;
  const struct __THE_1_fn$1000 *__THE_0_b_0 = x->__THE_0_b_0;
  const struct __THE_1_fn$1000 *__THE_0_a_0 = x->__THE_0_a_0;
  unsigned char *r = &x->r;
  struct str *t1 = &x->t1;
  struct str *t2 = &x->t2;
  struct str *t3 = &x->t3;
  job->init = 1;
  switch (step) {
    case 0: {
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_a_0).f, xalloc((*__THE_0_a_0).x, (*__THE_0_a_0).l), NULL, t1, job);
    }
    case 1: {
      job->step = 2;
      return threadpool_add(tp, (*__THE_0_b_0).f, xalloc((*__THE_0_b_0).x, (*__THE_0_b_0).l), NULL, t2, job);
    }
    case 2: {
      job->step = 3;
      return threadpool_add(tp, (*__THE_0_c_0).f, xalloc((*__THE_0_c_0).x, (*__THE_0_c_0).l), NULL, t3, job);
    }
    case 3: {
      *r = 1;
      struct str _v = str_concat_str(str_concat_str(*t1, *t2), *t3);
      v == NULL ? str_free((struct str) _v) : (*v = _v);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_test1SDjobTmp_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_test1SDjobTmp_0X x) {
  size_t l = sizeof(struct __THE_1_test1SDjobTmp_0X);
  struct __THE_1_test1SDjobTmp_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1SDjobTmp_0;
  n->x = r;
  n->l = l;
}
void __THE_1_test1_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_test1_0X x) {
  size_t l = sizeof(struct __THE_1_test1_0X);
  struct __THE_1_test1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test1_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1003_free (struct __THE_1_fn$1003 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_async_main (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_async_mainX *x = px;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  const struct __THE_1_fn$1000 *__THE_0_jobA2_0 = x->__THE_0_jobA2_0;
  const struct __THE_1_fn$1000 *__THE_0_jobA_0 = x->__THE_0_jobA_0;
  struct __THE_1_fn$1000 *__THE_0_a_0 = &x->__THE_0_a_0;
  struct __THE_1_fn$1002 *__THE_0_mainSDtest2_0 = &x->__THE_0_mainSDtest2_0;
  struct __THE_1_fn$1000 *t1 = &x->t1;
  struct __THE_1_fn$1000 *t2 = &x->t2;
  struct __THE_1_fn$1000 *t3 = &x->t3;
  struct __THE_1_fn$1000 *t4 = &x->t4;
  struct __THE_1_fn$1000 *t5 = &x->t5;
  struct __THE_1_fn$1000 *t6 = &x->t6;
  struct __THE_1_fn$1000 *t7 = &x->t7;
  job->init = 1;
  switch (step) {
    case 0: {
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 0, (struct __THE_1_fn$1000) {}, 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1001P)), t1, job);
    }
    case 1: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t1);
      job->step = 2;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1001P)), t2, job);
    }
    case 2: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t2);
      job->step = 3;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P)), t3, job);
    }
    case 3: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t3);
      job->step = 4;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1001P)), t4, job);
    }
    case 4: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t4);
      job->step = 5;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 0, (struct __THE_1_fn$1000) {}, 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P)), t5, job);
    }
    case 5: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t5);
      job->step = 6;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P)), t6, job);
    }
    case 6: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t6);
      job->step = 7;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_jobA_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1001P)), t7, job);
    }
    case 7: {
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *t7);
      *__THE_0_a_0 = __THE_1_fn$1000_copy(*__THE_0_jobA_0);
      __THE_1_mainSDtest2_0_alloc((struct __THE_1_fn$1002 *) __THE_0_mainSDtest2_0, (struct __THE_1_mainSDtest2_0X) {__THE_0_a_0, __THE_0_test1_0, __THE_0_jobC_0, __THE_0_jobB_0});
      job->step = 8;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 0, (struct __THE_1_fn$1000) {}, 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 8: {
      job->step = 9;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 9: {
      job->step = 10;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 10: {
      job->step = 11;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 0, (struct __THE_1_fn$1000) {}}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 11: {
      job->step = 12;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 0, (struct __THE_1_fn$1000) {}, 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 12: {
      job->step = 13;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 13: {
      job->step = 14;
      return threadpool_add(tp, (*__THE_0_mainSDtest2_0).f, xalloc((*__THE_0_mainSDtest2_0).x, (*__THE_0_mainSDtest2_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_1_fn$1000_copy(*__THE_0_jobA2_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobB_0), 1, __THE_1_fn$1000_copy(*__THE_0_jobC_0)}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 14: {
      __THE_1_fn$1002_free((struct __THE_1_fn$1002) *__THE_0_mainSDtest2_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_a_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_mainSDtest2_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn$1002P *p = pp;
  struct __THE_1_mainSDtest2_0X *x = px;
  struct __THE_1_fn$1000 *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct __THE_1_fn$1000 *__THE_0_jobC_0 = x->__THE_0_jobC_0;
  const struct __THE_1_fn$1000 *__THE_0_jobB_0 = x->__THE_0_jobB_0;
  struct __THE_1_fn$1000 *t1 = &x->t1;
  const struct __THE_1_fn$1000 *__THE_0_a2_0 = &p->n0;
  if (job->init == 0 && p->o1 != 1) p->n1 = __THE_1_fn$1000_copy(*__THE_0_jobB_0);
  const struct __THE_1_fn$1000 *__THE_0_b_0 = &p->n1;
  if (job->init == 0 && p->o2 != 1) p->n2 = __THE_1_fn$1000_copy(*__THE_0_jobC_0);
  const struct __THE_1_fn$1000 *__THE_0_c_0 = &p->n2;
  job->init = 1;
  switch (step) {
    case 0: {
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_test1_0).f, xalloc((*__THE_0_test1_0).x, (*__THE_0_test1_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(*__THE_0_a2_0), 1, __THE_1_fn$1000_copy(*__THE_0_b_0), 1, __THE_1_fn$1000_copy(*__THE_0_c_0)}, sizeof(struct __THE_1_fn$1001P)), t1, job);
    }
    case 1: {
      *__THE_0_a_0 = __THE_1_fn$1000_realloc(*__THE_0_a_0, *t1);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_c_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_b_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_a2_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
void __THE_1_mainSDtest2_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_mainSDtest2_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest2_0X);
  struct __THE_1_mainSDtest2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_async_main_alloc (struct __THE_1_fn$1003 *n, struct __THE_1_async_mainX x) {
  size_t l = sizeof(struct __THE_1_async_mainX);
  struct __THE_1_async_mainX *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_async_main;
  n->x = r;
  n->l = l;
}

int main () {
  threadpool_t *tp = threadpool_init(5);
  const struct __THE_1_fn$1000 __THE_0_jobA_0;
  const struct __THE_1_fn$1000 __THE_0_jobA2_0;
  const struct __THE_1_fn$1000 __THE_0_jobB_0;
  const struct __THE_1_fn$1000 __THE_0_jobC_0;
  const struct __THE_1_fn$1001 __THE_0_test1_0;
  __THE_1_jobA_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_jobA_0, (struct __THE_1_jobA_0X) {});
  __THE_1_jobA2_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_jobA2_0, (struct __THE_1_jobA2_0X) {});
  __THE_1_jobB_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_jobB_0, (struct __THE_1_jobB_0X) {});
  __THE_1_jobC_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_jobC_0, (struct __THE_1_jobC_0X) {});
  __THE_1_test1_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_test1_0, (struct __THE_1_test1_0X) {&__THE_0_jobC_0, &__THE_0_jobB_0});
  const struct __THE_1_fn$1003 async_main;
  __THE_1_async_main_alloc((struct __THE_1_fn$1003 *) &async_main, (struct __THE_1_async_mainX) {&__THE_0_test1_0, &__THE_0_jobC_0, &__THE_0_jobB_0, &__THE_0_jobA2_0, &__THE_0_jobA_0});
  threadpool_add(tp, async_main.f, xalloc(async_main.x, async_main.l), NULL, NULL, NULL);
  threadpool_wait(tp);
  threadpool_deinit(tp);
  __THE_1_fn$1003_free((struct __THE_1_fn$1003) async_main);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_test1_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_jobC_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_jobB_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_jobA2_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_jobA_0);
}
======= flags =======
U:-pthread
======= stdout =======
