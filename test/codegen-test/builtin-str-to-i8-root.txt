======= stdin =======
main {
  "0".toI8();
  "1".toI8();
  "10".toI8();
  "100".toI8();
  "127".toI8();
  "-0".toI8();
  "-1".toI8();
  "-10".toI8();
  "-100".toI8();
  "-128".toI8();
  "0000".toI8(2);
  "0001".toI8(2);
  "1010".toI8(2);
  "01100100".toI8(2);
  "01111111".toI8(2);
  "-0000".toI8(2);
  "-0001".toI8(2);
  "-1010".toI8(2);
  "-01100100".toI8(2);
  "-10000000".toI8(2);
  "0".toI8(8);
  "1".toI8(8);
  "12".toI8(8);
  "144".toI8(8);
  "177".toI8(8);
  "-0".toI8(8);
  "-1".toI8(8);
  "-12".toI8(8);
  "-144".toI8(8);
  "-200".toI8(8);
  "0".toI8(10);
  "1".toI8(10);
  "10".toI8(10);
  "100".toI8(10);
  "127".toI8(10);
  "-0".toI8(10);
  "-1".toI8(10);
  "-10".toI8(10);
  "-100".toI8(10);
  "-128".toI8(10);
  "0".toI8(16);
  "1".toI8(16);
  "A".toI8(16);
  "64".toI8(16);
  "7F".toI8(16);
  "-0".toI8(16);
  "-1".toI8(16);
  "-A".toI8(16);
  "-64".toI8(16);
  "-80".toI8(16);
  "0".toI8(36);
  "1".toI8(36);
  "A".toI8(36);
  "2S".toI8(36);
  "3J".toI8(36);
  "-0".toI8(36);
  "-1".toI8(36);
  "-A".toI8(36);
  "-2S".toI8(36);
  "-3K".toI8(36);
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
int8_t str_toI8 (struct str, unsigned char, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
int8_t str_toI8 (struct str self, unsigned char o1, int32_t n1) {
  if (o1 == 1 && (n1 < 2 || n1 > 36) && n1 != 0) {
    fprintf(stderr, "Error: radix %" PRId32 " is invalid, must be >= 2 and <= 36, or 0" THE_EOL, n1);
    exit(EXIT_FAILURE);
  }
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  long r = strtol(c, &e, o1 == 0 ? 10 : n1);
  if (errno == ERANGE || r < INT8_MIN || INT8_MAX < r) {
    fprintf(stderr, "Error: value `%s` out of range" THE_EOL, c);
    exit(EXIT_FAILURE);
  } else if (errno != 0 || e == c || *e != 0) {
    fprintf(stderr, "Error: value `%s` has invalid syntax" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  free(self.d);
  return (int8_t) r;
}

int main () {
  str_toI8(str_alloc("0"), 0, 0);
  str_toI8(str_alloc("1"), 0, 0);
  str_toI8(str_alloc("10"), 0, 0);
  str_toI8(str_alloc("100"), 0, 0);
  str_toI8(str_alloc("127"), 0, 0);
  str_toI8(str_alloc("-0"), 0, 0);
  str_toI8(str_alloc("-1"), 0, 0);
  str_toI8(str_alloc("-10"), 0, 0);
  str_toI8(str_alloc("-100"), 0, 0);
  str_toI8(str_alloc("-128"), 0, 0);
  str_toI8(str_alloc("0000"), 1, 2);
  str_toI8(str_alloc("0001"), 1, 2);
  str_toI8(str_alloc("1010"), 1, 2);
  str_toI8(str_alloc("01100100"), 1, 2);
  str_toI8(str_alloc("01111111"), 1, 2);
  str_toI8(str_alloc("-0000"), 1, 2);
  str_toI8(str_alloc("-0001"), 1, 2);
  str_toI8(str_alloc("-1010"), 1, 2);
  str_toI8(str_alloc("-01100100"), 1, 2);
  str_toI8(str_alloc("-10000000"), 1, 2);
  str_toI8(str_alloc("0"), 1, 8);
  str_toI8(str_alloc("1"), 1, 8);
  str_toI8(str_alloc("12"), 1, 8);
  str_toI8(str_alloc("144"), 1, 8);
  str_toI8(str_alloc("177"), 1, 8);
  str_toI8(str_alloc("-0"), 1, 8);
  str_toI8(str_alloc("-1"), 1, 8);
  str_toI8(str_alloc("-12"), 1, 8);
  str_toI8(str_alloc("-144"), 1, 8);
  str_toI8(str_alloc("-200"), 1, 8);
  str_toI8(str_alloc("0"), 1, 10);
  str_toI8(str_alloc("1"), 1, 10);
  str_toI8(str_alloc("10"), 1, 10);
  str_toI8(str_alloc("100"), 1, 10);
  str_toI8(str_alloc("127"), 1, 10);
  str_toI8(str_alloc("-0"), 1, 10);
  str_toI8(str_alloc("-1"), 1, 10);
  str_toI8(str_alloc("-10"), 1, 10);
  str_toI8(str_alloc("-100"), 1, 10);
  str_toI8(str_alloc("-128"), 1, 10);
  str_toI8(str_alloc("0"), 1, 16);
  str_toI8(str_alloc("1"), 1, 16);
  str_toI8(str_alloc("A"), 1, 16);
  str_toI8(str_alloc("64"), 1, 16);
  str_toI8(str_alloc("7F"), 1, 16);
  str_toI8(str_alloc("-0"), 1, 16);
  str_toI8(str_alloc("-1"), 1, 16);
  str_toI8(str_alloc("-A"), 1, 16);
  str_toI8(str_alloc("-64"), 1, 16);
  str_toI8(str_alloc("-80"), 1, 16);
  str_toI8(str_alloc("0"), 1, 36);
  str_toI8(str_alloc("1"), 1, 36);
  str_toI8(str_alloc("A"), 1, 36);
  str_toI8(str_alloc("2S"), 1, 36);
  str_toI8(str_alloc("3J"), 1, 36);
  str_toI8(str_alloc("-0"), 1, 36);
  str_toI8(str_alloc("-1"), 1, 36);
  str_toI8(str_alloc("-A"), 1, 36);
  str_toI8(str_alloc("-2S"), 1, 36);
  str_toI8(str_alloc("-3K"), 1, 36);
}
======= flags =======
======= stdout =======
