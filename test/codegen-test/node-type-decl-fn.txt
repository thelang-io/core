======= stdin =======
type Callback = () -> void
type Job = (int, int) -> int

fn callback () {
  print("callback called")
}

fn test (cb: Callback) {
  print("before callback")
  cb()
  print("after callback")
}

fn doJob (name: str, a: int, b: int, job: Job) {
  print(a, name, b, "=", job(a, b))
}

fn sum (a: int, b: int) int {
  return a + b
}

fn div (a: int, b: int) int {
  return a / b
}

fn sub (a: int, b: int) int {
  return a - b
}

fn mul (a: int, b: int) int {
  return a * b
}

main {
  print("before test callback")
  test(callback)
  print("after test callback")

  doJob("sum", 1, 3, sum)
  doJob("sub", 3, 1, sub)
  doJob("mul", 2, 2, mul)
  doJob("div", 4, 2, div)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1002;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1001;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1003;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
};
struct __THE_1_fn$1000 {
  void (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int line;
  int col;
  struct __THE_1_fn$1000 n0;
};
struct __THE_1_fn$1002 {
  void (*f) (void *, struct __THE_1_fn$1002P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int line;
  int col;
  int32_t n0;
  int32_t n1;
};
struct __THE_1_fn$1001 {
  int32_t (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1003P {
  int line;
  int col;
  struct str n0;
  int32_t n1;
  int32_t n2;
  struct __THE_1_fn$1001 n3;
};
struct __THE_1_fn$1003 {
  void (*f) (void *, struct __THE_1_fn$1003P);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_callback_0 (void *, struct __THE_1_fn$1000P);
void __THE_1_test_0 (void *, struct __THE_1_fn$1002P);
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_doJob_0 (void *, struct __THE_1_fn$1003P);
int32_t __THE_1_sum_0 (void *, struct __THE_1_fn$1001P);
int32_t __THE_1_div_0 (void *, struct __THE_1_fn$1001P);
int32_t __THE_1_sub_0 (void *, struct __THE_1_fn$1001P);
int32_t __THE_1_mul_0 (void *, struct __THE_1_fn$1001P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); free(s.d); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_callback_0 (void *px, struct __THE_1_fn$1000P p) {
  error_stack_push(&err_state, "/test", "callback", p.line, p.col);
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  print(stdout, "zz", "callback called", THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_test_0 (void *px, struct __THE_1_fn$1002P p) {
  error_stack_push(&err_state, "/test", "test", p.line, p.col);
  const struct __THE_1_fn$1000 __THE_0_cb_0 = p.n0;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  print(stdout, "zz", "before callback", THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  __THE_0_cb_0.f(__THE_0_cb_0.x, (struct __THE_1_fn$1000P) {10, 3});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  print(stdout, "zz", "after callback", THE_EOL);
L2:
  err_state.buf_idx--;
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_cb_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1001) {n.f, x, n.l};
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_doJob_0 (void *px, struct __THE_1_fn$1003P p) {
  error_stack_push(&err_state, "/test", "doJob", p.line, p.col);
  const struct str __THE_0_name_0 = p.n0;
  const int32_t __THE_0_a_0 = p.n1;
  const int32_t __THE_0_b_0 = p.n2;
  const struct __THE_1_fn$1001 __THE_0_job_0 = p.n3;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
  print(stdout, "izszizzziz", __THE_0_a_0, " ", str_copy(__THE_0_name_0), " ", __THE_0_b_0, " ", "=", " ", __THE_0_job_0.f(__THE_0_job_0.x, (struct __THE_1_fn$1001P) {15, 26, __THE_0_a_0, __THE_0_b_0}), THE_EOL);
L3:
  err_state.buf_idx--;
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_job_0);
  str_free((struct str) __THE_0_name_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
int32_t __THE_1_sum_0 (void *px, struct __THE_1_fn$1001P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "sum", p.line, p.col);
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  v = __THE_0_a_0 + __THE_0_b_0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_div_0 (void *px, struct __THE_1_fn$1001P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "div", p.line, p.col);
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  v = __THE_0_a_0 / __THE_0_b_0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_sub_0 (void *px, struct __THE_1_fn$1001P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "sub", p.line, p.col);
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  v = __THE_0_a_0 - __THE_0_b_0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_mul_0 (void *px, struct __THE_1_fn$1001P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "mul", p.line, p.col);
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  v = __THE_0_a_0 * __THE_0_b_0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_callback_0 = (struct __THE_1_fn$1000) {&__THE_1_callback_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_test_0 = (struct __THE_1_fn$1002) {&__THE_1_test_0, NULL, 0};
  const struct __THE_1_fn$1003 __THE_0_doJob_0 = (struct __THE_1_fn$1003) {&__THE_1_doJob_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_sum_0 = (struct __THE_1_fn$1001) {&__THE_1_sum_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_div_0 = (struct __THE_1_fn$1001) {&__THE_1_div_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_sub_0 = (struct __THE_1_fn$1001) {&__THE_1_sub_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_mul_0 = (struct __THE_1_fn$1001) {&__THE_1_mul_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L8;
  print(stdout, "zz", "before test callback", THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  __THE_0_test_0.f(__THE_0_test_0.x, (struct __THE_1_fn$1002P) {36, 3, __THE_1_fn$1000_copy(__THE_0_callback_0)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  print(stdout, "zz", "after test callback", THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  __THE_0_doJob_0.f(__THE_0_doJob_0.x, (struct __THE_1_fn$1003P) {39, 3, str_alloc("sum"), 1, 3, __THE_1_fn$1001_copy(__THE_0_sum_0)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  __THE_0_doJob_0.f(__THE_0_doJob_0.x, (struct __THE_1_fn$1003P) {40, 3, str_alloc("sub"), 3, 1, __THE_1_fn$1001_copy(__THE_0_sub_0)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  __THE_0_doJob_0.f(__THE_0_doJob_0.x, (struct __THE_1_fn$1003P) {41, 3, str_alloc("mul"), 2, 2, __THE_1_fn$1001_copy(__THE_0_mul_0)});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  __THE_0_doJob_0.f(__THE_0_doJob_0.x, (struct __THE_1_fn$1003P) {42, 3, str_alloc("div"), 4, 2, __THE_1_fn$1001_copy(__THE_0_div_0)});
L8:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
before test callback
before callback
callback called
after callback
after test callback
1 sum 3 = 4
3 sub 1 = 2
2 mul 2 = 4
4 div 2 = 2
