======= stdin =======
fn test1 (job: () -> void) {
  job()
}

fn test2 (job: (int) -> int) int {
  return job(1)
}

fn test3 (job: (int, int) -> int) int {
  return job(2, 3)
}

fn job1 () {
}

fn job2 (a: int) int {
  return a + 2
}

fn job3 (a: int, b: int) int {
  return a * b
}

main {
  test1(job1)
  test2(job2)
  test3(job3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1001;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1003;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1005;
struct __THE_1_fn$1004;
struct __THE_1_fn$1004P;
struct __THE_1_fn$1005P;

struct __THE_1_fn$1001 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  struct __THE_1_fn$1000 n0;
};
struct __THE_1_fn$1003 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int32_t n0;
};
struct __THE_1_fn$1003P {
  struct __THE_1_fn$1002 n0;
};
struct __THE_1_fn$1005 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1004 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1004P {
  int32_t n0;
  int32_t n1;
};
struct __THE_1_fn$1005P {
  struct __THE_1_fn$1004 n0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_test1_0 (void *, void *);
struct __THE_1_fn$1002 __THE_1_fn$1002_copy (const struct __THE_1_fn$1002);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
int32_t __THE_1_test2_0 (void *, void *);
struct __THE_1_fn$1004 __THE_1_fn$1004_copy (const struct __THE_1_fn$1004);
void __THE_1_fn$1004_free (struct __THE_1_fn$1004);
int32_t __THE_1_test3_0 (void *, void *);
void __THE_1_job1_0 (void *);
int32_t __THE_1_job2_0 (void *, void *);
int32_t __THE_1_job3_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_fn$1001P *p = pp;
  const struct __THE_1_fn$1000 __THE_0_job_0 = p->n0;
  __THE_0_job_0.f(__THE_0_job_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_job_0);
  free(pp);
}
struct __THE_1_fn$1002 __THE_1_fn$1002_copy (const struct __THE_1_fn$1002 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1002) {n.f, x, n.l};
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test2_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn$1003P *p = pp;
  const struct __THE_1_fn$1002 __THE_0_job_0 = p->n0;
  v = __THE_0_job_0.f(__THE_0_job_0.x, xalloc(&(struct __THE_1_fn$1002P) {1}, sizeof(struct __THE_1_fn$1002P)));
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_job_0);
  return v;
  free(pp);
}
struct __THE_1_fn$1004 __THE_1_fn$1004_copy (const struct __THE_1_fn$1004 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1004) {n.f, x, n.l};
}
void __THE_1_fn$1004_free (struct __THE_1_fn$1004 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test3_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn$1005P *p = pp;
  const struct __THE_1_fn$1004 __THE_0_job_0 = p->n0;
  v = __THE_0_job_0.f(__THE_0_job_0.x, xalloc(&(struct __THE_1_fn$1004P) {2, 3}, sizeof(struct __THE_1_fn$1004P)));
  __THE_1_fn$1004_free((struct __THE_1_fn$1004) __THE_0_job_0);
  return v;
  free(pp);
}
void __THE_1_job1_0 (void *px) {
}
int32_t __THE_1_job2_0 (void *px, void *pp) {
  struct __THE_1_fn$1002P *p = pp;
  const int32_t __THE_0_a_0 = p->n0;
  return __THE_0_a_0 + 2;
  free(pp);
}
int32_t __THE_1_job3_0 (void *px, void *pp) {
  struct __THE_1_fn$1004P *p = pp;
  const int32_t __THE_0_a_0 = p->n0;
  const int32_t __THE_0_b_0 = p->n1;
  return __THE_0_a_0 * __THE_0_b_0;
  free(pp);
}

int main () {
  const struct __THE_1_fn$1001 __THE_0_test1_0 = (struct __THE_1_fn$1001) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1003 __THE_0_test2_0 = (struct __THE_1_fn$1003) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1005 __THE_0_test3_0 = (struct __THE_1_fn$1005) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_job1_0 = (struct __THE_1_fn$1000) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_job2_0 = (struct __THE_1_fn$1002) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn$1004 __THE_0_job3_0 = (struct __THE_1_fn$1004) {&__THE_1_job3_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn$1001P) {__THE_1_fn$1000_copy(__THE_0_job1_0)}, sizeof(struct __THE_1_fn$1001P)));
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1003P) {__THE_1_fn$1002_copy(__THE_0_job2_0)}, sizeof(struct __THE_1_fn$1003P)));
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn$1005P) {__THE_1_fn$1004_copy(__THE_0_job3_0)}, sizeof(struct __THE_1_fn$1005P)));
}
======= flags =======
======= stdout =======
