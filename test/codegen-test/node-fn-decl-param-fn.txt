======= stdin =======
fn test1 (job: fn () void) {
  job()
}

fn test2 (job: fn (int) int) int {
  return job(1)
}

fn test3 (job: fn (int, int) int) int {
  return job(2, 3)
}

fn job1 () {
}

fn job2 (a: int) int {
  return a + 2
}

fn job3 (a: int, b: int) int {
  return a * b
}

main {
  test1(job1)
  test2(job2)
  test3(job3)
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_fn$1;
struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_fn$3P;
struct __THE_1_fn$3;
struct __THE_1_fn$2P;
struct __THE_1_fn$2;
struct __THE_1_fn$5P;
struct __THE_1_fn$5;
struct __THE_1_fn$4P;
struct __THE_1_fn$4;

struct __THE_1_fn$1 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$0P {
  const struct __THE_1_fn$1 n0;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$3P {
  const int32_t n0;
};
struct __THE_1_fn$3 {
  int32_t (*f) (void *, struct __THE_1_fn$3P);
  void *x;
  size_t l;
};
struct __THE_1_fn$2P {
  const struct __THE_1_fn$3 n0;
};
struct __THE_1_fn$2 {
  int32_t (*f) (void *, struct __THE_1_fn$2P);
  void *x;
  size_t l;
};
struct __THE_1_fn$5P {
  const int32_t n0;
  const int32_t n1;
};
struct __THE_1_fn$5 {
  int32_t (*f) (void *, struct __THE_1_fn$5P);
  void *x;
  size_t l;
};
struct __THE_1_fn$4P {
  const struct __THE_1_fn$5 n0;
};
struct __THE_1_fn$4 {
  int32_t (*f) (void *, struct __THE_1_fn$4P);
  void *x;
  size_t l;
};

struct __THE_1_fn$1 __THE_1_fn$1_copy (const struct __THE_1_fn$1);
void __THE_1_fn$1_free (struct __THE_1_fn$1);
void __THE_1_test1_0 (void *, struct __THE_1_fn$0P);
struct __THE_1_fn$3 __THE_1_fn$3_copy (const struct __THE_1_fn$3);
void __THE_1_fn$3_free (struct __THE_1_fn$3);
int32_t __THE_1_test2_0 (void *, struct __THE_1_fn$2P);
struct __THE_1_fn$5 __THE_1_fn$5_copy (const struct __THE_1_fn$5);
void __THE_1_fn$5_free (struct __THE_1_fn$5);
int32_t __THE_1_test3_0 (void *, struct __THE_1_fn$4P);
void __THE_1_job1_0 (void *);
int32_t __THE_1_job2_0 (void *, struct __THE_1_fn$3P);
int32_t __THE_1_job3_0 (void *, struct __THE_1_fn$5P);

struct __THE_1_fn$1 __THE_1_fn$1_copy (const struct __THE_1_fn$1 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1) {n.f, x, n.l};
}
void __THE_1_fn$1_free (struct __THE_1_fn$1 n) {
  free(n.x);
}
void __THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  const struct __THE_1_fn$1 __THE_0_job_0 = p.n0;
  __THE_0_job_0.f(__THE_0_job_0.x);
  __THE_1_fn$1_free((struct __THE_1_fn$1) __THE_0_job_0);
}
struct __THE_1_fn$3 __THE_1_fn$3_copy (const struct __THE_1_fn$3 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$3) {n.f, x, n.l};
}
void __THE_1_fn$3_free (struct __THE_1_fn$3 n) {
  free(n.x);
}
int32_t __THE_1_test2_0 (void *px, struct __THE_1_fn$2P p) {
  int32_t v;
  const struct __THE_1_fn$3 __THE_0_job_0 = p.n0;
  v = __THE_0_job_0.f(__THE_0_job_0.x, (struct __THE_1_fn$3P) {1});
  __THE_1_fn$3_free((struct __THE_1_fn$3) __THE_0_job_0);
  return v;
}
struct __THE_1_fn$5 __THE_1_fn$5_copy (const struct __THE_1_fn$5 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$5) {n.f, x, n.l};
}
void __THE_1_fn$5_free (struct __THE_1_fn$5 n) {
  free(n.x);
}
int32_t __THE_1_test3_0 (void *px, struct __THE_1_fn$4P p) {
  int32_t v;
  const struct __THE_1_fn$5 __THE_0_job_0 = p.n0;
  v = __THE_0_job_0.f(__THE_0_job_0.x, (struct __THE_1_fn$5P) {2, 3});
  __THE_1_fn$5_free((struct __THE_1_fn$5) __THE_0_job_0);
  return v;
}
void __THE_1_job1_0 (void *px) {
}
int32_t __THE_1_job2_0 (void *px, struct __THE_1_fn$3P p) {
  const int32_t __THE_0_a_0 = p.n0;
  return __THE_0_a_0 + 2;
}
int32_t __THE_1_job3_0 (void *px, struct __THE_1_fn$5P p) {
  const int32_t __THE_0_a_0 = p.n0;
  const int32_t __THE_0_b_0 = p.n1;
  return __THE_0_a_0 * __THE_0_b_0;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$2 __THE_0_test2_0 = (struct __THE_1_fn$2) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$4 __THE_0_test3_0 = (struct __THE_1_fn$4) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_job1_0 = (struct __THE_1_fn$1) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$3 __THE_0_job2_0 = (struct __THE_1_fn$3) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn$5 __THE_0_job3_0 = (struct __THE_1_fn$5) {&__THE_1_job3_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_fn$1_copy(__THE_0_job1_0)});
  __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$2P) {__THE_1_fn$3_copy(__THE_0_job2_0)});
  __THE_0_test3_0.f(__THE_0_test3_0.x, (struct __THE_1_fn$4P) {__THE_1_fn$5_copy(__THE_0_job3_0)});
}
======= flags =======
======= stdout =======
