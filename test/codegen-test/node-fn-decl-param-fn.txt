======= stdin =======
fn test1 (job: () -> void) {
  job()
}

fn test2 (job: (int) -> int) int {
  return job(1)
}

fn test3 (job: (int, int) -> int) int {
  return job(2, 3)
}

fn job1 () {
}

fn job2 (a: int) int {
  return a + 2
}

fn job3 (a: int, b: int) int {
  return a * b
}

main {
  test1(job1)
  test2(job2)
  test3(job3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFE;
struct __THE_1_fn_sFRvoidFE;
struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFEP;
struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFE;
struct __THE_1_fn_sFP3intFRintFE;
struct __THE_1_fn_sFP3intFRintFEP;
struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFEP;
struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFE;
struct __THE_1_fn_sFP3intFP3intFRintFE;
struct __THE_1_fn_sFP3intFP3intFRintFEP;
struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFEP;

struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFEP {
  struct __THE_1_fn_sFRvoidFE n0;
};
struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFRintFEP {
  int32_t n0;
};
struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFEP {
  struct __THE_1_fn_sFP3intFRintFE n0;
};
struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFP3intFRintFE {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFP3intFRintFEP {
  int32_t n0;
  int32_t n1;
};
struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFEP {
  struct __THE_1_fn_sFP3intFP3intFRintFE n0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_fn_sFRvoidFE __THE_1_fn_sFRvoidFE_copy (const struct __THE_1_fn_sFRvoidFE);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_test1_0 (void *, void *);
struct __THE_1_fn_sFP3intFRintFE __THE_1_fn_sFP3intFRintFE_copy (const struct __THE_1_fn_sFP3intFRintFE);
void __THE_1_fn_sFP3intFRintFE_free (struct __THE_1_fn_sFP3intFRintFE);
int32_t __THE_1_test2_0 (void *, void *);
struct __THE_1_fn_sFP3intFP3intFRintFE __THE_1_fn_sFP3intFP3intFRintFE_copy (const struct __THE_1_fn_sFP3intFP3intFRintFE);
void __THE_1_fn_sFP3intFP3intFRintFE_free (struct __THE_1_fn_sFP3intFP3intFRintFE);
int32_t __THE_1_test3_0 (void *, void *);
void __THE_1_job1_0 (void *);
int32_t __THE_1_job2_0 (void *, void *);
int32_t __THE_1_job3_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn_sFRvoidFE __THE_1_fn_sFRvoidFE_copy (const struct __THE_1_fn_sFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFEP *p = pp;
  const struct __THE_1_fn_sFRvoidFE __THE_0_job_0 = p->n0;
  __THE_0_job_0.f(__THE_0_job_0.x);
  __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) __THE_0_job_0);
  free(pp);
}
struct __THE_1_fn_sFP3intFRintFE __THE_1_fn_sFP3intFRintFE_copy (const struct __THE_1_fn_sFP3intFRintFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP3intFRintFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP3intFRintFE_free (struct __THE_1_fn_sFP3intFRintFE n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test2_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFEP *p = pp;
  const struct __THE_1_fn_sFP3intFRintFE __THE_0_job_0 = p->n0;
  v = __THE_0_job_0.f(__THE_0_job_0.x, xalloc(&(struct __THE_1_fn_sFP3intFRintFEP) {1}, sizeof(struct __THE_1_fn_sFP3intFRintFEP)));
  __THE_1_fn_sFP3intFRintFE_free((struct __THE_1_fn_sFP3intFRintFE) __THE_0_job_0);
  free(pp);
  return v;
}
struct __THE_1_fn_sFP3intFP3intFRintFE __THE_1_fn_sFP3intFP3intFRintFE_copy (const struct __THE_1_fn_sFP3intFP3intFRintFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP3intFP3intFRintFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP3intFP3intFRintFE_free (struct __THE_1_fn_sFP3intFP3intFRintFE n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test3_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFEP *p = pp;
  const struct __THE_1_fn_sFP3intFP3intFRintFE __THE_0_job_0 = p->n0;
  v = __THE_0_job_0.f(__THE_0_job_0.x, xalloc(&(struct __THE_1_fn_sFP3intFP3intFRintFEP) {2, 3}, sizeof(struct __THE_1_fn_sFP3intFP3intFRintFEP)));
  __THE_1_fn_sFP3intFP3intFRintFE_free((struct __THE_1_fn_sFP3intFP3intFRintFE) __THE_0_job_0);
  free(pp);
  return v;
}
void __THE_1_job1_0 (void *px) {
}
int32_t __THE_1_job2_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP3intFRintFEP *p = pp;
  const int32_t __THE_0_a_0 = p->n0;
  v = __THE_0_a_0 + 2;
  free(pp);
  return v;
}
int32_t __THE_1_job3_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn_sFP3intFP3intFRintFEP *p = pp;
  const int32_t __THE_0_a_0 = p->n0;
  const int32_t __THE_0_b_0 = p->n1;
  v = __THE_0_a_0 * __THE_0_b_0;
  free(pp);
  return v;
}

int main () {
  const struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFE __THE_0_test1_0 = (struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFE) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFE __THE_0_test2_0 = (struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFE) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFE __THE_0_test3_0 = (struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFE) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn_sFRvoidFE __THE_0_job1_0 = (struct __THE_1_fn_sFRvoidFE) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn_sFP3intFRintFE __THE_0_job2_0 = (struct __THE_1_fn_sFP3intFRintFE) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn_sFP3intFP3intFRintFE __THE_0_job3_0 = (struct __THE_1_fn_sFP3intFP3intFRintFE) {&__THE_1_job3_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFEP) {__THE_1_fn_sFRvoidFE_copy(__THE_0_job1_0)}, sizeof(struct __THE_1_fn_sFP3fn_sFRvoidFEFRvoidFEP)));
  __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFEP) {__THE_1_fn_sFP3intFRintFE_copy(__THE_0_job2_0)}, sizeof(struct __THE_1_fn_sFP3fn_sFP3intFRintFEFRintFEP)));
  __THE_0_test3_0.f(__THE_0_test3_0.x, xalloc(&(struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFEP) {__THE_1_fn_sFP3intFP3intFRintFE_copy(__THE_0_job3_0)}, sizeof(struct __THE_1_fn_sFP3fn_sFP3intFP3intFRintFEFRintFEP)));
}
======= flags =======
======= stdout =======
