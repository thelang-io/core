======= stdin =======
fn test (v: int) {
  print(v)
}

main {
  a := 10;
  () -> void {
    test(a)
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn_sFP3intFRvoidFE;
struct __THE_1_fn_sFP3intFRvoidFEP;
struct __THE_1_fn_sFRvoidFE;
struct __THE_1_test_mainSD$_0X;

struct __THE_1_fn_sFP3intFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFRvoidFEP {
  int32_t n0;
};
struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_test_mainSD$_0X {
  const int32_t *__THE_0_a_0;
  const struct __THE_1_fn_sFP3intFRvoidFE *__THE_0_test_test_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
void *xalloc (void *, size_t);
void __THE_1_test_test_0 (void *, void *);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_test_mainSD$_0 (void *);
void __THE_1_test_mainSD$_0_alloc (struct __THE_1_fn_sFRvoidFE *, struct __THE_1_test_mainSD$_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
void __THE_1_test_test_0 (void *px, void *pp) {
  struct __THE_1_fn_sFP3intFRvoidFEP *p = pp;
  const int32_t __THE_0_v_0 = p->n0;
  print(stdout, "iz", __THE_0_v_0, THE_EOL);
  free(pp);
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test_mainSD$_0 (void *px) {
  struct __THE_1_test_mainSD$_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn_sFP3intFRvoidFE *__THE_0_test_test_0 = x->__THE_0_test_test_0;
  (*__THE_0_test_test_0).f((*__THE_0_test_test_0).x, xalloc(&(struct __THE_1_fn_sFP3intFRvoidFEP) {*__THE_0_a_0}, sizeof(struct __THE_1_fn_sFP3intFRvoidFEP)));
}
void __THE_1_test_mainSD$_0_alloc (struct __THE_1_fn_sFRvoidFE *n, struct __THE_1_test_mainSD$_0X x) {
  size_t l = sizeof(struct __THE_1_test_mainSD$_0X);
  struct __THE_1_test_mainSD$_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_mainSD$_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn_sFP3intFRvoidFE __THE_0_test_test_0 = (struct __THE_1_fn_sFP3intFRvoidFE) {&__THE_1_test_test_0, NULL, 0};
  const int32_t __THE_0_a_0 = 10;
  const struct __THE_1_fn_sFRvoidFE __THE_0_test_mainSD$_0;
  __THE_1_test_mainSD$_0_alloc((struct __THE_1_fn_sFRvoidFE *) &__THE_0_test_mainSD$_0, (struct __THE_1_test_mainSD$_0X) {&__THE_0_a_0, &__THE_0_test_test_0});
  __THE_0_test_mainSD$_0;
  __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) __THE_0_test_mainSD$_0);
}
======= flags =======
======= stdout =======
