======= stdin =======
main {
  "".split();
  "t".split();
  "test in test".split();
  "".split("");
  "t".split("");
  "test in test".split("");
  "".split("t");
  "t".split("t");
  "test in test".split("t");
  "".split("test");
  "t".split("test");
  "test in test".split("test");
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct str str_calloc (const char *, size_t);
struct __THE_1_array_str str_split (struct str, unsigned char, struct str);
void __THE_1_array_str_free (struct __THE_1_array_str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_calloc (const char *r, size_t l) {
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct __THE_1_array_str str_split (struct str self, unsigned char o1, struct str n1) {
  struct str *r = NULL;
  size_t l = 0;
  if (self.l > 0 && n1.l == 0) {
    l = self.l;
    r = alloc(l * sizeof(struct str));
    for (size_t i = 0; i < l; i++) {
      r[i] = str_calloc(&self.d[i], 1);
    }
  } else if (n1.l > 0) {
    size_t i = 0;
    for (size_t j = 0; j < self.l; j++) {
      if (memcmp(&self.d[j], n1.d, n1.l) == 0) {
        r = re_alloc(r, ++l * sizeof(struct str));
        r[l - 1] = str_calloc(&self.d[i], j - i);
        j += n1.l;
        i = j;
      }
    }
    r = re_alloc(r, ++l * sizeof(struct str));
    r[l - 1] = str_calloc(&self.d[i], self.l - i);
  }
  free(n1.d);
  free(self.d);
  return (struct __THE_1_array_str) {r, l};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}

int main () {
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc(""), 0, (struct str) {}));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("t"), 0, (struct str) {}));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("test in test"), 0, (struct str) {}));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc(""), 1, str_alloc("")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("t"), 1, str_alloc("")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("test in test"), 1, str_alloc("")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc(""), 1, str_alloc("t")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("t"), 1, str_alloc("t")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("test in test"), 1, str_alloc("t")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc(""), 1, str_alloc("test")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("t"), 1, str_alloc("test")));
  __THE_1_array_str_free((struct __THE_1_array_str) str_split(str_alloc("test in test"), 1, str_alloc("test")));
}
======= flags =======
======= stdout =======
