======= stdin =======
main {
  mut a: any

  fn test (newA: any) {
    a = newA
  }

  test(1)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn_sFP3anyFRvoidFE;
struct __THE_1_fn_sFP3anyFRvoidFEP;
struct __THE_1_test_mainSDtest_0X;
struct __THE_1_any_int;

struct __THE_1_fn_sFP3anyFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3anyFRvoidFEP {
  struct any n0;
};
struct __THE_1_test_mainSDtest_0X {
  struct any *__THE_0_a_0;
};
struct __THE_1_any_int {
  int32_t d;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
void error_alloc (err_state_t *, size_t);
void *xalloc (void *, size_t);
void __THE_1_fn_sFP3anyFRvoidFE_free (struct __THE_1_fn_sFP3anyFRvoidFE);
void __THE_1_test_mainSDtest_0 (void *, void *);
void __THE_1_test_mainSDtest_0_alloc (struct __THE_1_fn_sFP3anyFRvoidFE *, struct __THE_1_test_mainSDtest_0X);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
void __THE_1_fn_sFP3anyFRvoidFE_free (struct __THE_1_fn_sFP3anyFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test_mainSDtest_0 (void *px, void *pp) {
  struct __THE_1_fn_sFP3anyFRvoidFEP *p = pp;
  struct __THE_1_test_mainSDtest_0X *x = px;
  struct any *__THE_0_a_0 = x->__THE_0_a_0;
  const struct any __THE_0_newA_0 = p->n0;
  *__THE_0_a_0 = any_realloc(*__THE_0_a_0, any_copy(__THE_0_newA_0));
  any_free((struct any) __THE_0_newA_0);
  free(pp);
}
void __THE_1_test_mainSDtest_0_alloc (struct __THE_1_fn_sFP3anyFRvoidFE *n, struct __THE_1_test_mainSDtest_0X x) {
  size_t l = sizeof(struct __THE_1_test_mainSDtest_0X);
  struct __THE_1_test_mainSDtest_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test_mainSDtest_0;
  n->x = r;
  n->l = l;
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}

int main () {
  struct any __THE_0_a_0 = {0, NULL, 0, NULL, NULL};
  const struct __THE_1_fn_sFP3anyFRvoidFE __THE_0_test_mainSDtest_0;
  __THE_1_test_mainSDtest_0_alloc((struct __THE_1_fn_sFP3anyFRvoidFE *) &__THE_0_test_mainSDtest_0, (struct __THE_1_test_mainSDtest_0X) {&__THE_0_a_0});
  __THE_0_test_mainSDtest_0.f(__THE_0_test_mainSDtest_0.x, xalloc(&(struct __THE_1_fn_sFP3anyFRvoidFEP) {__THE_1_any_int_alloc(1)}, sizeof(struct __THE_1_fn_sFP3anyFRvoidFEP)));
  __THE_1_fn_sFP3anyFRvoidFE_free((struct __THE_1_fn_sFP3anyFRvoidFE) __THE_0_test_mainSDtest_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
