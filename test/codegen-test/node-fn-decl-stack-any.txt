======= stdin =======
main {
  mut a: any

  fn test (newA: any) {
    a = newA
  }

  test(1)
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_ANY_int 1

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
struct any any_realloc (struct any, struct any);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}

struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_mainSDtest_0X;
struct any_int;

struct __THE_1_fn$0P {
  struct any n0;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest_0X {
  struct any *__THE_0_a_0;
};
struct any_int {
  int32_t d;
};

void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *, struct __THE_1_mainSDtest_0X);
void __THE_1_mainSDtest_0 (void *, struct __THE_1_fn$0P);
struct any any_int_alloc (int32_t);
struct any any_int_copy (const struct any);
void any_int_free (struct any);

void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *n, struct __THE_1_mainSDtest_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest_0X);
  struct __THE_1_mainSDtest_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_mainSDtest_0X *x = px;
  struct any *__THE_0_a_0 = x->__THE_0_a_0;
  const struct any __THE_0_newA_0 = p.n0;
  *__THE_0_a_0 = any_realloc(*__THE_0_a_0, any_copy(__THE_0_newA_0));
  any_free((struct any) __THE_0_newA_0);
}
struct any any_int_alloc (int32_t d) {
  size_t l = sizeof(struct any_int);
  struct any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ANY_int, r, l, &any_int_copy, &any_int_free};
}
struct any any_int_copy (const struct any n) {
  struct any_int *o = n.d;
  struct any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_int_free (struct any _n) {
  struct any_int *n = _n.d;
  free(n);
}

int main () {
  struct any __THE_0_a_0 = {0, NULL, 0, NULL, NULL};
  const struct __THE_1_fn$0 __THE_0_mainSDtest_0;
  __THE_1_mainSDtest_0_alloc((struct __THE_1_fn$0 *) &__THE_0_mainSDtest_0, (struct __THE_1_mainSDtest_0X) {&__THE_0_a_0});
  __THE_0_mainSDtest_0.f(__THE_0_mainSDtest_0.x, (struct __THE_1_fn$0P) {any_int_alloc(1)});
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_mainSDtest_0);
  any_free((struct any) __THE_0_a_0);
}
======= flags =======
======= stdout =======
