======= stdin =======
fn test1 () {}
fn test2 () {}
fn test3 () {}
main {
  a: () -> void = test1
  mut b := a
  b = a
  mut c: () -> void = test2
  c = b = a
  mut d: () -> void = test3
  d = c = b = a
  d = true ? b : a
  d = true ? b = c : a
  d = true ? c : b = a
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_fn$0;

struct __THE_1_fn$0 {
  void (*f) (void *);
  void *x;
  size_t l;
};

void *alloc (size_t);
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0, struct __THE_1_fn$0);
void __THE_1_test1_0 (void *);
void __THE_1_test2_0 (void *);
void __THE_1_test3_0 (void *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_fn$0 __THE_1_fn$0_copy (const struct __THE_1_fn$0 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$0) {n.f, x, n.l};
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
struct __THE_1_fn$0 __THE_1_fn$0_realloc (struct __THE_1_fn$0 n1, struct __THE_1_fn$0 n2) {
  if (n1.x != NULL) free(n1.x);
  return n2;
}
void __THE_1_test1_0 (void *px) {
}
void __THE_1_test2_0 (void *px) {
}
void __THE_1_test3_0 (void *px) {
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_test2_0 = (struct __THE_1_fn$0) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_test3_0 = (struct __THE_1_fn$0) {&__THE_1_test3_0, NULL, 0};
  const struct __THE_1_fn$0 __THE_0_a_0 = __THE_1_fn$0_copy(__THE_0_test1_0);
  struct __THE_1_fn$0 __THE_0_b_0 = __THE_1_fn$0_copy(__THE_0_a_0);
  __THE_0_b_0 = __THE_1_fn$0_realloc(__THE_0_b_0, __THE_1_fn$0_copy(__THE_0_a_0));
  struct __THE_1_fn$0 __THE_0_c_0 = __THE_1_fn$0_copy(__THE_0_test2_0);
  __THE_0_c_0 = __THE_1_fn$0_realloc(__THE_0_c_0, __THE_1_fn$0_copy(__THE_0_b_0 = __THE_1_fn$0_realloc(__THE_0_b_0, __THE_1_fn$0_copy(__THE_0_a_0))));
  struct __THE_1_fn$0 __THE_0_d_0 = __THE_1_fn$0_copy(__THE_0_test3_0);
  __THE_0_d_0 = __THE_1_fn$0_realloc(__THE_0_d_0, __THE_1_fn$0_copy(__THE_0_c_0 = __THE_1_fn$0_realloc(__THE_0_c_0, __THE_1_fn$0_copy(__THE_0_b_0 = __THE_1_fn$0_realloc(__THE_0_b_0, __THE_1_fn$0_copy(__THE_0_a_0))))));
  __THE_0_d_0 = __THE_1_fn$0_realloc(__THE_0_d_0, true ? __THE_1_fn$0_copy(__THE_0_b_0) : __THE_1_fn$0_copy(__THE_0_a_0));
  __THE_0_d_0 = __THE_1_fn$0_realloc(__THE_0_d_0, true ? __THE_1_fn$0_copy(__THE_0_b_0 = __THE_1_fn$0_realloc(__THE_0_b_0, __THE_1_fn$0_copy(__THE_0_c_0))) : __THE_1_fn$0_copy(__THE_0_a_0));
  __THE_0_d_0 = __THE_1_fn$0_realloc(__THE_0_d_0, true ? __THE_1_fn$0_copy(__THE_0_c_0) : (__THE_1_fn$0_copy(__THE_0_b_0 = __THE_1_fn$0_realloc(__THE_0_b_0, __THE_1_fn$0_copy(__THE_0_a_0)))));
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_d_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_c_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_b_0);
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_a_0);
}
======= flags =======
======= stdout =======
