======= stdin =======
main {
  a1 := { "key1": 1, "key2": 2, "key3": 3 };
  a2 := { "key1": 2, "key2": 3, "key3": 4 };
  a1 == { "key1": 1, "key2": 2, "key3": 3 };
  a2 == a1;
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;

struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
bool __THE_1_map_strMSintME_eq (struct __THE_1_map_strMSintME, struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
bool __THE_1_map_strMSintME_eq (struct __THE_1_map_strMSintME n1, struct __THE_1_map_strMSintME n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (str_ne_str(str_copy(n1.d[i].f), str_copy(n2.d[i].f)) || n1.d[i].s != n2.d[i].s) {
        r = false;
        break;
      }
    }
  }
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n1);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n2);
  return r;
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}

int main () {
  const struct __THE_1_map_strMSintME __THE_0_a1_0 = __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3);
  const struct __THE_1_map_strMSintME __THE_0_a2_0 = __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 2, str_alloc("key2"), 3, str_alloc("key3"), 4);
  __THE_1_map_strMSintME_eq(__THE_1_map_strMSintME_copy(__THE_0_a1_0), __THE_1_map_strMSintME_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3));
  __THE_1_map_strMSintME_eq(__THE_1_map_strMSintME_copy(__THE_0_a2_0), __THE_1_map_strMSintME_copy(__THE_0_a1_0));
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_a2_0);
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_a1_0);
}
======= flags =======
======= stdout =======
