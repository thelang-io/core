======= stdin =======
main {
  a := (param1: int) -> void {
    print(param1)
  }
  b := (param1: int, mut param2: str) -> void {
    param2 += " string"
    print(param1, param2)
  }
  c := (param1 := 10, param2: str? = "test") -> void {
    print(param1, param2)
  }
  d := (param1: int, param2: int...) -> void {
    print(param1, param2)
  }

  a(1)
  b(2, "test")
  c(3, nil)
  c(4, "something")
  c()
  d(6)
  d(7, 8)
  d(9, 10, 11)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn_sFP3intFRvoidFE;
struct __THE_1_fn_sFP3intFRvoidFEP;
struct __THE_1_fn_sFP3intFP5strFRvoidFE;
struct __THE_1_fn_sFP3intFP5strFRvoidFEP;
struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE;
struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP;
struct __THE_1_fn_sFP3intFP4array_intFRvoidFE;
struct __THE_1_array_int;
struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP;

struct __THE_1_fn_sFP3intFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFRvoidFEP {
  int32_t n0;
};
struct __THE_1_fn_sFP3intFP5strFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP3intFP5strFRvoidFEP {
  int32_t n0;
  struct str n1;
};
struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP {
  unsigned char o0;
  int32_t n0;
  unsigned char o1;
  struct str *n1;
};
struct __THE_1_fn_sFP3intFP4array_intFRvoidFE {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP {
  int32_t n0;
  struct __THE_1_array_int n1;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
void *xalloc (void *, size_t);
struct __THE_1_fn_sFP3intFRvoidFE __THE_1_fn_sFP3intFRvoidFE_copy (const struct __THE_1_fn_sFP3intFRvoidFE);
void __THE_1_fn_sFP3intFRvoidFE_free (struct __THE_1_fn_sFP3intFRvoidFE);
void __THE_1_mainSD$_0 (void *, void *);
struct __THE_1_fn_sFP3intFP5strFRvoidFE __THE_1_fn_sFP3intFP5strFRvoidFE_copy (const struct __THE_1_fn_sFP3intFP5strFRvoidFE);
void __THE_1_fn_sFP3intFP5strFRvoidFE_free (struct __THE_1_fn_sFP3intFP5strFRvoidFE);
void __THE_1_mainSD$_1 (void *, void *);
struct str *__THE_1_opt_str_alloc (struct str);
struct str *__THE_1_opt_str_copy (const struct str *);
void __THE_1_opt_str_free (struct str *);
struct str __THE_1_opt_str_str (struct str *);
struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE __THE_1_fn_sFP1intFP1opt_strFRvoidFE_copy (const struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE);
void __THE_1_fn_sFP1intFP1opt_strFRvoidFE_free (struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE);
void __THE_1_mainSD$_2 (void *, void *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct str __THE_1_array_int_str (struct __THE_1_array_int);
struct __THE_1_fn_sFP3intFP4array_intFRvoidFE __THE_1_fn_sFP3intFP4array_intFRvoidFE_copy (const struct __THE_1_fn_sFP3intFP4array_intFRvoidFE);
void __THE_1_fn_sFP3intFP4array_intFRvoidFE_free (struct __THE_1_fn_sFP3intFP4array_intFRvoidFE);
void __THE_1_mainSD$_3 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn_sFP3intFRvoidFE __THE_1_fn_sFP3intFRvoidFE_copy (const struct __THE_1_fn_sFP3intFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP3intFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP3intFRvoidFE_free (struct __THE_1_fn_sFP3intFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSD$_0 (void *px, void *pp) {
  struct __THE_1_fn_sFP3intFRvoidFEP *p = pp;
  const int32_t __THE_0_param1_0 = p->n0;
  print(stdout, "iz", __THE_0_param1_0, THE_EOL);
  free(pp);
}
struct __THE_1_fn_sFP3intFP5strFRvoidFE __THE_1_fn_sFP3intFP5strFRvoidFE_copy (const struct __THE_1_fn_sFP3intFP5strFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP3intFP5strFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP3intFP5strFRvoidFE_free (struct __THE_1_fn_sFP3intFP5strFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSD$_1 (void *px, void *pp) {
  struct __THE_1_fn_sFP3intFP5strFRvoidFEP *p = pp;
  const int32_t __THE_0_param1_0 = p->n0;
  struct str __THE_0_param2_0 = p->n1;
  __THE_0_param2_0 = str_realloc(__THE_0_param2_0, str_concat_cstr(str_copy(__THE_0_param2_0), " string"));
  print(stdout, "izsz", __THE_0_param1_0, " ", str_copy(__THE_0_param2_0), THE_EOL);
  str_free((struct str) __THE_0_param2_0);
  free(pp);
}
struct str *__THE_1_opt_str_alloc (struct str n) {
  struct str *r = alloc(sizeof(struct str));
  *r = n;
  return r;
}
struct str *__THE_1_opt_str_copy (const struct str *n) {
  if (n == NULL) return NULL;
  struct str *r = alloc(sizeof(struct str));
  *r = str_copy(*n);
  return r;
}
void __THE_1_opt_str_free (struct str *n) {
  if (n == NULL) return;
  str_free((struct str) *n);
  free(n);
}
struct str __THE_1_opt_str_str (struct str *n) {
  if (n == NULL) return str_alloc("nil");
  struct str r = str_alloc("\"");
  r = str_concat_str(r, str_escape(*n));
  r = str_concat_cstr(r, "\"");
  __THE_1_opt_str_free((struct str *) n);
  return r;
}
struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE __THE_1_fn_sFP1intFP1opt_strFRvoidFE_copy (const struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP1intFP1opt_strFRvoidFE_free (struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSD$_2 (void *px, void *pp) {
  struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP *p = pp;
  const int32_t __THE_0_param1_0 = p->o0 == 1 ? p->n0 : 10;
  const struct str *__THE_0_param2_0 = p->o1 == 1 ? p->n1 : __THE_1_opt_str_alloc(str_alloc("test"));
  print(stdout, "izsz", __THE_0_param1_0, " ", __THE_1_opt_str_str(__THE_1_opt_str_copy(__THE_0_param2_0)), THE_EOL);
  __THE_1_opt_str_free((struct str *) __THE_0_param2_0);
  free(pp);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}
struct __THE_1_fn_sFP3intFP4array_intFRvoidFE __THE_1_fn_sFP3intFP4array_intFRvoidFE_copy (const struct __THE_1_fn_sFP3intFP4array_intFRvoidFE n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn_sFP3intFP4array_intFRvoidFE) {n.f, x, n.l};
}
void __THE_1_fn_sFP3intFP4array_intFRvoidFE_free (struct __THE_1_fn_sFP3intFP4array_intFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSD$_3 (void *px, void *pp) {
  struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP *p = pp;
  const int32_t __THE_0_param1_0 = p->n0;
  const struct __THE_1_array_int __THE_0_param2_0 = p->n1;
  print(stdout, "izsz", __THE_0_param1_0, " ", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_param2_0)), THE_EOL);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_param2_0);
  free(pp);
}

int main () {
  const struct __THE_1_fn_sFP3intFRvoidFE __THE_0_mainSD$_0 = (struct __THE_1_fn_sFP3intFRvoidFE) {&__THE_1_mainSD$_0, NULL, 0};
  const struct __THE_1_fn_sFP3intFRvoidFE __THE_0_a_0 = __THE_1_fn_sFP3intFRvoidFE_copy(__THE_0_mainSD$_0);
  const struct __THE_1_fn_sFP3intFP5strFRvoidFE __THE_0_mainSD$_1 = (struct __THE_1_fn_sFP3intFP5strFRvoidFE) {&__THE_1_mainSD$_1, NULL, 0};
  const struct __THE_1_fn_sFP3intFP5strFRvoidFE __THE_0_b_0 = __THE_1_fn_sFP3intFP5strFRvoidFE_copy(__THE_0_mainSD$_1);
  const struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE __THE_0_mainSD$_2 = (struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE) {&__THE_1_mainSD$_2, NULL, 0};
  const struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE __THE_0_c_0 = __THE_1_fn_sFP1intFP1opt_strFRvoidFE_copy(__THE_0_mainSD$_2);
  const struct __THE_1_fn_sFP3intFP4array_intFRvoidFE __THE_0_mainSD$_3 = (struct __THE_1_fn_sFP3intFP4array_intFRvoidFE) {&__THE_1_mainSD$_3, NULL, 0};
  const struct __THE_1_fn_sFP3intFP4array_intFRvoidFE __THE_0_d_0 = __THE_1_fn_sFP3intFP4array_intFRvoidFE_copy(__THE_0_mainSD$_3);
  __THE_0_a_0.f(__THE_0_a_0.x, xalloc(&(struct __THE_1_fn_sFP3intFRvoidFEP) {1}, sizeof(struct __THE_1_fn_sFP3intFRvoidFEP)));
  __THE_0_b_0.f(__THE_0_b_0.x, xalloc(&(struct __THE_1_fn_sFP3intFP5strFRvoidFEP) {2, str_alloc("test")}, sizeof(struct __THE_1_fn_sFP3intFP5strFRvoidFEP)));
  __THE_0_c_0.f(__THE_0_c_0.x, xalloc(&(struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP) {1, 3, 1, NULL}, sizeof(struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP)));
  __THE_0_c_0.f(__THE_0_c_0.x, xalloc(&(struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP) {1, 4, 1, __THE_1_opt_str_alloc(str_alloc("something"))}, sizeof(struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP)));
  __THE_0_c_0.f(__THE_0_c_0.x, xalloc(&(struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP) {0, 0, 0, NULL}, sizeof(struct __THE_1_fn_sFP1intFP1opt_strFRvoidFEP)));
  __THE_0_d_0.f(__THE_0_d_0.x, xalloc(&(struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP) {6, __THE_1_array_int_alloc(0)}, sizeof(struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP)));
  __THE_0_d_0.f(__THE_0_d_0.x, xalloc(&(struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP) {7, __THE_1_array_int_alloc(1, 8)}, sizeof(struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP)));
  __THE_0_d_0.f(__THE_0_d_0.x, xalloc(&(struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP) {9, __THE_1_array_int_alloc(2, 10, 11)}, sizeof(struct __THE_1_fn_sFP3intFP4array_intFRvoidFEP)));
  __THE_1_fn_sFP3intFP4array_intFRvoidFE_free((struct __THE_1_fn_sFP3intFP4array_intFRvoidFE) __THE_0_d_0);
  __THE_1_fn_sFP1intFP1opt_strFRvoidFE_free((struct __THE_1_fn_sFP1intFP1opt_strFRvoidFE) __THE_0_c_0);
  __THE_1_fn_sFP3intFP5strFRvoidFE_free((struct __THE_1_fn_sFP3intFP5strFRvoidFE) __THE_0_b_0);
  __THE_1_fn_sFP3intFRvoidFE_free((struct __THE_1_fn_sFP3intFRvoidFE) __THE_0_a_0);
}
======= flags =======
======= stdout =======
1
2 test string
3 nil
4 "something"
10 "test"
6 []
7 [8]
9 [10, 11]
