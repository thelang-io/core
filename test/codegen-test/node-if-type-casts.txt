======= stdin =======
obj Test {
  mut a: int?
}

main {
  mut test: int?

  if test == nil { print(1) } else { print(test) }
  if test != nil { print(test) } else { print(2) }
  if nil == test { print(3) } else { print(test) }
  if nil != test { print(test) } else { print(4) }

  if (test = 5) == nil { print(5) } else { test }
  if (test = nil) == nil { print(5) } else { test }
  if (test = 6) != nil { print(test) } else { 6 }
  if (test = nil) != nil { print(test) } else { 6 }
  if nil == (test = nil) { print(7) } else { test }
  if nil == (test = 7) { print(7) } else { test }
  if nil != (test = 8) { print(test) } else { 8 }
  if nil != (test = nil) { print(test) } else { 8 }

  mut test2 := Test{}

  if test2.a == nil { print(1) } else { print(test2.a) }
  if test2.a != nil { print(test2.a) } else { print(2) }
  if nil == test2.a { print(3) } else { print(test2.a) }
  if nil != test2.a { print(test2.a) } else { print(4) }

  if (test2.a = 5) == nil { print(5) } else { print(test2.a) }
  if (test2.a = nil) == nil { print(5) } else { print(test2.a) }
  if (test2.a = nil) != nil { print(test2.a) } else { print(6) }
  if (test2.a = 6) != nil { print(test2.a) } else { print(6) }
  if nil == (test2.a = nil) { print(7) } else { print(test2.a) }
  if nil == (test2.a = 7) { print(7) } else { print(test2.a) }
  if nil != (test2.a = 8) { print(test2.a) } else { print(8) }
  if nil != (test2.a = nil) { print(test2.a) } else { print(8) }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_test_Test_0;

struct __THE_1_test_Test_0 {
  int32_t *__THE_0_a;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_alloc (int32_t *);
void __THE_1_test_Test_0_free (struct __THE_1_test_Test_0 *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}
struct __THE_1_test_Test_0 *__THE_1_test_Test_0_alloc (int32_t *__THE_0_a) {
  struct __THE_1_test_Test_0 *r = alloc(sizeof(struct __THE_1_test_Test_0));
  struct __THE_1_test_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_test_Test_0));
  return r;
}
void __THE_1_test_Test_0_free (struct __THE_1_test_Test_0 *n) {
  __THE_1_opt_int_free((int32_t *) n->__THE_0_a);
  free(n);
}

int main () {
  int32_t *__THE_0_test_0 = NULL;
  if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_test_0), NULL)) {
    print(stdout, "iz", 1, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  }
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_test_0), NULL)) {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  } else {
    print(stdout, "iz", 2, THE_EOL);
  }
  if (__THE_1_opt_int_eq(NULL, __THE_1_opt_int_copy(__THE_0_test_0))) {
    print(stdout, "iz", 3, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  }
  if (__THE_1_opt_int_ne(NULL, __THE_1_opt_int_copy(__THE_0_test_0))) {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  } else {
    print(stdout, "iz", 4, THE_EOL);
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(5)))), NULL)) {
    print(stdout, "iz", 5, THE_EOL);
  } else {
    *__THE_0_test_0;
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))), NULL)) {
    print(stdout, "iz", 5, THE_EOL);
  } else {
    *__THE_0_test_0;
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(6)))), NULL)) {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  } else {
    6;
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))), NULL)) {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  } else {
    6;
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))))) {
    print(stdout, "iz", 7, THE_EOL);
  } else {
    *__THE_0_test_0;
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(7)))))) {
    print(stdout, "iz", 7, THE_EOL);
  } else {
    *__THE_0_test_0;
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(8)))))) {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  } else {
    8;
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))))) {
    print(stdout, "iz", *__THE_0_test_0, THE_EOL);
  } else {
    8;
  }
  struct __THE_1_test_Test_0 *__THE_0_test2_0 = __THE_1_test_Test_0_alloc(NULL);
  if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a), NULL)) {
    print(stdout, "iz", 1, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  }
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a), NULL)) {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  } else {
    print(stdout, "iz", 2, THE_EOL);
  }
  if (__THE_1_opt_int_eq(NULL, __THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a))) {
    print(stdout, "iz", 3, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  }
  if (__THE_1_opt_int_ne(NULL, __THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a))) {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  } else {
    print(stdout, "iz", 4, THE_EOL);
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(5)))), NULL)) {
    print(stdout, "iz", 5, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))), NULL)) {
    print(stdout, "iz", 5, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))), NULL)) {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  } else {
    print(stdout, "iz", 6, THE_EOL);
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(6)))), NULL)) {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  } else {
    print(stdout, "iz", 6, THE_EOL);
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))))) {
    print(stdout, "iz", 7, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(7)))))) {
    print(stdout, "iz", 7, THE_EOL);
  } else {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(8)))))) {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  } else {
    print(stdout, "iz", 8, THE_EOL);
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))))) {
    print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL);
  } else {
    print(stdout, "iz", 8, THE_EOL);
  }
  __THE_1_test_Test_0_free((struct __THE_1_test_Test_0 *) __THE_0_test2_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_test_0);
}
======= flags =======
======= stdout =======
1
2
3
4
5
6
7
8
1
2
3
4
5
5
6
6
7
7
8
8
