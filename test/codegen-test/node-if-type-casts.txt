======= stdin =======
obj Test {
  mut a: int?
}

main {
  mut test: int?

  if test == nil { print(1) } else { print(test) }
  if test != nil { print(test) } else { print(2) }
  if nil == test { print(3) } else { print(test) }
  if nil != test { print(test) } else { print(4) }

  if (test = 5) == nil { print(5) } else { test }
  if (test = nil) == nil { print(5) } else { test }
  if (test = 6) != nil { print(test) } else { 6 }
  if (test = nil) != nil { print(test) } else { 6 }
  if nil == (test = nil) { print(7) } else { test }
  if nil == (test = 7) { print(7) } else { test }
  if nil != (test = 8) { print(test) } else { 8 }
  if nil != (test = nil) { print(test) } else { 8 }

  mut test2 := Test{}

  if test2.a == nil { print(1) } else { print(test2.a) }
  if test2.a != nil { print(test2.a) } else { print(2) }
  if nil == test2.a { print(3) } else { print(test2.a) }
  if nil != test2.a { print(test2.a) } else { print(4) }

  if (test2.a = 5) == nil { print(5) } else { print(test2.a) }
  if (test2.a = nil) == nil { print(5) } else { print(test2.a) }
  if (test2.a = nil) != nil { print(test2.a) } else { print(6) }
  if (test2.a = 6) != nil { print(test2.a) } else { print(6) }
  if nil == (test2.a = nil) { print(7) } else { print(test2.a) }
  if nil == (test2.a = 7) { print(7) } else { print(test2.a) }
  if nil != (test2.a = 8) { print(test2.a) } else { print(8) }
  if nil != (test2.a = nil) { print(test2.a) } else { print(8) }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Test_0;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Test_0 {
  int32_t *__THE_0_a;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void print (FILE *, const char *, ...);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t *__THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  __THE_1_opt_int_free((int32_t *) n->__THE_0_a);
  free(n);
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  int32_t *__THE_0_test_0 = NULL;
  if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_test_0), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
    (error_stack_pos(&err_state, 8, 20), print(stdout, "iz", 1, THE_EOL));
L3:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
    (error_stack_pos(&err_state, 8, 38), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L4:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_test_0), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
    (error_stack_pos(&err_state, 9, 20), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L5:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L6;
    (error_stack_pos(&err_state, 9, 41), print(stdout, "iz", 2, THE_EOL));
L6:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_eq(NULL, __THE_1_opt_int_copy(__THE_0_test_0))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L7;
    (error_stack_pos(&err_state, 10, 20), print(stdout, "iz", 3, THE_EOL));
L7:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L8;
    (error_stack_pos(&err_state, 10, 38), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L8:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_ne(NULL, __THE_1_opt_int_copy(__THE_0_test_0))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L9;
    (error_stack_pos(&err_state, 11, 20), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L9:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L10;
    (error_stack_pos(&err_state, 11, 41), print(stdout, "iz", 4, THE_EOL));
L10:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(5)))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L11;
    (error_stack_pos(&err_state, 13, 26), print(stdout, "iz", 5, THE_EOL));
L11:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L12;
    *__THE_0_test_0;
L12:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L13;
    (error_stack_pos(&err_state, 14, 28), print(stdout, "iz", 5, THE_EOL));
L13:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L14;
    *__THE_0_test_0;
L14:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(6)))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L15;
    (error_stack_pos(&err_state, 15, 26), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L15:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L16;
    6;
L16:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L17;
    (error_stack_pos(&err_state, 16, 28), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L17:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L18;
    6;
L18:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L19;
    (error_stack_pos(&err_state, 17, 28), print(stdout, "iz", 7, THE_EOL));
L19:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L20;
    *__THE_0_test_0;
L20:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(7)))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L21;
    (error_stack_pos(&err_state, 18, 26), print(stdout, "iz", 7, THE_EOL));
L21:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L22;
    *__THE_0_test_0;
L22:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(8)))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L23;
    (error_stack_pos(&err_state, 19, 26), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L23:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L24;
    8;
L24:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L25;
    (error_stack_pos(&err_state, 20, 28), print(stdout, "iz", *__THE_0_test_0, THE_EOL));
L25:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L26;
    8;
L26:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L2;
  }
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L2;
  struct __THE_1_Test_0 *__THE_0_test2_0 = __THE_1_Test_0_alloc(NULL);
  if (__THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L28;
    (error_stack_pos(&err_state, 24, 23), print(stdout, "iz", 1, THE_EOL));
L28:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L29;
    (error_stack_pos(&err_state, 24, 41), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L29:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L30;
    (error_stack_pos(&err_state, 25, 23), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L30:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L31;
    (error_stack_pos(&err_state, 25, 47), print(stdout, "iz", 2, THE_EOL));
L31:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_eq(NULL, __THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L32;
    (error_stack_pos(&err_state, 26, 23), print(stdout, "iz", 3, THE_EOL));
L32:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L33;
    (error_stack_pos(&err_state, 26, 41), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L33:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_ne(NULL, __THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L34;
    (error_stack_pos(&err_state, 27, 23), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L34:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L35;
    (error_stack_pos(&err_state, 27, 47), print(stdout, "iz", 4, THE_EOL));
L35:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(5)))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L36;
    (error_stack_pos(&err_state, 29, 29), print(stdout, "iz", 5, THE_EOL));
L36:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L37;
    (error_stack_pos(&err_state, 29, 47), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L37:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L38;
    (error_stack_pos(&err_state, 30, 31), print(stdout, "iz", 5, THE_EOL));
L38:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L39;
    (error_stack_pos(&err_state, 30, 49), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L39:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L40;
    (error_stack_pos(&err_state, 31, 31), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L40:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L41;
    (error_stack_pos(&err_state, 31, 55), print(stdout, "iz", 6, THE_EOL));
L41:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(6)))), NULL)) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L42;
    (error_stack_pos(&err_state, 32, 29), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L42:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L43;
    (error_stack_pos(&err_state, 32, 53), print(stdout, "iz", 6, THE_EOL));
L43:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L44;
    (error_stack_pos(&err_state, 33, 31), print(stdout, "iz", 7, THE_EOL));
L44:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L45;
    (error_stack_pos(&err_state, 33, 49), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L45:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(7)))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L46;
    (error_stack_pos(&err_state, 34, 29), print(stdout, "iz", 7, THE_EOL));
L46:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L47;
    (error_stack_pos(&err_state, 34, 47), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L47:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(8)))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L48;
    (error_stack_pos(&err_state, 35, 29), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L48:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L49;
    (error_stack_pos(&err_state, 35, 53), print(stdout, "iz", 8, THE_EOL));
L49:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
  if (__THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))))) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L50;
    (error_stack_pos(&err_state, 36, 31), print(stdout, "iz", *__THE_0_test2_0->__THE_0_a, THE_EOL));
L50:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  } else {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L51;
    (error_stack_pos(&err_state, 36, 55), print(stdout, "iz", 8, THE_EOL));
L51:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L27;
  }
L27:
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test2_0);
L2:
  __THE_1_opt_int_free((int32_t *) __THE_0_test_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
1
2
3
4
5
6
7
8
1
2
3
4
5
5
6
6
7
7
8
8
