======= stdin =======
fn test1 (mut a: int[]) int[] {
  a.push(2)
  return a
}
fn test2 (mut a: int[], mut b := [4, 5, 6]) int[] {
  b = a
  a.push(b.len)
  return a
}
main {
  test1([0, 1])
  test2([2, 3])
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_array_int;
struct __THE_1_fn_sFP5array_intFRarray_intFE;
struct __THE_1_fn_sFP5array_intFRarray_intFEP;
struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFE;
struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFEP;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn_sFP5array_intFRarray_intFE {
  struct __THE_1_array_int (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5array_intFRarray_intFEP {
  struct __THE_1_array_int n0;
};
struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFE {
  struct __THE_1_array_int (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFEP {
  struct __THE_1_array_int n0;
  unsigned char o1;
  struct __THE_1_array_int n1;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void *re_alloc (void *, size_t);
void *xalloc (void *, size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_test1_0 (void *, void *);
struct __THE_1_array_int __THE_1_test2_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, struct __THE_1_array_int m) {
  if (m.l == 0) return;
  n->l += m.l;
  n->d = re_alloc(n->d, n->l * sizeof(int32_t));
  size_t k = 0;
  for (size_t i = n->l - m.l; i < n->l; i++) n->d[i] = m.d[k++];
  free(m.d);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}
struct __THE_1_array_int __THE_1_test1_0 (void *px, void *pp) {
  struct __THE_1_array_int v;
  struct __THE_1_fn_sFP5array_intFRarray_intFEP *p = pp;
  struct __THE_1_array_int __THE_0_a_0 = p->n0;
  __THE_1_array_int_push(&__THE_0_a_0, __THE_1_array_int_alloc(1, 2));
  v = __THE_1_array_int_copy(__THE_0_a_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  free(pp);
  return v;
}
struct __THE_1_array_int __THE_1_test2_0 (void *px, void *pp) {
  struct __THE_1_array_int v;
  struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFEP *p = pp;
  struct __THE_1_array_int __THE_0_a_0 = p->n0;
  struct __THE_1_array_int __THE_0_b_0 = p->o1 == 1 ? p->n1 : __THE_1_array_int_alloc(3, 4, 5, 6);
  __THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_copy(__THE_0_a_0));
  __THE_1_array_int_push(&__THE_0_a_0, __THE_1_array_int_alloc(1, __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0))));
  v = __THE_1_array_int_copy(__THE_0_a_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  free(pp);
  return v;
}

int main () {
  const struct __THE_1_fn_sFP5array_intFRarray_intFE __THE_0_test1_0 = (struct __THE_1_fn_sFP5array_intFRarray_intFE) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFE __THE_0_test2_0 = (struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFE) {&__THE_1_test2_0, NULL, 0};
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, xalloc(&(struct __THE_1_fn_sFP5array_intFRarray_intFEP) {__THE_1_array_int_alloc(2, 0, 1)}, sizeof(struct __THE_1_fn_sFP5array_intFRarray_intFEP))));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFEP) {__THE_1_array_int_alloc(2, 2, 3), 0, (struct __THE_1_array_int) {}}, sizeof(struct __THE_1_fn_sFP5array_intFP2array_intFRarray_intFEP))));
}
======= flags =======
======= stdout =======
