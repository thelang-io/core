======= stdin =======
fn test1 (mut a: int[]) int[] {
  a.push(2)
  return a
}
fn test2 (mut a: int[], mut b := [4, 5, 6]) int[] {
  b = a
  a.push(b.len)
  return a
}
main {
  test1([0, 1])
  test2([2, 3])
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct __THE_1_array_int;
struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_fn$1P;
struct __THE_1_fn$1;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn$0P {
  struct __THE_1_array_int n0;
};
struct __THE_1_fn$0 {
  struct __THE_1_array_int (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$1P {
  struct __THE_1_array_int n0;
  unsigned char o1;
  struct __THE_1_array_int n1;
};
struct __THE_1_fn$1 {
  struct __THE_1_array_int (*f) (void *, struct __THE_1_fn$1P);
  void *x;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
size_t __THE_1_array_int_len (struct __THE_1_array_int);
void __THE_1_array_int_push (struct __THE_1_array_int *, size_t, ...);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_test1_0 (void *, struct __THE_1_fn$0P);
struct __THE_1_array_int __THE_1_test2_0 (void *, struct __THE_1_fn$1P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
size_t __THE_1_array_int_len (struct __THE_1_array_int n) {
  size_t l = n.l;
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return l;
}
void __THE_1_array_int_push (struct __THE_1_array_int *n, size_t x, ...) {
  if (x == 0) return;
  n->l += x;
  n->d = re_alloc(n->d, n->l * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = n->l - x; i < n->l; i++) n->d[i] = va_arg(args, int32_t);
  va_end(args);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}
struct __THE_1_array_int __THE_1_test1_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_array_int v;
  struct __THE_1_array_int __THE_0_a_0 = p.n0;
  __THE_1_array_int_push(&__THE_0_a_0, 1, 2);
  v = __THE_1_array_int_copy(__THE_0_a_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  return v;
}
struct __THE_1_array_int __THE_1_test2_0 (void *px, struct __THE_1_fn$1P p) {
  struct __THE_1_array_int v;
  struct __THE_1_array_int __THE_0_a_0 = p.n0;
  struct __THE_1_array_int __THE_0_b_0 = p.o1 == 1 ? p.n1 : __THE_1_array_int_alloc(3, 4, 5, 6);
  __THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_copy(__THE_0_a_0));
  __THE_1_array_int_push(&__THE_0_a_0, 1, __THE_1_array_int_len(__THE_1_array_int_copy(__THE_0_b_0)));
  v = __THE_1_array_int_copy(__THE_0_a_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
  return v;
}

int main () {
  const struct __THE_1_fn$0 __THE_0_test1_0 = (struct __THE_1_fn$0) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1 __THE_0_test2_0 = (struct __THE_1_fn$1) {&__THE_1_test2_0, NULL, 0};
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(2, 0, 1)}));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test2_0.f(__THE_0_test2_0.x, (struct __THE_1_fn$1P) {__THE_1_array_int_alloc(2, 2, 3), 0, (struct __THE_1_array_int) {}}));
}
======= flags =======
======= stdout =======
