======= stdin =======
main {
  loop i: int | str = 0; i != "test"; i = "test" {
  }

  mut a: int | str = 0
  loop ; a != "test"; a = "test" {
  }

  mut b: int | str = 0
  loop ; b != "test"; {
    b = "test"
  }

  mut c: int | str = 0
  loop {
    if c == "test" {
      break
    }

    c = "test"
  }

  loop d: int | str = 0; d != "test"; {
    d = "test"
  }

  loop e: int | str = 0;; e = "test" {
    if e == "test" {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 1
#define TYPE_str 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_union_intUSstrUE;

struct __THE_1_union_intUSstrUE {
  int t;
  union {
    int32_t v1;
    struct str v2;
  };
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int, ...);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE);
bool __THE_1_union_intUSstrUE_eq (struct __THE_1_union_intUSstrUE, struct __THE_1_union_intUSstrUE);
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE);
bool __THE_1_union_intUSstrUE_ne (struct __THE_1_union_intUSstrUE, struct __THE_1_union_intUSstrUE);
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_realloc (struct __THE_1_union_intUSstrUE, struct __THE_1_union_intUSstrUE);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_alloc (int t, ...) {
  struct __THE_1_union_intUSstrUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v1 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v2 = va_arg(args, struct str);
  va_end(args);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_copy (const struct __THE_1_union_intUSstrUE n) {
  struct __THE_1_union_intUSstrUE r = {n.t};
  if (n.t == TYPE_int) r.v1 = n.v1;
  if (n.t == TYPE_str) r.v2 = str_copy(n.v2);
  return r;
}
bool __THE_1_union_intUSstrUE_eq (struct __THE_1_union_intUSstrUE n1, struct __THE_1_union_intUSstrUE n2) {
  bool r = n1.t == n2.t;
  if (r) {
    if (n1.t == TYPE_int) r = n1.v1 == n2.v1;
    if (n1.t == TYPE_str) r = str_eq_str(str_copy(n1.v2), str_copy(n2.v2));
  }
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n1);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n2);
  return r;
}
void __THE_1_union_intUSstrUE_free (struct __THE_1_union_intUSstrUE n) {
  if (n.t == TYPE_str) str_free((struct str) n.v2);
}
bool __THE_1_union_intUSstrUE_ne (struct __THE_1_union_intUSstrUE n1, struct __THE_1_union_intUSstrUE n2) {
  bool r = n1.t != n2.t;
  if (!r) {
    if (n1.t == TYPE_int) r = n1.v1 != n2.v1;
    if (n1.t == TYPE_str) r = str_ne_str(str_copy(n1.v2), str_copy(n2.v2));
  }
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n1);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n2);
  return r;
}
struct __THE_1_union_intUSstrUE __THE_1_union_intUSstrUE_realloc (struct __THE_1_union_intUSstrUE n1, struct __THE_1_union_intUSstrUE n2) {
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) n1);
  return n2;
}

int main () {
  {
    struct __THE_1_union_intUSstrUE __THE_0_i_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 0);
    for (; __THE_1_union_intUSstrUE_ne(__THE_1_union_intUSstrUE_copy(__THE_0_i_0), __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test"))); __THE_0_i_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_i_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")))) {
    }
    __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_i_0);
  }
  struct __THE_1_union_intUSstrUE __THE_0_a_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 0);
  for (; __THE_1_union_intUSstrUE_ne(__THE_1_union_intUSstrUE_copy(__THE_0_a_0), __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test"))); __THE_0_a_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_a_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")))) {
  }
  struct __THE_1_union_intUSstrUE __THE_0_b_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 0);
  while (__THE_1_union_intUSstrUE_ne(__THE_1_union_intUSstrUE_copy(__THE_0_b_0), __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")))) {
    __THE_0_b_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_b_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")));
  }
  struct __THE_1_union_intUSstrUE __THE_0_c_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 0);
  while (1) {
    if (__THE_1_union_intUSstrUE_eq(__THE_1_union_intUSstrUE_copy(__THE_0_c_0), __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")))) {
      break;
    }
    __THE_0_c_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_c_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")));
  }
  {
    struct __THE_1_union_intUSstrUE __THE_0_d_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 0);
    for (; __THE_1_union_intUSstrUE_ne(__THE_1_union_intUSstrUE_copy(__THE_0_d_0), __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")));) {
      __THE_0_d_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_d_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")));
    }
    __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_d_0);
  }
  {
    struct __THE_1_union_intUSstrUE __THE_0_e_0 = __THE_1_union_intUSstrUE_alloc(TYPE_int, 0);
    for (;; __THE_0_e_0 = __THE_1_union_intUSstrUE_realloc(__THE_0_e_0, __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")))) {
      if (__THE_1_union_intUSstrUE_eq(__THE_1_union_intUSstrUE_copy(__THE_0_e_0), __THE_1_union_intUSstrUE_alloc(TYPE_str, str_alloc("test")))) {
        break;
      }
    }
    __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_e_0);
  }
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_c_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_b_0);
  __THE_1_union_intUSstrUE_free((struct __THE_1_union_intUSstrUE) __THE_0_a_0);
}
======= flags =======
======= stdout =======
