======= stdin =======
fn printMap (m: int[str]) {
  print(m.cap.str() + "|" + m.len.str(), m)
}

main {
  mut test1: int[str]
  test1.reserve(100)
  mut test2 := { "key": 1 }
  test2.reserve(100)
  mut test3 := { "key1": 1, "key2": 2 }
  test3.reserve(100)

  printMap(test1)
  test4 := test1.shrink()
  printMap(test1)

  printMap(test2)
  test5 := test2.shrink()
  printMap(test2)

  printMap(test3)
  test6 := test3.shrink()
  printMap(test3)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair$0;
struct __THE_1_map$0;
struct __THE_1_fn$0;
struct __THE_1_fn$0P;

struct __THE_1_pair$0 {
  struct str f;
  int32_t s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_fn$0P {
  struct __THE_1_map$0 n0;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
struct str str_escape (const struct str);
void str_free (struct str);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
size_t __THE_1_map$0_cap (struct __THE_1_map$0);
struct __THE_1_map$0 __THE_1_map$0_copy (const struct __THE_1_map$0);
void __THE_1_map$0_free (struct __THE_1_map$0);
size_t __THE_1_map$0_len (struct __THE_1_map$0);
struct __THE_1_map$0 *__THE_1_map$0_reserve (struct __THE_1_map$0 *, int32_t);
struct __THE_1_map$0 *__THE_1_map$0_shrink (struct __THE_1_map$0 *);
struct str __THE_1_map$0_str (struct __THE_1_map$0);
void __THE_1_printMap_0 (void *, struct __THE_1_fn$0P);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str int_str (int32_t d) {
  char buf[512];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
struct str str_escape (const struct str s) {
  char *d = alloc(s.l);
  size_t l = 0;
  for (size_t i = 0; i < s.l; i++) {
    char c = s.d[i];
    if (c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v' || c == '"') {
      if (l + 2 > s.l) d = re_alloc(d, l + 2);
      d[l++] = '\\';
      if (c == '\f') d[l++] = 'f';
      else if (c == '\n') d[l++] = 'n';
      else if (c == '\r') d[l++] = 'r';
      else if (c == '\t') d[l++] = 't';
      else if (c == '\v') d[l++] = 'v';
      else if (c == '"') d[l++] = '"';
      continue;
    }
    if (l + 1 > s.l) d = re_alloc(d, l + 1);
    d[l++] = c;
  }
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
size_t __THE_1_map$0_cap (struct __THE_1_map$0 n) {
  size_t c = n.c;
  __THE_1_map$0_free((struct __THE_1_map$0) n);
  return c;
}
struct __THE_1_map$0 __THE_1_map$0_copy (const struct __THE_1_map$0 n) {
  struct __THE_1_pair$0 *d = alloc(n.c * sizeof(struct __THE_1_pair$0));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair$0) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map$0) {d, n.c, n.l};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
size_t __THE_1_map$0_len (struct __THE_1_map$0 n) {
  size_t l = n.l;
  __THE_1_map$0_free((struct __THE_1_map$0) n);
  return l;
}
struct __THE_1_map$0 *__THE_1_map$0_reserve (struct __THE_1_map$0 *n, int32_t c) {
  if (c > n->c) n->d = re_alloc(n->d, (n->c = c) * sizeof(struct __THE_1_pair$0));
  return n;
}
struct __THE_1_map$0 *__THE_1_map$0_shrink (struct __THE_1_map$0 *n) {
  if (n->l != n->c && n->l == 0) {
    free(n->d);
    n->d = NULL;
    n->c = 0;
  } else if (n->l != n->c) {
    n->d = re_alloc(n->d, (n->c = n->l) * sizeof(struct __THE_1_pair$0));
  }
  return n;
}
struct str __THE_1_map$0_str (struct __THE_1_map$0 n) {
  struct str r = str_alloc("{");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_cstr(r, "\"");
    r = str_concat_str(r, str_escape(n.d[i].f));
    r = str_concat_cstr(r, "\": ");
    r = str_concat_str(r, int_str(n.d[i].s));
  }
  __THE_1_map$0_free((struct __THE_1_map$0) n);
  return str_concat_cstr(r, "}");
}
void __THE_1_printMap_0 (void *px, struct __THE_1_fn$0P p) {
  const struct __THE_1_map$0 __THE_0_m_0 = p.n0;
  print(stdout, "szsz", str_concat_str(str_concat_cstr(int_str(__THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_m_0))), "|"), int_str(__THE_1_map$0_len(__THE_1_map$0_copy(__THE_0_m_0)))), " ", __THE_1_map$0_str(__THE_1_map$0_copy(__THE_0_m_0)), THE_EOL);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_m_0);
}

int main () {
  const struct __THE_1_fn$0 __THE_0_printMap_0 = (struct __THE_1_fn$0) {&__THE_1_printMap_0, NULL, 0};
  struct __THE_1_map$0 __THE_0_test1_0 = __THE_1_map$0_alloc(0);
  __THE_1_map$0_reserve(&__THE_0_test1_0, 100);
  struct __THE_1_map$0 __THE_0_test2_0 = __THE_1_map$0_alloc(1, str_alloc("key"), 1);
  __THE_1_map$0_reserve(&__THE_0_test2_0, 100);
  struct __THE_1_map$0 __THE_0_test3_0 = __THE_1_map$0_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 2);
  __THE_1_map$0_reserve(&__THE_0_test3_0, 100);
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$0P) {__THE_1_map$0_copy(__THE_0_test1_0)});
  const struct __THE_1_map$0 *__THE_0_test4_0 = __THE_1_map$0_shrink(&__THE_0_test1_0);
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$0P) {__THE_1_map$0_copy(__THE_0_test1_0)});
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$0P) {__THE_1_map$0_copy(__THE_0_test2_0)});
  const struct __THE_1_map$0 *__THE_0_test5_0 = __THE_1_map$0_shrink(&__THE_0_test2_0);
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$0P) {__THE_1_map$0_copy(__THE_0_test2_0)});
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$0P) {__THE_1_map$0_copy(__THE_0_test3_0)});
  const struct __THE_1_map$0 *__THE_0_test6_0 = __THE_1_map$0_shrink(&__THE_0_test3_0);
  __THE_0_printMap_0.f(__THE_0_printMap_0.x, (struct __THE_1_fn$0P) {__THE_1_map$0_copy(__THE_0_test3_0)});
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test3_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test2_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test1_0);
}
======= flags =======
======= stdout =======
100|0 {}
0|0 {}
100|1 {"key": 1}
1|1 {"key": 1}
100|2 {"key1": 1, "key2": 2}
2|2 {"key1": 1, "key2": 2}
