======= stdin =======
main {
  mut a := [1, 2, 3]

  fn test (newA: int[]) {
    a = newA
  }

  test([4, 5, 6])
}
======= code =======
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_array_int;
struct __THE_1_fn$0P;
struct __THE_1_fn$0;
struct __THE_1_mainSDtest_0X;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_fn$0P {
  struct __THE_1_array_int n0;
};
struct __THE_1_fn$0 {
  void (*f) (void *, struct __THE_1_fn$0P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest_0X {
  struct __THE_1_array_int *__THE_0_a_0;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);
void __THE_1_fn$0_free (struct __THE_1_fn$0);
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *, struct __THE_1_mainSDtest_0X);
void __THE_1_mainSDtest_0 (void *, struct __THE_1_fn$0P);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}
void __THE_1_fn$0_free (struct __THE_1_fn$0 n) {
  free(n.x);
}
void __THE_1_mainSDtest_0_alloc (struct __THE_1_fn$0 *n, struct __THE_1_mainSDtest_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest_0X);
  struct __THE_1_mainSDtest_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest_0 (void *px, struct __THE_1_fn$0P p) {
  struct __THE_1_mainSDtest_0X *x = px;
  struct __THE_1_array_int *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_array_int __THE_0_newA_0 = p.n0;
  *__THE_0_a_0 = __THE_1_array_int_realloc(*__THE_0_a_0, __THE_1_array_int_copy(__THE_0_newA_0));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_newA_0);
}

int main () {
  struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(3, 1, 2, 3);
  const struct __THE_1_fn$0 __THE_0_mainSDtest_0;
  __THE_1_mainSDtest_0_alloc((struct __THE_1_fn$0 *) &__THE_0_mainSDtest_0, (struct __THE_1_mainSDtest_0X) {&__THE_0_a_0});
  __THE_0_mainSDtest_0.f(__THE_0_mainSDtest_0.x, (struct __THE_1_fn$0P) {__THE_1_array_int_alloc(3, 4, 5, 6)});
  __THE_1_fn$0_free((struct __THE_1_fn$0) __THE_0_mainSDtest_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
