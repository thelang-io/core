======= stdin =======
main {
  a1 := "".replace("", "")
  a2 := "".replace("", "t")
  a3 := "".replace("", "test")
  a4 := "".replace("t", "")
  a5 := "".replace("test", "")
  a6 := "".replace("t", "test")
  a7 := "".replace("test", "t")
  a8 := "".replace("test", "test")
  a9 := "t".replace("", "")
  a10 := "t".replace("", "t")
  a11 := "t".replace("", "test")
  a12 := "t".replace("t", "")
  a13 := "t".replace("test", "")
  a14 := "t".replace("t", "test")
  a15 := "t".replace("test", "t")
  a16 := "t".replace("test", "test")
  a17 := "test in test".replace("", "")
  a18 := "test in test".replace("", "t")
  a19 := "test in test".replace("", "test")
  a20 := "test in test".replace("t", "")
  a21 := "test in test".replace("test", "")
  a22 := "test in test".replace("t", "test")
  a23 := "test in test".replace("test", "t")
  a24 := "test in test".replace("test", "test")

  b1 := "".replace("", "", 1)
  b2 := "".replace("", "t", 1)
  b3 := "".replace("", "test", 1)
  b4 := "".replace("t", "", 1)
  b5 := "".replace("test", "", 1)
  b6 := "".replace("t", "test", 1)
  b7 := "".replace("test", "t", 1)
  b8 := "".replace("test", "test", 1)
  b9 := "t".replace("", "", 1)
  b10 := "t".replace("", "t", 1)
  b11 := "t".replace("", "test", 1)
  b12 := "t".replace("t", "", 1)
  b13 := "t".replace("test", "", 1)
  b14 := "t".replace("t", "test", 1)
  b15 := "t".replace("test", "t", 1)
  b16 := "t".replace("test", "test", 1)
  b17 := "test in test".replace("", "", 1)
  b18 := "test in test".replace("", "t", 1)
  b19 := "test in test".replace("", "test", 1)
  b20 := "test in test".replace("t", "", 1)
  b21 := "test in test".replace("test", "", 1)
  b22 := "test in test".replace("t", "test", 1)
  b23 := "test in test".replace("test", "t", 1)
  b24 := "test in test".replace("test", "test", 1)

  c1 := "".replace("", "", count: 2)
  c2 := "".replace("", "t", count: 2)
  c3 := "".replace("", "test", count: 2)
  c4 := "".replace("t", "", count: 2)
  c5 := "".replace("test", "", count: 2)
  c6 := "".replace("t", "test", count: 2)
  c7 := "".replace("test", "t", count: 2)
  c8 := "".replace("test", "test", count: 2)
  c9 := "t".replace("", "", count: 2)
  c10 := "t".replace("", "t", count: 2)
  c11 := "t".replace("", "test", count: 2)
  c12 := "t".replace("t", "", count: 2)
  c13 := "t".replace("test", "", count: 2)
  c14 := "t".replace("t", "test", count: 2)
  c15 := "t".replace("test", "t", count: 2)
  c16 := "t".replace("test", "test", count: 2)
  c17 := "test in test".replace("", "", count: 2)
  c18 := "test in test".replace("", "t", count: 2)
  c19 := "test in test".replace("", "test", count: 2)
  c20 := "test in test".replace("t", "", count: 2)
  c21 := "test in test".replace("test", "", count: 2)
  c22 := "test in test".replace("t", "test", count: 2)
  c23 := "test in test".replace("test", "t", count: 2)
  c24 := "test in test".replace("test", "test", count: 2)

  d1 := "".replace("", "", count: 3)
  d2 := "".replace("", "t", count: 3)
  d3 := "".replace("", "test", count: 3)
  d4 := "".replace("t", "", count: 3)
  d5 := "".replace("test", "", count: 3)
  d6 := "".replace("t", "test", count: 3)
  d7 := "".replace("test", "t", count: 3)
  d8 := "".replace("test", "test", count: 3)
  d9 := "t".replace("", "", count: 3)
  d10 := "t".replace("", "t", count: 3)
  d11 := "t".replace("", "test", count: 3)
  d12 := "t".replace("t", "", count: 3)
  d13 := "t".replace("test", "", count: 3)
  d14 := "t".replace("t", "test", count: 3)
  d15 := "t".replace("test", "t", count: 3)
  d16 := "t".replace("test", "test", count: 3)
  d17 := "test in test".replace("", "", count: 3)
  d18 := "test in test".replace("", "t", count: 3)
  d19 := "test in test".replace("", "test", count: 3)
  d20 := "test in test".replace("t", "", count: 3)
  d21 := "test in test".replace("test", "", count: 3)
  d22 := "test in test".replace("t", "test", count: 3)
  d23 := "test in test".replace("test", "t", count: 3)
  d24 := "test in test".replace("test", "test", count: 3)

  print("a1:", a1.empty ? "" : " ", a1, separator: "")
  print("a2:", a2.empty ? "" : " ", a2, separator: "")
  print("a3:", a3.empty ? "" : " ", a3, separator: "")
  print("a4:", a4.empty ? "" : " ", a4, separator: "")
  print("a5:", a5.empty ? "" : " ", a5, separator: "")
  print("a6:", a6.empty ? "" : " ", a6, separator: "")
  print("a7:", a7.empty ? "" : " ", a7, separator: "")
  print("a8:", a8.empty ? "" : " ", a8, separator: "")
  print("a9:", a9.empty ? "" : " ", a9, separator: "")
  print("a10:", a10.empty ? "" : " ", a10, separator: "")
  print("a11:", a11.empty ? "" : " ", a11, separator: "")
  print("a12:", a12.empty ? "" : " ", a12, separator: "")
  print("a13:", a13.empty ? "" : " ", a13, separator: "")
  print("a14:", a14.empty ? "" : " ", a14, separator: "")
  print("a15:", a15.empty ? "" : " ", a15, separator: "")
  print("a16:", a16.empty ? "" : " ", a16, separator: "")
  print("a17:", a17.empty ? "" : " ", a17, separator: "")
  print("a18:", a18.empty ? "" : " ", a18, separator: "")
  print("a19:", a19.empty ? "" : " ", a19, separator: "")
  print("a20:", a20.empty ? "" : " ", a20, separator: "")
  print("a21:", a21.empty ? "" : " ", a21, separator: "")
  print("a22:", a22.empty ? "" : " ", a22, separator: "")
  print("a23:", a23.empty ? "" : " ", a23, separator: "")
  print("a24:", a24.empty ? "" : " ", a24, separator: "")
  print("b1:", b1.empty ? "" : " ", b1, separator: "")
  print("b2:", b2.empty ? "" : " ", b2, separator: "")
  print("b3:", b3.empty ? "" : " ", b3, separator: "")
  print("b4:", b4.empty ? "" : " ", b4, separator: "")
  print("b5:", b5.empty ? "" : " ", b5, separator: "")
  print("b6:", b6.empty ? "" : " ", b6, separator: "")
  print("b7:", b7.empty ? "" : " ", b7, separator: "")
  print("b8:", b8.empty ? "" : " ", b8, separator: "")
  print("b9:", b9.empty ? "" : " ", b9, separator: "")
  print("b10:", b10.empty ? "" : " ", b10, separator: "")
  print("b11:", b11.empty ? "" : " ", b11, separator: "")
  print("b12:", b12.empty ? "" : " ", b12, separator: "")
  print("b13:", b13.empty ? "" : " ", b13, separator: "")
  print("b14:", b14.empty ? "" : " ", b14, separator: "")
  print("b15:", b15.empty ? "" : " ", b15, separator: "")
  print("b16:", b16.empty ? "" : " ", b16, separator: "")
  print("b17:", b17.empty ? "" : " ", b17, separator: "")
  print("b18:", b18.empty ? "" : " ", b18, separator: "")
  print("b19:", b19.empty ? "" : " ", b19, separator: "")
  print("b20:", b20.empty ? "" : " ", b20, separator: "")
  print("b21:", b21.empty ? "" : " ", b21, separator: "")
  print("b22:", b22.empty ? "" : " ", b22, separator: "")
  print("b23:", b23.empty ? "" : " ", b23, separator: "")
  print("b24:", b24.empty ? "" : " ", b24, separator: "")
  print("c1:", c1.empty ? "" : " ", c1, separator: "")
  print("c2:", c2.empty ? "" : " ", c2, separator: "")
  print("c3:", c3.empty ? "" : " ", c3, separator: "")
  print("c4:", c4.empty ? "" : " ", c4, separator: "")
  print("c5:", c5.empty ? "" : " ", c5, separator: "")
  print("c6:", c6.empty ? "" : " ", c6, separator: "")
  print("c7:", c7.empty ? "" : " ", c7, separator: "")
  print("c8:", c8.empty ? "" : " ", c8, separator: "")
  print("c9:", c9.empty ? "" : " ", c9, separator: "")
  print("c10:", c10.empty ? "" : " ", c10, separator: "")
  print("c11:", c11.empty ? "" : " ", c11, separator: "")
  print("c12:", c12.empty ? "" : " ", c12, separator: "")
  print("c13:", c13.empty ? "" : " ", c13, separator: "")
  print("c14:", c14.empty ? "" : " ", c14, separator: "")
  print("c15:", c15.empty ? "" : " ", c15, separator: "")
  print("c16:", c16.empty ? "" : " ", c16, separator: "")
  print("c17:", c17.empty ? "" : " ", c17, separator: "")
  print("c18:", c18.empty ? "" : " ", c18, separator: "")
  print("c19:", c19.empty ? "" : " ", c19, separator: "")
  print("c20:", c20.empty ? "" : " ", c20, separator: "")
  print("c21:", c21.empty ? "" : " ", c21, separator: "")
  print("c22:", c22.empty ? "" : " ", c22, separator: "")
  print("c23:", c23.empty ? "" : " ", c23, separator: "")
  print("c24:", c24.empty ? "" : " ", c24, separator: "")
  print("d1:", d1.empty ? "" : " ", d1, separator: "")
  print("d2:", d2.empty ? "" : " ", d2, separator: "")
  print("d3:", d3.empty ? "" : " ", d3, separator: "")
  print("d4:", d4.empty ? "" : " ", d4, separator: "")
  print("d5:", d5.empty ? "" : " ", d5, separator: "")
  print("d6:", d6.empty ? "" : " ", d6, separator: "")
  print("d7:", d7.empty ? "" : " ", d7, separator: "")
  print("d8:", d8.empty ? "" : " ", d8, separator: "")
  print("d9:", d9.empty ? "" : " ", d9, separator: "")
  print("d10:", d10.empty ? "" : " ", d10, separator: "")
  print("d11:", d11.empty ? "" : " ", d11, separator: "")
  print("d12:", d12.empty ? "" : " ", d12, separator: "")
  print("d13:", d13.empty ? "" : " ", d13, separator: "")
  print("d14:", d14.empty ? "" : " ", d14, separator: "")
  print("d15:", d15.empty ? "" : " ", d15, separator: "")
  print("d16:", d16.empty ? "" : " ", d16, separator: "")
  print("d17:", d17.empty ? "" : " ", d17, separator: "")
  print("d18:", d18.empty ? "" : " ", d18, separator: "")
  print("d19:", d19.empty ? "" : " ", d19, separator: "")
  print("d20:", d20.empty ? "" : " ", d20, separator: "")
  print("d21:", d21.empty ? "" : " ", d21, separator: "")
  print("d22:", d22.empty ? "" : " ", d22, separator: "")
  print("d23:", d23.empty ? "" : " ", d23, separator: "")
  print("d24:", d24.empty ? "" : " ", d24, separator: "")
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_empty (struct str);
struct str str_replace (struct str, struct str, struct str, unsigned char, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_empty (struct str s) {
  bool r = s.l == 0;
  free(s.d);
  return r;
}
struct str str_replace (struct str self, struct str n1, struct str n2, unsigned char _o3, int32_t n3) {
  size_t l = self.l;
  char *d = alloc(l);
  int32_t k = 0;
  if (n1.l == 0 && n2.l > 0) {
    l = self.l + (n3 > 0 && n3 <= self.l ? n3 : self.l + 1) * n2.l;
    d = re_alloc(d, l);
    memcpy(d, n2.d, n2.l);
    size_t j = n2.l;
    for (size_t i = 0; i < self.l; i++) {
      d[j++] = self.d[i];
      if (n3 <= 0 || ++k < n3) {
        memcpy(&d[j], n2.d, n2.l);
        j += n2.l;
      }
    }
  } else if (n1.l > 0 && n2.l == 0) {
    size_t j = 0;
    for (size_t i = 0; i < self.l; i++) {
      if (memcmp(&self.d[i], n1.d, n1.l) == 0 && (n3 <= 0 || k++ < n3)) {
        l -= n1.l;
        i += n1.l - 1;
      } else {
        d[j++] = self.d[i];
      }
    }
    d = re_alloc(d, l);
  } else if (n1.l > 0) {
    size_t j = 0;
    for (size_t i = 0; i < self.l; i++) {
      if (memcmp(&self.d[i], n1.d, n1.l) == 0 && (n3 <= 0 || k++ < n3)) {
        if (n1.l < n2.l) {
          l += n2.l - n1.l;
          if (l > self.l) {
            d = re_alloc(d, l);
          }
        } else if (n1.l > n2.l) {
          l -= n1.l - n2.l;
        }
        memcpy(&d[j], n2.d, n2.l);
        j += n2.l;
        i += n1.l - 1;
      } else {
        d[j++] = self.d[i];
      }
    }
    d = re_alloc(d, l);
  } else {
    memcpy(d, self.d, l);
  }
  free(n2.d);
  free(n1.d);
  free(self.d);
  return (struct str) {d, l};
}

int main () {
  const struct str __THE_0_a1_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 0, 0);
  const struct str __THE_0_a2_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 0, 0);
  const struct str __THE_0_a3_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 0, 0);
  const struct str __THE_0_a4_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 0, 0);
  const struct str __THE_0_a5_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 0, 0);
  const struct str __THE_0_a6_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 0, 0);
  const struct str __THE_0_a7_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 0, 0);
  const struct str __THE_0_a8_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 0, 0);
  const struct str __THE_0_a9_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 0, 0);
  const struct str __THE_0_a10_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 0, 0);
  const struct str __THE_0_a11_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 0, 0);
  const struct str __THE_0_a12_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 0, 0);
  const struct str __THE_0_a13_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 0, 0);
  const struct str __THE_0_a14_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 0, 0);
  const struct str __THE_0_a15_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 0, 0);
  const struct str __THE_0_a16_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 0, 0);
  const struct str __THE_0_a17_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 0, 0);
  const struct str __THE_0_a18_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 0, 0);
  const struct str __THE_0_a19_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 0, 0);
  const struct str __THE_0_a20_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 0, 0);
  const struct str __THE_0_a21_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 0, 0);
  const struct str __THE_0_a22_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 0, 0);
  const struct str __THE_0_a23_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 0, 0);
  const struct str __THE_0_a24_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 0, 0);
  const struct str __THE_0_b1_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 1, 1);
  const struct str __THE_0_b2_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 1, 1);
  const struct str __THE_0_b3_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 1, 1);
  const struct str __THE_0_b4_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 1, 1);
  const struct str __THE_0_b5_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 1, 1);
  const struct str __THE_0_b6_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 1, 1);
  const struct str __THE_0_b7_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 1, 1);
  const struct str __THE_0_b8_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 1, 1);
  const struct str __THE_0_b9_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 1, 1);
  const struct str __THE_0_b10_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 1, 1);
  const struct str __THE_0_b11_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 1, 1);
  const struct str __THE_0_b12_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 1, 1);
  const struct str __THE_0_b13_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 1, 1);
  const struct str __THE_0_b14_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 1, 1);
  const struct str __THE_0_b15_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 1, 1);
  const struct str __THE_0_b16_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 1, 1);
  const struct str __THE_0_b17_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 1, 1);
  const struct str __THE_0_b18_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 1, 1);
  const struct str __THE_0_b19_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 1, 1);
  const struct str __THE_0_b20_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 1, 1);
  const struct str __THE_0_b21_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 1, 1);
  const struct str __THE_0_b22_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 1, 1);
  const struct str __THE_0_b23_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 1, 1);
  const struct str __THE_0_b24_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 1, 1);
  const struct str __THE_0_c1_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 1, 2);
  const struct str __THE_0_c2_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 1, 2);
  const struct str __THE_0_c3_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 1, 2);
  const struct str __THE_0_c4_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 1, 2);
  const struct str __THE_0_c5_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 1, 2);
  const struct str __THE_0_c6_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 1, 2);
  const struct str __THE_0_c7_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 1, 2);
  const struct str __THE_0_c8_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 1, 2);
  const struct str __THE_0_c9_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 1, 2);
  const struct str __THE_0_c10_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 1, 2);
  const struct str __THE_0_c11_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 1, 2);
  const struct str __THE_0_c12_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 1, 2);
  const struct str __THE_0_c13_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 1, 2);
  const struct str __THE_0_c14_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 1, 2);
  const struct str __THE_0_c15_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 1, 2);
  const struct str __THE_0_c16_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 1, 2);
  const struct str __THE_0_c17_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 1, 2);
  const struct str __THE_0_c18_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 1, 2);
  const struct str __THE_0_c19_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 1, 2);
  const struct str __THE_0_c20_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 1, 2);
  const struct str __THE_0_c21_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 1, 2);
  const struct str __THE_0_c22_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 1, 2);
  const struct str __THE_0_c23_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 1, 2);
  const struct str __THE_0_c24_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 1, 2);
  const struct str __THE_0_d1_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc(""), 1, 3);
  const struct str __THE_0_d2_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("t"), 1, 3);
  const struct str __THE_0_d3_0 = str_replace(str_alloc(""), str_alloc(""), str_alloc("test"), 1, 3);
  const struct str __THE_0_d4_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc(""), 1, 3);
  const struct str __THE_0_d5_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc(""), 1, 3);
  const struct str __THE_0_d6_0 = str_replace(str_alloc(""), str_alloc("t"), str_alloc("test"), 1, 3);
  const struct str __THE_0_d7_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("t"), 1, 3);
  const struct str __THE_0_d8_0 = str_replace(str_alloc(""), str_alloc("test"), str_alloc("test"), 1, 3);
  const struct str __THE_0_d9_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc(""), 1, 3);
  const struct str __THE_0_d10_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("t"), 1, 3);
  const struct str __THE_0_d11_0 = str_replace(str_alloc("t"), str_alloc(""), str_alloc("test"), 1, 3);
  const struct str __THE_0_d12_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc(""), 1, 3);
  const struct str __THE_0_d13_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc(""), 1, 3);
  const struct str __THE_0_d14_0 = str_replace(str_alloc("t"), str_alloc("t"), str_alloc("test"), 1, 3);
  const struct str __THE_0_d15_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("t"), 1, 3);
  const struct str __THE_0_d16_0 = str_replace(str_alloc("t"), str_alloc("test"), str_alloc("test"), 1, 3);
  const struct str __THE_0_d17_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc(""), 1, 3);
  const struct str __THE_0_d18_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("t"), 1, 3);
  const struct str __THE_0_d19_0 = str_replace(str_alloc("test in test"), str_alloc(""), str_alloc("test"), 1, 3);
  const struct str __THE_0_d20_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc(""), 1, 3);
  const struct str __THE_0_d21_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc(""), 1, 3);
  const struct str __THE_0_d22_0 = str_replace(str_alloc("test in test"), str_alloc("t"), str_alloc("test"), 1, 3);
  const struct str __THE_0_d23_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("t"), 1, 3);
  const struct str __THE_0_d24_0 = str_replace(str_alloc("test in test"), str_alloc("test"), str_alloc("test"), 1, 3);
  print(stdout, "zssz", "a1:", str_empty(str_copy(__THE_0_a1_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a1_0), THE_EOL);
  print(stdout, "zssz", "a2:", str_empty(str_copy(__THE_0_a2_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a2_0), THE_EOL);
  print(stdout, "zssz", "a3:", str_empty(str_copy(__THE_0_a3_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a3_0), THE_EOL);
  print(stdout, "zssz", "a4:", str_empty(str_copy(__THE_0_a4_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a4_0), THE_EOL);
  print(stdout, "zssz", "a5:", str_empty(str_copy(__THE_0_a5_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a5_0), THE_EOL);
  print(stdout, "zssz", "a6:", str_empty(str_copy(__THE_0_a6_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a6_0), THE_EOL);
  print(stdout, "zssz", "a7:", str_empty(str_copy(__THE_0_a7_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a7_0), THE_EOL);
  print(stdout, "zssz", "a8:", str_empty(str_copy(__THE_0_a8_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a8_0), THE_EOL);
  print(stdout, "zssz", "a9:", str_empty(str_copy(__THE_0_a9_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a9_0), THE_EOL);
  print(stdout, "zssz", "a10:", str_empty(str_copy(__THE_0_a10_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a10_0), THE_EOL);
  print(stdout, "zssz", "a11:", str_empty(str_copy(__THE_0_a11_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a11_0), THE_EOL);
  print(stdout, "zssz", "a12:", str_empty(str_copy(__THE_0_a12_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a12_0), THE_EOL);
  print(stdout, "zssz", "a13:", str_empty(str_copy(__THE_0_a13_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a13_0), THE_EOL);
  print(stdout, "zssz", "a14:", str_empty(str_copy(__THE_0_a14_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a14_0), THE_EOL);
  print(stdout, "zssz", "a15:", str_empty(str_copy(__THE_0_a15_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a15_0), THE_EOL);
  print(stdout, "zssz", "a16:", str_empty(str_copy(__THE_0_a16_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a16_0), THE_EOL);
  print(stdout, "zssz", "a17:", str_empty(str_copy(__THE_0_a17_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a17_0), THE_EOL);
  print(stdout, "zssz", "a18:", str_empty(str_copy(__THE_0_a18_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a18_0), THE_EOL);
  print(stdout, "zssz", "a19:", str_empty(str_copy(__THE_0_a19_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a19_0), THE_EOL);
  print(stdout, "zssz", "a20:", str_empty(str_copy(__THE_0_a20_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a20_0), THE_EOL);
  print(stdout, "zssz", "a21:", str_empty(str_copy(__THE_0_a21_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a21_0), THE_EOL);
  print(stdout, "zssz", "a22:", str_empty(str_copy(__THE_0_a22_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a22_0), THE_EOL);
  print(stdout, "zssz", "a23:", str_empty(str_copy(__THE_0_a23_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a23_0), THE_EOL);
  print(stdout, "zssz", "a24:", str_empty(str_copy(__THE_0_a24_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_a24_0), THE_EOL);
  print(stdout, "zssz", "b1:", str_empty(str_copy(__THE_0_b1_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b1_0), THE_EOL);
  print(stdout, "zssz", "b2:", str_empty(str_copy(__THE_0_b2_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b2_0), THE_EOL);
  print(stdout, "zssz", "b3:", str_empty(str_copy(__THE_0_b3_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b3_0), THE_EOL);
  print(stdout, "zssz", "b4:", str_empty(str_copy(__THE_0_b4_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b4_0), THE_EOL);
  print(stdout, "zssz", "b5:", str_empty(str_copy(__THE_0_b5_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b5_0), THE_EOL);
  print(stdout, "zssz", "b6:", str_empty(str_copy(__THE_0_b6_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b6_0), THE_EOL);
  print(stdout, "zssz", "b7:", str_empty(str_copy(__THE_0_b7_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b7_0), THE_EOL);
  print(stdout, "zssz", "b8:", str_empty(str_copy(__THE_0_b8_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b8_0), THE_EOL);
  print(stdout, "zssz", "b9:", str_empty(str_copy(__THE_0_b9_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b9_0), THE_EOL);
  print(stdout, "zssz", "b10:", str_empty(str_copy(__THE_0_b10_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b10_0), THE_EOL);
  print(stdout, "zssz", "b11:", str_empty(str_copy(__THE_0_b11_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b11_0), THE_EOL);
  print(stdout, "zssz", "b12:", str_empty(str_copy(__THE_0_b12_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b12_0), THE_EOL);
  print(stdout, "zssz", "b13:", str_empty(str_copy(__THE_0_b13_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b13_0), THE_EOL);
  print(stdout, "zssz", "b14:", str_empty(str_copy(__THE_0_b14_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b14_0), THE_EOL);
  print(stdout, "zssz", "b15:", str_empty(str_copy(__THE_0_b15_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b15_0), THE_EOL);
  print(stdout, "zssz", "b16:", str_empty(str_copy(__THE_0_b16_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b16_0), THE_EOL);
  print(stdout, "zssz", "b17:", str_empty(str_copy(__THE_0_b17_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b17_0), THE_EOL);
  print(stdout, "zssz", "b18:", str_empty(str_copy(__THE_0_b18_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b18_0), THE_EOL);
  print(stdout, "zssz", "b19:", str_empty(str_copy(__THE_0_b19_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b19_0), THE_EOL);
  print(stdout, "zssz", "b20:", str_empty(str_copy(__THE_0_b20_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b20_0), THE_EOL);
  print(stdout, "zssz", "b21:", str_empty(str_copy(__THE_0_b21_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b21_0), THE_EOL);
  print(stdout, "zssz", "b22:", str_empty(str_copy(__THE_0_b22_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b22_0), THE_EOL);
  print(stdout, "zssz", "b23:", str_empty(str_copy(__THE_0_b23_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b23_0), THE_EOL);
  print(stdout, "zssz", "b24:", str_empty(str_copy(__THE_0_b24_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_b24_0), THE_EOL);
  print(stdout, "zssz", "c1:", str_empty(str_copy(__THE_0_c1_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c1_0), THE_EOL);
  print(stdout, "zssz", "c2:", str_empty(str_copy(__THE_0_c2_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c2_0), THE_EOL);
  print(stdout, "zssz", "c3:", str_empty(str_copy(__THE_0_c3_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c3_0), THE_EOL);
  print(stdout, "zssz", "c4:", str_empty(str_copy(__THE_0_c4_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c4_0), THE_EOL);
  print(stdout, "zssz", "c5:", str_empty(str_copy(__THE_0_c5_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c5_0), THE_EOL);
  print(stdout, "zssz", "c6:", str_empty(str_copy(__THE_0_c6_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c6_0), THE_EOL);
  print(stdout, "zssz", "c7:", str_empty(str_copy(__THE_0_c7_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c7_0), THE_EOL);
  print(stdout, "zssz", "c8:", str_empty(str_copy(__THE_0_c8_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c8_0), THE_EOL);
  print(stdout, "zssz", "c9:", str_empty(str_copy(__THE_0_c9_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c9_0), THE_EOL);
  print(stdout, "zssz", "c10:", str_empty(str_copy(__THE_0_c10_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c10_0), THE_EOL);
  print(stdout, "zssz", "c11:", str_empty(str_copy(__THE_0_c11_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c11_0), THE_EOL);
  print(stdout, "zssz", "c12:", str_empty(str_copy(__THE_0_c12_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c12_0), THE_EOL);
  print(stdout, "zssz", "c13:", str_empty(str_copy(__THE_0_c13_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c13_0), THE_EOL);
  print(stdout, "zssz", "c14:", str_empty(str_copy(__THE_0_c14_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c14_0), THE_EOL);
  print(stdout, "zssz", "c15:", str_empty(str_copy(__THE_0_c15_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c15_0), THE_EOL);
  print(stdout, "zssz", "c16:", str_empty(str_copy(__THE_0_c16_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c16_0), THE_EOL);
  print(stdout, "zssz", "c17:", str_empty(str_copy(__THE_0_c17_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c17_0), THE_EOL);
  print(stdout, "zssz", "c18:", str_empty(str_copy(__THE_0_c18_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c18_0), THE_EOL);
  print(stdout, "zssz", "c19:", str_empty(str_copy(__THE_0_c19_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c19_0), THE_EOL);
  print(stdout, "zssz", "c20:", str_empty(str_copy(__THE_0_c20_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c20_0), THE_EOL);
  print(stdout, "zssz", "c21:", str_empty(str_copy(__THE_0_c21_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c21_0), THE_EOL);
  print(stdout, "zssz", "c22:", str_empty(str_copy(__THE_0_c22_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c22_0), THE_EOL);
  print(stdout, "zssz", "c23:", str_empty(str_copy(__THE_0_c23_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c23_0), THE_EOL);
  print(stdout, "zssz", "c24:", str_empty(str_copy(__THE_0_c24_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_c24_0), THE_EOL);
  print(stdout, "zssz", "d1:", str_empty(str_copy(__THE_0_d1_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d1_0), THE_EOL);
  print(stdout, "zssz", "d2:", str_empty(str_copy(__THE_0_d2_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d2_0), THE_EOL);
  print(stdout, "zssz", "d3:", str_empty(str_copy(__THE_0_d3_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d3_0), THE_EOL);
  print(stdout, "zssz", "d4:", str_empty(str_copy(__THE_0_d4_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d4_0), THE_EOL);
  print(stdout, "zssz", "d5:", str_empty(str_copy(__THE_0_d5_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d5_0), THE_EOL);
  print(stdout, "zssz", "d6:", str_empty(str_copy(__THE_0_d6_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d6_0), THE_EOL);
  print(stdout, "zssz", "d7:", str_empty(str_copy(__THE_0_d7_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d7_0), THE_EOL);
  print(stdout, "zssz", "d8:", str_empty(str_copy(__THE_0_d8_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d8_0), THE_EOL);
  print(stdout, "zssz", "d9:", str_empty(str_copy(__THE_0_d9_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d9_0), THE_EOL);
  print(stdout, "zssz", "d10:", str_empty(str_copy(__THE_0_d10_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d10_0), THE_EOL);
  print(stdout, "zssz", "d11:", str_empty(str_copy(__THE_0_d11_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d11_0), THE_EOL);
  print(stdout, "zssz", "d12:", str_empty(str_copy(__THE_0_d12_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d12_0), THE_EOL);
  print(stdout, "zssz", "d13:", str_empty(str_copy(__THE_0_d13_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d13_0), THE_EOL);
  print(stdout, "zssz", "d14:", str_empty(str_copy(__THE_0_d14_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d14_0), THE_EOL);
  print(stdout, "zssz", "d15:", str_empty(str_copy(__THE_0_d15_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d15_0), THE_EOL);
  print(stdout, "zssz", "d16:", str_empty(str_copy(__THE_0_d16_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d16_0), THE_EOL);
  print(stdout, "zssz", "d17:", str_empty(str_copy(__THE_0_d17_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d17_0), THE_EOL);
  print(stdout, "zssz", "d18:", str_empty(str_copy(__THE_0_d18_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d18_0), THE_EOL);
  print(stdout, "zssz", "d19:", str_empty(str_copy(__THE_0_d19_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d19_0), THE_EOL);
  print(stdout, "zssz", "d20:", str_empty(str_copy(__THE_0_d20_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d20_0), THE_EOL);
  print(stdout, "zssz", "d21:", str_empty(str_copy(__THE_0_d21_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d21_0), THE_EOL);
  print(stdout, "zssz", "d22:", str_empty(str_copy(__THE_0_d22_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d22_0), THE_EOL);
  print(stdout, "zssz", "d23:", str_empty(str_copy(__THE_0_d23_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d23_0), THE_EOL);
  print(stdout, "zssz", "d24:", str_empty(str_copy(__THE_0_d24_0)) ? str_alloc("") : str_alloc(" "), str_copy(__THE_0_d24_0), THE_EOL);
  str_free((struct str) __THE_0_d24_0);
  str_free((struct str) __THE_0_d23_0);
  str_free((struct str) __THE_0_d22_0);
  str_free((struct str) __THE_0_d21_0);
  str_free((struct str) __THE_0_d20_0);
  str_free((struct str) __THE_0_d19_0);
  str_free((struct str) __THE_0_d18_0);
  str_free((struct str) __THE_0_d17_0);
  str_free((struct str) __THE_0_d16_0);
  str_free((struct str) __THE_0_d15_0);
  str_free((struct str) __THE_0_d14_0);
  str_free((struct str) __THE_0_d13_0);
  str_free((struct str) __THE_0_d12_0);
  str_free((struct str) __THE_0_d11_0);
  str_free((struct str) __THE_0_d10_0);
  str_free((struct str) __THE_0_d9_0);
  str_free((struct str) __THE_0_d8_0);
  str_free((struct str) __THE_0_d7_0);
  str_free((struct str) __THE_0_d6_0);
  str_free((struct str) __THE_0_d5_0);
  str_free((struct str) __THE_0_d4_0);
  str_free((struct str) __THE_0_d3_0);
  str_free((struct str) __THE_0_d2_0);
  str_free((struct str) __THE_0_d1_0);
  str_free((struct str) __THE_0_c24_0);
  str_free((struct str) __THE_0_c23_0);
  str_free((struct str) __THE_0_c22_0);
  str_free((struct str) __THE_0_c21_0);
  str_free((struct str) __THE_0_c20_0);
  str_free((struct str) __THE_0_c19_0);
  str_free((struct str) __THE_0_c18_0);
  str_free((struct str) __THE_0_c17_0);
  str_free((struct str) __THE_0_c16_0);
  str_free((struct str) __THE_0_c15_0);
  str_free((struct str) __THE_0_c14_0);
  str_free((struct str) __THE_0_c13_0);
  str_free((struct str) __THE_0_c12_0);
  str_free((struct str) __THE_0_c11_0);
  str_free((struct str) __THE_0_c10_0);
  str_free((struct str) __THE_0_c9_0);
  str_free((struct str) __THE_0_c8_0);
  str_free((struct str) __THE_0_c7_0);
  str_free((struct str) __THE_0_c6_0);
  str_free((struct str) __THE_0_c5_0);
  str_free((struct str) __THE_0_c4_0);
  str_free((struct str) __THE_0_c3_0);
  str_free((struct str) __THE_0_c2_0);
  str_free((struct str) __THE_0_c1_0);
  str_free((struct str) __THE_0_b24_0);
  str_free((struct str) __THE_0_b23_0);
  str_free((struct str) __THE_0_b22_0);
  str_free((struct str) __THE_0_b21_0);
  str_free((struct str) __THE_0_b20_0);
  str_free((struct str) __THE_0_b19_0);
  str_free((struct str) __THE_0_b18_0);
  str_free((struct str) __THE_0_b17_0);
  str_free((struct str) __THE_0_b16_0);
  str_free((struct str) __THE_0_b15_0);
  str_free((struct str) __THE_0_b14_0);
  str_free((struct str) __THE_0_b13_0);
  str_free((struct str) __THE_0_b12_0);
  str_free((struct str) __THE_0_b11_0);
  str_free((struct str) __THE_0_b10_0);
  str_free((struct str) __THE_0_b9_0);
  str_free((struct str) __THE_0_b8_0);
  str_free((struct str) __THE_0_b7_0);
  str_free((struct str) __THE_0_b6_0);
  str_free((struct str) __THE_0_b5_0);
  str_free((struct str) __THE_0_b4_0);
  str_free((struct str) __THE_0_b3_0);
  str_free((struct str) __THE_0_b2_0);
  str_free((struct str) __THE_0_b1_0);
  str_free((struct str) __THE_0_a24_0);
  str_free((struct str) __THE_0_a23_0);
  str_free((struct str) __THE_0_a22_0);
  str_free((struct str) __THE_0_a21_0);
  str_free((struct str) __THE_0_a20_0);
  str_free((struct str) __THE_0_a19_0);
  str_free((struct str) __THE_0_a18_0);
  str_free((struct str) __THE_0_a17_0);
  str_free((struct str) __THE_0_a16_0);
  str_free((struct str) __THE_0_a15_0);
  str_free((struct str) __THE_0_a14_0);
  str_free((struct str) __THE_0_a13_0);
  str_free((struct str) __THE_0_a12_0);
  str_free((struct str) __THE_0_a11_0);
  str_free((struct str) __THE_0_a10_0);
  str_free((struct str) __THE_0_a9_0);
  str_free((struct str) __THE_0_a8_0);
  str_free((struct str) __THE_0_a7_0);
  str_free((struct str) __THE_0_a6_0);
  str_free((struct str) __THE_0_a5_0);
  str_free((struct str) __THE_0_a4_0);
  str_free((struct str) __THE_0_a3_0);
  str_free((struct str) __THE_0_a2_0);
  str_free((struct str) __THE_0_a1_0);
}
======= flags =======
======= stdout =======
a1:
a2: t
a3: test
a4:
a5:
a6:
a7:
a8:
a9: t
a10: ttt
a11: testttest
a12:
a13: t
a14: test
a15: t
a16: t
a17: test in test
a18: tttetsttt titnt tttetsttt
a19: testttesteteststestttest testitestntest testttesteteststestttest
a20: es in es
a21:  in{{ [ ] }}
a22: testestest in testestest
a23: t in t
a24: test in test
b1:
b2: t
b3: test
b4:
b5:
b6:
b7:
b8:
b9: t
b10: tt
b11: testt
b12:
b13: t
b14: test
b15: t
b16: t
b17: test in test
b18: ttest in test
b19: testtest in test
b20: est in test
b21:  in test
b22: testest in test
b23: t in test
b24: test in test
c1:
c2: t
c3: test
c4:
c5:
c6:
c7:
c8:
c9: t
c10: ttt
c11: testttest
c12:
c13: t
c14: test
c15: t
c16: t
c17: test in test
c18: tttest in test
c19: testttestest in test
c20: es in test
c21:  in{{ [ ] }}
c22: testestest in test
c23: t in t
c24: test in test
d1:
d2: t
d3: test
d4:
d5:
d6:
d7:
d8:
d9: t
d10: ttt
d11: testttest
d12:
d13: t
d14: test
d15: t
d16: t
d17: test in test
d18: tttetst in test
d19: testttestetestst in test
d20: es in est
d21:  in{{ [ ] }}
d22: testestest in testest
d23: t in t
d24: test in test
