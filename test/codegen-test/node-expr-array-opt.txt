======= stdin =======
main {
  var1: int?
  var2: int? = nil
  var3: int? = 3;
  [var1, var2, var3];
  [var1, var2, var3]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_array_opt_int;

struct __THE_1_array_opt_int {
  int32_t **d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t, ...);
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_opt_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_opt_int) {d, x};
}
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_opt_int_free((int32_t *) n.d[i]);
  free(n.d);
}

int main () {
  const int32_t *__THE_0_var1_0 = NULL;
  const int32_t *__THE_0_var2_0 = NULL;
  const int32_t *__THE_0_var3_0 = __THE_1_opt_int_alloc(3);
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) __THE_1_array_opt_int_alloc(3, __THE_1_opt_int_copy(__THE_0_var1_0), __THE_1_opt_int_copy(__THE_0_var2_0), __THE_1_opt_int_copy(__THE_0_var3_0)));
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) __THE_1_array_opt_int_alloc(3, __THE_1_opt_int_copy(__THE_0_var1_0), __THE_1_opt_int_copy(__THE_0_var2_0), __THE_1_opt_int_copy(__THE_0_var3_0)));
  __THE_1_opt_int_free((int32_t *) __THE_0_var3_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_var2_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_var1_0);
}
======= flags =======
======= stdout =======
