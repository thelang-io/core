======= stdin =======
main {
  o1: int | str = 1
  o2: int | str = "test"
  o1 == 1
  o2 != "test"
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 1
#define TYPE_str 2

struct str {
  char *d;
  size_t l;
};

struct __THE_1_union$0;

struct __THE_1_union$0 {
  int t;
  union {
    int32_t v1;
    struct str v2;
  };
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct __THE_1_union$0 __THE_1_union$0_alloc (int, ...);
void __THE_1_union$0_free (struct __THE_1_union$0);
struct __THE_1_union$0 __THE_1_union$0_copy (const struct __THE_1_union$0);
bool __THE_1_union$0_eq (struct __THE_1_union$0, struct __THE_1_union$0);
bool __THE_1_union$0_ne (struct __THE_1_union$0, struct __THE_1_union$0);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct __THE_1_union$0 __THE_1_union$0_alloc (int t, ...) {
  struct __THE_1_union$0 r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_int) r.v1 = va_arg(args, int32_t);
  if (t == TYPE_str) r.v2 = va_arg(args, struct str);
  va_end(args);
  return r;
}
void __THE_1_union$0_free (struct __THE_1_union$0 n) {
  if (n.t == TYPE_str) str_free((struct str) n.v2);
}
struct __THE_1_union$0 __THE_1_union$0_copy (const struct __THE_1_union$0 n) {
  struct __THE_1_union$0 r = {n.t};
  if (n.t == TYPE_int) r.v1 = n.v1;
  if (n.t == TYPE_str) r.v2 = str_copy(n.v2);
  return r;
}
bool __THE_1_union$0_eq (struct __THE_1_union$0 n1, struct __THE_1_union$0 n2) {
  bool r = false;
  if (n1.t == TYPE_int && n2.t == TYPE_int) r = n1.v1 == n2.v1;
  if (n1.t == TYPE_str && n2.t == TYPE_str) r = str_eq_str(str_copy(n1.v2), str_copy(n2.v2));
  __THE_1_union$0_free((struct __THE_1_union$0) n1);
  __THE_1_union$0_free((struct __THE_1_union$0) n2);
  return r;
}
bool __THE_1_union$0_ne (struct __THE_1_union$0 n1, struct __THE_1_union$0 n2) {
  bool r = false;
  if (n1.t == TYPE_int && n2.t == TYPE_int) r = n1.v1 != n2.v1;
  if (n1.t == TYPE_str && n2.t == TYPE_str) r = str_ne_str(str_copy(n1.v2), str_copy(n2.v2));
  __THE_1_union$0_free((struct __THE_1_union$0) n1);
  __THE_1_union$0_free((struct __THE_1_union$0) n2);
  return r;
}

int main () {
  const struct __THE_1_union$0 __THE_0_o1_0 = __THE_1_union$0_alloc(TYPE_int, 1);
  const struct __THE_1_union$0 __THE_0_o2_0 = __THE_1_union$0_alloc(TYPE_str, str_alloc("test"));
  __THE_1_union$0_eq(__THE_1_union$0_copy(__THE_0_o1_0), __THE_1_union$0_alloc(TYPE_int, 1));
  __THE_1_union$0_ne(__THE_1_union$0_copy(__THE_0_o2_0), __THE_1_union$0_alloc(TYPE_str, str_alloc("test")));
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_o2_0);
  __THE_1_union$0_free((struct __THE_1_union$0) __THE_0_o1_0);
}
======= flags =======
======= stdout =======
