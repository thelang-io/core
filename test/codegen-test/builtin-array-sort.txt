======= stdin =======
fn sortAsc (a: int, b: int) int { return a > b ? -1 : a == b ? 0 : 1 }
fn sortDesc (a: int, b: int) int { return a > b ? 1 : a == b ? 0 : -1 }

main {
  mut test: int[]
  test0: int[]
  test1 := [1]
  test2 := [1, 2]
  test3 := [1, 2, 3]
  test4 := [24, 78, 85, 9, 13, 92, 95, 98, 40, 22, 89, 18, 14, 92, 19]
  test5 := [21, 70, 11, 54, 96, 14, 14, 15, 35, 54, 67, 81, 34, 37, 10]

  print(test0)
  print(test = test0.sort(sortAsc))
  print(test1)
  print(test = test1.sort(sortAsc))
  print(test2)
  print(test = test2.sort(sortAsc))
  print(test3)
  print(test = test3.sort(sortAsc))
  print(test4)
  print(test = test4.sort(sortAsc))
  print(test5)
  print(test = test5.sort(sortDesc))
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_array_int;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000 {
  int32_t (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
  int32_t n0;
  int32_t n1;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct str int_str (int32_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
void *xalloc (void *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
int32_t __THE_1_sortAsc_0 (void *, void *);
int32_t __THE_1_sortDesc_0 (void *, void *);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_int *__THE_1_array_int_sort (struct __THE_1_array_int *, struct __THE_1_fn$1000, int, int);
struct str __THE_1_array_int_str (struct __THE_1_array_int);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_sortAsc_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn$1000P *p = pp;
  error_stack_push(&err_state, "/test", "sortAsc", p->line, p->col);
  const int32_t __THE_0_a_0 = p->n0;
  const int32_t __THE_0_b_0 = p->n1;
  v = __THE_0_a_0 > __THE_0_b_0 ? -1 : __THE_0_a_0 == __THE_0_b_0 ? 0 : 1;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_sortDesc_0 (void *px, void *pp) {
  int32_t v;
  struct __THE_1_fn$1000P *p = pp;
  error_stack_push(&err_state, "/test", "sortDesc", p->line, p->col);
  const int32_t __THE_0_a_0 = p->n0;
  const int32_t __THE_0_b_0 = p->n1;
  v = __THE_0_a_0 > __THE_0_b_0 ? 1 : __THE_0_a_0 == __THE_0_b_0 ? 0 : -1;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}
struct __THE_1_array_int *__THE_1_array_int_sort (struct __THE_1_array_int *self, struct __THE_1_fn$1000 n1, int line, int col) {
  if (self->l > 1) {
    while (1) {
      unsigned char b = 0;
      for (size_t i = 1; i < self->l; i++) {
        int32_t c = n1.f(n1.x, xalloc(&(struct __THE_1_fn$1000P) {line, col, self->d[i - 1], self->d[i]}, sizeof(struct __THE_1_fn$1000P)));
        if (c > 0) {
          b = 1;
          int32_t t = self->d[i];
          self->d[i] = self->d[i - 1];
          self->d[i - 1] = t;
        }
      }
      if (b == 0) break;
    }
  }
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n1);
  return self;
}
struct str __THE_1_array_int_str (struct __THE_1_array_int n) {
  struct str r = str_alloc("[");
  for (size_t i = 0; i < n.l; i++) {
    if (i != 0) r = str_concat_cstr(r, ", ");
    r = str_concat_str(r, int_str(n.d[i]));
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n);
  return str_concat_cstr(r, "]");
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_sortAsc_0 = (struct __THE_1_fn$1000) {&__THE_1_sortAsc_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_sortDesc_0 = (struct __THE_1_fn$1000) {&__THE_1_sortDesc_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
  struct __THE_1_array_int __THE_0_test_0 = __THE_1_array_int_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  const struct __THE_1_array_int __THE_0_test0_0 = __THE_1_array_int_alloc(0);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L5;
  const struct __THE_1_array_int __THE_0_test1_0 = __THE_1_array_int_alloc(1, 1);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const struct __THE_1_array_int __THE_0_test2_0 = __THE_1_array_int_alloc(2, 1, 2);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  const struct __THE_1_array_int __THE_0_test3_0 = __THE_1_array_int_alloc(3, 1, 2, 3);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const struct __THE_1_array_int __THE_0_test4_0 = __THE_1_array_int_alloc(15, 24, 78, 85, 9, 13, 92, 95, 98, 40, 22, 89, 18, 14, 92, 19);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L9;
  const struct __THE_1_array_int __THE_0_test5_0 = __THE_1_array_int_alloc(15, 21, 70, 11, 54, 96, 14, 14, 15, 35, 54, 67, 81, 34, 37, 10);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test0_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test_0 = __THE_1_array_int_realloc(__THE_0_test_0, __THE_1_array_int_copy(*__THE_1_array_int_sort(&__THE_0_test0_0, __THE_1_fn$1000_copy(__THE_0_sortAsc_0), 14, 16))))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test_0 = __THE_1_array_int_realloc(__THE_0_test_0, __THE_1_array_int_copy(*__THE_1_array_int_sort(&__THE_0_test1_0, __THE_1_fn$1000_copy(__THE_0_sortAsc_0), 16, 16))))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test_0 = __THE_1_array_int_realloc(__THE_0_test_0, __THE_1_array_int_copy(*__THE_1_array_int_sort(&__THE_0_test2_0, __THE_1_fn$1000_copy(__THE_0_sortAsc_0), 18, 16))))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test3_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test_0 = __THE_1_array_int_realloc(__THE_0_test_0, __THE_1_array_int_copy(*__THE_1_array_int_sort(&__THE_0_test3_0, __THE_1_fn$1000_copy(__THE_0_sortAsc_0), 20, 16))))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test4_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test_0 = __THE_1_array_int_realloc(__THE_0_test_0, __THE_1_array_int_copy(*__THE_1_array_int_sort(&__THE_0_test4_0, __THE_1_fn$1000_copy(__THE_0_sortAsc_0), 22, 16))))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test5_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L10;
  print(stdout, "sz", __THE_1_array_int_str(__THE_1_array_int_copy(__THE_0_test_0 = __THE_1_array_int_realloc(__THE_0_test_0, __THE_1_array_int_copy(*__THE_1_array_int_sort(&__THE_0_test5_0, __THE_1_fn$1000_copy(__THE_0_sortDesc_0), 24, 16))))), THE_EOL);
L10:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test5_0);
L9:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test4_0);
L8:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test3_0);
L7:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test2_0);
L6:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test1_0);
L5:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test0_0);
L4:
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_test_0);
L3:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
[]
[]
[1]
[1]
[1, 2]
[2, 1]
[1, 2, 3]
[3, 2, 1]
[24, 78, 85, 9, 13, 92, 95, 98, 40, 22, 89, 18, 14, 92, 19]
[98, 95, 92, 92, 89, 85, 78, 40, 24, 22, 19, 18, 14, 13, 9]
[21, 70, 11, 54, 96, 14, 14, 15, 35, 54, 67, 81, 34, 37, 10]
[10, 11, 14, 14, 15, 21, 34, 35, 37, 54, 54, 67, 70, 81, 96]
