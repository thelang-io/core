======= stdin =======
obj Test1 {
  a: any
}

fn testCall () any {
  return 1
}

main {
  test: any
  refTest := ref test
  test1 := Test1{a: 2}
  mut test2: any = 3

  v1 := test.str()
  v2 := test1.a.str()
  v3 := (test2 = 4).str()
  v4 := testCall().str()
  v5 := (1 > 2 ? test : test2).str()
  v6 := (ref test).str()
  v7 := refTest.str()

  fn testCtx () {
    v11 := test.str()
    v12 := test1.a.str()
    v13 := (test2 = 5).str()
    v14 := testCall().str()
    v15 := (ref test).str()
    v16 := refTest.str()
  }

  testCtx()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_int 2

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_fn_sFRanyFE;
struct __THE_1_any_int;
struct __THE_1_fn_sFRvoidFE;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  const struct any __THE_0_a;
};
struct __THE_1_fn_sFRanyFE {
  struct any (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_any_int {
  int32_t d;
};
struct __THE_1_fn_sFRvoidFE {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  struct any *__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0;
  const struct any **__THE_0_refTest_0;
  const struct any *__THE_0_test_0;
  const struct __THE_1_fn_sFRanyFE *__THE_0_testCall_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
struct any any_copy (const struct any);
void any_free (struct any);
struct any any_realloc (struct any, struct any);
struct str any_str (struct any);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct any);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct any __THE_1_any_int_alloc (int32_t);
struct any __THE_1_any_int_copy (const struct any);
void __THE_1_any_int_free (struct any);
struct any __THE_1_testCall_0 (void *);
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE);
void __THE_1_mainSDtestCtx_0 (void *);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn_sFRvoidFE *, struct __THE_1_mainSDtestCtx_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct any any_copy (const struct any n) {
  return n.d == NULL ? n : n._copy(n);
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct any any_realloc (struct any n1, struct any n2) {
  if (n1.d != NULL) n1._free(n1);
  return n2;
}
struct str any_str (struct any n) {
  if (n.d != NULL) n._free(n);
  return str_alloc("any");
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct any __THE_0_a) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  any_free((struct any) n->__THE_0_a);
  free(n);
}
struct any __THE_1_any_int_alloc (int32_t d) {
  size_t l = sizeof(struct __THE_1_any_int);
  struct __THE_1_any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_int, r, l, &__THE_1_any_int_copy, &__THE_1_any_int_free};
}
struct any __THE_1_any_int_copy (const struct any n) {
  struct __THE_1_any_int *o = n.d;
  struct __THE_1_any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void __THE_1_any_int_free (struct any _n) {
  struct __THE_1_any_int *n = _n.d;
  free(n);
}
struct any __THE_1_testCall_0 (void *px) {
  return __THE_1_any_int_alloc(1);
}
void __THE_1_fn_sFRvoidFE_free (struct __THE_1_fn_sFRvoidFE n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  struct any *__THE_0_test2_0 = x->__THE_0_test2_0;
  const struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  const struct any **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  const struct any *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn_sFRanyFE *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  const struct str __THE_0_v11_0 = any_str(any_copy(*__THE_0_test_0));
  const struct str __THE_0_v12_0 = any_str(any_copy((*__THE_0_test1_0)->__THE_0_a));
  const struct str __THE_0_v13_0 = any_str((any_copy(*__THE_0_test2_0 = any_realloc(*__THE_0_test2_0, __THE_1_any_int_alloc(5)))));
  const struct str __THE_0_v14_0 = any_str((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x));
  const struct str __THE_0_v15_0 = any_str((any_copy(*__THE_0_test_0)));
  const struct str __THE_0_v16_0 = any_str(any_copy(**__THE_0_refTest_0));
  str_free((struct str) __THE_0_v16_0);
  str_free((struct str) __THE_0_v15_0);
  str_free((struct str) __THE_0_v14_0);
  str_free((struct str) __THE_0_v13_0);
  str_free((struct str) __THE_0_v12_0);
  str_free((struct str) __THE_0_v11_0);
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn_sFRvoidFE *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn_sFRanyFE __THE_0_testCall_0 = (struct __THE_1_fn_sFRanyFE) {&__THE_1_testCall_0, NULL, 0};
  const struct any __THE_0_test_0 = {0, NULL, 0, NULL, NULL};
  const struct any *__THE_0_refTest_0 = &__THE_0_test_0;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_1_any_int_alloc(2));
  struct any __THE_0_test2_0 = __THE_1_any_int_alloc(3);
  const struct str __THE_0_v1_0 = any_str(any_copy(__THE_0_test_0));
  const struct str __THE_0_v2_0 = any_str(any_copy(__THE_0_test1_0->__THE_0_a));
  const struct str __THE_0_v3_0 = any_str((any_copy(__THE_0_test2_0 = any_realloc(__THE_0_test2_0, __THE_1_any_int_alloc(4)))));
  const struct str __THE_0_v4_0 = any_str(__THE_0_testCall_0.f(__THE_0_testCall_0.x));
  const struct str __THE_0_v5_0 = any_str((1 > 2 ? any_copy(__THE_0_test_0) : any_copy(__THE_0_test2_0)));
  const struct str __THE_0_v6_0 = any_str((any_copy(__THE_0_test_0)));
  const struct str __THE_0_v7_0 = any_str(any_copy(*__THE_0_refTest_0));
  const struct __THE_1_fn_sFRvoidFE __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn_sFRvoidFE *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test2_0, &__THE_0_test1_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_0_mainSDtestCtx_0.f(__THE_0_mainSDtestCtx_0.x);
  __THE_1_fn_sFRvoidFE_free((struct __THE_1_fn_sFRvoidFE) __THE_0_mainSDtestCtx_0);
  str_free((struct str) __THE_0_v7_0);
  str_free((struct str) __THE_0_v6_0);
  str_free((struct str) __THE_0_v5_0);
  str_free((struct str) __THE_0_v4_0);
  str_free((struct str) __THE_0_v3_0);
  str_free((struct str) __THE_0_v2_0);
  str_free((struct str) __THE_0_v1_0);
  any_free((struct any) __THE_0_test2_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
  any_free((struct any) __THE_0_test_0);
}
======= flags =======
======= stdout =======
