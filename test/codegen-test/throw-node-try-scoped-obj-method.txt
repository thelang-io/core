======= stdin =======
obj TestError { message: str; stack: str; }

obj Test {
  fn test1 () {
    throw error_NewError("test")
  }
}

fn test2 () {
  t := Test{}
  t.test1()
}

main {
  try {
    test2()
  } catch err: TestError {
    print("TestError:", err.stack)
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1
#define TYPE_TestError_0 2

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_TestError_0;
struct __THE_1_Test_0;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_test2_0X;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_TestError_0 {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Test_0 {
  void *_;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  err_state_t *err_state;
  int line;
  int col;
};
struct __THE_1_fn$1000 {
  void (*f) (void *, void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  err_state_t *err_state;
  int line;
  int col;
};
struct __THE_1_test2_0X {
  const struct __THE_1_fn$1000 *__THE_0_TestSDtest1_0;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_assign (err_state_t *, int, void *, void (*f) (void *), int, int);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void error_stack_str (err_state_t *);
void error_unset (err_state_t *);
struct error_Error *new_error (struct str);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
void *xalloc (void *, size_t);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
void __THE_1_TestError_0_free (struct __THE_1_TestError_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc ();
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_test2_0 (void *, void *);
void __THE_1_test2_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_test2_0X);
void __THE_1_TestSDtest1_0 (void *, void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_assign (err_state_t *fn_err_state, int id, void *ctx, void (*f) (void *), int line, int col) {
  fn_err_state->id = id;
  fn_err_state->ctx = ctx;
  fn_err_state->_free = f;
  error_stack_pos(fn_err_state, line, col);
  error_stack_str(fn_err_state);
}
void error_stack_pop (err_state_t *fn_err_state) {
  fn_err_state->stack_idx--;
}
void error_stack_pos (err_state_t *fn_err_state, int line, int col) {
  if (line != 0) fn_err_state->stack[fn_err_state->stack_idx - 1].line = line;
  if (col != 0) fn_err_state->stack[fn_err_state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *fn_err_state, const char *file, const char *name, int line, int col) {
  fn_err_state->stack[fn_err_state->stack_idx].file = file;
  fn_err_state->stack[fn_err_state->stack_idx].name = name;
  error_stack_pos(fn_err_state, line, col);
  fn_err_state->stack_idx++;
}
void error_stack_str (err_state_t *fn_err_state) {
  struct str *stack = (struct str *) &((struct error_Error *) fn_err_state->ctx)->__THE_0_stack;
  struct str message = ((struct error_Error *) fn_err_state->ctx)->__THE_0_message;
  stack->l = message.l;
  stack->d = re_alloc(stack->d, stack->l);
  memcpy(stack->d, message.d, stack->l);
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    stack->d = re_alloc(stack->d, stack->l + z + 1);
    if (it.col == 0 && it.line == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&stack->d[stack->l], fmt, it.name, it.file, it.line, it.col);
    }
    stack->l += z;
  }
}
void error_unset (err_state_t *fn_err_state) {
  fn_err_state->id = -1;
  fn_err_state->_free = NULL;
}
struct error_Error *new_error (struct str n1) {
  return error_Error_alloc(n1, (struct str) {NULL, 0});
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
void __THE_1_TestError_0_free (struct __THE_1_TestError_0 *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc () {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {NULL};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_test2_0 (void *px, void *pp) {
  struct __THE_1_fn$1001P *p = pp;
  err_state_t *fn_err_state = p->err_state;
  error_stack_push(fn_err_state, "/test", "test2", p->line, p->col);
  struct __THE_1_test2_0X *x = px;
  const struct __THE_1_fn$1000 *__THE_0_TestSDtest1_0 = x->__THE_0_TestSDtest1_0;
  const struct __THE_1_Test_0 *__THE_0_t_0 = __THE_1_Test_0_alloc();
  if (setjmp(fn_err_state->buf[fn_err_state->buf_idx++]) != 0) goto L1;
  (*__THE_0_TestSDtest1_0).f((*__THE_0_TestSDtest1_0).x, xalloc(&(struct __THE_1_fn$1000P) {fn_err_state, 11, 3}, sizeof(struct __THE_1_fn$1000P)));
L1:
  fn_err_state->buf_idx--;
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_t_0);
  free(pp);
  error_stack_pop(fn_err_state);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf[fn_err_state->buf_idx - 1], fn_err_state->id);
}
void __THE_1_test2_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_test2_0X x) {
  size_t l = sizeof(struct __THE_1_test2_0X);
  struct __THE_1_test2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_test2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_TestSDtest1_0 (void *px, void *pp) {
  struct __THE_1_fn$1000P *p = pp;
  err_state_t *fn_err_state = p->err_state;
  error_stack_push(fn_err_state, "/test", "Test.test1", p->line, p->col);
  error_assign(fn_err_state, TYPE_error_Error, (void *) new_error(str_alloc("test")), (void (*) (void *)) &error_Error_free, 5, 5);
  goto L2;
L2:
  free(pp);
  error_stack_pop(fn_err_state);
  if (fn_err_state->id != -1) longjmp(fn_err_state->buf[fn_err_state->buf_idx - 1], fn_err_state->id);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1001 __THE_0_test2_0;
  const struct __THE_1_fn$1000 __THE_0_TestSDtest1_0 = (struct __THE_1_fn$1000) {&__THE_1_TestSDtest1_0, NULL, 0};
  __THE_1_test2_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_test2_0, (struct __THE_1_test2_0X) {&__THE_0_TestSDtest1_0});
  switch (setjmp(err_state.buf[err_state.buf_idx++])) {
    case 0: {
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L3;
      __THE_0_test2_0.f(__THE_0_test2_0.x, xalloc(&(struct __THE_1_fn$1001P) {&err_state, 16, 5}, sizeof(struct __THE_1_fn$1001P)));
L3:
      err_state.buf_idx--;
      if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
      err_state.buf_idx--;
      break;
    }
    case TYPE_TestError_0: {
      err_state.buf_idx--;
      error_unset(&err_state);
      const struct __THE_1_TestError_0 *__THE_0_err_0 = (struct __THE_1_TestError_0 *) err_state.ctx;
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
      print(stdout, "zzsz", "TestError:", " ", str_copy(__THE_0_err_0->__THE_0_stack), THE_EOL);
L4:
      err_state.buf_idx--;
      __THE_1_TestError_0_free((struct __THE_1_TestError_0 *) __THE_0_err_0);
      if (err_state.id != -1) goto L0;
      break;
    }
    default: {
      err_state.buf_idx--;
      goto L0;
    }
  }
L0:
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_test2_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stderr =======
Uncaught Error: test
  at Test.test1 (/test:5:5)
  at test2 (/test:11:3)
  at main (/test:16:5)
