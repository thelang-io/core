======= stdin =======
obj Item {
  a: int[str]
}

obj Items {
  d: Item
}

main {
  items := Items{}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair$0;
struct __THE_1_map$0;
struct __THE_1_Item_0;
struct __THE_1_Items_0;

struct __THE_1_pair$0 {
  struct str f;
  int32_t s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};
struct __THE_1_Item_0 {
  const struct __THE_1_map$0 __THE_0_a;
};
struct __THE_1_Items_0 {
  const struct __THE_1_Item_0 *__THE_0_d;
};

void *alloc (size_t);
void str_free (struct str);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
void __THE_1_map$0_free (struct __THE_1_map$0);
struct __THE_1_Item_0 *__THE_1_Item_0_alloc (struct __THE_1_map$0);
void __THE_1_Item_0_free (struct __THE_1_Item_0 *);
struct __THE_1_Items_0 *__THE_1_Items_0_alloc (struct __THE_1_Item_0 *);
void __THE_1_Items_0_free (struct __THE_1_Items_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_Item_0 *__THE_1_Item_0_alloc (struct __THE_1_map$0 __THE_0_a) {
  struct __THE_1_Item_0 *r = alloc(sizeof(struct __THE_1_Item_0));
  struct __THE_1_Item_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Item_0));
  return r;
}
void __THE_1_Item_0_free (struct __THE_1_Item_0 *n) {
  __THE_1_map$0_free((struct __THE_1_map$0) n->__THE_0_a);
  free(n);
}
struct __THE_1_Items_0 *__THE_1_Items_0_alloc (struct __THE_1_Item_0 *__THE_0_d) {
  struct __THE_1_Items_0 *r = alloc(sizeof(struct __THE_1_Items_0));
  struct __THE_1_Items_0 s = {__THE_0_d};
  memcpy(r, &s, sizeof(struct __THE_1_Items_0));
  return r;
}
void __THE_1_Items_0_free (struct __THE_1_Items_0 *n) {
  __THE_1_Item_0_free((struct __THE_1_Item_0 *) n->__THE_0_d);
  free(n);
}

int main () {
  const struct __THE_1_Items_0 *__THE_0_items_0 = __THE_1_Items_0_alloc(__THE_1_Item_0_alloc(__THE_1_map$0_alloc(0)));
  __THE_1_Items_0_free((struct __THE_1_Items_0 *) __THE_0_items_0);
}
======= flags =======
======= stdout =======
