======= stdin =======
main {
  mut a := "str1"
  a = "str2"
  a += "str3"
}
======= code =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
void *alloc (size_t);

struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
void str_free (struct str s) {
  free(s.c);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.c);
  return s2;
}
void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int main () {
  struct str __THE_0_a_0 = str_alloc("str1");
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_alloc("str2"));
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_concat_cstr(str_copy(__THE_0_a_0), "str3"));
  str_free((struct str) __THE_0_a_0);
}
======= code-windows =======
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *c;
  size_t l;
};

struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
void *alloc (size_t);

struct str str_alloc (const char *c) {
  size_t l = strlen(c);
  char *r = alloc(l);
  memcpy(r, c, l);
  return (struct str) {r, l};
}
struct str str_concat_cstr (struct str s, const char *c) {
  size_t l = s.l + strlen(c);
  char *r = alloc(l);
  memcpy(r, s.c, s.l);
  memcpy(&r[s.l], c, l - s.l);
  free(s.c);
  return (struct str) {r, l};
}
struct str str_copy (const struct str s) {
  char *r = alloc(s.l);
  memcpy(r, s.c, s.l);
  return (struct str) {r, s.l};
}
void str_free (struct str s) {
  free(s.c);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.c);
  return s2;
}
void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\r\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

int main () {
  struct str __THE_0_a_0 = str_alloc("str1");
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_alloc("str2"));
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_concat_cstr(str_copy(__THE_0_a_0), "str3"));
  str_free((struct str) __THE_0_a_0);
}
======= flags =======
======= stdout =======
