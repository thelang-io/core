======= stdin =======
main {
  g1: int[] | str[] = [1, 2, 3]
  g2: int[] | str[] = ["", "test1", "test2"]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_array_int 2
#define TYPE_array_str 3

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_array_str;
struct __THE_1_array_int;
struct __THE_1_union_array_intUSarray_strUE;

struct __THE_1_array_str {
  struct str *d;
  size_t l;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_union_array_intUSarray_strUE {
  int t;
  union {
    struct __THE_1_array_int v2;
    struct __THE_1_array_str v3;
  };
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct __THE_1_array_str __THE_1_array_str_alloc (size_t, ...);
void __THE_1_array_str_free (struct __THE_1_array_str);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_union_array_intUSarray_strUE __THE_1_union_array_intUSarray_strUE_alloc (int, ...);
void __THE_1_union_array_intUSarray_strUE_free (struct __THE_1_union_array_intUSarray_strUE);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_array_str __THE_1_array_str_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_str) {NULL, 0};
  struct str *d = alloc(x * sizeof(struct str));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct str);
  va_end(args);
  return (struct __THE_1_array_str) {d, x};
}
void __THE_1_array_str_free (struct __THE_1_array_str n) {
  for (size_t i = 0; i < n.l; i++) str_free((struct str) n.d[i]);
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_union_array_intUSarray_strUE __THE_1_union_array_intUSarray_strUE_alloc (int t, ...) {
  struct __THE_1_union_array_intUSarray_strUE r = {t};
  va_list args;
  va_start(args, t);
  if (t == TYPE_array_int) r.v2 = va_arg(args, struct __THE_1_array_int);
  if (t == TYPE_array_str) r.v3 = va_arg(args, struct __THE_1_array_str);
  va_end(args);
  return r;
}
void __THE_1_union_array_intUSarray_strUE_free (struct __THE_1_union_array_intUSarray_strUE n) {
  if (n.t == TYPE_array_int) __THE_1_array_int_free((struct __THE_1_array_int) n.v2);
  if (n.t == TYPE_array_str) __THE_1_array_str_free((struct __THE_1_array_str) n.v3);
}

int main () {
  const struct __THE_1_union_array_intUSarray_strUE __THE_0_g1_0 = __THE_1_union_array_intUSarray_strUE_alloc(TYPE_array_int, __THE_1_array_int_alloc(3, 1, 2, 3));
  const struct __THE_1_union_array_intUSarray_strUE __THE_0_g2_0 = __THE_1_union_array_intUSarray_strUE_alloc(TYPE_array_str, __THE_1_array_str_alloc(3, str_alloc(""), str_alloc("test1"), str_alloc("test2")));
  __THE_1_union_array_intUSarray_strUE_free((struct __THE_1_union_array_intUSarray_strUE) __THE_0_g2_0);
  __THE_1_union_array_intUSarray_strUE_free((struct __THE_1_union_array_intUSarray_strUE) __THE_0_g1_0);
}
======= flags =======
======= stdout =======
