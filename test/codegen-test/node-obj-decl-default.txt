======= stdin =======
obj Test {
  a: int

  p00: any
  p01: int[]
  p02: int?[]
  p03: int[]?[]
  p04: int?[][]
  p05: bool
  p06: byte
  p07: char
  p08: f32
  p09: f64
  p11: float
  p12: i8
  p13: i16
  p14: i32
  p15: i64
  p16: int
  p17: int[]?
  p18: (ref int[])?
  p19: str
  p20: u8
  p21: u16
  p22: u32
  p23: u64
}

main {
  test := Test{a: 1}
}
======= code =======
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void any_free (struct any);
struct str str_alloc (const char *);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_array_int;
struct __THE_1_array_opt_int;
struct __THE_1_array_opt_array_int;
struct __THE_1_array_array_opt_int;
struct __THE_1_Test_0;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_array_opt_int {
  int32_t **d;
  size_t l;
};
struct __THE_1_array_opt_array_int {
  struct __THE_1_array_int **d;
  size_t l;
};
struct __THE_1_array_array_opt_int {
  struct __THE_1_array_opt_int *d;
  size_t l;
};
struct __THE_1_Test_0 {
  int32_t __THE_0_a;
  struct any __THE_0_p00;
  struct __THE_1_array_int __THE_0_p01;
  struct __THE_1_array_opt_int __THE_0_p02;
  struct __THE_1_array_opt_array_int __THE_0_p03;
  struct __THE_1_array_array_opt_int __THE_0_p04;
  bool __THE_0_p05;
  unsigned char __THE_0_p06;
  char __THE_0_p07;
  float __THE_0_p08;
  double __THE_0_p09;
  double __THE_0_p11;
  int8_t __THE_0_p12;
  int16_t __THE_0_p13;
  int32_t __THE_0_p14;
  int64_t __THE_0_p15;
  int32_t __THE_0_p16;
  struct __THE_1_array_int *__THE_0_p17;
  struct __THE_1_array_int **__THE_0_p18;
  struct str __THE_0_p19;
  uint8_t __THE_0_p20;
  uint16_t __THE_0_p21;
  uint32_t __THE_0_p22;
  uint64_t __THE_0_p23;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
void __THE_1_opt_int_free (int32_t *);
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t, ...);
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int);
void __THE_1_opt_array_int_free (struct __THE_1_array_int *);
struct __THE_1_array_opt_array_int __THE_1_array_opt_array_int_alloc (size_t, ...);
void __THE_1_array_opt_array_int_free (struct __THE_1_array_opt_array_int);
struct __THE_1_array_array_opt_int __THE_1_array_array_opt_int_alloc (size_t, ...);
void __THE_1_array_array_opt_int_free (struct __THE_1_array_array_opt_int);
void __THE_1_opt_ref_array_int_free (struct __THE_1_array_int **);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t, struct any, struct __THE_1_array_int, struct __THE_1_array_opt_int, struct __THE_1_array_opt_array_int, struct __THE_1_array_array_opt_int, bool, unsigned char, char, float, double, double, int8_t, int16_t, int32_t, int64_t, int32_t, struct __THE_1_array_int *, struct __THE_1_array_int **, struct str, uint8_t, uint16_t, uint32_t, uint64_t);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_array_opt_int __THE_1_array_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_opt_int) {NULL, 0};
  int32_t **d = alloc(x * sizeof(int32_t *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t *);
  va_end(args);
  return (struct __THE_1_array_opt_int) {d, x};
}
void __THE_1_array_opt_int_free (struct __THE_1_array_opt_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_opt_int_free((int32_t *) n.d[i]);
  free(n.d);
}
void __THE_1_opt_array_int_free (struct __THE_1_array_int *n) {
  if (n == NULL) return;
  __THE_1_array_int_free(*n);
  free(n);
}
struct __THE_1_array_opt_array_int __THE_1_array_opt_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_opt_array_int) {NULL, 0};
  struct __THE_1_array_int **d = alloc(x * sizeof(struct __THE_1_array_int *));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_int *);
  va_end(args);
  return (struct __THE_1_array_opt_array_int) {d, x};
}
void __THE_1_array_opt_array_int_free (struct __THE_1_array_opt_array_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_opt_array_int_free((struct __THE_1_array_int *) n.d[i]);
  free(n.d);
}
struct __THE_1_array_array_opt_int __THE_1_array_array_opt_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_array_opt_int) {NULL, 0};
  struct __THE_1_array_opt_int *d = alloc(x * sizeof(struct __THE_1_array_opt_int));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, struct __THE_1_array_opt_int);
  va_end(args);
  return (struct __THE_1_array_array_opt_int) {d, x};
}
void __THE_1_array_array_opt_int_free (struct __THE_1_array_array_opt_int n) {
  for (size_t i = 0; i < n.l; i++) __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) n.d[i]);
  free(n.d);
}
void __THE_1_opt_ref_array_int_free (struct __THE_1_array_int **n) {
  if (n == NULL) return;
  free(n);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_a, struct any __THE_0_p00, struct __THE_1_array_int __THE_0_p01, struct __THE_1_array_opt_int __THE_0_p02, struct __THE_1_array_opt_array_int __THE_0_p03, struct __THE_1_array_array_opt_int __THE_0_p04, bool __THE_0_p05, unsigned char __THE_0_p06, char __THE_0_p07, float __THE_0_p08, double __THE_0_p09, double __THE_0_p11, int8_t __THE_0_p12, int16_t __THE_0_p13, int32_t __THE_0_p14, int64_t __THE_0_p15, int32_t __THE_0_p16, struct __THE_1_array_int *__THE_0_p17, struct __THE_1_array_int **__THE_0_p18, struct str __THE_0_p19, uint8_t __THE_0_p20, uint16_t __THE_0_p21, uint32_t __THE_0_p22, uint64_t __THE_0_p23) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  r->__THE_0_p00 = __THE_0_p00;
  r->__THE_0_p01 = __THE_0_p01;
  r->__THE_0_p02 = __THE_0_p02;
  r->__THE_0_p03 = __THE_0_p03;
  r->__THE_0_p04 = __THE_0_p04;
  r->__THE_0_p05 = __THE_0_p05;
  r->__THE_0_p06 = __THE_0_p06;
  r->__THE_0_p07 = __THE_0_p07;
  r->__THE_0_p08 = __THE_0_p08;
  r->__THE_0_p09 = __THE_0_p09;
  r->__THE_0_p11 = __THE_0_p11;
  r->__THE_0_p12 = __THE_0_p12;
  r->__THE_0_p13 = __THE_0_p13;
  r->__THE_0_p14 = __THE_0_p14;
  r->__THE_0_p15 = __THE_0_p15;
  r->__THE_0_p16 = __THE_0_p16;
  r->__THE_0_p17 = __THE_0_p17;
  r->__THE_0_p18 = __THE_0_p18;
  r->__THE_0_p19 = __THE_0_p19;
  r->__THE_0_p20 = __THE_0_p20;
  r->__THE_0_p21 = __THE_0_p21;
  r->__THE_0_p22 = __THE_0_p22;
  r->__THE_0_p23 = __THE_0_p23;
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  any_free((struct any) o->__THE_0_p00);
  __THE_1_array_int_free((struct __THE_1_array_int) o->__THE_0_p01);
  __THE_1_array_opt_int_free((struct __THE_1_array_opt_int) o->__THE_0_p02);
  __THE_1_array_opt_array_int_free((struct __THE_1_array_opt_array_int) o->__THE_0_p03);
  __THE_1_array_array_opt_int_free((struct __THE_1_array_array_opt_int) o->__THE_0_p04);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) o->__THE_0_p17);
  __THE_1_opt_ref_array_int_free((struct __THE_1_array_int **) o->__THE_0_p18);
  str_free((struct str) o->__THE_0_p19);
  free(o);
}

int main () {
  const struct __THE_1_Test_0 *__THE_0_test_0 = __THE_1_Test_0_alloc(1, (struct any) {0, NULL, 0, NULL, NULL}, __THE_1_array_int_alloc(0), __THE_1_array_opt_int_alloc(0), __THE_1_array_opt_array_int_alloc(0), __THE_1_array_array_opt_int_alloc(0), false, 0, '\0', 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, str_alloc(""), 0, 0, 0, 0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test_0);
}
======= flags =======
======= stdout =======
