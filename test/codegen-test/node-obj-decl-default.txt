======= stdin =======
obj Test {
  p01: bool
  p02: byte
  p03: char
  p04: f32
  p05: f64
  p06: float
  p07: i8
  p08: i16
  p09: i32
  p10: i64
  p11: int
  p12: u8
  p13: u16
  p14: u32
  p15: u64
}

main {
  test := Test{}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_Test_0;

struct __THE_1_Test_0 {
  const bool __THE_0_p01;
  const unsigned char __THE_0_p02;
  const char __THE_0_p03;
  const float __THE_0_p04;
  const double __THE_0_p05;
  const double __THE_0_p06;
  const int8_t __THE_0_p07;
  const int16_t __THE_0_p08;
  const int32_t __THE_0_p09;
  const int64_t __THE_0_p10;
  const int32_t __THE_0_p11;
  const uint8_t __THE_0_p12;
  const uint16_t __THE_0_p13;
  const uint32_t __THE_0_p14;
  const uint64_t __THE_0_p15;
};

void *alloc (size_t);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (bool, unsigned char, char, float, double, double, int8_t, int16_t, int32_t, int64_t, int32_t, uint8_t, uint16_t, uint32_t, uint64_t);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (bool __THE_0_p01, unsigned char __THE_0_p02, char __THE_0_p03, float __THE_0_p04, double __THE_0_p05, double __THE_0_p06, int8_t __THE_0_p07, int16_t __THE_0_p08, int32_t __THE_0_p09, int64_t __THE_0_p10, int32_t __THE_0_p11, uint8_t __THE_0_p12, uint16_t __THE_0_p13, uint32_t __THE_0_p14, uint64_t __THE_0_p15) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_p01, __THE_0_p02, __THE_0_p03, __THE_0_p04, __THE_0_p05, __THE_0_p06, __THE_0_p07, __THE_0_p08, __THE_0_p09, __THE_0_p10, __THE_0_p11, __THE_0_p12, __THE_0_p13, __THE_0_p14, __THE_0_p15};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  free(n);
}

int main () {
  const struct __THE_1_Test_0 *__THE_0_test_0 = __THE_1_Test_0_alloc(false, 0, '\0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test_0);
}
======= flags =======
======= stdout =======
