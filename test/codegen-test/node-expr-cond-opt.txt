======= stdin =======
main {
  a: int? = 1
  b: int? = 2

  true ? a : nil
  false ? a : 2
  true ? 3 : b
  true ? nil : b
  false ? a : b
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
void __THE_1_opt_int_free (int32_t *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}

int main () {
  const int32_t *__THE_0_a_0 = __THE_1_opt_int_alloc(1);
  const int32_t *__THE_0_b_0 = __THE_1_opt_int_alloc(2);
  __THE_1_opt_int_free((int32_t *) (true ? __THE_1_opt_int_copy(__THE_0_a_0) : NULL));
  __THE_1_opt_int_free((int32_t *) (false ? __THE_1_opt_int_copy(__THE_0_a_0) : __THE_1_opt_int_alloc(2)));
  __THE_1_opt_int_free((int32_t *) (true ? __THE_1_opt_int_alloc(3) : __THE_1_opt_int_copy(__THE_0_b_0)));
  __THE_1_opt_int_free((int32_t *) (true ? NULL : __THE_1_opt_int_copy(__THE_0_b_0)));
  __THE_1_opt_int_free((int32_t *) (false ? __THE_1_opt_int_copy(__THE_0_a_0) : __THE_1_opt_int_copy(__THE_0_b_0)));
  __THE_1_opt_int_free((int32_t *) __THE_0_b_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
