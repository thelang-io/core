======= stdin =======
obj Test1 {
  a: int
}

obj Test2 {
  t1: Test1
}

main {
  Test2{t1: Test1{a: 1}}
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;

struct __THE_1_Test1_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_Test2_0 {
  const struct __THE_1_Test1_0 *__THE_0_t1;
};

void *alloc (size_t);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *o) {
  free(o);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_Test1_0 *__THE_0_t1) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_t1};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *o) {
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) o->__THE_0_t1);
  free(o);
}

int main () {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_1_Test2_0_alloc(__THE_1_Test1_0_alloc(1)));
}
======= flags =======
======= stdout =======
