======= stdin =======
obj Test {
  mut a: int?
}

main {
  mut test: int?

  a := test == nil ? 1 : test
  b := test != nil ? test : 2
  c := nil == test ? 3 : test
  d := nil != test ? test : 4

  e := (test = 5) == nil ? 5 : test
  f := (test = nil) != nil ? test : 6
  e := nil == (test = nil) ? 7 : test
  f := nil != (test = 8) ? test : 8

  mut test2 := Test{}

  a2 := test2.a == nil ? 1 : test2.a
  b2 := test2.a != nil ? test2.a : 2
  c2 := nil == test2.a ? 3 : test2.a
  d2 := nil != test2.a ? test2.a : 4

  e2 := (test2.a = 5) == nil ? 5 : test2.a
  f2 := (test2.a = nil) != nil ? test2.a : 6
  e2 := nil == (test2.a = nil) ? 7 : test2.a
  f2 := nil != (test2.a = 8) ? test2.a : 8
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_Test_0;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_Test_0 {
  int32_t *__THE_0_a;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
struct str error_stack_str (err_state_t *);
struct error_Error *error_Error_alloc (struct str, struct str);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t *__THE_1_opt_int_realloc (int32_t *, int32_t *);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t *__THE_1_opt_int_realloc (int32_t *n1, int32_t *n2) {
  __THE_1_opt_int_free((int32_t *) n1);
  return n2;
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t *__THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  __THE_1_opt_int_free((int32_t *) n->__THE_0_a);
  free(n);
}

int main () {
  int32_t *__THE_0_test_0 = NULL;
  const int32_t __THE_0_a_0 = __THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_test_0), NULL) ? 1 : *__THE_0_test_0;
  const int32_t __THE_0_b_0 = __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_test_0), NULL) ? *__THE_0_test_0 : 2;
  const int32_t __THE_0_c_0 = __THE_1_opt_int_eq(NULL, __THE_1_opt_int_copy(__THE_0_test_0)) ? 3 : *__THE_0_test_0;
  const int32_t __THE_0_d_0 = __THE_1_opt_int_ne(NULL, __THE_1_opt_int_copy(__THE_0_test_0)) ? *__THE_0_test_0 : 4;
  const int32_t __THE_0_e_0 = __THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(5)))), NULL) ? 5 : *__THE_0_test_0;
  const int32_t __THE_0_f_0 = __THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL))), NULL) ? *__THE_0_test_0 : 6;
  const int32_t __THE_0_e_1 = __THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, NULL)))) ? 7 : *__THE_0_test_0;
  const int32_t __THE_0_f_1 = __THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test_0 = __THE_1_opt_int_realloc(__THE_0_test_0, __THE_1_opt_int_alloc(8))))) ? *__THE_0_test_0 : 8;
  struct __THE_1_Test_0 *__THE_0_test2_0 = __THE_1_Test_0_alloc(NULL);
  const int32_t __THE_0_a2_0 = __THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a), NULL) ? 1 : *__THE_0_test2_0->__THE_0_a;
  const int32_t __THE_0_b2_0 = __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a), NULL) ? *__THE_0_test2_0->__THE_0_a : 2;
  const int32_t __THE_0_c2_0 = __THE_1_opt_int_eq(NULL, __THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a)) ? 3 : *__THE_0_test2_0->__THE_0_a;
  const int32_t __THE_0_d2_0 = __THE_1_opt_int_ne(NULL, __THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a)) ? *__THE_0_test2_0->__THE_0_a : 4;
  const int32_t __THE_0_e2_0 = __THE_1_opt_int_eq((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(5)))), NULL) ? 5 : *__THE_0_test2_0->__THE_0_a;
  const int32_t __THE_0_f2_0 = __THE_1_opt_int_ne((__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL))), NULL) ? *__THE_0_test2_0->__THE_0_a : 6;
  const int32_t __THE_0_e2_1 = __THE_1_opt_int_eq(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, NULL)))) ? 7 : *__THE_0_test2_0->__THE_0_a;
  const int32_t __THE_0_f2_1 = __THE_1_opt_int_ne(NULL, (__THE_1_opt_int_copy(__THE_0_test2_0->__THE_0_a = __THE_1_opt_int_realloc(__THE_0_test2_0->__THE_0_a, __THE_1_opt_int_alloc(8))))) ? *__THE_0_test2_0->__THE_0_a : 8;
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test2_0);
  __THE_1_opt_int_free((int32_t *) __THE_0_test_0);
}
======= flags =======
======= stdout =======
