======= stdin =======
obj TestObj { a: int }

main {
  intA := 1
  optIntA: int? = 1
  optRefIntA: (ref int)? = ref intA

  optArrInt1: int[]? = [1]
  optArrInt2: int[]?
  optBool1: bool? = true
  optBool2: bool?
  optChar1: char? = 'a'
  optChar2: char?
  optFloat1: float? = 3.14
  optFloat2: float?
  optInt1: int? = 1
  optInt2: int?
  optObj1: TestObj? = TestObj{a: 1}
  optObj2: TestObj?
  optRefInt1: (ref int)? = ref intA
  optRefInt2: (ref int)?
  optStr1: str? = "test"
  optStr2: str?

  print("optArrInt1 == optArrInt1:", optArrInt1 == optArrInt1)
  print("optArrInt1 != optArrInt2:", optArrInt1 != optArrInt2)
  print("optBool1 == optBool1:", optBool1 == optBool1)
  print("optBool1 != optBool2:", optBool1 != optBool2)
  print("optChar1 == optChar1:", optChar1 == optChar1)
  print("optChar1 != optChar2:", optChar1 != optChar2)
  print("optFloat1 == optFloat1:", optFloat1 == optFloat1)
  print("optFloat1 != optFloat2:", optFloat1 != optFloat2)
  print("optInt1 == optInt1:", optInt1 == optInt1)
  print("optInt1 != optInt2:", optInt1 != optInt2)
  print("optObj1 == optObj1:", optObj1 == optObj1)
  print("optObj1 != optObj2:", optObj1 != optObj2)
  print("optRefInt1 == optRefInt1:", optRefInt1 == optRefInt1)
  print("optRefInt1 != optRefInt2:", optRefInt1 != optRefInt2)
  print("optStr1 == optStr1:", optStr1 == optStr1)
  print("optStr1 != optStr2:", optStr1 != optStr2)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_TestObj_0;
struct __THE_1_array_int;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_TestObj_0 {
  const int32_t __THE_0_a;
};
struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
bool str_ne_str (struct str, struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t);
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *);
bool __THE_1_TestObj_0_eq (struct __THE_1_TestObj_0 *, struct __THE_1_TestObj_0 *);
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *);
bool __THE_1_TestObj_0_ne (struct __THE_1_TestObj_0 *, struct __THE_1_TestObj_0 *);
int32_t *__THE_1_opt_int_alloc (int32_t);
int32_t *__THE_1_opt_int_copy (const int32_t *);
bool __THE_1_opt_int_eq (int32_t *, int32_t *);
void __THE_1_opt_int_free (int32_t *);
bool __THE_1_opt_int_ne (int32_t *, int32_t *);
int32_t **__THE_1_opt_ref_int_alloc (int32_t *);
int32_t **__THE_1_opt_ref_int_copy (const int32_t **);
bool __THE_1_opt_ref_int_eq (int32_t **, int32_t **);
void __THE_1_opt_ref_int_free (int32_t **);
bool __THE_1_opt_ref_int_ne (int32_t **, int32_t **);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
bool __THE_1_array_int_eq (struct __THE_1_array_int, struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
bool __THE_1_array_int_ne (struct __THE_1_array_int, struct __THE_1_array_int);
struct __THE_1_array_int *__THE_1_opt_array_int_alloc (struct __THE_1_array_int);
struct __THE_1_array_int *__THE_1_opt_array_int_copy (const struct __THE_1_array_int *);
bool __THE_1_opt_array_int_eq (struct __THE_1_array_int *, struct __THE_1_array_int *);
void __THE_1_opt_array_int_free (struct __THE_1_array_int *);
bool __THE_1_opt_array_int_ne (struct __THE_1_array_int *, struct __THE_1_array_int *);
bool *__THE_1_opt_bool_alloc (bool);
bool *__THE_1_opt_bool_copy (const bool *);
bool __THE_1_opt_bool_eq (bool *, bool *);
void __THE_1_opt_bool_free (bool *);
bool __THE_1_opt_bool_ne (bool *, bool *);
char *__THE_1_opt_char_alloc (char);
char *__THE_1_opt_char_copy (const char *);
bool __THE_1_opt_char_eq (char *, char *);
void __THE_1_opt_char_free (char *);
bool __THE_1_opt_char_ne (char *, char *);
double *__THE_1_opt_float_alloc (double);
double *__THE_1_opt_float_copy (const double *);
bool __THE_1_opt_float_eq (double *, double *);
void __THE_1_opt_float_free (double *);
bool __THE_1_opt_float_ne (double *, double *);
struct __THE_1_TestObj_0 **__THE_1_opt_TestObj_alloc (struct __THE_1_TestObj_0 *);
struct __THE_1_TestObj_0 **__THE_1_opt_TestObj_copy (const struct __THE_1_TestObj_0 **);
bool __THE_1_opt_TestObj_eq (struct __THE_1_TestObj_0 **, struct __THE_1_TestObj_0 **);
void __THE_1_opt_TestObj_free (struct __THE_1_TestObj_0 **);
bool __THE_1_opt_TestObj_ne (struct __THE_1_TestObj_0 **, struct __THE_1_TestObj_0 **);
struct str *__THE_1_opt_str_alloc (struct str);
struct str *__THE_1_opt_str_copy (const struct str *);
bool __THE_1_opt_str_eq (struct str *, struct str *);
void __THE_1_opt_str_free (struct str *);
bool __THE_1_opt_str_ne (struct str *, struct str *);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
bool str_ne_str (struct str s1, struct str s2) {
  bool r = s1.l != s2.l || memcmp(s1.d, s2.d, s1.l) != 0;
  free(s1.d);
  free(s2.d);
  return r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
struct __THE_1_TestObj_0 *__THE_1_TestObj_0_copy (const struct __THE_1_TestObj_0 *n) {
  struct __THE_1_TestObj_0 *r = alloc(sizeof(struct __THE_1_TestObj_0));
  struct __THE_1_TestObj_0 s = {n->__THE_0_a};
  memcpy(r, &s, sizeof(struct __THE_1_TestObj_0));
  return r;
}
bool __THE_1_TestObj_0_eq (struct __THE_1_TestObj_0 *n1, struct __THE_1_TestObj_0 *n2) {
  bool r = n1->__THE_0_a == n2->__THE_0_a;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n1);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n2);
  return r;
}
void __THE_1_TestObj_0_free (struct __THE_1_TestObj_0 *n) {
  free(n);
}
bool __THE_1_TestObj_0_ne (struct __THE_1_TestObj_0 *n1, struct __THE_1_TestObj_0 *n2) {
  bool r = n1->__THE_0_a != n2->__THE_0_a;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n1);
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) n2);
  return r;
}
int32_t *__THE_1_opt_int_alloc (int32_t n) {
  int32_t *r = alloc(sizeof(int32_t));
  *r = n;
  return r;
}
int32_t *__THE_1_opt_int_copy (const int32_t *n) {
  if (n == NULL) return NULL;
  int32_t *r = alloc(sizeof(int32_t));
  *r = *n;
  return r;
}
bool __THE_1_opt_int_eq (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
void __THE_1_opt_int_free (int32_t *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_int_ne (int32_t *n1, int32_t *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_int_free((int32_t *) n1);
  __THE_1_opt_int_free((int32_t *) n2);
  return r;
}
int32_t **__THE_1_opt_ref_int_alloc (int32_t *n) {
  int32_t **r = alloc(sizeof(int32_t *));
  *r = n;
  return r;
}
int32_t **__THE_1_opt_ref_int_copy (const int32_t **n) {
  if (n == NULL) return NULL;
  int32_t **r = alloc(sizeof(int32_t *));
  *r = *n;
  return r;
}
bool __THE_1_opt_ref_int_eq (int32_t **n1, int32_t **n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_ref_int_free((int32_t **) n1);
  __THE_1_opt_ref_int_free((int32_t **) n2);
  return r;
}
void __THE_1_opt_ref_int_free (int32_t **n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_ref_int_ne (int32_t **n1, int32_t **n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_ref_int_free((int32_t **) n1);
  __THE_1_opt_ref_int_free((int32_t **) n2);
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
bool __THE_1_array_int_eq (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l == n2.l;
  if (r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = false;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
bool __THE_1_array_int_ne (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  bool r = n1.l != n2.l;
  if (!r) {
    for (size_t i = 0; i < n1.l; i++) {
      if (n1.d[i] != n2.d[i]) {
        r = true;
        break;
      }
    }
  }
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  __THE_1_array_int_free((struct __THE_1_array_int) n2);
  return r;
}
struct __THE_1_array_int *__THE_1_opt_array_int_alloc (struct __THE_1_array_int n) {
  struct __THE_1_array_int *r = alloc(sizeof(struct __THE_1_array_int));
  *r = n;
  return r;
}
struct __THE_1_array_int *__THE_1_opt_array_int_copy (const struct __THE_1_array_int *n) {
  if (n == NULL) return NULL;
  struct __THE_1_array_int *r = alloc(sizeof(struct __THE_1_array_int));
  *r = __THE_1_array_int_copy(*n);
  return r;
}
bool __THE_1_opt_array_int_eq (struct __THE_1_array_int *n1, struct __THE_1_array_int *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : __THE_1_array_int_eq(__THE_1_array_int_copy(*n1), __THE_1_array_int_copy(*n2));
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) n1);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) n2);
  return r;
}
void __THE_1_opt_array_int_free (struct __THE_1_array_int *n) {
  if (n == NULL) return;
  __THE_1_array_int_free((struct __THE_1_array_int) *n);
  free(n);
}
bool __THE_1_opt_array_int_ne (struct __THE_1_array_int *n1, struct __THE_1_array_int *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : __THE_1_array_int_ne(__THE_1_array_int_copy(*n1), __THE_1_array_int_copy(*n2));
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) n1);
  __THE_1_opt_array_int_free((struct __THE_1_array_int *) n2);
  return r;
}
bool *__THE_1_opt_bool_alloc (bool n) {
  bool *r = alloc(sizeof(bool));
  *r = n;
  return r;
}
bool *__THE_1_opt_bool_copy (const bool *n) {
  if (n == NULL) return NULL;
  bool *r = alloc(sizeof(bool));
  *r = *n;
  return r;
}
bool __THE_1_opt_bool_eq (bool *n1, bool *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_bool_free((bool *) n1);
  __THE_1_opt_bool_free((bool *) n2);
  return r;
}
void __THE_1_opt_bool_free (bool *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_bool_ne (bool *n1, bool *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_bool_free((bool *) n1);
  __THE_1_opt_bool_free((bool *) n2);
  return r;
}
char *__THE_1_opt_char_alloc (char n) {
  char *r = alloc(sizeof(char));
  *r = n;
  return r;
}
char *__THE_1_opt_char_copy (const char *n) {
  if (n == NULL) return NULL;
  char *r = alloc(sizeof(char));
  *r = *n;
  return r;
}
bool __THE_1_opt_char_eq (char *n1, char *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_char_free((char *) n1);
  __THE_1_opt_char_free((char *) n2);
  return r;
}
void __THE_1_opt_char_free (char *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_char_ne (char *n1, char *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_char_free((char *) n1);
  __THE_1_opt_char_free((char *) n2);
  return r;
}
double *__THE_1_opt_float_alloc (double n) {
  double *r = alloc(sizeof(double));
  *r = n;
  return r;
}
double *__THE_1_opt_float_copy (const double *n) {
  if (n == NULL) return NULL;
  double *r = alloc(sizeof(double));
  *r = *n;
  return r;
}
bool __THE_1_opt_float_eq (double *n1, double *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : *n1 == *n2;
  __THE_1_opt_float_free((double *) n1);
  __THE_1_opt_float_free((double *) n2);
  return r;
}
void __THE_1_opt_float_free (double *n) {
  if (n == NULL) return;
  free(n);
}
bool __THE_1_opt_float_ne (double *n1, double *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : *n1 != *n2;
  __THE_1_opt_float_free((double *) n1);
  __THE_1_opt_float_free((double *) n2);
  return r;
}
struct __THE_1_TestObj_0 **__THE_1_opt_TestObj_alloc (struct __THE_1_TestObj_0 *n) {
  struct __THE_1_TestObj_0 **r = alloc(sizeof(struct __THE_1_TestObj_0 *));
  *r = n;
  return r;
}
struct __THE_1_TestObj_0 **__THE_1_opt_TestObj_copy (const struct __THE_1_TestObj_0 **n) {
  if (n == NULL) return NULL;
  struct __THE_1_TestObj_0 **r = alloc(sizeof(struct __THE_1_TestObj_0 *));
  *r = __THE_1_TestObj_0_copy(*n);
  return r;
}
bool __THE_1_opt_TestObj_eq (struct __THE_1_TestObj_0 **n1, struct __THE_1_TestObj_0 **n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : __THE_1_TestObj_0_eq(__THE_1_TestObj_0_copy(*n1), __THE_1_TestObj_0_copy(*n2));
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) n1);
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) n2);
  return r;
}
void __THE_1_opt_TestObj_free (struct __THE_1_TestObj_0 **n) {
  if (n == NULL) return;
  __THE_1_TestObj_0_free((struct __THE_1_TestObj_0 *) *n);
  free(n);
}
bool __THE_1_opt_TestObj_ne (struct __THE_1_TestObj_0 **n1, struct __THE_1_TestObj_0 **n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : __THE_1_TestObj_0_ne(__THE_1_TestObj_0_copy(*n1), __THE_1_TestObj_0_copy(*n2));
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) n1);
  __THE_1_opt_TestObj_free((struct __THE_1_TestObj_0 **) n2);
  return r;
}
struct str *__THE_1_opt_str_alloc (struct str n) {
  struct str *r = alloc(sizeof(struct str));
  *r = n;
  return r;
}
struct str *__THE_1_opt_str_copy (const struct str *n) {
  if (n == NULL) return NULL;
  struct str *r = alloc(sizeof(struct str));
  *r = str_copy(*n);
  return r;
}
bool __THE_1_opt_str_eq (struct str *n1, struct str *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 == NULL && n2 == NULL : str_eq_str(str_copy(*n1), str_copy(*n2));
  __THE_1_opt_str_free((struct str *) n1);
  __THE_1_opt_str_free((struct str *) n2);
  return r;
}
void __THE_1_opt_str_free (struct str *n) {
  if (n == NULL) return;
  str_free((struct str) *n);
  free(n);
}
bool __THE_1_opt_str_ne (struct str *n1, struct str *n2) {
  bool r = (n1 == NULL || n2 == NULL) ? n1 != NULL || n2 != NULL : str_ne_str(str_copy(*n1), str_copy(*n2));
  __THE_1_opt_str_free((struct str *) n1);
  __THE_1_opt_str_free((struct str *) n2);
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  const int32_t __THE_0_intA_0 = 1;
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  const int32_t *__THE_0_optIntA_0 = __THE_1_opt_int_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const int32_t **__THE_0_optRefIntA_0 = __THE_1_opt_ref_int_alloc(&__THE_0_intA_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct __THE_1_array_int *__THE_0_optArrInt1_0 = __THE_1_opt_array_int_alloc(__THE_1_array_int_alloc(1, 1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct __THE_1_array_int *__THE_0_optArrInt2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const bool *__THE_0_optBool1_0 = __THE_1_opt_bool_alloc(true);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const bool *__THE_0_optBool2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const char *__THE_0_optChar1_0 = __THE_1_opt_char_alloc('a');
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const char *__THE_0_optChar2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const double *__THE_0_optFloat1_0 = __THE_1_opt_float_alloc(3.14);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const double *__THE_0_optFloat2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const int32_t *__THE_0_optInt1_0 = __THE_1_opt_int_alloc(1);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const int32_t *__THE_0_optInt2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct __THE_1_TestObj_0 **__THE_0_optObj1_0 = __THE_1_opt_TestObj_alloc(__THE_1_TestObj_0_alloc(1));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct __THE_1_TestObj_0 **__THE_0_optObj2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const int32_t **__THE_0_optRefInt1_0 = __THE_1_opt_ref_int_alloc(&__THE_0_intA_0);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const int32_t **__THE_0_optRefInt2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct str *__THE_0_optStr1_0 = __THE_1_opt_str_alloc(str_alloc("test"));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  const struct str *__THE_0_optStr2_0 = NULL;
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optArrInt1 == optArrInt1:", " ", __THE_1_opt_array_int_eq(__THE_1_opt_array_int_copy(__THE_0_optArrInt1_0), __THE_1_opt_array_int_copy(__THE_0_optArrInt1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optArrInt1 != optArrInt2:", " ", __THE_1_opt_array_int_ne(__THE_1_opt_array_int_copy(__THE_0_optArrInt1_0), __THE_1_opt_array_int_copy(__THE_0_optArrInt2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optBool1 == optBool1:", " ", __THE_1_opt_bool_eq(__THE_1_opt_bool_copy(__THE_0_optBool1_0), __THE_1_opt_bool_copy(__THE_0_optBool1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optBool1 != optBool2:", " ", __THE_1_opt_bool_ne(__THE_1_opt_bool_copy(__THE_0_optBool1_0), __THE_1_opt_bool_copy(__THE_0_optBool2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optChar1 == optChar1:", " ", __THE_1_opt_char_eq(__THE_1_opt_char_copy(__THE_0_optChar1_0), __THE_1_opt_char_copy(__THE_0_optChar1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optChar1 != optChar2:", " ", __THE_1_opt_char_ne(__THE_1_opt_char_copy(__THE_0_optChar1_0), __THE_1_opt_char_copy(__THE_0_optChar2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optFloat1 == optFloat1:", " ", __THE_1_opt_float_eq(__THE_1_opt_float_copy(__THE_0_optFloat1_0), __THE_1_opt_float_copy(__THE_0_optFloat1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optFloat1 != optFloat2:", " ", __THE_1_opt_float_ne(__THE_1_opt_float_copy(__THE_0_optFloat1_0), __THE_1_opt_float_copy(__THE_0_optFloat2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optInt1 == optInt1:", " ", __THE_1_opt_int_eq(__THE_1_opt_int_copy(__THE_0_optInt1_0), __THE_1_opt_int_copy(__THE_0_optInt1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optInt1 != optInt2:", " ", __THE_1_opt_int_ne(__THE_1_opt_int_copy(__THE_0_optInt1_0), __THE_1_opt_int_copy(__THE_0_optInt2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optObj1 == optObj1:", " ", __THE_1_opt_TestObj_eq(__THE_1_opt_TestObj_copy(__THE_0_optObj1_0), __THE_1_opt_TestObj_copy(__THE_0_optObj1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optObj1 != optObj2:", " ", __THE_1_opt_TestObj_ne(__THE_1_opt_TestObj_copy(__THE_0_optObj1_0), __THE_1_opt_TestObj_copy(__THE_0_optObj2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optRefInt1 == optRefInt1:", " ", __THE_1_opt_ref_int_eq(__THE_1_opt_ref_int_copy(__THE_0_optRefInt1_0), __THE_1_opt_ref_int_copy(__THE_0_optRefInt1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optRefInt1 != optRefInt2:", " ", __THE_1_opt_ref_int_ne(__THE_1_opt_ref_int_copy(__THE_0_optRefInt1_0), __THE_1_opt_ref_int_copy(__THE_0_optRefInt2_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optStr1 == optStr1:", " ", __THE_1_opt_str_eq(__THE_1_opt_str_copy(__THE_0_optStr1_0), __THE_1_opt_str_copy(__THE_0_optStr1_0)), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "zztz", "optStr1 != optStr2:", " ", __THE_1_opt_str_ne(__THE_1_opt_str_copy(__THE_0_optStr1_0), __THE_1_opt_str_copy(__THE_0_optStr2_0)), THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
optArrInt1 == optArrInt1: true
optArrInt1 != optArrInt2: true
optBool1 == optBool1: true
optBool1 != optBool2: true
optChar1 == optChar1: true
optChar1 != optChar2: true
optFloat1 == optFloat1: true
optFloat1 != optFloat2: true
optInt1 == optInt1: true
optInt1 != optInt2: true
optObj1 == optObj1: true
optObj1 != optObj2: true
optRefInt1 == optRefInt1: true
optRefInt1 != optRefInt2: true
optStr1 == optStr1: true
optStr1 != optStr2: true
