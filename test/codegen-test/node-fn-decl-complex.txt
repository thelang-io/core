======= stdin =======
fn test1 () int {
  if "a" == "b" {
    return 2
  }

  mut a := "a"
  a2 := "a2"
  a3 := "a3"

  if a == "a" {
    mut b := "b"

    if b == "c" {
      return 1
    }

    b = "b2"
  }

  mut c := "c"
  c2 := "c2"
  c3 := "c3"

  if c == "a" {
    mut d := "d"

    if d == "e" {
      return 2
    }

    d = "b2"
  }

  a = "a2"
  return 3
}

fn test2 () int {
  a := "a"

  if a == "b" {
    return 1
  }

  b := "a"
  return a == b ? 2 : 0
}

fn test3 () int {
  a := 1

  if a == 2 {
    return a
  }

  b := 2
  return a == b ? 2 : 0
}

main {
  test1()
  test2()
  test3()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_fn$1000;

struct __THE_1_fn$1000 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
bool cstr_eq_cstr (const char *, const char *);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_cstr (struct str, const char *);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
int32_t __THE_1_test1_0 (void *);
int32_t __THE_1_test2_0 (void *);
int32_t __THE_1_test3_0 (void *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
bool cstr_eq_cstr (const char *c1, const char *c2) {
  size_t l = strlen(c1);
  return l == strlen(c2) && memcmp(c1, c2, l) == 0;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_cstr (struct str s, const char *r) {
  bool d = s.l == strlen(r) && memcmp(s.d, r, s.l) == 0;
  free(s.d);
  return d;
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
int32_t __THE_1_test1_0 (void *px) {
  unsigned char r = 0;
  int32_t v;
  if (cstr_eq_cstr("a", "b")) {
    return 2;
  }
  struct str __THE_0_a_0 = str_alloc("a");
  const struct str __THE_0_a2_0 = str_alloc("a2");
  const struct str __THE_0_a3_0 = str_alloc("a3");
  if (str_eq_cstr(str_copy(__THE_0_a_0), "a")) {
    struct str __THE_0_b_0 = str_alloc("b");
    if (str_eq_cstr(str_copy(__THE_0_b_0), "c")) {
      r = 1;
      v = 1;
      goto L1;
    }
    __THE_0_b_0 = str_realloc(__THE_0_b_0, str_alloc("b2"));
L1:
    str_free((struct str) __THE_0_b_0);
    if (r == 1) goto L0;
  }
  struct str __THE_0_c_0 = str_alloc("c");
  const struct str __THE_0_c2_0 = str_alloc("c2");
  const struct str __THE_0_c3_0 = str_alloc("c3");
  if (str_eq_cstr(str_copy(__THE_0_c_0), "a")) {
    struct str __THE_0_d_0 = str_alloc("d");
    if (str_eq_cstr(str_copy(__THE_0_d_0), "e")) {
      r = 1;
      v = 2;
      goto L3;
    }
    __THE_0_d_0 = str_realloc(__THE_0_d_0, str_alloc("b2"));
L3:
    str_free((struct str) __THE_0_d_0);
    if (r == 1) goto L2;
  }
  __THE_0_a_0 = str_realloc(__THE_0_a_0, str_alloc("a2"));
  v = 3;
L2:
  str_free((struct str) __THE_0_c3_0);
  str_free((struct str) __THE_0_c2_0);
  str_free((struct str) __THE_0_c_0);
L0:
  str_free((struct str) __THE_0_a3_0);
  str_free((struct str) __THE_0_a2_0);
  str_free((struct str) __THE_0_a_0);
  return v;
}
int32_t __THE_1_test2_0 (void *px) {
  unsigned char r = 0;
  int32_t v;
  const struct str __THE_0_a_0 = str_alloc("a");
  if (str_eq_cstr(str_copy(__THE_0_a_0), "b")) {
    r = 1;
    v = 1;
    goto L4;
  }
  const struct str __THE_0_b_0 = str_alloc("a");
  v = str_eq_str(str_copy(__THE_0_a_0), str_copy(__THE_0_b_0)) ? 2 : 0;
  str_free((struct str) __THE_0_b_0);
L4:
  str_free((struct str) __THE_0_a_0);
  return v;
}
int32_t __THE_1_test3_0 (void *px) {
  const int32_t __THE_0_a_0 = 1;
  if (__THE_0_a_0 == 2) {
    return __THE_0_a_0;
  }
  const int32_t __THE_0_b_0 = 2;
  return __THE_0_a_0 == __THE_0_b_0 ? 2 : 0;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test2_0 = (struct __THE_1_fn$1000) {&__THE_1_test2_0, NULL, 0};
  const struct __THE_1_fn$1000 __THE_0_test3_0 = (struct __THE_1_fn$1000) {&__THE_1_test3_0, NULL, 0};
  __THE_0_test1_0.f(__THE_0_test1_0.x);
  __THE_0_test2_0.f(__THE_0_test2_0.x);
  __THE_0_test3_0.f(__THE_0_test3_0.x);
}
======= flags =======
======= stdout =======
