======= stdin =======
obj A {
  b: () -> void
}

obj Test {
  game: (int) -> void
}

obj Test1 {
  test2: Test2
}

obj Test2 {
  test3: (int, int) -> void
}

obj B {
  c: C
}

obj C {
  d: D
}

obj D {
  e: E
}

obj E {
  f: (int, int, int) -> void
}

fn job1 () {}
fn job2 (n: int) {}
fn job3 (x: int, y: int) {}
fn job4 (x: int, y: int, z: int) {}

main {
  a := A{b: job1}
  a.b()

  test := Test{game: job2}
  test.game(3)

  test1 := Test1{
    test2: Test2{test3: job3}
  }

  test1.test2.test3(5, 6)

  b := B{
    c: C{
      d: D{
        e: E{f: job4}
      }
    }
  }

  b.c.d.e.f(7, 8, 9)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;
struct __THE_1_A_0;
struct __THE_1_fn$1001P;
struct __THE_1_fn$1001;
struct __THE_1_Test_0;
struct __THE_1_Test1_0;
struct __THE_1_fn$1002P;
struct __THE_1_fn$1002;
struct __THE_1_Test2_0;
struct __THE_1_B_0;
struct __THE_1_C_0;
struct __THE_1_D_0;
struct __THE_1_fn$1003P;
struct __THE_1_fn$1003;
struct __THE_1_E_0;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
};
struct __THE_1_fn$1000 {
  void (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_A_0 {
  const struct __THE_1_fn$1000 __THE_0_b;
};
struct __THE_1_fn$1001P {
  int line;
  int col;
  int32_t n0;
};
struct __THE_1_fn$1001 {
  void (*f) (void *, struct __THE_1_fn$1001P);
  void *x;
  size_t l;
};
struct __THE_1_Test_0 {
  const struct __THE_1_fn$1001 __THE_0_game;
};
struct __THE_1_Test1_0 {
  const struct __THE_1_Test2_0 *__THE_0_test2;
};
struct __THE_1_fn$1002P {
  int line;
  int col;
  int32_t n0;
  int32_t n1;
};
struct __THE_1_fn$1002 {
  void (*f) (void *, struct __THE_1_fn$1002P);
  void *x;
  size_t l;
};
struct __THE_1_Test2_0 {
  const struct __THE_1_fn$1002 __THE_0_test3;
};
struct __THE_1_B_0 {
  const struct __THE_1_C_0 *__THE_0_c;
};
struct __THE_1_C_0 {
  const struct __THE_1_D_0 *__THE_0_d;
};
struct __THE_1_D_0 {
  const struct __THE_1_E_0 *__THE_0_e;
};
struct __THE_1_fn$1003P {
  int line;
  int col;
  int32_t n0;
  int32_t n1;
  int32_t n2;
};
struct __THE_1_fn$1003 {
  void (*f) (void *, struct __THE_1_fn$1003P);
  void *x;
  size_t l;
};
struct __THE_1_E_0 {
  const struct __THE_1_fn$1003 __THE_0_f;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
struct __THE_1_A_0 *__THE_1_A_0_alloc (struct __THE_1_fn$1000);
void __THE_1_A_0_free (struct __THE_1_A_0 *);
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$1001);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_fn$1002 __THE_1_fn$1002_copy (const struct __THE_1_fn$1002);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_fn$1002);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
struct __THE_1_B_0 *__THE_1_B_0_alloc (struct __THE_1_C_0 *);
void __THE_1_B_0_free (struct __THE_1_B_0 *);
struct __THE_1_C_0 *__THE_1_C_0_alloc (struct __THE_1_D_0 *);
void __THE_1_C_0_free (struct __THE_1_C_0 *);
struct __THE_1_D_0 *__THE_1_D_0_alloc (struct __THE_1_E_0 *);
void __THE_1_D_0_free (struct __THE_1_D_0 *);
struct __THE_1_fn$1003 __THE_1_fn$1003_copy (const struct __THE_1_fn$1003);
void __THE_1_fn$1003_free (struct __THE_1_fn$1003);
struct __THE_1_E_0 *__THE_1_E_0_alloc (struct __THE_1_fn$1003);
void __THE_1_E_0_free (struct __THE_1_E_0 *);
void __THE_1_job1_0 (void *, struct __THE_1_fn$1000P);
void __THE_1_job2_0 (void *, struct __THE_1_fn$1001P);
void __THE_1_job3_0 (void *, struct __THE_1_fn$1002P);
void __THE_1_job4_0 (void *, struct __THE_1_fn$1003P);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_A_0 *__THE_1_A_0_alloc (struct __THE_1_fn$1000 __THE_0_b) {
  struct __THE_1_A_0 *r = alloc(sizeof(struct __THE_1_A_0));
  struct __THE_1_A_0 s = {__THE_0_b};
  memcpy(r, &s, sizeof(struct __THE_1_A_0));
  return r;
}
void __THE_1_A_0_free (struct __THE_1_A_0 *n) {
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) n->__THE_0_b);
  free(n);
}
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1001) {n.f, x, n.l};
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_fn$1001 __THE_0_game) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  struct __THE_1_Test_0 s = {__THE_0_game};
  memcpy(r, &s, sizeof(struct __THE_1_Test_0));
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *n) {
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) n->__THE_0_game);
  free(n);
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *__THE_0_test2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_test2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n->__THE_0_test2);
  free(n);
}
struct __THE_1_fn$1002 __THE_1_fn$1002_copy (const struct __THE_1_fn$1002 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1002) {n.f, x, n.l};
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (struct __THE_1_fn$1002 __THE_0_test3) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_test3};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) n->__THE_0_test3);
  free(n);
}
struct __THE_1_B_0 *__THE_1_B_0_alloc (struct __THE_1_C_0 *__THE_0_c) {
  struct __THE_1_B_0 *r = alloc(sizeof(struct __THE_1_B_0));
  struct __THE_1_B_0 s = {__THE_0_c};
  memcpy(r, &s, sizeof(struct __THE_1_B_0));
  return r;
}
void __THE_1_B_0_free (struct __THE_1_B_0 *n) {
  __THE_1_C_0_free((struct __THE_1_C_0 *) n->__THE_0_c);
  free(n);
}
struct __THE_1_C_0 *__THE_1_C_0_alloc (struct __THE_1_D_0 *__THE_0_d) {
  struct __THE_1_C_0 *r = alloc(sizeof(struct __THE_1_C_0));
  struct __THE_1_C_0 s = {__THE_0_d};
  memcpy(r, &s, sizeof(struct __THE_1_C_0));
  return r;
}
void __THE_1_C_0_free (struct __THE_1_C_0 *n) {
  __THE_1_D_0_free((struct __THE_1_D_0 *) n->__THE_0_d);
  free(n);
}
struct __THE_1_D_0 *__THE_1_D_0_alloc (struct __THE_1_E_0 *__THE_0_e) {
  struct __THE_1_D_0 *r = alloc(sizeof(struct __THE_1_D_0));
  struct __THE_1_D_0 s = {__THE_0_e};
  memcpy(r, &s, sizeof(struct __THE_1_D_0));
  return r;
}
void __THE_1_D_0_free (struct __THE_1_D_0 *n) {
  __THE_1_E_0_free((struct __THE_1_E_0 *) n->__THE_0_e);
  free(n);
}
struct __THE_1_fn$1003 __THE_1_fn$1003_copy (const struct __THE_1_fn$1003 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1003) {n.f, x, n.l};
}
void __THE_1_fn$1003_free (struct __THE_1_fn$1003 n) {
  if (n.x != NULL) free(n.x);
}
struct __THE_1_E_0 *__THE_1_E_0_alloc (struct __THE_1_fn$1003 __THE_0_f) {
  struct __THE_1_E_0 *r = alloc(sizeof(struct __THE_1_E_0));
  struct __THE_1_E_0 s = {__THE_0_f};
  memcpy(r, &s, sizeof(struct __THE_1_E_0));
  return r;
}
void __THE_1_E_0_free (struct __THE_1_E_0 *n) {
  __THE_1_fn$1003_free((struct __THE_1_fn$1003) n->__THE_0_f);
  free(n);
}
void __THE_1_job1_0 (void *px, struct __THE_1_fn$1000P p) {
  error_stack_push(&err_state, "/test", "job1", p.line, p.col);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_job2_0 (void *px, struct __THE_1_fn$1001P p) {
  error_stack_push(&err_state, "/test", "job2", p.line, p.col);
  const int32_t __THE_0_n_0 = p.n0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_job3_0 (void *px, struct __THE_1_fn$1002P p) {
  error_stack_push(&err_state, "/test", "job3", p.line, p.col);
  const int32_t __THE_0_x_0 = p.n0;
  const int32_t __THE_0_y_0 = p.n1;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void __THE_1_job4_0 (void *px, struct __THE_1_fn$1003P p) {
  error_stack_push(&err_state, "/test", "job4", p.line, p.col);
  const int32_t __THE_0_x_0 = p.n0;
  const int32_t __THE_0_y_0 = p.n1;
  const int32_t __THE_0_z_0 = p.n2;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_job1_0 = (struct __THE_1_fn$1000) {&__THE_1_job1_0, NULL, 0};
  const struct __THE_1_fn$1001 __THE_0_job2_0 = (struct __THE_1_fn$1001) {&__THE_1_job2_0, NULL, 0};
  const struct __THE_1_fn$1002 __THE_0_job3_0 = (struct __THE_1_fn$1002) {&__THE_1_job3_0, NULL, 0};
  const struct __THE_1_fn$1003 __THE_0_job4_0 = (struct __THE_1_fn$1003) {&__THE_1_job4_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
  const struct __THE_1_A_0 *__THE_0_a_0 = __THE_1_A_0_alloc(__THE_1_fn$1000_copy(__THE_0_job1_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  __THE_0_a_0->__THE_0_b.f(__THE_0_a_0->__THE_0_b.x, (struct __THE_1_fn$1000P) {40, 3});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L6;
  const struct __THE_1_Test_0 *__THE_0_test_0 = __THE_1_Test_0_alloc(__THE_1_fn$1001_copy(__THE_0_job2_0));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  __THE_0_test_0->__THE_0_game.f(__THE_0_test_0->__THE_0_game.x, (struct __THE_1_fn$1001P) {43, 3, 3});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L7;
  const struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_1_Test2_0_alloc(__THE_1_fn$1002_copy(__THE_0_job3_0)));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  __THE_0_test1_0->__THE_0_test2->__THE_0_test3.f(__THE_0_test1_0->__THE_0_test2->__THE_0_test3.x, (struct __THE_1_fn$1002P) {49, 3, 5, 6});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const struct __THE_1_B_0 *__THE_0_b_0 = __THE_1_B_0_alloc(__THE_1_C_0_alloc(__THE_1_D_0_alloc(__THE_1_E_0_alloc(__THE_1_fn$1003_copy(__THE_0_job4_0)))));
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L9;
  __THE_0_b_0->__THE_0_c->__THE_0_d->__THE_0_e->__THE_0_f.f(__THE_0_b_0->__THE_0_c->__THE_0_d->__THE_0_e->__THE_0_f.x, (struct __THE_1_fn$1003P) {59, 3, 7, 8, 9});
L9:
  __THE_1_B_0_free((struct __THE_1_B_0 *) __THE_0_b_0);
L8:
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
L7:
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_test_0);
L6:
  __THE_1_A_0_free((struct __THE_1_A_0 *) __THE_0_a_0);
L5:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    err_state._free(err_state.ctx);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
