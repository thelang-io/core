======= stdin =======
main {
  loop i: int[str]; i.len < 3; i.set(i.len.str(), i.len) {
  }

  mut a: int[str]
  loop ; a.len < 3; a.set(a.len.str(), a.len) {
  }

  mut b: int[str]
  loop ; b.len < 3; {
    b.set(b.len.str(), b.len)
  }

  mut c: int[str]
  loop {
    if c.len == 3 {
      break
    }

    c.set(c.len.str(), c.len)
  }

  loop d: int[str]; d.len < 3; {
    d.set(d.len.str(), d.len)
  }

  loop e: int[str];; e.set(e.len.str(), e.len) {
    if e.len == 3 {
      break
    }
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_pair_strMSintME;
struct __THE_1_map_strMSintME;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_pair_strMSintME {
  struct str f;
  int32_t s;
};
struct __THE_1_map_strMSintME {
  struct __THE_1_pair_strMSintME *d;
  size_t c;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
struct str int_str (int32_t);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);
void error_Error_free (struct error_Error *);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int, ...);
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME);
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME);
size_t __THE_1_map_strMSintME_len (struct __THE_1_map_strMSintME);
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_set (struct __THE_1_map_strMSintME *, struct str, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
struct str int_str (int32_t d) {
  char buf[24];
  sprintf(buf, "%" PRId32, d);
  return str_alloc(buf);
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    const char *fmt = "failed to reallocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z + 1);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_alloc (int x, ...) {
  struct __THE_1_pair_strMSintME *d = alloc(x * sizeof(struct __THE_1_pair_strMSintME));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair_strMSintME) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map_strMSintME) {d, x, x};
}
struct __THE_1_map_strMSintME __THE_1_map_strMSintME_copy (const struct __THE_1_map_strMSintME n) {
  struct __THE_1_pair_strMSintME *d = alloc(n.c * sizeof(struct __THE_1_pair_strMSintME));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair_strMSintME) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map_strMSintME) {d, n.c, n.l};
}
void __THE_1_map_strMSintME_free (struct __THE_1_map_strMSintME n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
size_t __THE_1_map_strMSintME_len (struct __THE_1_map_strMSintME n) {
  size_t l = n.l;
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) n);
  return l;
}
struct __THE_1_map_strMSintME *__THE_1_map_strMSintME_set (struct __THE_1_map_strMSintME *n, struct str k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (str_eq_str(str_copy(n->d[i].f), str_copy(k))) {
      str_free((struct str) k);
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair_strMSintME));
  n->d[n->l++] = (struct __THE_1_pair_strMSintME) {k, v};
  return n;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  {
    struct __THE_1_map_strMSintME __THE_0_i_0 = __THE_1_map_strMSintME_alloc(0);
    for (; (error_stack_pos(&err_state, 2, 21), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_i_0))) < 3; (error_stack_pos(&err_state, 2, 32), __THE_1_map_strMSintME_set(&__THE_0_i_0, (error_stack_pos(&err_state, 2, 38), int_str((error_stack_pos(&err_state, 2, 38), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_i_0))))), (error_stack_pos(&err_state, 2, 51), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_i_0)))))) {
    }
    __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_i_0);
  }
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L2;
  struct __THE_1_map_strMSintME __THE_0_a_0 = __THE_1_map_strMSintME_alloc(0);
  for (; (error_stack_pos(&err_state, 6, 10), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_a_0))) < 3; (error_stack_pos(&err_state, 6, 21), __THE_1_map_strMSintME_set(&__THE_0_a_0, (error_stack_pos(&err_state, 6, 27), int_str((error_stack_pos(&err_state, 6, 27), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_a_0))))), (error_stack_pos(&err_state, 6, 40), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_a_0)))))) {
  }
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L3;
  struct __THE_1_map_strMSintME __THE_0_b_0 = __THE_1_map_strMSintME_alloc(0);
  while ((error_stack_pos(&err_state, 10, 10), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_b_0))) < 3) {
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L5;
    (error_stack_pos(&err_state, 11, 5), __THE_1_map_strMSintME_set(&__THE_0_b_0, (error_stack_pos(&err_state, 11, 11), int_str((error_stack_pos(&err_state, 11, 11), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_b_0))))), (error_stack_pos(&err_state, 11, 24), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_b_0)))));
L5:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L4;
  }
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L4;
  struct __THE_1_map_strMSintME __THE_0_c_0 = __THE_1_map_strMSintME_alloc(0);
  while (1) {
    if ((error_stack_pos(&err_state, 16, 8), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_c_0))) == 3) {
      break;
    }
    if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L7;
    (error_stack_pos(&err_state, 20, 5), __THE_1_map_strMSintME_set(&__THE_0_c_0, (error_stack_pos(&err_state, 20, 11), int_str((error_stack_pos(&err_state, 20, 11), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_c_0))))), (error_stack_pos(&err_state, 20, 24), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_c_0)))));
L7:
    err_state.buf_idx--;
    if (err_state.id != -1) goto L6;
  }
  {
    struct __THE_1_map_strMSintME __THE_0_d_0 = __THE_1_map_strMSintME_alloc(0);
    for (; (error_stack_pos(&err_state, 23, 21), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_d_0))) < 3;) {
      if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L9;
      (error_stack_pos(&err_state, 24, 5), __THE_1_map_strMSintME_set(&__THE_0_d_0, (error_stack_pos(&err_state, 24, 11), int_str((error_stack_pos(&err_state, 24, 11), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_d_0))))), (error_stack_pos(&err_state, 24, 24), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_d_0)))));
L9:
      err_state.buf_idx--;
      if (err_state.id != -1) goto L8;
    }
L8:
    __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_d_0);
  }
  {
    struct __THE_1_map_strMSintME __THE_0_e_0 = __THE_1_map_strMSintME_alloc(0);
    for (;; (error_stack_pos(&err_state, 27, 22), __THE_1_map_strMSintME_set(&__THE_0_e_0, (error_stack_pos(&err_state, 27, 28), int_str((error_stack_pos(&err_state, 27, 28), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_e_0))))), (error_stack_pos(&err_state, 27, 41), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_e_0)))))) {
      if ((error_stack_pos(&err_state, 28, 8), __THE_1_map_strMSintME_len(__THE_1_map_strMSintME_copy(__THE_0_e_0))) == 3) {
        break;
      }
    }
    __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_e_0);
  }
L6:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_c_0);
L4:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_b_0);
L3:
  __THE_1_map_strMSintME_free((struct __THE_1_map_strMSintME) __THE_0_a_0);
L2:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
