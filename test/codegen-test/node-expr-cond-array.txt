======= stdin =======
main {
  a := [1, 2, 3]
  b := [3, 2, 1]

  true ? [4, 5, 6] : [7, 8, 9]
  false ? a : [7, 8, 9]
  true ? [4, 5, 6] : b
  false ? a : b
}
======= code =======
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}

int main () {
  const struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(3, 1, 2, 3);
  const struct __THE_1_array_int __THE_0_b_0 = __THE_1_array_int_alloc(3, 3, 2, 1);
  __THE_1_array_int_free((struct __THE_1_array_int) (true ? __THE_1_array_int_alloc(3, 4, 5, 6) : __THE_1_array_int_alloc(3, 7, 8, 9)));
  __THE_1_array_int_free((struct __THE_1_array_int) (false ? __THE_1_array_int_copy(__THE_0_a_0) : __THE_1_array_int_alloc(3, 7, 8, 9)));
  __THE_1_array_int_free((struct __THE_1_array_int) (true ? __THE_1_array_int_alloc(3, 4, 5, 6) : __THE_1_array_int_copy(__THE_0_b_0)));
  __THE_1_array_int_free((struct __THE_1_array_int) (false ? __THE_1_array_int_copy(__THE_0_a_0) : __THE_1_array_int_copy(__THE_0_b_0)));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
