======= stdin =======
obj Test {
  a: int
}

main {
  mut a := Test{a: 1}

  fn test (newA: Test) {
    a = newA
  }

  test(Test{a: 2})
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_Test_0;
struct fn$0P;
struct fn$0;
struct __THE_1_mainSDtest_0C;

struct __THE_1_Test_0 {
  int32_t __THE_0_a;
};
struct fn$0P {
  const struct __THE_1_Test_0 *n0;
};
struct fn$0 {
  void (*f) (void *, struct fn$0P);
  void *c;
};
struct __THE_1_mainSDtest_0C {
  struct __THE_1_Test_0 **__THE_0_a_0;
};

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t);
struct __THE_1_Test_0 *__THE_1_Test_0_copy (struct __THE_1_Test_0 *);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *, struct __THE_1_Test_0 *);
void __THE_1_mainSDtest_0F (void *, struct fn$0P);
void __THE_1_mainSDtest_0A (struct fn$0 *, struct __THE_1_mainSDtest_0C);

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (int32_t __THE_0_a) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  return r;
}
struct __THE_1_Test_0 *__THE_1_Test_0_copy (struct __THE_1_Test_0 *o) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = o->__THE_0_a;
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  free(o);
}
struct __THE_1_Test_0 *__THE_1_Test_0_realloc (struct __THE_1_Test_0 *o1, struct __THE_1_Test_0 *o2) {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) o1);
  return o2;
}
void __THE_1_mainSDtest_0F (void *_c, struct fn$0P p) {
  struct __THE_1_mainSDtest_0C *c = _c;
  struct __THE_1_Test_0 **__THE_0_a_0 = c->__THE_0_a_0;
  const struct __THE_1_Test_0 *__THE_0_newA_0 = p.n0;
  *__THE_0_a_0 = __THE_1_Test_0_realloc(*__THE_0_a_0, __THE_1_Test_0_copy(__THE_0_newA_0));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_newA_0);
}
void __THE_1_mainSDtest_0A (struct fn$0 *n, struct __THE_1_mainSDtest_0C c) {
  size_t l = sizeof(struct __THE_1_mainSDtest_0C);
  struct __THE_1_mainSDtest_0C *r = alloc(l);
  memcpy(r, &c, l);
  n->f = &__THE_1_mainSDtest_0F;
  n->c = r;
}

int main () {
  struct __THE_1_Test_0 *__THE_0_a_0 = __THE_1_Test_0_alloc(1);
  const struct fn$0 __THE_0_mainSDtest_0;
  __THE_1_mainSDtest_0A((struct fn$0 *) &__THE_0_mainSDtest_0, (struct __THE_1_mainSDtest_0C) {&__THE_0_a_0});
  __THE_0_mainSDtest_0.f(__THE_0_mainSDtest_0.c, (struct fn$0P) {__THE_1_Test_0_alloc(2)});
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_0_a_0);
}
======= flags =======
======= stdout =======
