======= stdin =======
async fn job1 (mut a: ref int) ref int {
  a += 1
  return a
}

async fn job2 (mut a: ref int) int {
  return a
}

async fn job3 (
  mut a: ref int,
  fn1: async (mut a: ref int) -> ref int,
  fn2: async (mut a: ref int) -> int,
  fn3: ref (async (mut a: ref int) -> ref int),
  fn4: ref (async (mut a: ref int) -> int)
) {
  await fn1(a) + await fn2(a);
  await fn3(a) > await fn4(a);
  await fn1(a) & await fn3(a);
  await fn2(a) - await fn4(a);
  await fn1(a) == await fn4(a);
  await fn2(a) << await fn3(a);
}

main {
  mut a := 0
  refA := ref a
  refJob1 := ref job1
  refJob2 := ref job2

  ref job1;
  ref job2;
  await job1(ref a);
  await job1(refA);
  await job2(ref a);
  await job2(refA);
  await (ref job1)(ref a);
  await (ref job1)(refA);
  await (ref job2)(ref a);
  await (ref job2)(refA);
  await refJob1(ref a);
  await refJob1(refA);
  await refJob2(ref a);
  await refJob2(refA);
  await job3(ref a, job1, job2, ref job1, ref job2);
  await job3(ref a, ref job1, ref job2, ref job1, ref job2);
  await job3(refA, job1, job2, refJob1, refJob2);
  await job3(refA, refJob1, refJob2, refJob1, refJob2);

  async fn jobLocal1 () {
    await job1(ref a) + await job2(ref a);
    await refJob1(refA) > await refJob2(refA);
    await job1(refA) & await refJob1(refA);
    await refJob2(ref a) - await job2(ref a);
    await (ref job1)(refA) > await (ref job2)(refA);
    await job1(ref a) & await (ref job1)(ref a);
    await (ref job2)(refA) - await job2(refA);
  }

  await jobLocal1()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifndef THE_OS_WINDOWS
  #include <pthread.h>
#endif

struct threadpool;
struct threadpool_job;
struct threadpool_thread;

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
typedef struct threadpool {
  bool active;
  pthread_cond_t cond1;
  pthread_cond_t cond2;
  struct threadpool_job *jobs;
  struct threadpool_job *jobs_tail;
  pthread_mutex_t lock1;
  pthread_mutex_t lock2;
  pthread_mutex_t lock3;
  struct threadpool_thread *threads;
  int working_threads;
  int alive_threads;
} threadpool_t;
typedef void (*threadpool_func_t) (struct threadpool *, struct threadpool_job *, void *, void *, void *, int);
typedef struct threadpool_job {
  struct threadpool_job *parent;
  threadpool_func_t func;
  void *ctx;
  void *params;
  void *ret;
  int step;
  unsigned char init;
  struct threadpool_job *next;
} threadpool_job_t;
typedef struct threadpool_thread {
  pthread_t id;
  struct threadpool *tp;
  struct threadpool_thread *next;
} threadpool_thread_t;

struct __THE_1_fn$1000;
struct __THE_1_fn$1000P;
struct __THE_1_job1_0X;
struct __THE_1_fn$1001;
struct __THE_1_fn$1001P;
struct __THE_1_job2_0X;
struct __THE_1_fn$1002;
struct __THE_1_fn$1002P;
struct __THE_1_job3_0X;
struct __THE_1_fn$1003;
struct __THE_1_async_mainX;
struct __THE_1_mainSDjobLocal1_0X;

struct __THE_1_fn$1000 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1000P {
  int32_t *n0;
};
struct __THE_1_job1_0X {
  unsigned char r;
};
struct __THE_1_fn$1001 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001P {
  int32_t *n0;
};
struct __THE_1_job2_0X {
  unsigned char r;
};
struct __THE_1_fn$1002 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_fn$1002P {
  int32_t *n0;
  struct __THE_1_fn$1000 n1;
  struct __THE_1_fn$1001 n2;
  struct __THE_1_fn$1000 *n3;
  struct __THE_1_fn$1001 *n4;
};
struct __THE_1_job3_0X {
  int32_t *t1;
  int32_t t2;
  int32_t *t3;
  int32_t t4;
  int32_t *t5;
  int32_t *t6;
  int32_t t7;
  int32_t t8;
  int32_t *t9;
  int32_t t10;
  int32_t t11;
  int32_t *t12;
};
struct __THE_1_fn$1003 {
  void (*f) (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
  void *x;
  size_t l;
};
struct __THE_1_async_mainX {
  const struct __THE_1_fn$1002 *__THE_0_job3_0;
  const struct __THE_1_fn$1001 *__THE_0_job2_0;
  const struct __THE_1_fn$1000 *__THE_0_job1_0;
  int32_t __THE_0_a_0;
  int32_t *__THE_0_refA_0;
  struct __THE_1_fn$1000 *__THE_0_refJob1_0;
  struct __THE_1_fn$1001 *__THE_0_refJob2_0;
  struct __THE_1_fn$1003 __THE_0_mainSDjobLocal1_0;
  int32_t *t1;
  int32_t *t2;
  int32_t t3;
  int32_t t4;
  int32_t *t5;
  int32_t *t6;
  int32_t t7;
  int32_t t8;
  int32_t *t9;
  int32_t *t10;
  int32_t t11;
  int32_t t12;
};
struct __THE_1_mainSDjobLocal1_0X {
  const struct __THE_1_fn$1001 **__THE_0_refJob2_0;
  const struct __THE_1_fn$1000 **__THE_0_refJob1_0;
  const int32_t **__THE_0_refA_0;
  int32_t *__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_job2_0;
  const struct __THE_1_fn$1000 *__THE_0_job1_0;
  int32_t *t1;
  int32_t t2;
  int32_t *t3;
  int32_t t4;
  int32_t *t5;
  int32_t *t6;
  int32_t t7;
  int32_t t8;
  int32_t *t9;
  int32_t t10;
  int32_t *t11;
  int32_t *t12;
  int32_t t13;
  int32_t t14;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void threadpool_add (threadpool_t *, threadpool_func_t, void *, void *, void *, threadpool_job_t *);
void threadpool_deinit (threadpool_t *);
threadpool_job_t *threadpool_get (threadpool_t *);
threadpool_t *threadpool_init (int);
void threadpool_insert (threadpool_t *, threadpool_job_t *);
void threadpool_job_deinit (threadpool_job_t *);
void threadpool_thread_deinit (threadpool_thread_t *);
threadpool_thread_t *threadpool_thread_init (threadpool_t *, threadpool_thread_t *);
void threadpool_wait (threadpool_t *);
void *threadpool_worker (void *);
void *xalloc (void *, size_t);
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
void __THE_1_job1_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_job1_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_job1_0X);
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_job2_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_job2_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_job2_0X);
void __THE_1_fn$1002_free (struct __THE_1_fn$1002);
void __THE_1_job3_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_job3_0_alloc (struct __THE_1_fn$1002 *, struct __THE_1_job3_0X);
void __THE_1_fn$1003_free (struct __THE_1_fn$1003);
void __THE_1_async_main (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_mainSDjobLocal1_0 (threadpool_t *, threadpool_job_t *, void *, void *, void *, int);
void __THE_1_mainSDjobLocal1_0_alloc (struct __THE_1_fn$1003 *, struct __THE_1_mainSDjobLocal1_0X);
void __THE_1_async_main_alloc (struct __THE_1_fn$1003 *, struct __THE_1_async_mainX);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void threadpool_add (threadpool_t *self, threadpool_func_t func, void *ctx, void *params, void *ret, threadpool_job_t *parent) {
  threadpool_job_t *job = alloc(sizeof(threadpool_job_t));
  job->parent = parent;
  job->func = func;
  job->ctx = ctx;
  job->params = params;
  job->ret = ret;
  job->step = 0;
  job->init = 0;
  job->next = NULL;
  threadpool_insert(self, job);
}
void threadpool_deinit (threadpool_t *self) {
  self->active = false;
  pthread_mutex_lock(&self->lock1);
  while (self->alive_threads != 0) {
    pthread_mutex_lock(&self->lock3);
    pthread_cond_signal(&self->cond2);
    pthread_mutex_unlock(&self->lock3);
    pthread_cond_wait(&self->cond1, &self->lock1);
  }
  pthread_mutex_unlock(&self->lock1);
  while (self->jobs != NULL) {
    threadpool_job_t *next = self->jobs->next;
    threadpool_job_deinit(self->jobs);
    self->jobs = next;
  }
  while (self->threads != NULL) {
    threadpool_thread_t *next = self->threads->next;
    threadpool_thread_deinit(self->threads);
    self->threads = next;
  }
  pthread_cond_destroy(&self->cond1);
  pthread_cond_destroy(&self->cond2);
  pthread_mutex_destroy(&self->lock1);
  pthread_mutex_destroy(&self->lock2);
  pthread_mutex_destroy(&self->lock3);
  free(self);
}
threadpool_job_t *threadpool_get (threadpool_t *self) {
  pthread_mutex_lock(&self->lock2);
  threadpool_job_t *job = self->jobs;
  if (job != NULL) {
    self->jobs = self->jobs->next;
    job->next = NULL;
    if (self->jobs == NULL) {
      self->jobs_tail = NULL;
    } else {
      pthread_mutex_lock(&self->lock3);
      pthread_cond_signal(&self->cond2);
      pthread_mutex_unlock(&self->lock3);
    }
  }
  pthread_mutex_unlock(&self->lock2);
  return job;
}
threadpool_t *threadpool_init (int count) {
  threadpool_t *self = alloc(sizeof(threadpool_t));
  self->active = true;
  self->jobs = NULL;
  self->jobs_tail = NULL;
  self->working_threads = 0;
  self->alive_threads = 0;
  pthread_cond_init(&self->cond1, NULL);
  pthread_cond_init(&self->cond2, NULL);
  pthread_mutex_init(&self->lock1, NULL);
  pthread_mutex_init(&self->lock2, NULL);
  pthread_mutex_init(&self->lock3, NULL);
  self->threads = NULL;
  for (int i = 0; i < count; i++) self->threads = threadpool_thread_init(self, self->threads);
  pthread_mutex_lock(&self->lock1);
  while (self->alive_threads != count) pthread_cond_wait(&self->cond1, &self->lock1);
  pthread_mutex_unlock(&self->lock1);
  return self;
}
void threadpool_insert (threadpool_t *self, threadpool_job_t *job) {
  pthread_mutex_lock(&self->lock2);
  if (self->jobs == NULL) {
    self->jobs = job;
    self->jobs_tail = job;
  } else {
    self->jobs_tail->next = job;
    self->jobs_tail = self->jobs_tail->next;
  }
  pthread_mutex_lock(&self->lock3);
  pthread_cond_signal(&self->cond2);
  pthread_mutex_unlock(&self->lock3);
  pthread_mutex_unlock(&self->lock2);
}
void threadpool_job_deinit (threadpool_job_t *self) {
  if (self->ctx != NULL) free(self->ctx);
  free(self);
}
void threadpool_thread_deinit (threadpool_thread_t *self) {
  pthread_join(self->id, NULL);
  free(self);
}
threadpool_thread_t *threadpool_thread_init (threadpool_t *tp, threadpool_thread_t *next) {
  threadpool_thread_t *self = alloc(sizeof(threadpool_thread_t));
  self->tp = tp;
  pthread_create(&self->id, NULL, threadpool_worker, self);
  self->next = next;
  return self;
}
void threadpool_wait (threadpool_t *self) {
  pthread_mutex_lock(&self->lock1);
  while ((self->working_threads != 0 || self->jobs != NULL) && err_state.id == -1) pthread_cond_wait(&self->cond1, &self->lock1);
  pthread_mutex_unlock(&self->lock1);
}
void *threadpool_worker (void *n) {
  threadpool_thread_t *thread = n;
  threadpool_t *self = thread->tp;
  pthread_mutex_lock(&self->lock1);
  self->alive_threads++;
  pthread_cond_signal(&self->cond1);
  pthread_mutex_unlock(&self->lock1);
  while (self->active) {
    pthread_mutex_lock(&self->lock3);
    while (self->active && self->jobs == NULL) pthread_cond_wait(&self->cond2, &self->lock3);
    pthread_mutex_unlock(&self->lock3);
    if (!self->active) break;
    pthread_mutex_lock(&self->lock1);
    self->working_threads++;
    pthread_mutex_unlock(&self->lock1);
    threadpool_job_t *job = threadpool_get(self);
    if (job != NULL) job->func(self, job, job->ctx, job->params, job->ret, job->step);
    pthread_mutex_lock(&self->lock1);
    self->working_threads--;
    if ((self->working_threads == 0 && self->jobs == NULL) || err_state.id != -1) pthread_cond_signal(&self->cond1);
    pthread_mutex_unlock(&self->lock1);
  }
  pthread_mutex_lock(&self->lock1);
  self->alive_threads--;
  pthread_cond_signal(&self->cond1);
  pthread_mutex_unlock(&self->lock1);
  return NULL;
}
void *xalloc (void *n1, size_t n2) {
  void *r = malloc(n2);
  if (r == NULL) error_alloc(&err_state, n2);
  memcpy(r, n1, n2);
  return r;
}
struct __THE_1_fn$1000 __THE_1_fn$1000_copy (const struct __THE_1_fn$1000 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1000) {n.f, x, n.l};
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_job1_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  int32_t **v = pv;
  struct __THE_1_fn$1000P *p = pp;
  struct __THE_1_job1_0X *x = px;
  unsigned char *r = &x->r;
  int32_t **__THE_0_a_0 = &p->n0;
  job->init = 1;
  switch (step) {
    case 0: {
      **__THE_0_a_0 += 1;
      *r = 1;
      int32_t *_v = *__THE_0_a_0;
      if (v != NULL) *v = _v;
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
void __THE_1_job1_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_job1_0X x) {
  size_t l = sizeof(struct __THE_1_job1_0X);
  struct __THE_1_job1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_job1_0;
  n->x = r;
  n->l = l;
}
struct __THE_1_fn$1001 __THE_1_fn$1001_copy (const struct __THE_1_fn$1001 n) {
  if (n.x == NULL) return n;
  void *x = alloc(n.l);
  memcpy(x, n.x, n.l);
  return (struct __THE_1_fn$1001) {n.f, x, n.l};
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_job2_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  int32_t *v = pv;
  struct __THE_1_fn$1001P *p = pp;
  struct __THE_1_job2_0X *x = px;
  unsigned char *r = &x->r;
  int32_t **__THE_0_a_0 = &p->n0;
  job->init = 1;
  switch (step) {
    case 0: {
      *r = 1;
      int32_t _v = **__THE_0_a_0;
      if (v != NULL) *v = _v;
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
void __THE_1_job2_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_job2_0X x) {
  size_t l = sizeof(struct __THE_1_job2_0X);
  struct __THE_1_job2_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_job2_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1002_free (struct __THE_1_fn$1002 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_job3_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_fn$1002P *p = pp;
  struct __THE_1_job3_0X *x = px;
  int32_t **t1 = &x->t1;
  int32_t *t2 = &x->t2;
  int32_t **t3 = &x->t3;
  int32_t *t4 = &x->t4;
  int32_t **t5 = &x->t5;
  int32_t **t6 = &x->t6;
  int32_t *t7 = &x->t7;
  int32_t *t8 = &x->t8;
  int32_t **t9 = &x->t9;
  int32_t *t10 = &x->t10;
  int32_t *t11 = &x->t11;
  int32_t **t12 = &x->t12;
  int32_t **__THE_0_a_0 = &p->n0;
  const struct __THE_1_fn$1000 *__THE_0_fn1_0 = &p->n1;
  const struct __THE_1_fn$1001 *__THE_0_fn2_0 = &p->n2;
  const struct __THE_1_fn$1000 **__THE_0_fn3_0 = &p->n3;
  const struct __THE_1_fn$1001 **__THE_0_fn4_0 = &p->n4;
  job->init = 1;
  switch (step) {
    case 0: {
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_fn1_0).f, xalloc((*__THE_0_fn1_0).x, (*__THE_0_fn1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t1, job);
    }
    case 1: {
      job->step = 2;
      return threadpool_add(tp, (*__THE_0_fn2_0).f, xalloc((*__THE_0_fn2_0).x, (*__THE_0_fn2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t2, job);
    }
    case 2: {
      **t1 + *t2;
      job->step = 3;
      return threadpool_add(tp, (**__THE_0_fn3_0).f, xalloc((**__THE_0_fn3_0).x, (**__THE_0_fn3_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t3, job);
    }
    case 3: {
      job->step = 4;
      return threadpool_add(tp, (**__THE_0_fn4_0).f, xalloc((**__THE_0_fn4_0).x, (**__THE_0_fn4_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t4, job);
    }
    case 4: {
      **t3 > *t4;
      job->step = 5;
      return threadpool_add(tp, (*__THE_0_fn1_0).f, xalloc((*__THE_0_fn1_0).x, (*__THE_0_fn1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t5, job);
    }
    case 5: {
      job->step = 6;
      return threadpool_add(tp, (**__THE_0_fn3_0).f, xalloc((**__THE_0_fn3_0).x, (**__THE_0_fn3_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t6, job);
    }
    case 6: {
      **t5 & **t6;
      job->step = 7;
      return threadpool_add(tp, (*__THE_0_fn2_0).f, xalloc((*__THE_0_fn2_0).x, (*__THE_0_fn2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t7, job);
    }
    case 7: {
      job->step = 8;
      return threadpool_add(tp, (**__THE_0_fn4_0).f, xalloc((**__THE_0_fn4_0).x, (**__THE_0_fn4_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t8, job);
    }
    case 8: {
      *t7 - *t8;
      job->step = 9;
      return threadpool_add(tp, (*__THE_0_fn1_0).f, xalloc((*__THE_0_fn1_0).x, (*__THE_0_fn1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t9, job);
    }
    case 9: {
      job->step = 10;
      return threadpool_add(tp, (**__THE_0_fn4_0).f, xalloc((**__THE_0_fn4_0).x, (**__THE_0_fn4_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t10, job);
    }
    case 10: {
      **t9 == *t10;
      job->step = 11;
      return threadpool_add(tp, (*__THE_0_fn2_0).f, xalloc((*__THE_0_fn2_0).x, (*__THE_0_fn2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t11, job);
    }
    case 11: {
      job->step = 12;
      return threadpool_add(tp, (**__THE_0_fn3_0).f, xalloc((**__THE_0_fn3_0).x, (**__THE_0_fn3_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t12, job);
    }
    case 12: {
      *t11 << **t12;
      __THE_1_fn$1001_free((struct __THE_1_fn$1001) *__THE_0_fn2_0);
      __THE_1_fn$1000_free((struct __THE_1_fn$1000) *__THE_0_fn1_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
      free(pp);
    }
  }
}
void __THE_1_job3_0_alloc (struct __THE_1_fn$1002 *n, struct __THE_1_job3_0X x) {
  size_t l = sizeof(struct __THE_1_job3_0X);
  struct __THE_1_job3_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_job3_0;
  n->x = r;
  n->l = l;
}
void __THE_1_fn$1003_free (struct __THE_1_fn$1003 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_async_main (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_async_mainX *x = px;
  const struct __THE_1_fn$1002 *__THE_0_job3_0 = x->__THE_0_job3_0;
  const struct __THE_1_fn$1001 *__THE_0_job2_0 = x->__THE_0_job2_0;
  const struct __THE_1_fn$1000 *__THE_0_job1_0 = x->__THE_0_job1_0;
  int32_t *__THE_0_a_0 = &x->__THE_0_a_0;
  int32_t **__THE_0_refA_0 = &x->__THE_0_refA_0;
  struct __THE_1_fn$1000 **__THE_0_refJob1_0 = &x->__THE_0_refJob1_0;
  struct __THE_1_fn$1001 **__THE_0_refJob2_0 = &x->__THE_0_refJob2_0;
  struct __THE_1_fn$1003 *__THE_0_mainSDjobLocal1_0 = &x->__THE_0_mainSDjobLocal1_0;
  int32_t **t1 = &x->t1;
  int32_t **t2 = &x->t2;
  int32_t *t3 = &x->t3;
  int32_t *t4 = &x->t4;
  int32_t **t5 = &x->t5;
  int32_t **t6 = &x->t6;
  int32_t *t7 = &x->t7;
  int32_t *t8 = &x->t8;
  int32_t **t9 = &x->t9;
  int32_t **t10 = &x->t10;
  int32_t *t11 = &x->t11;
  int32_t *t12 = &x->t12;
  job->init = 1;
  switch (step) {
    case 0: {
      *__THE_0_a_0 = 0;
      *__THE_0_refA_0 = __THE_0_a_0;
      *__THE_0_refJob1_0 = __THE_0_job1_0;
      *__THE_0_refJob2_0 = __THE_0_job2_0;
      __THE_0_job1_0;
      __THE_0_job2_0;
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_job1_0).f, xalloc((*__THE_0_job1_0).x, (*__THE_0_job1_0).l), xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t1, job);
    }
    case 1: {
      job->step = 2;
      return threadpool_add(tp, (*__THE_0_job1_0).f, xalloc((*__THE_0_job1_0).x, (*__THE_0_job1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t2, job);
    }
    case 2: {
      job->step = 3;
      return threadpool_add(tp, (*__THE_0_job2_0).f, xalloc((*__THE_0_job2_0).x, (*__THE_0_job2_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t3, job);
    }
    case 3: {
      job->step = 4;
      return threadpool_add(tp, (*__THE_0_job2_0).f, xalloc((*__THE_0_job2_0).x, (*__THE_0_job2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t4, job);
    }
    case 4: {
      job->step = 5;
      return threadpool_add(tp, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).f, xalloc((__THE_1_fn$1000_copy(*__THE_0_job1_0)).x, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).l), xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t5, job);
    }
    case 5: {
      job->step = 6;
      return threadpool_add(tp, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).f, xalloc((__THE_1_fn$1000_copy(*__THE_0_job1_0)).x, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t6, job);
    }
    case 6: {
      job->step = 7;
      return threadpool_add(tp, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).f, xalloc((__THE_1_fn$1001_copy(*__THE_0_job2_0)).x, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t7, job);
    }
    case 7: {
      job->step = 8;
      return threadpool_add(tp, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).f, xalloc((__THE_1_fn$1001_copy(*__THE_0_job2_0)).x, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t8, job);
    }
    case 8: {
      job->step = 9;
      return threadpool_add(tp, (**__THE_0_refJob1_0).f, xalloc((**__THE_0_refJob1_0).x, (**__THE_0_refJob1_0).l), xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t9, job);
    }
    case 9: {
      job->step = 10;
      return threadpool_add(tp, (**__THE_0_refJob1_0).f, xalloc((**__THE_0_refJob1_0).x, (**__THE_0_refJob1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t10, job);
    }
    case 10: {
      job->step = 11;
      return threadpool_add(tp, (**__THE_0_refJob2_0).f, xalloc((**__THE_0_refJob2_0).x, (**__THE_0_refJob2_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t11, job);
    }
    case 11: {
      job->step = 12;
      return threadpool_add(tp, (**__THE_0_refJob2_0).f, xalloc((**__THE_0_refJob2_0).x, (**__THE_0_refJob2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t12, job);
    }
    case 12: {
      job->step = 13;
      return threadpool_add(tp, (*__THE_0_job3_0).f, xalloc((*__THE_0_job3_0).x, (*__THE_0_job3_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_0_a_0, __THE_1_fn$1000_copy(*__THE_0_job1_0), __THE_1_fn$1001_copy(*__THE_0_job2_0), __THE_0_job1_0, __THE_0_job2_0}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 13: {
      job->step = 14;
      return threadpool_add(tp, (*__THE_0_job3_0).f, xalloc((*__THE_0_job3_0).x, (*__THE_0_job3_0).l), xalloc(&(struct __THE_1_fn$1002P) {__THE_0_a_0, __THE_1_fn$1000_copy(*__THE_0_job1_0), __THE_1_fn$1001_copy(*__THE_0_job2_0), __THE_0_job1_0, __THE_0_job2_0}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 14: {
      job->step = 15;
      return threadpool_add(tp, (*__THE_0_job3_0).f, xalloc((*__THE_0_job3_0).x, (*__THE_0_job3_0).l), xalloc(&(struct __THE_1_fn$1002P) {*__THE_0_refA_0, __THE_1_fn$1000_copy(*__THE_0_job1_0), __THE_1_fn$1001_copy(*__THE_0_job2_0), *__THE_0_refJob1_0, *__THE_0_refJob2_0}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 15: {
      job->step = 16;
      return threadpool_add(tp, (*__THE_0_job3_0).f, xalloc((*__THE_0_job3_0).x, (*__THE_0_job3_0).l), xalloc(&(struct __THE_1_fn$1002P) {*__THE_0_refA_0, __THE_1_fn$1000_copy(**__THE_0_refJob1_0), __THE_1_fn$1001_copy(**__THE_0_refJob2_0), *__THE_0_refJob1_0, *__THE_0_refJob2_0}, sizeof(struct __THE_1_fn$1002P)), NULL, job);
    }
    case 16: {
      __THE_1_mainSDjobLocal1_0_alloc((struct __THE_1_fn$1003 *) __THE_0_mainSDjobLocal1_0, (struct __THE_1_mainSDjobLocal1_0X) {__THE_0_refJob2_0, __THE_0_refJob1_0, __THE_0_refA_0, __THE_0_a_0, __THE_0_job2_0, __THE_0_job1_0});
      job->step = 17;
      return threadpool_add(tp, (*__THE_0_mainSDjobLocal1_0).f, xalloc((*__THE_0_mainSDjobLocal1_0).x, (*__THE_0_mainSDjobLocal1_0).l), NULL, NULL, job);
    }
    case 17: {
      __THE_1_fn$1003_free((struct __THE_1_fn$1003) *__THE_0_mainSDjobLocal1_0);
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_mainSDjobLocal1_0 (threadpool_t *tp, threadpool_job_t *job, void *px, void *pp, void *pv, int step) {
  struct __THE_1_mainSDjobLocal1_0X *x = px;
  const struct __THE_1_fn$1001 **__THE_0_refJob2_0 = x->__THE_0_refJob2_0;
  const struct __THE_1_fn$1000 **__THE_0_refJob1_0 = x->__THE_0_refJob1_0;
  const int32_t **__THE_0_refA_0 = x->__THE_0_refA_0;
  int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1001 *__THE_0_job2_0 = x->__THE_0_job2_0;
  const struct __THE_1_fn$1000 *__THE_0_job1_0 = x->__THE_0_job1_0;
  int32_t **t1 = &x->t1;
  int32_t *t2 = &x->t2;
  int32_t **t3 = &x->t3;
  int32_t *t4 = &x->t4;
  int32_t **t5 = &x->t5;
  int32_t **t6 = &x->t6;
  int32_t *t7 = &x->t7;
  int32_t *t8 = &x->t8;
  int32_t **t9 = &x->t9;
  int32_t *t10 = &x->t10;
  int32_t **t11 = &x->t11;
  int32_t **t12 = &x->t12;
  int32_t *t13 = &x->t13;
  int32_t *t14 = &x->t14;
  job->init = 1;
  switch (step) {
    case 0: {
      job->step = 1;
      return threadpool_add(tp, (*__THE_0_job1_0).f, xalloc((*__THE_0_job1_0).x, (*__THE_0_job1_0).l), xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t1, job);
    }
    case 1: {
      job->step = 2;
      return threadpool_add(tp, (*__THE_0_job2_0).f, xalloc((*__THE_0_job2_0).x, (*__THE_0_job2_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t2, job);
    }
    case 2: {
      **t1 + *t2;
      job->step = 3;
      return threadpool_add(tp, (**__THE_0_refJob1_0).f, xalloc((**__THE_0_refJob1_0).x, (**__THE_0_refJob1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t3, job);
    }
    case 3: {
      job->step = 4;
      return threadpool_add(tp, (**__THE_0_refJob2_0).f, xalloc((**__THE_0_refJob2_0).x, (**__THE_0_refJob2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t4, job);
    }
    case 4: {
      **t3 > *t4;
      job->step = 5;
      return threadpool_add(tp, (*__THE_0_job1_0).f, xalloc((*__THE_0_job1_0).x, (*__THE_0_job1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t5, job);
    }
    case 5: {
      job->step = 6;
      return threadpool_add(tp, (**__THE_0_refJob1_0).f, xalloc((**__THE_0_refJob1_0).x, (**__THE_0_refJob1_0).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t6, job);
    }
    case 6: {
      **t5 & **t6;
      job->step = 7;
      return threadpool_add(tp, (**__THE_0_refJob2_0).f, xalloc((**__THE_0_refJob2_0).x, (**__THE_0_refJob2_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t7, job);
    }
    case 7: {
      job->step = 8;
      return threadpool_add(tp, (*__THE_0_job2_0).f, xalloc((*__THE_0_job2_0).x, (*__THE_0_job2_0).l), xalloc(&(struct __THE_1_fn$1001P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1001P)), t8, job);
    }
    case 8: {
      *t7 - *t8;
      job->step = 9;
      return threadpool_add(tp, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).f, xalloc((__THE_1_fn$1000_copy(*__THE_0_job1_0)).x, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).l), xalloc(&(struct __THE_1_fn$1000P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1000P)), t9, job);
    }
    case 9: {
      job->step = 10;
      return threadpool_add(tp, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).f, xalloc((__THE_1_fn$1001_copy(*__THE_0_job2_0)).x, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t10, job);
    }
    case 10: {
      **t9 > *t10;
      job->step = 11;
      return threadpool_add(tp, (*__THE_0_job1_0).f, xalloc((*__THE_0_job1_0).x, (*__THE_0_job1_0).l), xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t11, job);
    }
    case 11: {
      job->step = 12;
      return threadpool_add(tp, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).f, xalloc((__THE_1_fn$1000_copy(*__THE_0_job1_0)).x, (__THE_1_fn$1000_copy(*__THE_0_job1_0)).l), xalloc(&(struct __THE_1_fn$1000P) {__THE_0_a_0}, sizeof(struct __THE_1_fn$1000P)), t12, job);
    }
    case 12: {
      **t11 & **t12;
      job->step = 13;
      return threadpool_add(tp, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).f, xalloc((__THE_1_fn$1001_copy(*__THE_0_job2_0)).x, (__THE_1_fn$1001_copy(*__THE_0_job2_0)).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t13, job);
    }
    case 13: {
      job->step = 14;
      return threadpool_add(tp, (*__THE_0_job2_0).f, xalloc((*__THE_0_job2_0).x, (*__THE_0_job2_0).l), xalloc(&(struct __THE_1_fn$1001P) {*__THE_0_refA_0}, sizeof(struct __THE_1_fn$1001P)), t14, job);
    }
    case 14: {
      *t13 - *t14;
      if (job->parent != NULL) threadpool_insert(tp, job->parent);
      threadpool_job_deinit(job);
    }
  }
}
void __THE_1_mainSDjobLocal1_0_alloc (struct __THE_1_fn$1003 *n, struct __THE_1_mainSDjobLocal1_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDjobLocal1_0X);
  struct __THE_1_mainSDjobLocal1_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDjobLocal1_0;
  n->x = r;
  n->l = l;
}
void __THE_1_async_main_alloc (struct __THE_1_fn$1003 *n, struct __THE_1_async_mainX x) {
  size_t l = sizeof(struct __THE_1_async_mainX);
  struct __THE_1_async_mainX *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_async_main;
  n->x = r;
  n->l = l;
}

int main () {
  threadpool_t *tp = threadpool_init(5);
  const struct __THE_1_fn$1000 __THE_0_job1_0;
  const struct __THE_1_fn$1001 __THE_0_job2_0;
  const struct __THE_1_fn$1002 __THE_0_job3_0;
  __THE_1_job1_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_job1_0, (struct __THE_1_job1_0X) {});
  __THE_1_job2_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_job2_0, (struct __THE_1_job2_0X) {});
  __THE_1_job3_0_alloc((struct __THE_1_fn$1002 *) &__THE_0_job3_0, (struct __THE_1_job3_0X) {});
  const struct __THE_1_fn$1003 async_main;
  __THE_1_async_main_alloc((struct __THE_1_fn$1003 *) &async_main, (struct __THE_1_async_mainX) {&__THE_0_job3_0, &__THE_0_job2_0, &__THE_0_job1_0});
  threadpool_add(tp, async_main.f, xalloc(async_main.x, async_main.l), NULL, NULL, NULL);
  threadpool_wait(tp);
  threadpool_deinit(tp);
  __THE_1_fn$1003_free((struct __THE_1_fn$1003) async_main);
  __THE_1_fn$1002_free((struct __THE_1_fn$1002) __THE_0_job3_0);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_job2_0);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_job1_0);
}
======= flags =======
U:-pthread
======= stdout =======
