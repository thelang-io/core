======= stdin =======
main {
  if true {
    enum Weekday { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
    print(Weekday.Monday)
  } else {
    enum Weekday { Monday = 1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
    print(Weekday.Monday)
  }
  if false {
    enum Weekday { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
    print(Weekday.Monday)
  } else {
    enum Weekday { Monday = 1, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
    print(Weekday.Monday)
  }
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_mainSDWeekday_0 {
  __THE_0_mainSDWeekdaySDMonday_0,
  __THE_0_mainSDWeekdaySDTuesday_0,
  __THE_0_mainSDWeekdaySDWednesday_0,
  __THE_0_mainSDWeekdaySDThursday_0,
  __THE_0_mainSDWeekdaySDFriday_0,
  __THE_0_mainSDWeekdaySDSaturday_0,
  __THE_0_mainSDWeekdaySDSunday_0
};
enum __THE_1_mainSDWeekday_1 {
  __THE_0_mainSDWeekdaySDMonday_1 = 1,
  __THE_0_mainSDWeekdaySDTuesday_1,
  __THE_0_mainSDWeekdaySDWednesday_1,
  __THE_0_mainSDWeekdaySDThursday_1,
  __THE_0_mainSDWeekdaySDFriday_1,
  __THE_0_mainSDWeekdaySDSaturday_1,
  __THE_0_mainSDWeekdaySDSunday_1
};
enum __THE_1_mainSDWeekday_2 {
  __THE_0_mainSDWeekdaySDMonday_2,
  __THE_0_mainSDWeekdaySDTuesday_2,
  __THE_0_mainSDWeekdaySDWednesday_2,
  __THE_0_mainSDWeekdaySDThursday_2,
  __THE_0_mainSDWeekdaySDFriday_2,
  __THE_0_mainSDWeekdaySDSaturday_2,
  __THE_0_mainSDWeekdaySDSunday_2
};
enum __THE_1_mainSDWeekday_3 {
  __THE_0_mainSDWeekdaySDMonday_3 = 1,
  __THE_0_mainSDWeekdaySDTuesday_3,
  __THE_0_mainSDWeekdaySDWednesday_3,
  __THE_0_mainSDWeekdaySDThursday_3,
  __THE_0_mainSDWeekdaySDFriday_3,
  __THE_0_mainSDWeekdaySDSaturday_3,
  __THE_0_mainSDWeekdaySDSunday_3
};

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
struct str enum_str (int);
void error_alloc (err_state_t *, size_t);
void print (FILE *, const char *, ...);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
struct str enum_str (int d) {
  char buf[24];
  sprintf(buf, "%d", d);
  return str_alloc(buf);
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void print (FILE *stream, const char *fmt, ...) {
  char *d = alloc(1024);
  size_t cap = 1024;
  size_t len = 0;
  size_t y;
  va_list args;
  va_start(args, fmt);
  while (*fmt) {
    switch (*fmt++) {
      case 't': {
        int a = va_arg(args, int);
        y = a == 0 ? 5 : 4;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a == 0 ? "false" : "true", y);
        break;
      }
      case 'b': {
        unsigned int a = va_arg(args, unsigned int);
        y = snprintf(NULL, 0, "%u", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%u", a);
        break;
      }
      case 'c': {
        char a = va_arg(args, int);
        y = snprintf(NULL, 0, "%c", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%c", a);
        break;
      }
      case 'e':
      case 'f':
      case 'g': {
        double a = va_arg(args, double);
        y = snprintf(NULL, 0, "%f", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%f", a);
        break;
      }
      case 'h':
      case 'j':
      case 'v':
      case 'w': {
        int a = va_arg(args, int);
        y = snprintf(NULL, 0, "%d", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%d", a);
        break;
      }
      case 'i':
      case 'k': {
        int32_t a = va_arg(args, int32_t);
        y = snprintf(NULL, 0, "%" PRId32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId32, a);
        break;
      }
      case 'l': {
        int64_t a = va_arg(args, int64_t);
        y = snprintf(NULL, 0, "%" PRId64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRId64, a);
        break;
      }
      case 'p': {
        void *a = va_arg(args, void *);
        y = snprintf(NULL, 0, "%p", a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%p", a);
        break;
      }
      case 's': {
        struct str a = va_arg(args, struct str);
        y = a.l;
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a.d, y);
        free(a.d);
        break;
      }
      case 'u': {
        uint32_t a = va_arg(args, uint32_t);
        y = snprintf(NULL, 0, "%" PRIu32, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu32, a);
        break;
      }
      case 'y': {
        uint64_t a = va_arg(args, uint64_t);
        y = snprintf(NULL, 0, "%" PRIu64, a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        sprintf(&d[len], "%" PRIu64, a);
        break;
      }
      case 'z': {
        char *a = va_arg(args, char *);
        y = strlen(a);
        if (len + y >= cap) d = re_alloc(d, cap += (y / 1024 + 1) * 1024);
        memcpy(&d[len], a, y);
        break;
      }
    }
    len += y;
  }
  va_end(args);
  d[len] = '\0';
  fputs(d, stream);
  fflush(stream);
  free(d);
}
void *re_alloc (void *n1, size_t n2) {
  void *r = realloc(n1, n2);
  if (r == NULL) error_alloc(&err_state, n2);
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}

int main () {
  if (true) {
    print(stdout, "sz", enum_str(__THE_0_mainSDWeekdaySDMonday_0), THE_EOL);
  } else {
    print(stdout, "sz", enum_str(__THE_0_mainSDWeekdaySDMonday_1), THE_EOL);
  }
  if (false) {
    print(stdout, "sz", enum_str(__THE_0_mainSDWeekdaySDMonday_2), THE_EOL);
  } else {
    print(stdout, "sz", enum_str(__THE_0_mainSDWeekdaySDMonday_3), THE_EOL);
  }
}
======= flags =======
======= stdout =======
0
1
