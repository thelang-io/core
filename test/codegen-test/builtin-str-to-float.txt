======= stdin =======
main {
  print("0".toFloat())
  print("1".toFloat())
  print("10".toFloat())
  print("100".toFloat())
  print("179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448".toFloat())
  print("-0".toFloat())
  print("-1".toFloat())
  print("-10".toFloat())
  print("-100".toFloat())
  print("-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448".toFloat())

  print("0.0".toFloat())
  print("0.1".toFloat())
  print("0.10".toFloat())
  print("0.100".toFloat())
  print("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507".toFloat())
  print("-0.0".toFloat())
  print("-0.1".toFloat())
  print("-0.10".toFloat())
  print("-0.100".toFloat())
  print("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507".toFloat())

  print("0e0".toFloat())
  print("1E+1".toFloat())
  print("10.E+10".toFloat())
  print("100.E+100".toFloat())
  print("1.79769E+308".toFloat())
  print("1e-1".toFloat())
  print("10.e-10".toFloat())
  print("100.e-100".toFloat())
  print("2.22507e-307".toFloat())
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <errno.h>
#include <float.h>
#include <inttypes.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
void print (FILE *, const char *, ...);
struct str str_alloc (const char *);
char *str_cstr (const struct str);
void str_free (struct str);
double str_toFloat (struct str);
struct error_Error *error_Error_alloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
void print (FILE *stream, const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  char buf[512];
  struct str s;
  while (*fmt) {
    switch (*fmt++) {
      case 't': fputs(va_arg(args, int) ? "true" : "false", stream); break;
      case 'b': sprintf(buf, "%u", va_arg(args, unsigned)); fputs(buf, stream); break;
      case 'c': fputc(va_arg(args, int), stream); break;
      case 'e':
      case 'f':
      case 'g': snprintf(buf, 512, "%f", va_arg(args, double)); fputs(buf, stream); break;
      case 'h':
      case 'j':
      case 'v':
      case 'w': sprintf(buf, "%d", va_arg(args, int)); fputs(buf, stream); break;
      case 'i':
      case 'k': sprintf(buf, "%" PRId32, va_arg(args, int32_t)); fputs(buf, stream); break;
      case 'l': sprintf(buf, "%" PRId64, va_arg(args, int64_t)); fputs(buf, stream); break;
      case 'p': sprintf(buf, "%p", va_arg(args, void *)); fputs(buf, stream); break;
      case 's': s = va_arg(args, struct str); fwrite(s.d, 1, s.l, stream); str_free(s); break;
      case 'u': sprintf(buf, "%" PRIu32, va_arg(args, uint32_t)); fputs(buf, stream); break;
      case 'y': sprintf(buf, "%" PRIu64, va_arg(args, uint64_t)); fputs(buf, stream); break;
      case 'z': fputs(va_arg(args, char *), stream); break;
    }
  }
  va_end(args);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
double str_toFloat (struct str self) {
  char *c = str_cstr(self);
  char *e = NULL;
  errno = 0;
  double r = strtod(c, &e);
  if (errno == ERANGE || r < -DBL_MAX || DBL_MAX < r) {
    const char *fmt = "value `%s` out of range";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  } else if (errno != 0 || e == c || *e != 0) {
    const char *fmt = "value `%s` has invalid syntax";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z);
    sprintf(d, fmt, c);
    free(c);
    free(self.d);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  free(c);
  free(self.d);
  return r;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 2, 9), str_toFloat(str_alloc("0"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 3, 9), str_toFloat(str_alloc("1"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 4, 9), str_toFloat(str_alloc("10"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 5, 9), str_toFloat(str_alloc("100"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 6, 9), str_toFloat(str_alloc("179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 7, 9), str_toFloat(str_alloc("-0"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 8, 9), str_toFloat(str_alloc("-1"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 9, 9), str_toFloat(str_alloc("-10"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 10, 9), str_toFloat(str_alloc("-100"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 11, 9), str_toFloat(str_alloc("-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 13, 9), str_toFloat(str_alloc("0.0"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 14, 9), str_toFloat(str_alloc("0.1"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 15, 9), str_toFloat(str_alloc("0.10"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 16, 9), str_toFloat(str_alloc("0.100"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 17, 9), str_toFloat(str_alloc("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 18, 9), str_toFloat(str_alloc("-0.0"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 19, 9), str_toFloat(str_alloc("-0.1"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 20, 9), str_toFloat(str_alloc("-0.10"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 21, 9), str_toFloat(str_alloc("-0.100"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 22, 9), str_toFloat(str_alloc("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 24, 9), str_toFloat(str_alloc("0e0"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 25, 9), str_toFloat(str_alloc("1E+1"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 26, 9), str_toFloat(str_alloc("10.E+10"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 27, 9), str_toFloat(str_alloc("100.E+100"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 28, 9), str_toFloat(str_alloc("1.79769E+308"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 29, 9), str_toFloat(str_alloc("1e-1"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 30, 9), str_toFloat(str_alloc("10.e-10"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 31, 9), str_toFloat(str_alloc("100.e-100"))), THE_EOL);
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L1;
  print(stdout, "fz", (error_stack_pos(&err_state, 32, 9), str_toFloat(str_alloc("2.22507e-307"))), THE_EOL);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
0.000000
1.000000
10.000000
100.000000
179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448.000000
-0.000000
-1.000000
-10.000000
-100.000000
-179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448.000000
0.000000
0.100000
0.100000
0.100000
0.000000
-0.000000
-0.100000
-0.100000
-0.100000
-0.000000
0.000000
10.000000
100000000000.000000
999999999999999977049513265245336628446842719924150006129995974731993452180789911303261294481511546880.000000
179769000000000006323030492138942643493033036433685336215410983289126434148906289940615299632196609445533816320312774433484859900046491141051651091672734470972759941382582304802812882753059262973637182942535982636884444611376868582636745405553206881859340916340092953230149901406738427651121855107737424232448.000000
0.100000
0.000000
0.000000
0.000000
