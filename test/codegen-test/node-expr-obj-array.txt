======= stdin =======
obj Test {
  a: int[]
  b: int[]
}

main {
  Test{a: [2], b: [3]}
  Test{b: [1]}
}
======= code =======
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

void *alloc (size_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}

struct __THE_1_array_int;
struct __THE_1_Test_0;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};
struct __THE_1_Test_0 {
  struct __THE_1_array_int __THE_0_a;
  struct __THE_1_array_int __THE_0_b;
};

struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_array_int, struct __THE_1_array_int);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);

struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct __THE_1_array_int __THE_0_a, struct __THE_1_array_int __THE_0_b) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  r->__THE_0_b = __THE_0_b;
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  __THE_1_array_int_free((struct __THE_1_array_int) o->__THE_0_a);
  __THE_1_array_int_free((struct __THE_1_array_int) o->__THE_0_b);
  free(o);
}

int main () {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(__THE_1_array_int_alloc(1, 2), __THE_1_array_int_alloc(1, 3)));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(__THE_1_array_int_alloc(0), __THE_1_array_int_alloc(1, 1)));
}
======= flags =======
======= stdout =======
