======= stdin =======
fn test1 () int {
  fn test2 () int {
    fn test3 () int {
      return 1
    }

    return test3()
  }

  return test2()
}

main {
  a := test1()

  fn test4 () int {
    fn test5 () int {
      fn test6 () int {
        return a
      }

      return test6()
    }

    return test5()
  }

  b := test4()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;

struct __THE_1_fn$1000;
struct __THE_1_mainSDtest4_0X;
struct __THE_1_mainSDtest4SDtest5_0X;
struct __THE_1_mainSDtest4SDtest5SDtest6_0X;

struct __THE_1_fn$1000 {
  int32_t (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest4_0X {
  const int32_t *__THE_0_a_0;
};
struct __THE_1_mainSDtest4SDtest5_0X {
  const int32_t *__THE_0_a_0;
};
struct __THE_1_mainSDtest4SDtest5SDtest6_0X {
  const int32_t *__THE_0_a_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0, (void *) 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
int32_t __THE_1_test1SDtest2SDtest3_0 (void *);
int32_t __THE_1_test1SDtest2_0 (void *);
int32_t __THE_1_test1_0 (void *);
int32_t __THE_1_mainSDtest4_0 (void *);
int32_t __THE_1_mainSDtest4SDtest5_0 (void *);
int32_t __THE_1_mainSDtest4SDtest5SDtest6_0 (void *);
void __THE_1_mainSDtest4SDtest5SDtest6_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest4SDtest5SDtest6_0X);
void __THE_1_mainSDtest4SDtest5_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest4SDtest5_0X);
void __THE_1_mainSDtest4_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest4_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test1SDtest2SDtest3_0 (void *px) {
  return 1;
}
int32_t __THE_1_test1SDtest2_0 (void *px) {
  const struct __THE_1_fn$1000 __THE_0_test1SDtest2SDtest3_0 = (struct __THE_1_fn$1000) {&__THE_1_test1SDtest2SDtest3_0, NULL, 0};
  return __THE_0_test1SDtest2SDtest3_0.f(__THE_0_test1SDtest2SDtest3_0.x);
}
int32_t __THE_1_test1_0 (void *px) {
  const struct __THE_1_fn$1000 __THE_0_test1SDtest2_0 = (struct __THE_1_fn$1000) {&__THE_1_test1SDtest2_0, NULL, 0};
  return __THE_0_test1SDtest2_0.f(__THE_0_test1SDtest2_0.x);
}
int32_t __THE_1_mainSDtest4_0 (void *px) {
  int32_t v;
  struct __THE_1_mainSDtest4_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1000 __THE_0_mainSDtest4SDtest5_0;
  __THE_1_mainSDtest4SDtest5_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest4SDtest5_0, (struct __THE_1_mainSDtest4SDtest5_0X) {__THE_0_a_0});
  v = __THE_0_mainSDtest4SDtest5_0.f(__THE_0_mainSDtest4SDtest5_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest4SDtest5_0);
  return v;
}
int32_t __THE_1_mainSDtest4SDtest5_0 (void *px) {
  int32_t v;
  struct __THE_1_mainSDtest4SDtest5_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1000 __THE_0_mainSDtest4SDtest5SDtest6_0;
  __THE_1_mainSDtest4SDtest5SDtest6_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest4SDtest5SDtest6_0, (struct __THE_1_mainSDtest4SDtest5SDtest6_0X) {__THE_0_a_0});
  v = __THE_0_mainSDtest4SDtest5SDtest6_0.f(__THE_0_mainSDtest4SDtest5SDtest6_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest4SDtest5SDtest6_0);
  return v;
}
int32_t __THE_1_mainSDtest4SDtest5SDtest6_0 (void *px) {
  struct __THE_1_mainSDtest4SDtest5SDtest6_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  return *__THE_0_a_0;
}
void __THE_1_mainSDtest4SDtest5SDtest6_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest4SDtest5SDtest6_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest4SDtest5SDtest6_0X);
  struct __THE_1_mainSDtest4SDtest5SDtest6_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest4SDtest5SDtest6_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest4SDtest5_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest4SDtest5_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest4SDtest5_0X);
  struct __THE_1_mainSDtest4SDtest5_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest4SDtest5_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest4_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest4_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest4_0X);
  struct __THE_1_mainSDtest4_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest4_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  const int32_t __THE_0_a_0 = __THE_0_test1_0.f(__THE_0_test1_0.x);
  const struct __THE_1_fn$1000 __THE_0_mainSDtest4_0;
  __THE_1_mainSDtest4_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest4_0, (struct __THE_1_mainSDtest4_0X) {&__THE_0_a_0});
  const int32_t __THE_0_b_0 = __THE_0_mainSDtest4_0.f(__THE_0_mainSDtest4_0.x);
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest4_0);
}
======= flags =======
======= stdout =======
