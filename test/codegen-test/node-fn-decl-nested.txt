======= stdin =======
fn test1 () int {
  fn test2 () int {
    fn test3 () int {
      return 1
    }

    return test3()
  }

  return test2()
}

main {
  a := test1()

  fn test4 () int {
    fn test5 () int {
      fn test6 () int {
        return a
      }

      return test6()
    }

    return test5()
  }

  b := test4()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct error_Error;
struct __THE_1_fn$1000P;
struct __THE_1_fn$1000;
struct __THE_1_mainSDtest4_0X;
struct __THE_1_mainSDtest4SDtest5_0X;
struct __THE_1_mainSDtest4SDtest5SDtest6_0X;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};
struct __THE_1_fn$1000P {
  int line;
  int col;
};
struct __THE_1_fn$1000 {
  int32_t (*f) (void *, struct __THE_1_fn$1000P);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtest4_0X {
  const int32_t *__THE_0_a_0;
};
struct __THE_1_mainSDtest4SDtest5_0X {
  const int32_t *__THE_0_a_0;
};
struct __THE_1_mainSDtest4SDtest5SDtest6_0X {
  const int32_t *__THE_0_a_0;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, const char *, const char *, int, int);
void str_free (struct str);
void error_Error_free (struct error_Error *);
void __THE_1_fn$1000_free (struct __THE_1_fn$1000);
int32_t __THE_1_test1SDtest2SDtest3_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_test1SDtest2_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_test1_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_mainSDtest4_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_mainSDtest4SDtest5_0 (void *, struct __THE_1_fn$1000P);
int32_t __THE_1_mainSDtest4SDtest5SDtest6_0 (void *, struct __THE_1_fn$1000P);
void __THE_1_mainSDtest4SDtest5SDtest6_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest4SDtest5SDtest6_0X);
void __THE_1_mainSDtest4SDtest5_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest4SDtest5_0X);
void __THE_1_mainSDtest4_0_alloc (struct __THE_1_fn$1000 *, struct __THE_1_mainSDtest4_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  if (line != 0) state->stack[state->stack_idx - 1].line = line;
  if (col != 0) state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, const char *file, const char *name, int line, int col) {
  state->stack[state->stack_idx].file = file;
  state->stack[state->stack_idx].name = name;
  error_stack_pos(state, line, col);
  state->stack_idx++;
}
void str_free (struct str s) {
  free(s.d);
}
void error_Error_free (struct error_Error *n) {
  str_free((struct str) n->__THE_0_message);
  str_free((struct str) n->__THE_0_stack);
  free(n);
}
void __THE_1_fn$1000_free (struct __THE_1_fn$1000 n) {
  if (n.x != NULL) free(n.x);
}
int32_t __THE_1_test1SDtest2SDtest3_0 (void *px, struct __THE_1_fn$1000P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test3", p.line, p.col);
  r = 1;
  v = 1;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_test1SDtest2_0 (void *px, struct __THE_1_fn$1000P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test2", p.line, p.col);
  const struct __THE_1_fn$1000 __THE_0_test1SDtest2SDtest3_0 = (struct __THE_1_fn$1000) {&__THE_1_test1SDtest2SDtest3_0, NULL, 0};
  r = 1;
  v = __THE_0_test1SDtest2SDtest3_0.f(__THE_0_test1SDtest2SDtest3_0.x, (struct __THE_1_fn$1000P) {7, 12});
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_test1_0 (void *px, struct __THE_1_fn$1000P p) {
  int32_t v;
  error_stack_push(&err_state, "/test", "test1", p.line, p.col);
  const struct __THE_1_fn$1000 __THE_0_test1SDtest2_0 = (struct __THE_1_fn$1000) {&__THE_1_test1SDtest2_0, NULL, 0};
  v = __THE_0_test1SDtest2_0.f(__THE_0_test1SDtest2_0.x, (struct __THE_1_fn$1000P) {10, 10});
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_mainSDtest4_0 (void *px, struct __THE_1_fn$1000P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test4", p.line, p.col);
  struct __THE_1_mainSDtest4_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1000 __THE_0_mainSDtest4SDtest5_0;
  __THE_1_mainSDtest4SDtest5_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest4SDtest5_0, (struct __THE_1_mainSDtest4SDtest5_0X) {__THE_0_a_0});
  r = 1;
  v = __THE_0_mainSDtest4SDtest5_0.f(__THE_0_mainSDtest4SDtest5_0.x, (struct __THE_1_fn$1000P) {25, 12});
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest4SDtest5_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_mainSDtest4SDtest5_0 (void *px, struct __THE_1_fn$1000P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test5", p.line, p.col);
  struct __THE_1_mainSDtest4SDtest5_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  const struct __THE_1_fn$1000 __THE_0_mainSDtest4SDtest5SDtest6_0;
  __THE_1_mainSDtest4SDtest5SDtest6_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest4SDtest5SDtest6_0, (struct __THE_1_mainSDtest4SDtest5SDtest6_0X) {__THE_0_a_0});
  r = 1;
  v = __THE_0_mainSDtest4SDtest5SDtest6_0.f(__THE_0_mainSDtest4SDtest5SDtest6_0.x, (struct __THE_1_fn$1000P) {22, 14});
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest4SDtest5SDtest6_0);
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
int32_t __THE_1_mainSDtest4SDtest5SDtest6_0 (void *px, struct __THE_1_fn$1000P p) {
  unsigned char r = 0;
  int32_t v;
  error_stack_push(&err_state, "/test", "test6", p.line, p.col);
  struct __THE_1_mainSDtest4SDtest5SDtest6_0X *x = px;
  const int32_t *__THE_0_a_0 = x->__THE_0_a_0;
  r = 1;
  v = *__THE_0_a_0;
  error_stack_pop(&err_state);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  return v;
}
void __THE_1_mainSDtest4SDtest5SDtest6_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest4SDtest5SDtest6_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest4SDtest5SDtest6_0X);
  struct __THE_1_mainSDtest4SDtest5SDtest6_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest4SDtest5SDtest6_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest4SDtest5_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest4SDtest5_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest4SDtest5_0X);
  struct __THE_1_mainSDtest4SDtest5_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest4SDtest5_0;
  n->x = r;
  n->l = l;
}
void __THE_1_mainSDtest4_0_alloc (struct __THE_1_fn$1000 *n, struct __THE_1_mainSDtest4_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtest4_0X);
  struct __THE_1_mainSDtest4_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtest4_0;
  n->x = r;
  n->l = l;
}

int main () {
  error_stack_push(&err_state, "/test", "main", 0, 0);
  const struct __THE_1_fn$1000 __THE_0_test1_0 = (struct __THE_1_fn$1000) {&__THE_1_test1_0, NULL, 0};
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L4;
  const int32_t __THE_0_a_0 = __THE_0_test1_0.f(__THE_0_test1_0.x, (struct __THE_1_fn$1000P) {14, 8});
  const struct __THE_1_fn$1000 __THE_0_mainSDtest4_0;
  __THE_1_mainSDtest4_0_alloc((struct __THE_1_fn$1000 *) &__THE_0_mainSDtest4_0, (struct __THE_1_mainSDtest4_0X) {&__THE_0_a_0});
  if (setjmp(err_state.buf[err_state.buf_idx - 1]) != 0) goto L8;
  const int32_t __THE_0_b_0 = __THE_0_mainSDtest4_0.f(__THE_0_mainSDtest4_0.x, (struct __THE_1_fn$1000P) {28, 8});
L8:
  __THE_1_fn$1000_free((struct __THE_1_fn$1000) __THE_0_mainSDtest4_0);
L4:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    error_Error_free(err);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
