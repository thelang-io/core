======= stdin =======
enum Color {
  Red,
  Green,
  Blue
}

obj Test1 {
  test2: Test2
}

obj Test2 {
  e: Color
}

fn testCall () Color {
  return .Red
}

main {
  mut test := Color.Green
  mut refTest := ref test
  mut test2 := Test2{e: .Blue}
  mut test1 := Test1{test2: test2}

  Color.Red.rawValue
  ;(test = .Green).rawValue
  test.rawValue
  test2.e.rawValue
  test1.test2.e.rawValue
  testCall().rawValue
  ;(ref test).rawValue
  refTest.rawValue

  fn testCtx () {
    Color.Red.rawValue
    ;(test = .Green).rawValue
    test.rawValue
    test2.e.rawValue
    test1.test2.e.rawValue
    testCall().rawValue
    ;(ref test).rawValue
    refTest.rawValue
  }

  testCtx()
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum __THE_1_Color_0 {
  __THE_0_ColorSDRed_0,
  __THE_0_ColorSDGreen_0,
  __THE_0_ColorSDBlue_0
};

typedef struct err_buf {
  jmp_buf buf;
  struct err_buf *next;
  struct err_buf *prev;
} err_buf_t;
typedef struct err_stack {
  const char *file;
  const char *name;
  int line;
  int col;
  struct err_stack *next;
  struct err_stack *prev;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  err_buf_t *buf_first;
  err_buf_t *buf_last;
  err_stack_t *stack_first;
  err_stack_t *stack_last;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

struct __THE_1_Test1_0;
struct __THE_1_Test2_0;
struct __THE_1_fn$1000;
struct __THE_1_fn$1001;
struct __THE_1_mainSDtestCtx_0X;

struct __THE_1_Test1_0 {
  const struct __THE_1_Test2_0 *__THE_0_test2;
};
struct __THE_1_Test2_0 {
  const enum __THE_1_Color_0 __THE_0_e;
};
struct __THE_1_fn$1000 {
  enum __THE_1_Color_0 (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_fn$1001 {
  void (*f) (void *);
  void *x;
  size_t l;
};
struct __THE_1_mainSDtestCtx_0X {
  struct __THE_1_Test1_0 **__THE_0_test1_0;
  struct __THE_1_Test2_0 **__THE_0_test2_0;
  enum __THE_1_Color_0 **__THE_0_refTest_0;
  enum __THE_1_Color_0 *__THE_0_test_0;
  const struct __THE_1_fn$1000 *__THE_0_testCall_0;
};

err_state_t err_state = {-1, NULL, NULL, NULL, NULL, NULL, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
void str_free (struct str);
struct str __THE_1_Color_0_rawValue (enum __THE_1_Color_0);
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *);
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *);
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (enum __THE_1_Color_0);
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *);
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *);
enum __THE_1_Color_0 __THE_1_testCall_0 (void *);
void __THE_1_fn$1001_free (struct __THE_1_fn$1001);
void __THE_1_mainSDtestCtx_0 (void *);
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1001 *, struct __THE_1_mainSDtestCtx_0X);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (err_stack_t *it = fn_err_state->stack_last; it != NULL; it = it->prev) {
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it->name, it->file);
    if (l + z >= 4096) break;
    sprintf(&d[l], fmt, it->name, it->file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
void str_free (struct str s) {
  free(s.d);
}
struct str __THE_1_Color_0_rawValue (enum __THE_1_Color_0 n) {
  if (n == __THE_0_ColorSDRed_0) return str_alloc("Red");
  if (n == __THE_0_ColorSDGreen_0) return str_alloc("Green");
  if (n == __THE_0_ColorSDBlue_0) return str_alloc("Blue");
}
struct __THE_1_Test1_0 *__THE_1_Test1_0_alloc (struct __THE_1_Test2_0 *__THE_0_test2) {
  struct __THE_1_Test1_0 *r = alloc(sizeof(struct __THE_1_Test1_0));
  struct __THE_1_Test1_0 s = {__THE_0_test2};
  memcpy(r, &s, sizeof(struct __THE_1_Test1_0));
  return r;
}
void __THE_1_Test1_0_free (struct __THE_1_Test1_0 *n) {
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) n->__THE_0_test2);
  free(n);
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_alloc (enum __THE_1_Color_0 __THE_0_e) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {__THE_0_e};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
struct __THE_1_Test2_0 *__THE_1_Test2_0_copy (const struct __THE_1_Test2_0 *n) {
  struct __THE_1_Test2_0 *r = alloc(sizeof(struct __THE_1_Test2_0));
  struct __THE_1_Test2_0 s = {n->__THE_0_e};
  memcpy(r, &s, sizeof(struct __THE_1_Test2_0));
  return r;
}
void __THE_1_Test2_0_free (struct __THE_1_Test2_0 *n) {
  free(n);
}
enum __THE_1_Color_0 __THE_1_testCall_0 (void *px) {
  return __THE_0_ColorSDRed_0;
}
void __THE_1_fn$1001_free (struct __THE_1_fn$1001 n) {
  if (n.x != NULL) free(n.x);
}
void __THE_1_mainSDtestCtx_0 (void *px) {
  struct __THE_1_mainSDtestCtx_0X *x = px;
  struct __THE_1_Test1_0 **__THE_0_test1_0 = x->__THE_0_test1_0;
  struct __THE_1_Test2_0 **__THE_0_test2_0 = x->__THE_0_test2_0;
  enum __THE_1_Color_0 **__THE_0_refTest_0 = x->__THE_0_refTest_0;
  enum __THE_1_Color_0 *__THE_0_test_0 = x->__THE_0_test_0;
  const struct __THE_1_fn$1000 *__THE_0_testCall_0 = x->__THE_0_testCall_0;
  str_free((struct str) __THE_1_Color_0_rawValue(__THE_0_ColorSDRed_0));
  str_free((struct str) __THE_1_Color_0_rawValue((*__THE_0_test_0 = __THE_0_ColorSDGreen_0)));
  str_free((struct str) __THE_1_Color_0_rawValue(*__THE_0_test_0));
  str_free((struct str) __THE_1_Color_0_rawValue((*__THE_0_test2_0)->__THE_0_e));
  str_free((struct str) __THE_1_Color_0_rawValue((*__THE_0_test1_0)->__THE_0_test2->__THE_0_e));
  str_free((struct str) __THE_1_Color_0_rawValue((*__THE_0_testCall_0).f((*__THE_0_testCall_0).x)));
  str_free((struct str) __THE_1_Color_0_rawValue((*__THE_0_test_0)));
  str_free((struct str) __THE_1_Color_0_rawValue(**__THE_0_refTest_0));
}
void __THE_1_mainSDtestCtx_0_alloc (struct __THE_1_fn$1001 *n, struct __THE_1_mainSDtestCtx_0X x) {
  size_t l = sizeof(struct __THE_1_mainSDtestCtx_0X);
  struct __THE_1_mainSDtestCtx_0X *r = alloc(l);
  memcpy(r, &x, l);
  n->f = &__THE_1_mainSDtestCtx_0;
  n->x = r;
  n->l = l;
}

int main () {
  const struct __THE_1_fn$1000 __THE_0_testCall_0 = (struct __THE_1_fn$1000) {&__THE_1_testCall_0, NULL, 0};
  enum __THE_1_Color_0 __THE_0_test_0 = __THE_0_ColorSDGreen_0;
  enum __THE_1_Color_0 *__THE_0_refTest_0 = &__THE_0_test_0;
  struct __THE_1_Test2_0 *__THE_0_test2_0 = __THE_1_Test2_0_alloc(__THE_0_ColorSDBlue_0);
  struct __THE_1_Test1_0 *__THE_0_test1_0 = __THE_1_Test1_0_alloc(__THE_1_Test2_0_copy(__THE_0_test2_0));
  str_free((struct str) __THE_1_Color_0_rawValue(__THE_0_ColorSDRed_0));
  str_free((struct str) __THE_1_Color_0_rawValue((__THE_0_test_0 = __THE_0_ColorSDGreen_0)));
  str_free((struct str) __THE_1_Color_0_rawValue(__THE_0_test_0));
  str_free((struct str) __THE_1_Color_0_rawValue(__THE_0_test2_0->__THE_0_e));
  str_free((struct str) __THE_1_Color_0_rawValue(__THE_0_test1_0->__THE_0_test2->__THE_0_e));
  str_free((struct str) __THE_1_Color_0_rawValue(__THE_0_testCall_0.f(__THE_0_testCall_0.x)));
  str_free((struct str) __THE_1_Color_0_rawValue((__THE_0_test_0)));
  str_free((struct str) __THE_1_Color_0_rawValue(*__THE_0_refTest_0));
  const struct __THE_1_fn$1001 __THE_0_mainSDtestCtx_0;
  __THE_1_mainSDtestCtx_0_alloc((struct __THE_1_fn$1001 *) &__THE_0_mainSDtestCtx_0, (struct __THE_1_mainSDtestCtx_0X) {&__THE_0_test1_0, &__THE_0_test2_0, &__THE_0_refTest_0, &__THE_0_test_0, &__THE_0_testCall_0});
  __THE_0_mainSDtestCtx_0.f(__THE_0_mainSDtestCtx_0.x);
  __THE_1_fn$1001_free((struct __THE_1_fn$1001) __THE_0_mainSDtestCtx_0);
  __THE_1_Test1_0_free((struct __THE_1_Test1_0 *) __THE_0_test1_0);
  __THE_1_Test2_0_free((struct __THE_1_Test2_0 *) __THE_0_test2_0);
}
======= flags =======
======= stdout =======
