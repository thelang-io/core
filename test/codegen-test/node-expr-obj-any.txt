======= stdin =======
obj Test {
  a: any
  b: any
}

main {
  Test{a: "test", b: 2}
  Test{a: 3.14}
}
======= code =======
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_ANY_str 1
#define TYPE_ANY_int 2
#define TYPE_ANY_float 3

struct any {
  int t;
  void *d;
  size_t l;
  struct any (*_copy) (const struct any);
  void (*_free) (struct any);
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void any_free (struct any);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void any_free (struct any n) {
  if (n.d != NULL) n._free(n);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}

struct __THE_1_Test_0;
struct any_str;
struct any_int;
struct any_float;

struct __THE_1_Test_0 {
  struct any __THE_0_a;
  struct any __THE_0_b;
};
struct any_str {
  struct str d;
};
struct any_int {
  int32_t d;
};
struct any_float {
  double d;
};

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct any, struct any);
void __THE_1_Test_0_free (struct __THE_1_Test_0 *);
struct any any_str_alloc (struct str);
struct any any_str_copy (const struct any);
void any_str_free (struct any);
struct any any_int_alloc (int32_t);
struct any any_int_copy (const struct any);
void any_int_free (struct any);
struct any any_float_alloc (double);
struct any any_float_copy (const struct any);
void any_float_free (struct any);

struct __THE_1_Test_0 *__THE_1_Test_0_alloc (struct any __THE_0_a, struct any __THE_0_b) {
  struct __THE_1_Test_0 *r = alloc(sizeof(struct __THE_1_Test_0));
  r->__THE_0_a = __THE_0_a;
  r->__THE_0_b = __THE_0_b;
  return r;
}
void __THE_1_Test_0_free (struct __THE_1_Test_0 *o) {
  any_free((struct any) o->__THE_0_a);
  any_free((struct any) o->__THE_0_b);
  free(o);
}
struct any any_str_alloc (struct str d) {
  size_t l = sizeof(struct any_str);
  struct any_str *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ANY_str, r, l, &any_str_copy, &any_str_free};
}
struct any any_str_copy (const struct any n) {
  struct any_str *o = n.d;
  struct any_str *r = alloc(n.l);
  r->d = str_copy(o->d);
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_str_free (struct any _n) {
  struct any_str *n = _n.d;
  str_free((struct str) n->d);
  free(n);
}
struct any any_int_alloc (int32_t d) {
  size_t l = sizeof(struct any_int);
  struct any_int *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ANY_int, r, l, &any_int_copy, &any_int_free};
}
struct any any_int_copy (const struct any n) {
  struct any_int *o = n.d;
  struct any_int *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_int_free (struct any _n) {
  struct any_int *n = _n.d;
  free(n);
}
struct any any_float_alloc (double d) {
  size_t l = sizeof(struct any_float);
  struct any_float *r = alloc(l);
  r->d = d;
  return (struct any) {TYPE_ANY_float, r, l, &any_float_copy, &any_float_free};
}
struct any any_float_copy (const struct any n) {
  struct any_float *o = n.d;
  struct any_float *r = alloc(n.l);
  r->d = o->d;
  return (struct any) {n.t, r, n.l, n._copy, n._free};
}
void any_float_free (struct any _n) {
  struct any_float *n = _n.d;
  free(n);
}

int main () {
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(any_str_alloc(str_alloc("test")), any_int_alloc(2)));
  __THE_1_Test_0_free((struct __THE_1_Test_0 *) __THE_1_Test_0_alloc(any_float_alloc(3.14), (struct any) {0, NULL, 0, NULL, NULL}));
}
======= flags =======
======= stdout =======
