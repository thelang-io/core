======= stdin =======
main {
  "".contains("");
  "t".contains("");
  "test on test".contains("");
  "".contains("t");
  "t".contains("t");
  "test on test".contains("t");
  "".contains("test");
  "t".contains("test");
  "test on test".contains("test");
  "".contains("v");
  "t".contains("v");
  "test on test".contains("v");
  "".contains("veto");
  "t".contains("veto");
  "test on test".contains("veto");
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  const char *file;
  const char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[0xFFFFF];
  int buf_idx;
  err_stack_t stack[0xFFFF];
  int stack_idx;
  void (*_free) (void *);
} err_state_t;
struct str {
  char *d;
  size_t l;
};

err_state_t err_state = {-1, NULL, {}, 0, {}, 0, NULL};

void *alloc (size_t);
void error_alloc (err_state_t *, size_t);
struct str str_alloc (const char *);
bool str_contains (struct str, struct str);

void *alloc (size_t n1) {
  void *r = malloc(n1);
  if (r == NULL) error_alloc(&err_state, n1);
  return r;
}
void error_alloc (err_state_t *fn_err_state, size_t n1) {
  char d[4096];
  size_t l = 0;
  for (int i = fn_err_state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = fn_err_state->stack[i];
    const char *fmt = THE_EOL "  at %s (%s)";
    size_t z = snprintf(NULL, 0, fmt, it.name, it.file);
    if (l + z >= 4096) {
      break;
    }
    sprintf(&d[l], fmt, it.name, it.file);
    l += z;
  }
  fprintf(stderr, "Allocation Error: failed to allocate %zu bytes%s" THE_EOL, n1, d);
  exit(EXIT_FAILURE);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
bool str_contains (struct str self, struct str n1) {
  bool r = n1.l == 0;
  if (!r && self.l == n1.l) {
    r = memcmp(self.d, n1.d, n1.l) == 0;
  } else if (!r && self.l > n1.l) {
    for (size_t i = 0; i < self.l - n1.l; i++) {
      if (memcmp(&self.d[i], n1.d, n1.l) == 0) {
        r = true;
        break;
      }
    }
  }
  free(self.d);
  free(n1.d);
  return r;
}

int main () {
  str_contains(str_alloc(""), str_alloc(""));
  str_contains(str_alloc("t"), str_alloc(""));
  str_contains(str_alloc("test on test"), str_alloc(""));
  str_contains(str_alloc(""), str_alloc("t"));
  str_contains(str_alloc("t"), str_alloc("t"));
  str_contains(str_alloc("test on test"), str_alloc("t"));
  str_contains(str_alloc(""), str_alloc("test"));
  str_contains(str_alloc("t"), str_alloc("test"));
  str_contains(str_alloc("test on test"), str_alloc("test"));
  str_contains(str_alloc(""), str_alloc("v"));
  str_contains(str_alloc("t"), str_alloc("v"));
  str_contains(str_alloc("test on test"), str_alloc("v"));
  str_contains(str_alloc(""), str_alloc("veto"));
  str_contains(str_alloc("t"), str_alloc("veto"));
  str_contains(str_alloc("test on test"), str_alloc("veto"));
}
======= flags =======
======= stdout =======
