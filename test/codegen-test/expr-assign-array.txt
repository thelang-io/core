======= stdin =======
main {
  a := [1, 2, 3]
  mut b := a
  b = a
  mut c := [1, 2]
  c = b = a
  mut d := [0]
  d = c = b = a
  d = true ? [1, 2] : a
  d = true ? b = [5, 6] : [7, 8]
  d = true ? [5, 6] : b = [7, 8]
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct __THE_1_array_int;

struct __THE_1_array_int {
  int32_t *d;
  size_t l;
};

void *alloc (size_t);
struct __THE_1_array_int __THE_1_array_int_alloc (size_t, ...);
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int);
void __THE_1_array_int_free (struct __THE_1_array_int);
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int, struct __THE_1_array_int);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct __THE_1_array_int __THE_1_array_int_alloc (size_t x, ...) {
  if (x == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(x * sizeof(int32_t));
  va_list args;
  va_start(args, x);
  for (size_t i = 0; i < x; i++) d[i] = va_arg(args, int32_t);
  va_end(args);
  return (struct __THE_1_array_int) {d, x};
}
struct __THE_1_array_int __THE_1_array_int_copy (const struct __THE_1_array_int n) {
  if (n.l == 0) return (struct __THE_1_array_int) {NULL, 0};
  int32_t *d = alloc(n.l * sizeof(int32_t));
  for (size_t i = 0; i < n.l; i++) d[i] = n.d[i];
  return (struct __THE_1_array_int) {d, n.l};
}
void __THE_1_array_int_free (struct __THE_1_array_int n) {
  free(n.d);
}
struct __THE_1_array_int __THE_1_array_int_realloc (struct __THE_1_array_int n1, struct __THE_1_array_int n2) {
  __THE_1_array_int_free((struct __THE_1_array_int) n1);
  return n2;
}

int main () {
  const struct __THE_1_array_int __THE_0_a_0 = __THE_1_array_int_alloc(3, 1, 2, 3);
  struct __THE_1_array_int __THE_0_b_0 = __THE_1_array_int_copy(__THE_0_a_0);
  __THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_copy(__THE_0_a_0));
  struct __THE_1_array_int __THE_0_c_0 = __THE_1_array_int_alloc(2, 1, 2);
  __THE_0_c_0 = __THE_1_array_int_realloc(__THE_0_c_0, __THE_1_array_int_copy(__THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_copy(__THE_0_a_0))));
  struct __THE_1_array_int __THE_0_d_0 = __THE_1_array_int_alloc(1, 0);
  __THE_0_d_0 = __THE_1_array_int_realloc(__THE_0_d_0, __THE_1_array_int_copy(__THE_0_c_0 = __THE_1_array_int_realloc(__THE_0_c_0, __THE_1_array_int_copy(__THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_copy(__THE_0_a_0))))));
  __THE_0_d_0 = __THE_1_array_int_realloc(__THE_0_d_0, true ? __THE_1_array_int_alloc(2, 1, 2) : __THE_1_array_int_copy(__THE_0_a_0));
  __THE_0_d_0 = __THE_1_array_int_realloc(__THE_0_d_0, true ? __THE_1_array_int_copy(__THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_alloc(2, 5, 6))) : __THE_1_array_int_alloc(2, 7, 8));
  __THE_0_d_0 = __THE_1_array_int_realloc(__THE_0_d_0, true ? __THE_1_array_int_alloc(2, 5, 6) : __THE_1_array_int_copy(__THE_0_b_0 = __THE_1_array_int_realloc(__THE_0_b_0, __THE_1_array_int_alloc(2, 7, 8))));
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_d_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_c_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_b_0);
  __THE_1_array_int_free((struct __THE_1_array_int) __THE_0_a_0);
}
======= flags =======
======= stdout =======
