======= stdin =======
main {
  fileName := "test/fixtures/builtin-fs-rm-sync.txt"

  fs_writeFileSync(fileName, "".toBuffer())
  fs_rmSync(fileName)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct buffer {
  unsigned char *d;
  size_t l;
};
struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
void buffer_free (struct buffer);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
struct buffer str_to_buffer (struct str);
void fs_rmSync (struct str);
void fs_writeFileSync (struct str, struct buffer);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void buffer_free (struct buffer o) {
  free(o.d);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
struct buffer str_to_buffer (struct str s) {
  return (struct buffer) {(unsigned char *) s.d, s.l};
}
void fs_rmSync (struct str s) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  if (remove(c) != 0) {
    fprintf(stderr, "Error: failed to remove file `%s`" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  free(c);
  str_free(s);
}
void fs_writeFileSync (struct str s, struct buffer b) {
  char *c = alloc(s.l + 1);
  memcpy(c, s.d, s.l);
  c[s.l] = '\0';
  FILE *f = fopen(c, "wb");
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open file `%s` for writing" THE_EOL, c);
    exit(EXIT_FAILURE);
  }
  if (b.l != 0) {
    if (fwrite(b.d, b.l, 1, f) != 1) {
      fprintf(stderr, "Error: failed to write file `%s`" THE_EOL, c);
      exit(EXIT_FAILURE);
    }
  }
  fclose(f);
  free(c);
  str_free(s);
  buffer_free(b);
}

int main () {
  const struct str __THE_0_fileName_0 = str_alloc("test/fixtures/builtin-fs-rm-sync.txt");
  fs_writeFileSync(str_copy(__THE_0_fileName_0), str_to_buffer(str_alloc("")));
  fs_rmSync(str_copy(__THE_0_fileName_0));
  str_free((struct str) __THE_0_fileName_0);
}
======= flags =======
======= stdout =======
