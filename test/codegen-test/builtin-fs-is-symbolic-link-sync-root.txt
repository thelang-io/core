======= stdin =======
main {
  mut fileName := "test" + path_SEP + "fixtures" + path_SEP + "builtin-fs-is-symbolic-sync-root.txt"

  fs_isSymbolicLinkSync(fileName)
  fs_isSymbolicLinkSync("test" + path_SEP + "fixtures")
  fs_isSymbolicLinkSync("test" + path_SEP + "fixtures" + path_SEP + "test.txt")

  // file
  fs_linkSync("test" + path_SEP + "fixtures" + path_SEP + "test.txt", fileName)
  fs_isSymbolicLinkSync(fileName)

  // link
  mut fileName2 := "test" + path_SEP + "fixtures" + path_SEP + "builtin-fs-is-symbolic-sync-root-symlink.txt"
  fs_linkSync(fileName, fileName2)
  fs_isSymbolicLinkSync(fileName2)
  fs_unlinkSync(fileName2)
  fs_unlinkSync(fileName)

  // dir empty
  fileName = "test" + path_SEP + "fixtures" + path_SEP + "builtin-fs-is-symbolic-sync-root"
  fs_mkdirSync(fileName)

  fileName2 = "test" + path_SEP + "fixtures" + path_SEP + "builtin-fs-is-symbolic-sync-root-copy"
  fs_linkSync(fileName, fileName2)
  fs_isSymbolicLinkSync(fileName2)
  fs_unlinkSync(fileName2)
  fs_rmdirSync(fileName)

  // dir
  fileName = "test" + path_SEP + "fixtures-copy"
  fs_linkSync("test" + path_SEP + "fixtures", fileName)
  fs_isSymbolicLinkSync(fileName)
  fs_unlinkSync(fileName)
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <setjmp.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#ifdef THE_OS_WINDOWS
  #include <windows.h>
#endif
#ifndef THE_OS_WINDOWS
  #include <unistd.h>
#endif

#define TYPE_error_Error 1

typedef struct {
  char *file;
  char *name;
  int line;
  int col;
} err_stack_t;
typedef struct {
  int id;
  void *ctx;
  jmp_buf buf[10];
  int buf_idx;
  err_stack_t stack[10];
  int stack_idx;
} err_state_t;
struct str {
  char *d;
  size_t l;
};
#ifdef THE_OS_WINDOWS
  struct win_reparse_data_buffer {
    ULONG ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    union {
      struct {
        USHORT SubstituteNameOffset;
        USHORT SubstituteNameLength;
        USHORT PrintNameOffset;
        USHORT PrintNameLength;
        ULONG Flags;
        TCHAR PathBuffer[1];
      } SymbolicLinkReparseBuffer;
      struct {
        USHORT SubstituteNameOffset;
        USHORT SubstituteNameLength;
        USHORT PrintNameOffset;
        USHORT PrintNameLength;
        TCHAR PathBuffer[1];
      } MountPointReparseBuffer;
      struct {
        UCHAR DataBuffer[1];
      } GenericReparseBuffer;
      struct {
        ULONG Version;
        TCHAR StringList[1];
      } AppExecLinkReparseBuffer;
    };
  };
#endif

struct error_Error;

struct error_Error {
  const struct str __THE_0_message;
  const struct str __THE_0_stack;
};

err_state_t err_state = {-1, (void *) 0, {}, 0, {}, 0};

void *alloc (size_t);
struct str cstr_concat_str (const char *, struct str);
void error_assign (err_state_t *, int, void *);
void error_stack_pop (err_state_t *);
void error_stack_pos (err_state_t *, int, int);
void error_stack_push (err_state_t *, char *, char *);
struct str error_stack_str (err_state_t *);
bool fs_isSymbolicLinkSync (struct str);
void fs_linkSync (struct str, struct str);
void fs_mkdirSync (struct str);
void fs_rmdirSync (struct str);
void fs_unlinkSync (struct str);
struct str str_alloc (const char *);
struct str str_concat_cstr (struct str, const char *);
struct str str_concat_str (struct str, struct str);
struct str str_copy (const struct str);
char *str_cstr (const struct str);
void str_free (struct str);
struct str str_realloc (struct str, struct str);
struct error_Error *error_Error_alloc (struct str, struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    const char *fmt = "failed to allocate %zu bytes";
    size_t z = snprintf(NULL, 0, fmt, l);
    char *d = alloc(z);
    sprintf(d, fmt, l);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
  }
  return r;
}
struct str cstr_concat_str (const char *r, struct str s) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l - s.l);
  memcpy(&d[l - s.l], s.d, s.l);
  free(s.d);
  return (struct str) {d, l};
}
void error_assign (err_state_t *state, int id, void *ctx) {
  state->id = id;
  state->ctx = ctx;
  *((struct str *) &((struct error_Error *) state->ctx)->__THE_0_stack) = error_stack_str(state);
}
void error_stack_pop (err_state_t *state) {
  state->stack_idx--;
}
void error_stack_pos (err_state_t *state, int line, int col) {
  state->stack[state->stack_idx - 1].line = line;
  state->stack[state->stack_idx - 1].col = col;
}
void error_stack_push (err_state_t *state, char *file, char *name) {
  state->stack[state->stack_idx++] = (err_stack_t) {file, name, 0, 0};
}
struct str error_stack_str (err_state_t *state) {
  struct str message = ((struct error_Error *) state->ctx)->__THE_0_message;
  size_t l = message.l;
  char *d = malloc(l);
  if (d == NULL) {
    fprintf(stderr, "Fatal Error: failed to allocate %zu bytes in stack generation" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  memcpy(d, message.d, l);
  for (int i = state->stack_idx - 1; i >= 0; i--) {
    err_stack_t it = state->stack[i];
    size_t z;
    char *fmt;
    if (it.col == 0 && it.line == 0) {
      fmt = THE_EOL "  at %s (%s)";
      z = snprintf(NULL, 0, fmt, it.name, it.file);
    } else if (it.col == 0) {
      fmt = THE_EOL "  at %s (%s:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line);
    } else {
      fmt = THE_EOL "  at %s (%s:%d:%d)";
      z = snprintf(NULL, 0, fmt, it.name, it.file, it.line, it.col);
    }
    d = realloc(d, l + z + 1);
    if (d == NULL) {
      fprintf(stderr, "Fatal Error: failed to reallocate %zu bytes in stack generation" THE_EOL, l + z);
      exit(EXIT_FAILURE);
    }
    if (it.col == 0 && it.line == 0) {
      sprintf(&d[l], fmt, it.name, it.file);
    } else if (it.col == 0) {
      sprintf(&d[l], fmt, it.name, it.file, it.line);
    } else {
      sprintf(&d[l], fmt, it.name, it.file, it.line, it.col);
    }
    l += z;
  }
  return (struct str) {d, l};
}
bool fs_isSymbolicLinkSync (struct str s) {
  char *c = str_cstr(s);
  bool b = false;
  #ifdef THE_OS_WINDOWS
    HANDLE h = CreateFile(c, 0, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT, NULL);
    if (h == INVALID_HANDLE_VALUE) {
      free(c);
      return b;
    }
    char d[MAXIMUM_REPARSE_DATA_BUFFER_SIZE];
    struct win_reparse_data_buffer *r = (struct win_reparse_data_buffer *) d;
    DWORD y;
    if (DeviceIoControl(h, FSCTL_GET_REPARSE_POINT, NULL, 0, &d, sizeof(d), &y, NULL)) {
      if (r->ReparseTag == IO_REPARSE_TAG_SYMLINK) {
        b = true;
      } else if (r->ReparseTag == IO_REPARSE_TAG_MOUNT_POINT) {
        char *t = r->MountPointReparseBuffer.PathBuffer + r->MountPointReparseBuffer.SubstituteNameOffset;
        if (
          r->MountPointReparseBuffer.SubstituteNameLength >= 6 &&
          t[0] == '\\' && t[1] == '?' && t[2] == '?' && t[3] == '\\' &&
          ((t[4] >= 'A' && t[4] <= 'Z') || (t[4] >= 'a' && t[4] <= 'z')) &&
          t[5] == ':' && (r->MountPointReparseBuffer.SubstituteNameLength == 6 || t[6] == '\\')
        ) {
          b = true;
        }
      } else if (r->ReparseTag == IO_REPARSE_TAG_APPEXECLINK && r->AppExecLinkReparseBuffer.Version == 3) {
        char *t = r->AppExecLinkReparseBuffer.StringList;
        bool f = false;
        for (size_t i = 0; i < 2; i++) {
          size_t l = strlen(t);
          if (l == 0) {
            f = true;
            break;
          }
          t += l + 1;
        }
        if (!f) {
          if (strlen(t) >= 3 && ((t[0] >= 'a' && t[0] <= 'z') || (t[0] >= 'A' && t[0] <= 'Z')) && t[1] == ':' && t[2] == '\\') {
            b = true;
          }
        }
      }
    }
    CloseHandle(h);
  #else
    struct stat sb;
    if (lstat(c, &sb) == 0) {
      b = (sb.st_mode & S_IFMT) == S_IFLNK;
    }
  #endif
  free(c);
  str_free(s);
  return b;
}
void fs_linkSync (struct str s1, struct str s2) {
  char *c1 = str_cstr(s1);
  char *c2 = str_cstr(s2);
  #ifdef THE_OS_WINDOWS
    for (size_t i = 0; i < s1.l; i++) c1[i] = (c1[i] == '/' ? '\\' : c1[i]);
    for (size_t i = 0; i < s2.l; i++) c2[i] = (c2[i] == '/' ? '\\' : c2[i]);
    DWORD flags = 0;
    if (GetFileAttributes(c1) & FILE_ATTRIBUTE_DIRECTORY) flags |= SYMBOLIC_LINK_FLAG_DIRECTORY;
    bool r = CreateSymbolicLink(c2, c1, flags);
  #else
    bool r = symlink(c1, c2) == 0;
  #endif
  if (!r) {
    const char *fmt = "failed to create symbolic link from `%s` to `%s`";
    size_t z = snprintf(NULL, 0, fmt, c1, c2);
    char *d = alloc(z);
    sprintf(d, fmt, c1, c2);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    goto fs_linkSync_cleanup;
  }
fs_linkSync_cleanup:
  str_free(s1);
  str_free(s2);
  free(c1);
  free(c2);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void fs_mkdirSync (struct str s) {
  char *c = str_cstr(s);
  #ifdef THE_OS_WINDOWS
    bool r = CreateDirectory(c, NULL);
  #else
    bool r = mkdir(c, 0777) == 0;
  #endif
  if (!r) {
    const char *fmt = "failed to create directory `%s`";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z);
    sprintf(d, fmt, c);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    goto fs_mkdirSync_cleanup;
  }
fs_mkdirSync_cleanup:
  free(c);
  str_free(s);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void fs_rmdirSync (struct str s) {
  char *c = str_cstr(s);
  #ifdef THE_OS_WINDOWS
    bool r = RemoveDirectory(c);
  #else
    bool r = rmdir(c) == 0;
  #endif
  if (!r) {
    const char *fmt = "failed to remove directory `%s`";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z);
    sprintf(d, fmt, c);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    goto fs_rmdirSync_cleanup;
  }
fs_rmdirSync_cleanup:
  free(c);
  str_free(s);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
void fs_unlinkSync (struct str s) {
  char *c = str_cstr(s);
  bool r;
  #ifdef THE_OS_WINDOWS
    if (GetFileAttributes(c) & FILE_ATTRIBUTE_DIRECTORY) {
      r = RemoveDirectory(c);
    } else {
      r = _unlink(c) == 0;
    }
  #else
    r = unlink(c) == 0;
  #endif
  if (!r) {
    const char *fmt = "failed to unlink path `%s`";
    size_t z = snprintf(NULL, 0, fmt, c);
    char *d = alloc(z);
    sprintf(d, fmt, c);
    error_assign(&err_state, TYPE_error_Error, (void *) error_Error_alloc((struct str) {d, z}, (struct str) {NULL, 0}));
    goto fs_unlinkSync_cleanup;
  }
fs_unlinkSync_cleanup:
  free(c);
  str_free(s);
  if (err_state.id != -1) longjmp(err_state.buf[err_state.buf_idx - 1], err_state.id);
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_concat_cstr (struct str s, const char *r) {
  size_t l = s.l + strlen(r);
  char *d = alloc(l);
  memcpy(d, s.d, s.l);
  memcpy(&d[s.l], r, l - s.l);
  free(s.d);
  return (struct str) {d, l};
}
struct str str_concat_str (struct str s1, struct str s2) {
  size_t l = s1.l + s2.l;
  char *d = alloc(l);
  memcpy(d, s1.d, s1.l);
  memcpy(&d[s1.l], s2.d, s2.l);
  free(s1.d);
  free(s2.d);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
char *str_cstr (const struct str s) {
  char *d = alloc(s.l + 1);
  memcpy(d, s.d, s.l);
  d[s.l] = '\0';
  return d;
}
void str_free (struct str s) {
  free(s.d);
}
struct str str_realloc (struct str s1, struct str s2) {
  free(s1.d);
  return s2;
}
struct error_Error *error_Error_alloc (struct str __THE_0_message, struct str __THE_0_stack) {
  struct error_Error *r = alloc(sizeof(struct error_Error));
  struct error_Error s = {__THE_0_message, __THE_0_stack};
  memcpy(r, &s, sizeof(struct error_Error));
  return r;
}

int main () {
  error_stack_push(&err_state, "/test", "main");
  if (setjmp(err_state.buf[err_state.buf_idx++]) != 0) goto L1;
  struct str __THE_0_fileName_0 = str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "builtin-fs-is-symbolic-sync-root.txt");
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  (error_stack_pos(&err_state, 4, 3), fs_isSymbolicLinkSync(str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  (error_stack_pos(&err_state, 5, 3), fs_isSymbolicLinkSync(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures")));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  (error_stack_pos(&err_state, 6, 3), fs_isSymbolicLinkSync(str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt")));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  (error_stack_pos(&err_state, 9, 3), fs_linkSync(str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "test.txt"), str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  (error_stack_pos(&err_state, 10, 3), fs_isSymbolicLinkSync(str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L2;
  struct str __THE_0_fileName2_0 = str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "builtin-fs-is-symbolic-sync-root-symlink.txt");
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 14, 3), fs_linkSync(str_copy(__THE_0_fileName_0), str_copy(__THE_0_fileName2_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 15, 3), fs_isSymbolicLinkSync(str_copy(__THE_0_fileName2_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 16, 3), fs_unlinkSync(str_copy(__THE_0_fileName2_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 17, 3), fs_unlinkSync(str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  __THE_0_fileName_0 = str_realloc(__THE_0_fileName_0, str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "builtin-fs-is-symbolic-sync-root"));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 21, 3), fs_mkdirSync(str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  __THE_0_fileName2_0 = str_realloc(__THE_0_fileName2_0, str_concat_cstr(str_concat_str(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_alloc(THE_PATH_SEP)), "builtin-fs-is-symbolic-sync-root-copy"));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 24, 3), fs_linkSync(str_copy(__THE_0_fileName_0), str_copy(__THE_0_fileName2_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 25, 3), fs_isSymbolicLinkSync(str_copy(__THE_0_fileName2_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 26, 3), fs_unlinkSync(str_copy(__THE_0_fileName2_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 27, 3), fs_rmdirSync(str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  __THE_0_fileName_0 = str_realloc(__THE_0_fileName_0, str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures-copy"));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 31, 3), fs_linkSync(str_concat_cstr(cstr_concat_str("test", str_alloc(THE_PATH_SEP)), "fixtures"), str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 32, 3), fs_isSymbolicLinkSync(str_copy(__THE_0_fileName_0)));
  if (setjmp(err_state.buf[err_state.buf_idx]) != 0) goto L3;
  (error_stack_pos(&err_state, 33, 3), fs_unlinkSync(str_copy(__THE_0_fileName_0)));
L3:
  str_free((struct str) __THE_0_fileName2_0);
L2:
  str_free((struct str) __THE_0_fileName_0);
L1:
  err_state.buf_idx--;
  error_stack_pop(&err_state);
  if (err_state.id != -1) {
    struct error_Error *err = err_state.ctx;
    fprintf(stderr, "Uncaught Error: %.*s" THE_EOL, (int) err->__THE_0_stack.l, err->__THE_0_stack.d);
    exit(EXIT_FAILURE);
  }
}
======= flags =======
======= stdout =======
