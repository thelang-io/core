======= stdin =======
main {
  test01: int[str]
  test02: int[str] = {}
  mut test1 := { "key": 1 }
  test2 := { "key1": 1, "key2": 2 }
  test3 := { "key1": 1, "key2": 2, "key3": 3 };

  test01.cap;
  test02.cap;
  test1.cap;
  test2.cap;
  test3.cap;
  test1.set("key2", 2)
  test1.cap;
  test1.set("key2", 3)
  test1.cap;
}
======= code =======
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)
  #define THE_OS_WINDOWS
  #define THE_EOL "\r\n"
  #define THE_PATH_SEP "\\"
#else
  #if defined(__APPLE__)
    #define THE_OS_MACOS
  #elif defined(__linux__)
    #define THE_OS_LINUX
  #endif
  #define THE_EOL "\n"
  #define THE_PATH_SEP "/"
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

struct __THE_1_pair$0;
struct __THE_1_map$0;

struct __THE_1_pair$0 {
  struct str f;
  int32_t s;
};
struct __THE_1_map$0 {
  struct __THE_1_pair$0 *d;
  size_t c;
  size_t l;
};

void *alloc (size_t);
void *re_alloc (void *, size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
bool str_eq_str (struct str, struct str);
void str_free (struct str);
struct __THE_1_map$0 __THE_1_map$0_alloc (int, ...);
size_t __THE_1_map$0_cap (struct __THE_1_map$0);
struct __THE_1_map$0 __THE_1_map$0_copy (const struct __THE_1_map$0);
void __THE_1_map$0_free (struct __THE_1_map$0);
struct __THE_1_map$0 *__THE_1_map$0_set (struct __THE_1_map$0 *, struct str, int32_t);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
void *re_alloc (void *d, size_t l) {
  void *r = realloc(d, l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to reallocate %zu bytes" THE_EOL, l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
bool str_eq_str (struct str s1, struct str s2) {
  bool r = s1.l == s2.l && memcmp(s1.d, s2.d, s1.l) == 0;
  free(s1.d);
  free(s2.d);
  return r;
}
void str_free (struct str s) {
  free(s.d);
}
struct __THE_1_map$0 __THE_1_map$0_alloc (int x, ...) {
  struct __THE_1_pair$0 *d = alloc(x * sizeof(struct __THE_1_pair$0));
  va_list args;
  va_start(args, x);
  for (int i = 0; i < x; i++) d[i] = (struct __THE_1_pair$0) {va_arg(args, struct str), va_arg(args, int32_t)};
  va_end(args);
  return (struct __THE_1_map$0) {d, x, x};
}
size_t __THE_1_map$0_cap (struct __THE_1_map$0 n) {
  size_t c = n.c;
  __THE_1_map$0_free((struct __THE_1_map$0) n);
  return c;
}
struct __THE_1_map$0 __THE_1_map$0_copy (const struct __THE_1_map$0 n) {
  struct __THE_1_pair$0 *d = alloc(n.c * sizeof(struct __THE_1_pair$0));
  for (size_t i = 0; i < n.l; i++) d[i] = (struct __THE_1_pair$0) {str_copy(n.d[i].f), n.d[i].s};
  return (struct __THE_1_map$0) {d, n.c, n.l};
}
void __THE_1_map$0_free (struct __THE_1_map$0 n) {
  for (size_t i = 0; i < n.l; i++) {
    str_free((struct str) n.d[i].f);
  }
  free(n.d);
}
struct __THE_1_map$0 *__THE_1_map$0_set (struct __THE_1_map$0 *n, struct str k, int32_t v) {
  for (size_t i = 0; i < n->l; i++) {
    if (str_eq_str(str_copy(n->d[i].f), str_copy(k))) {
      n->d[i].s = v;
      return n;
    }
  }
  if (n->l + 1 > n->c) n->d = re_alloc(n->d, (n->c = n->l + 1) * sizeof(struct __THE_1_pair$0));
  n->d[n->l++] = (struct __THE_1_pair$0) {k, v};
  return n;
}

int main () {
  const struct __THE_1_map$0 __THE_0_test01_0 = __THE_1_map$0_alloc(0);
  const struct __THE_1_map$0 __THE_0_test02_0 = __THE_1_map$0_alloc(0);
  struct __THE_1_map$0 __THE_0_test1_0 = __THE_1_map$0_alloc(1, str_alloc("key"), 1);
  const struct __THE_1_map$0 __THE_0_test2_0 = __THE_1_map$0_alloc(2, str_alloc("key1"), 1, str_alloc("key2"), 2);
  const struct __THE_1_map$0 __THE_0_test3_0 = __THE_1_map$0_alloc(3, str_alloc("key1"), 1, str_alloc("key2"), 2, str_alloc("key3"), 3);
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test01_0));
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test02_0));
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test1_0));
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test2_0));
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test3_0));
  __THE_1_map$0_set(&__THE_0_test1_0, str_alloc("key2"), 2);
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test1_0));
  __THE_1_map$0_set(&__THE_0_test1_0, str_alloc("key2"), 3);
  __THE_1_map$0_cap(__THE_1_map$0_copy(__THE_0_test1_0));
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test3_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test2_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test1_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test02_0);
  __THE_1_map$0_free((struct __THE_1_map$0) __THE_0_test01_0);
}
======= flags =======
======= stdout =======
