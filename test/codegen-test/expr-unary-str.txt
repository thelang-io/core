======= stdin =======
main {
  s0 := ""
  s1 := "1"
  s2 := "test"

  a := !""
  b := !!""
  c := !"1"
  d := !!"1"
  e := !"test"
  f := !!"test"

  l := !s0
  m := !!s0
  n := !s1
  o := !!s1
  p := !s2
  q := !!s2
}
======= code =======
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct str {
  char *d;
  size_t l;
};

void *alloc (size_t);
struct str str_alloc (const char *);
struct str str_copy (const struct str);
void str_free (struct str);
bool str_not (struct str);

void *alloc (size_t l) {
  void *r = malloc(l);
  if (r == NULL) {
    fprintf(stderr, "Error: failed to allocate %zu bytes\n", l);
    exit(EXIT_FAILURE);
  }
  return r;
}
struct str str_alloc (const char *r) {
  size_t l = strlen(r);
  char *d = alloc(l);
  memcpy(d, r, l);
  return (struct str) {d, l};
}
struct str str_copy (const struct str s) {
  char *d = alloc(s.l);
  memcpy(d, s.d, s.l);
  return (struct str) {d, s.l};
}
void str_free (struct str s) {
  free(s.d);
}
bool str_not (struct str s) {
  bool r = s.l == 0;
  free(s.d);
  return r;
}

int main () {
  const struct str __THE_0_s0_0 = str_alloc("");
  const struct str __THE_0_s1_0 = str_alloc("1");
  const struct str __THE_0_s2_0 = str_alloc("test");
  const bool __THE_0_a_0 = str_not(str_alloc(""));
  const bool __THE_0_b_0 = !str_not(str_alloc(""));
  const bool __THE_0_c_0 = str_not(str_alloc("1"));
  const bool __THE_0_d_0 = !str_not(str_alloc("1"));
  const bool __THE_0_e_0 = str_not(str_alloc("test"));
  const bool __THE_0_f_0 = !str_not(str_alloc("test"));
  const bool __THE_0_l_0 = str_not(str_copy(__THE_0_s0_0));
  const bool __THE_0_m_0 = !str_not(str_copy(__THE_0_s0_0));
  const bool __THE_0_n_0 = str_not(str_copy(__THE_0_s1_0));
  const bool __THE_0_o_0 = !str_not(str_copy(__THE_0_s1_0));
  const bool __THE_0_p_0 = str_not(str_copy(__THE_0_s2_0));
  const bool __THE_0_q_0 = !str_not(str_copy(__THE_0_s2_0));
  str_free((struct str) __THE_0_s2_0);
  str_free((struct str) __THE_0_s1_0);
  str_free((struct str) __THE_0_s0_0);
}
======= flags =======
======= stdout =======
