======= stdin =======
loop i := 0; i < 10; {
  i++
}
======= stdout =======
<StmtLoop start="1:1" end="3:2">
  <StmtLoopInit>
    <StmtVarDecl start="1:6" end="1:12">
      <StmtVarDeclId>
        <Token type="ID" val="i" start="1:6" end="1:7" />
      </StmtVarDeclId>
      <StmtVarDeclInit>
        <ExprLit start="1:11" end="1:12">
          <Token type="LIT_INT_DEC" val="0" start="1:11" end="1:12" />
        </ExprLit>
      </StmtVarDeclInit>
    </StmtVarDecl>
  </StmtLoopInit>
  <StmtLoopCond>
    <ExprBinary start="1:14" end="1:20">
      <ExprBinaryLeft>
        <ExprAccess start="1:14" end="1:15">
          <Token type="ID" val="i" start="1:14" end="1:15" />
        </ExprAccess>
      </ExprBinaryLeft>
      <ExprBinaryOp>
        <Token type="OP_LT" val="<" start="1:16" end="1:17" />
      </ExprBinaryOp>
      <ExprBinaryRight>
        <ExprLit start="1:18" end="1:20">
          <Token type="LIT_INT_DEC" val="10" start="1:18" end="1:20" />
        </ExprLit>
      </ExprBinaryRight>
    </ExprBinary>
  </StmtLoopCond>
  <StmtLoopBody>
    <ExprUnary start="2:3" end="2:6">
      <ExprUnaryArg>
        <ExprAccess start="2:3" end="2:4">
          <Token type="ID" val="i" start="2:3" end="2:4" />
        </ExprAccess>
      </ExprUnaryArg>
      <ExprUnaryOp>
        <Token type="OP_PLUS_PLUS" val="++" start="2:4" end="2:6" />
      </ExprUnaryOp>
    </ExprUnary>
  </StmtLoopBody>
</StmtLoop>
