======= stdin =======
loop ; i < 10; {
  i++
}
loop ; i < 10; {
}
======= stdout =======
<StmtLoop start="1:1" end="3:2">
  <StmtLoopCond>
    <ExprBinary start="1:8" end="1:14">
      <ExprBinaryLeft>
        <ExprAccess start="1:8" end="1:9">
          <Token type="ID" val="i" start="1:8" end="1:9" />
        </ExprAccess>
      </ExprBinaryLeft>
      <ExprBinaryOp>
        <Token type="OP_LT" val="<" start="1:10" end="1:11" />
      </ExprBinaryOp>
      <ExprBinaryRight>
        <ExprLit start="1:12" end="1:14">
          <Token type="LIT_INT_DEC" val="10" start="1:12" end="1:14" />
        </ExprLit>
      </ExprBinaryRight>
    </ExprBinary>
  </StmtLoopCond>
  <StmtLoopBody>
    <ExprUnary start="2:3" end="2:6">
      <ExprUnaryArg>
        <ExprAccess start="2:3" end="2:4">
          <Token type="ID" val="i" start="2:3" end="2:4" />
        </ExprAccess>
      </ExprUnaryArg>
      <ExprUnaryOp>
        <Token type="OP_PLUS_PLUS" val="++" start="2:4" end="2:6" />
      </ExprUnaryOp>
    </ExprUnary>
  </StmtLoopBody>
</StmtLoop>
<StmtLoop start="4:1" end="5:2">
  <StmtLoopCond>
    <ExprBinary start="4:8" end="4:14">
      <ExprBinaryLeft>
        <ExprAccess start="4:8" end="4:9">
          <Token type="ID" val="i" start="4:8" end="4:9" />
        </ExprAccess>
      </ExprBinaryLeft>
      <ExprBinaryOp>
        <Token type="OP_LT" val="<" start="4:10" end="4:11" />
      </ExprBinaryOp>
      <ExprBinaryRight>
        <ExprLit start="4:12" end="4:14">
          <Token type="LIT_INT_DEC" val="10" start="4:12" end="4:14" />
        </ExprLit>
      </ExprBinaryRight>
    </ExprBinary>
  </StmtLoopCond>
</StmtLoop>
