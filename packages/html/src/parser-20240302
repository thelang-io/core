/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import HTMLAttribute, HTMLComment, HTMLDocumentType, HTMLElement, HTMLNode, HTMLText from "./types"
import lower from "./utils"

export const RAW_TEXT_ELEMENTS := [
  "script",
  "style",
  "textarea",
  "title",
]

export const VOID_ELEMENTS := [
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "source",
  "track",
  "wbr",
]

export obj HTMLParser {
  mut code: str
  mut codeLen: int
  mut pos: int

  fn init (mut self: ref Self, code: str) {
    self.code = code
    self.codeLen = self.code.len
  }

  fn attribute (mut self: ref Self) HTMLAttribute {
    start := self.pos
    mut attr := HTMLAttribute{}

    loop ; self.pos + 1 < self.codeLen; self.pos++ {
      ch := self.code[self.pos + 1]

      if ch.isWhitespace || ch == '"' || ch == '\'' || ch == '>' || ch == '/' || ch == '=' {
        break
      }
    }

    attr.name = self.code.slice(start, self.pos + 1)
    loop self.pos + 1 < self.codeLen && self.code[self.pos + 1].isWhitespace { self.pos += 1 }

    if self.pos + 1 >= self.codeLen || self.code[self.pos + 1] != '=' {
      return attr
    }

    self.pos += 1
    loop self.pos + 1 < self.codeLen && self.code[self.pos + 1].isWhitespace { self.pos += 1 }

    if self.pos + 1 >= self.codeLen {
      return attr
    }

    valueStart := self.pos + 1

    if self.code[self.pos + 1] == '"' {
      self.pos += 1

      loop self.pos + 1 < self.codeLen {
        if self.code[++self.pos] == '"' {
          break
        }
      }

      attr.value = self.code.slice(valueStart + 1, self.pos)
    } elif self.code[self.pos + 1] == '\'' {
      self.pos += 1

      loop self.pos + 1 < self.codeLen {
        if self.code[++self.pos] == '\'' {
          break
        }
      }

      attr.value = self.code.slice(valueStart + 1, self.pos)
    } else {
      self.pos += 1

      loop ; self.pos + 1 < self.codeLen; self.pos++ {
        ch := self.code[self.pos + 1]

        if ch.isWhitespace || ch == '"' || ch == '\'' || ch == '>' || ch == '/' || ch == '=' {
          break
        }
      }

      attr.value = self.code.slice(valueStart, self.pos + 1)
    }

    return attr
  }

  fn comment (mut self: ref Self) HTMLNode {
    loop ; self.pos < self.codeLen; self.pos++ {
      if self.code[self.pos] == '-' && self.code.slice(self.pos, self.pos + 3) == "-->" {
        self.pos += 2
        break
      }
    }

    return HTMLComment{}
  }

  fn documentType (mut self: ref Self) HTMLNode {
    loop self.pos < self.codeLen && self.code[self.pos] != '>' { self.pos++ }
    return HTMLDocumentType{name: "html"}
  }

  fn node (mut self: ref Self) HTMLNode {
    if self.code[self.pos] != '<' {
      start := self.pos

      loop self.pos + 1 < self.codeLen && self.code[self.pos + 1] != '<' {
        self.pos++
      }

      return HTMLText{nodeValue: self.code.slice(start, self.pos + 1)}
    } elif self.code[self.pos] == '<' && self.pos + 1 < self.codeLen && self.code[self.pos + 1] == '!' {
      if lower(self.code.slice(self.pos, self.pos + 9)) == "<!doctype" {
        return self.documentType()
      } elif self.code.slice(self.pos, self.pos + 4) == "<!--" {
        return self.comment()
      }
    }

    tagNameStart := self.pos + 1
    mut element: HTMLElement

    loop ; self.pos + 1 < self.codeLen; self.pos++ {
      ch := self.code[self.pos + 1]

      if !ch.isLetterOrDigit && ch != ':' && ch != '_' {
        break
      }
    }

    if tagNameStart != self.pos {
      element.tagName = self.code.slice(tagNameStart, self.pos + 1)
    }

    self.pos += 1

    loop self.pos < self.codeLen {
      ch := self.code[self.pos]

      if ch == '>' {
        break
      } elif ch.isWhitespace || ch == '/' {
        self.pos += 1
        continue
      }

      element.attributes.push(self.attribute())
    }

    if VOID_ELEMENTS.contains(element.tagName) {
      return element
    }

    self.pos += 1

    if RAW_TEXT_ELEMENTS.contains(element.tagName) {
      contentStart := self.pos
      closingTag := "</" + element.tagName + ">"

      loop ; self.pos < self.codeLen; self.pos++ {
        if (
          self.code[self.pos] == '<' &&
          self.pos + 1 < self.codeLen &&
          self.code[self.pos + 1] == '/' &&
          self.code.slice(self.pos, self.pos + closingTag.len) == closingTag
        ) {
          break
        }
      }

      element.textContent = self.code.slice(contentStart, self.pos)
      self.pos += closingTag.len - 1

      return element
    }

    element.childNodes = self.parse(insideElement: true)

    if self.pos + 1 >= self.codeLen || self.code[self.pos] != '<' || self.code[self.pos + 1] != '/' {
      return element
    }

    self.pos += 1

    loop ; self.pos < self.codeLen; self.pos++ {
      if self.code[self.pos] == '>' {
        break
      }
    }

    return element
  }

  fn parse (mut self: ref Self, insideElement := false) HTMLNode[] {
    mut nodes: HTMLNode[]

    loop ; self.pos < self.codeLen; self.pos++ {
      if insideElement && self.code[self.pos] == '<' && self.pos + 1 < self.codeLen && self.code[self.pos + 1] == '/' {
        break
      }

      node := self.node()

      if (node is HTMLText) {
        if node.nodeValue.trim().empty {
          continue
        }
      }

      nodes.push(node)
    }

    return nodes
  }
}

export fn parse (code: str) HTMLNode[] {
  mut parser := HTMLParser{}
  parser.init(code)
  return parser.parse()
}

export fn toString (nodes: ref HTMLNode[]) str {
  mut result := ""

  loop i := 0; i < nodes.len; i++ {
    node := nodes[i] as HTMLNode

    if node is HTMLComment {
      result += node.toString() + os_EOL
    } elif node is HTMLDocumentType {
      result += node.toString() + os_EOL
    } elif node is HTMLElement {
      result += node.toString() + os_EOL
    } else {
      result += node.toString() + os_EOL
    }
  }

  return result
}
