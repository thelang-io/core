/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

obj Reader {
  path: str
  content: str
  mut pos: int

  fn eof (self: Self) bool {
    return self.pos >= self.content.len
  }

  fn lookahead (mut self: ref Self, check: char) bool {
    if (
      check == '\n' &&
      os_name() == "Windows" &&
      self.content.slice(self.pos, self.pos + 2) == "\r\n"
    ) {
      self.pos += 2
      return true
    } elif (
      self.pos < self.content.len &&
      self.content[self.pos] == check
    ) {
      self.pos += 1
      return true
    }

    return false
  }

  fn next (mut self: ref Self) char {
    if self.eof() {
      RaiseError("tried to reader.next on eof")
    } elif (
      os_name() == "Windows" &&
      self.content.slice(self.pos, self.pos + 2) == "\r\n"
    ) {
      self.pos++
    }

    return self.content[self.pos++]
  }

  fn seek (mut self: ref Self, pos: int) {
    self.pos = pos
  }

  fn slice (self: Self, start: int, end: int) str {
    return self.content.slice(start, end)
  }

  fn walk (mut self: ref Self, match: (char) -> bool) {
    loop !self.eof() {
      pos := self.pos
      ch := self.next()

      if !match(ch) {
        self.seek(pos)
        break
      }
    }
  }
}

fn Reader_init (path: str) Reader {
  p := fs_realpathSync(path)

  if !fs_isFileSync(p) {
    RaiseError("path \"" + p + "\" is not a file")
  }

  content := fs_readFileSync(p).str()
  return Reader{path: p, content: content}
}
