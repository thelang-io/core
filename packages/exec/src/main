/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export obj ExecOutput {
  code: int
  stderr: str
  stdout: str
}

export obj Exec {
  _args: str[]
  _script: str

  fn and (mut self: ref Self, other: str) ref Self {
    parts := parse(other)

    if !parts.empty {
      self._args.push("&&")
      self._args.merge(parts)
    }

    return self
  }

  fn or (mut self: ref Self, other: str) ref Self {
    parts := parse(other)

    if !parts.empty {
      self._args.push("||")
      self._args.merge(parts)
    }

    return self
  }

  fn pipe (mut self: ref Self, other: str) ref Self {
    parts := parse(other)

    if !parts.empty {
      self._args.push("|")
      self._args.merge(parts)
    }

    return self
  }

  fn run (self: ref Self) ExecOutput {
    cmd := self._script + (self._args.len == 0 ? "" : " ") + self._args.join(" ")
    mut stdout: str
    mut code := 0

    try {
      stdout = process_runSync(cmd).str().trimEnd()
    } catch err: error_Error {
      if err.message.slice(0, 9) == "process `" {
        codePos := err.message.slice(9).find("` exited with exit code ") + 33
        code = err.message.slice(codePos).toInt()
      } else {
        throw err
      }
    }

    return ExecOutput{stdout: stdout, code: code}
  }
}

fn parse (cmd: str) str[] {
  actualCmd := cmd.trim()
  actualCmdLen := actualCmd.len

  if actualCmd.empty {
    return []
  }

  mut parts: str[]

  loop i := 0; i < actualCmdLen; i++ {
    ch := actualCmd[i]
    partStart := i
    mut part: str

    if ch == '\'' || ch == '"' {
      quote := ch
      mut foundLastQuote := false

      loop i + 1 < actualCmdLen {
        i++

        if actualCmd[i] == quote && actualCmd[i - 1] != '\\' {
          foundLastQuote = true
          break
        }
      }

      part = actualCmd.slice(partStart, i + 1)

      if !foundLastQuote {
        part += quote.str()
      }
    } else {
      loop i + 1 < actualCmdLen && !actualCmd[i + 1].isWhitespace {
        i++
      }

      part = actualCmd.slice(partStart, i + 1)
    }

    loop i + 1 < actualCmdLen && actualCmd[i + 1].isWhitespace {
      i++
    }

    parts.push(part)
  }

  return parts
}

export fn exec (cmd: str) Exec {
  mut parts := parse(cmd)

  if parts.empty {
    throw error_NewError("Exec input is empty")
  }

  script: str = parts[0]
  parts.remove(0)

  return Exec{_script: script, _args: parts}
}
