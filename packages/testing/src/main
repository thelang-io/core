/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import EXPECT_EQ from "./expects"
import FAIL_TEST, TEST_FAILED from "./matchers"

export EXPECT_EQ

export obj Test {
  name: str
  body: () -> void
}

export obj Tests {
  mut _tests: Test[]

  fn register (mut self: ref Self, name: str, body: () -> void) ref Self {
    self._tests.push(Test{name: name, body: body})
    return self
  }

  fn run (mut self: ref Self, args: str[]) ref Self {
    mut totalTime := 0
    mut failedTests: str[]

    print("[==========] Running", self._tests.len, self.word(self._tests.len), to: "stderr")

    loop i := 0; i < self._tests.len; i++ {
      test := self._tests[i]

      print("[ RUN      ]", test.name, to: "stderr")
      timeStart := date_now()
      test.body()
      timeDelta := date_now() - timeStart
      testStatus := TEST_FAILED ? "[  FAILED  ]" : "[       OK ]"
      print(testStatus, test.name, "(" + timeDelta.str() + " ms)", to: "stderr")

      if TEST_FAILED {
        failedTests.push(test.name)
      }

      totalTime += timeDelta
      TEST_FAILED = false
    }

    print(
      "[==========]",
      self._tests.len,
      self.word(self._tests.len) + " ran (" + totalTime.str() + " ms total)",
      to: "stderr"
    )

    passedTestsNum := self._tests.len - failedTests.len
    print("[  PASSED  ]", passedTestsNum, self.word(passedTestsNum), to: "stderr")

    if !failedTests.empty {
      print("[  FAILED  ]", failedTests.len, self.word(failedTests.len) + ", listed below:", to: "stderr")

      loop i := 0; i < failedTests.len; i++ {
        failedTest: str = failedTests[i]
        print("[  FAILED  ]", failedTest, to: "stderr")
      }

      print(to: "stderr")
      print(" " + failedTests.len.str() + " FAILED", self.word(failedTests.len).upper, to: "stderr")
      process_exit(1)
    }
  }

  fn word (n: int) str {
    return n == 1 ? "test" : "tests"
  }
}
