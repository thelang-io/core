/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Parser from "the/parser"
import Analyzer from "../src/analyzer"
import Type, TypeParameter, TypeProperty from "../src/type"
import stringifyType from "./stringify-type"

main {
  mut f := Parser.parse("./api/globals")
  Parser.interconnect(ref f)
  mut analyzer := Analyzer{}

  analyzer.reader = Parser.Reader_init(f.path == "anonymous" ? f.content : f.path)
  analyzer.tm.init()
  analyzer.vm.init(ref analyzer.tm)
  mut initialTypeMapLen := analyzer.tm.items.len
  analyzer.analyze(ref f.program.body)

  if !analyzer.errors.empty {
    loop i := 0; i < analyzer.errors.len; i++ {
      print((i == 0 ? "" : os_EOL) + (analyzer.errors[i] as str), to: "stderr")
    }

    process_exit(1)
  }

  mut globalsTM := ""
  mut globalsVM := ""

  loop i := initialTypeMapLen; i < analyzer.tm.items.len; i++ {
    item := analyzer.tm.items.at(i)
    if !item.isAlias() && !item.isEnum() && !item.isObject() { continue }
    globalsTM += "  " + stringifyType(item, 2, build: true) + os_EOL
  }

  loop i := 0; i < analyzer.vm.items.len; i++ {
    item := analyzer.vm.items[i]
    globalsVM += "  vm.add(\"" + item.name + "\", " + stringifyType(item.t, 2)
    globalsVM += ", " + item.mutable.str() + ")" + os_EOL
  }

  f = Parser.parse("./api/standard")
  Parser.interconnect(ref f)
  analyzer = Analyzer{}
  analyzer.reader = Parser.Reader_init(f.path == "anonymous" ? f.content : f.path)
  analyzer.tm.init()
  analyzer.vm.init(ref analyzer.tm)
  initialTypeMapLen = analyzer.tm.items.len
  analyzer.analyze(ref f.program.body)

  mut stdTM := ""
  mut stdVM := ""

  loop i := initialTypeMapLen; i < analyzer.tm.items.len; i++ {
    item := analyzer.tm.items.at(i)
    if !item.isAlias() && !item.isEnum() && !item.isObject() { continue }
    stdTM += "  " + stringifyType(item, 2, build: true) + os_EOL
  }

  loop i := 0; i < analyzer.vm.items.len; i++ {
    item := analyzer.vm.items[i]
    stdVM += "  vm.add(\"" + item.name + "\", " + stringifyType(item.t, 2)
    stdVM += ", " + item.mutable.str() + ")" + os_EOL
  }

  mut content := "import * as Type from \"./type\"" + os_EOL
  content += "import TypeMap from \"./type-map\"" + os_EOL
  content += "import VarMap from \"./var-map\"" + os_EOL
  content += os_EOL
  content += "export fn TypeMap_globals (tm: ref TypeMap) {" + os_EOL
  content += globalsTM
  content += "}" + os_EOL
  content += os_EOL
  content += "export fn VarMap_globals (vm: ref VarMap, tm: ref TypeMap) {" + os_EOL
  content += globalsVM
  content += "}" + os_EOL
  content += os_EOL
  content += "export fn TypeMap_std (tm: ref TypeMap) {" + os_EOL
  content += stdTM
  content += "}" + os_EOL
  content += os_EOL
  content += "export fn VarMap_std (vm: ref VarMap, tm: ref TypeMap) {" + os_EOL
  content += stdVM
  content += "}" + os_EOL

  fs_writeFileSync("src/api", content.toBuffer())
  print("Completed")
}
