/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Parser from "the/parser"
import Analyzer from "../src/analyzer"
import Type, TypeParameter, TypeProperty from "../src/type"

fn stringifyTypeParameter (it: ref TypeParameter, indent: int) str {
  return "TypeParameter{name: " + (it.name == nil ? "nil" : "\"" + it.name + "\"") + ", " +
    "t: " + stringifyType(it.t, indent) + ", " +
    "mutable: " + it.mutable.str() + ", " +
    "required: " + it.required.str() + ", " +
    "variadic: " + it.variadic.str() + "}"
}

fn stringifyTypeProperty (it: ref TypeProperty, indent: int) str {
  return "TypeProperty{name: \"" + it.name + "\", " +
    "t: " + stringifyType(it.t, indent) + ", " +
    "mutable: " + it.mutable.str() + "}"
}

fn stringifyTypeParameters (parameters: ref TypeParameter[], indent: int) str {
  mut result := ""

  loop i := 0; i < parameters.len; i++ {
    item := parameters[i]
    result += ' '.repeat(indent + 2) + stringifyTypeParameter(item, indent + 2) + os_EOL
  }

  return result.empty ? "[]" : "[" + os_EOL + result + ' '.repeat(indent) + "]"
}

fn stringifyTypeProperties (properties: ref TypeProperty[], indent: int) str {
  mut result := ""

  loop i := 0; i < properties.len; i++ {
    item := properties[i]
    if item.builtin { continue }
    result += ' '.repeat(indent + 2) + stringifyTypeProperty(item, indent + 2) + os_EOL
  }

  return result.empty ? "[]" : "[" + os_EOL + result + ' '.repeat(indent) + "]"
}

fn stringifyType (it: ref Type, indent: int, build := false) str {
  if !build && (it.isAlias() || it.isEnum() || it.isNamespace() || it.isObject()) {
    return "tm.get(\"" + it.name + "\")"
  }

  if it.isAlias() {
    t := it.asAlias()
    return "tm.createAlias(\"" + it.name + "\", " + stringifyType(t.t, indent) + ")"
  } elif it.isArray() {
    t := it.asArray()
    return "tm.createArray(" + stringifyType(t.elementType, indent) + ")"
  } elif it.isEnum() {
    t := it.asEnum()
    mut content := ""
    loop i := 0; i < t.members.len; i++ {
      content += i == 0 ? "" : ", "
      content += "\"" + t.members[i] + "\""
    }
    return "tm.createEnum(\"" + it.name + "\", [" + content + "])"
  } elif it.isFunction() {
    t := it.asFunction()
    return "tm.createFunction(" + t.asynchronous.str() + ", " +
      stringifyTypeParameters(ref t.parameters, indent) + ", " +
      stringifyType(t.returnType, indent) + ")"
  } elif it.isMap() {
    t := it.asMap()
    return "tm.createMap(" + stringifyType(t.keyType, indent) + ", " +
      stringifyType(t.valueType, indent) + ")"
  } elif it.isMethod() {
    t := it.asMethod()
    return "tm.createMethod(" + t.asynchronous.str() + ", " +
      stringifyTypeParameters(ref t.parameters, indent) + ", " +
      stringifyType(t.returnType, indent) + ", " +
      t.withSelf.str() + ", " +
      t.selfMutable.str() + ", " +
      "\"" + t.selfName + "\", " +
      stringifyType(t.selfType, indent) + ")"
  } elif it.isNamespace() {
    t := it.asNamespace()
    return "tm.createNamespace(\"" + it.name + "\", " +
      stringifyTypeProperties(ref it.properties, indent) + ")"
  } elif it.isObject() {
    t := it.asObject()
    return "tm.createObject(\"" + it.name + "\", " +
      stringifyTypeProperties(ref it.properties, indent) + ")"
  } elif it.isOptional() {
    t := it.asOptional()
    return "tm.createOptional(" + stringifyType(t.t, indent) + ")"
  } elif it.isReference() {
    t := it.asReference()
    return "tm.createReference(" + stringifyType(t.t, indent) + ")"
  } else {
    t := it.asUnion()
    mut content := ""
    loop i := 0; i < t.types.len; i++ {
      item := t.types[i]
      content += i == 0 ? "" : ", "
      content += stringifyType(item, indent)
    }
    return "tm.createUnion([" + content + "])"
  }
}

main {
  mut f := Parser.parse("./api/globals")
  Parser.interconnect(ref f)
  mut analyzer := Analyzer{}

  analyzer.reader = Parser.Reader_init(f.path == "anonymous" ? f.content : f.path)
  analyzer.tm.init()
  analyzer.vm.init(ref analyzer.tm)
  mut initialTypeMapLen := analyzer.tm.items.len
  analyzer.analyze(ref f.program.body)

  if !analyzer.errors.empty {
    loop i := 0; i < analyzer.errors.len; i++ {
      print((i == 0 ? "" : os_EOL) + (analyzer.errors[i] as str), to: "stderr")
    }

    process_exit(1)
  }

  mut globalsTM := ""
  mut globalsVM := ""

  loop i := initialTypeMapLen; i < analyzer.tm.items.len; i++ {
    item := analyzer.tm.items.at(i)
    if !item.isAlias() && !item.isEnum() && !item.isObject() { continue }
    globalsTM += "  " + stringifyType(item, 2, build: true) + os_EOL
  }

  loop i := 0; i < analyzer.vm.items.len; i++ {
    item := analyzer.vm.items[i]
    globalsVM += "  vm.add(\"" + item.name + "\", " + stringifyType(item.t, 2)
    globalsVM += ", " + item.mutable.str() + ")" + os_EOL
  }

  f = Parser.parse("./api/standard")
  Parser.interconnect(ref f)
  analyzer = Analyzer{}
  analyzer.reader = Parser.Reader_init(f.path == "anonymous" ? f.content : f.path)
  analyzer.tm.init()
  analyzer.vm.init(ref analyzer.tm)
  initialTypeMapLen = analyzer.tm.items.len
  analyzer.analyze(ref f.program.body)

  mut stdTM := ""
  mut stdVM := ""

  loop i := initialTypeMapLen; i < analyzer.tm.items.len; i++ {
    item := analyzer.tm.items.at(i)
    if !item.isAlias() && !item.isEnum() && !item.isObject() { continue }
    stdTM += "  " + stringifyType(item, 2, build: true) + os_EOL
  }

  loop i := 0; i < analyzer.vm.items.len; i++ {
    item := analyzer.vm.items[i]
    stdVM += "  vm.add(\"" + item.name + "\", " + stringifyType(item.t, 2)
    stdVM += ", " + item.mutable.str() + ")" + os_EOL
  }

  mut content := "import TypeParameter, TypeProperty from \"./type\"" + os_EOL
  content += "import TypeMap from \"./type-map\"" + os_EOL
  content += "import VarMap from \"./var-map\"" + os_EOL
  content += os_EOL
  content += "export fn TypeMap_globals (tm: ref TypeMap) {" + os_EOL
  content += globalsTM
  content += "}" + os_EOL
  content += os_EOL
  content += "export fn VarMap_globals (vm: ref VarMap, tm: ref TypeMap) {" + os_EOL
  content += globalsVM
  content += "}" + os_EOL
  content += os_EOL
  content += "export fn TypeMap_std (tm: ref TypeMap) {" + os_EOL
  content += stdTM
  content += "}" + os_EOL
  content += os_EOL
  content += "export fn VarMap_std (vm: ref VarMap, tm: ref TypeMap) {" + os_EOL
  content += stdVM
  content += "}" + os_EOL

  fs_writeFileSync("src/api", content.toBuffer())
  print("Completed")
}
