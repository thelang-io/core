/*!
 * Copyright (c) 2018 Aaron Delasy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

obj Error {
  message: str
  stack: str
}

obj builtin_Constants {
  // netinet/in.h
  IPPROTO_IP: int
  IPPROTO_IPV6: int
  IPPROTO_ICMP: int
  IPPROTO_RAW: int
  IPPROTO_TCP: int
  IPPROTO_UDP: int
  INADDR_ANY: int
  INADDR_BROADCAST: int
  INET_ADDRSTRLEN: int
  INET6_ADDRSTRLEN: int
  IPV6_JOIN_GROUP: int
  IPV6_LEAVE_GROUP: int
  IPV6_MULTICAST_HOPS: int
  IPV6_MULTICAST_IF: int
  IPV6_MULTICAST_LOOP: int
  IPV6_UNICAST_HOPS: int
  IPV6_V6ONLY: int

  // sys/socket.h
  SOCK_DGRAM: int
  SOCK_RAW: int
  SOCK_SEQPACKET: int
  SOCK_STREAM: int
  SOL_SOCKET: int
  SO_ACCEPTCONN: int
  SO_BROADCAST: int
  SO_DEBUG: int
  SO_DONTROUTE: int
  SO_ERROR: int
  SO_KEEPALIVE: int
  SO_LINGER: int
  SO_OOBINLINE: int
  SO_RCVBUF: int
  SO_RCVLOWAT: int
  SO_RCVTIMEO: int
  SO_REUSEADDR: int
  SO_SNDBUF: int
  SO_SNDLOWAT: int
  SO_SNDTIMEO: int
  SO_TYPE: int
  SOMAXCONN: int
  MSG_CTRUNC: int
  MSG_DONTROUTE: int
  MSG_EOR: int
  MSG_OOB: int
  MSG_NOSIGNAL: int
  MSG_PEEK: int
  MSG_TRUNC: int
  MSG_WAITALL: int
  AF_INET: int
  AF_INET6: int
  AF_UNIX: int
  AF_UNSPEC: int
  SHUT_RD: int
  SHUT_RDWR: int
  SHUT_WR: int

  // errno.h
  E2BIG: int
  EACCES: int
  EADDRINUSE: int
  EADDRNOTAVAIL: int
  EAFNOSUPPORT: int
  EAGAIN: int
  EALREADY: int
  EBADF: int
  EBADMSG: int
  EBUSY: int
  ECANCELED: int
  ECHILD: int
  ECONNABORTED: int
  ECONNREFUSED: int
  ECONNRESET: int
  EDEADLK: int
  EDESTADDRREQ: int
  EDOM: int
  EDQUOT: int
  EEXIST: int
  EFAULT: int
  EFBIG: int
  EHOSTUNREACH: int
  EIDRM: int
  EILSEQ: int
  EINPROGRESS: int
  EINTR: int
  EINVAL: int
  EIO: int
  EISCONN: int
  EISDIR: int
  ELOOP: int
  EMFILE: int
  EMLINK: int
  EMSGSIZE: int
  EMULTIHOP: int
  ENAMETOOLONG: int
  ENETDOWN: int
  ENETRESET: int
  ENETUNREACH: int
  ENFILE: int
  ENOBUFS: int
  ENODATA: int
  ENODEV: int
  ENOENT: int
  ENOEXEC: int
  ENOLCK: int
  ENOLINK: int
  ENOMEM: int
  ENOMSG: int
  ENOPROTOOPT: int
  ENOSPC: int
  ENOSR: int
  ENOSTR: int
  ENOSYS: int
  ENOTCONN: int
  ENOTDIR: int
  ENOTEMPTY: int
  ENOTRECOVERABLE: int
  ENOTSOCK: int
  ENOTSUP: int
  ENOTTY: int
  ENXIO: int
  EOPNOTSUPP: int
  EOVERFLOW: int
  EOWNERDEAD: int
  EPERM: int
  EPIPE: int
  EPROTO: int
  EPROTONOSUPPORT: int
  EPROTOTYPE: int
  ERANGE: int
  EROFS: int
  ESPIPE: int
  ESRCH: int
  ESTALE: int
  ETIME: int
  ETIMEDOUT: int
  ETXTBSY: int
  EWOULDBLOCK: int
  EXDEV: int

  // fcntl.h
  F_DUPFD: int
  F_GETFD: int
  F_SETFD: int
  F_GETFL: int
  F_SETFL: int
  F_GETLK: int
  F_SETLK: int
  F_SETLKW: int
  F_GETOWN: int
  F_SETOWN: int
  FD_CLOEXEC: int
  F_RDLCK: int
  F_UNLCK: int
  F_WRLCK: int
  O_CREAT: int
  O_EXCL: int
  O_NOCTTY: int
  O_TRUNC: int
  O_APPEND: int
  O_DSYNC: int
  O_NONBLOCK: int
  O_RSYNC: int
  O_SYNC: int
  O_ACCMODE: int
  O_RDONLY: int
  O_RDWR: int
  O_WRONLY: int

  // fenv.h
  FE_DFL_ENV: int
  FE_DOWNWARD: int
  FE_TONEAREST: int
  FE_TOWARDZERO: int
  FE_UPWARD: int
  FE_ALL_EXCEPT: int
  FE_DIVBYZERO: int
  FE_INEXACT: int
  FE_INVALID: int
  FE_OVERFLOW: int
  FE_UNDERFLOW: int

  // float.h
  FLT_RADIX: int
  DECIMAL_DIG: int
  FLT_DECIMAL_DIG: int
  DBL_DECIMAL_DIG: int
  LDBL_DECIMAL_DIG: int
  FLT_MIN: int
  DBL_MIN: int
  LDBL_MIN: int
  FLT_TRUE_MIN: int
  DBL_TRUE_MIN: int
  LDBL_TRUE_MIN: int
  FLT_MAX: int
  DBL_MAX: int
  LDBL_MAX: int
  FLT_EPSILON: int
  DBL_EPSILON: int
  LDBL_EPSILON: int
  FLT_DIG: int
  DBL_DIG: int
  LDBL_DIG: int
  FLT_MANT_DIG: int
  DBL_MANT_DIG: int
  LDBL_MANT_DIG: int
  FLT_MIN_EXP: int
  DBL_MIN_EXP: int
  LDBL_MIN_EXP: int
  FLT_MIN_10_EXP: int
  DBL_MIN_10_EXP: int
  LDBL_MIN_10_EXP: int
  FLT_MAX_EXP: int
  DBL_MAX_EXP: int
  LDBL_MAX_EXP: int
  FLT_MAX_10_EXP: int
  DBL_MAX_10_EXP: int
  LDBL_MAX_10_EXP: int
  FLT_ROUNDS: int
  FLT_EVAL_METHOD: int
  FLT_HAS_SUBNORM: int
  DBL_HAS_SUBNORM: int
  LDBL_HAS_SUBNORM: int

  // inttypes.h

  PRIdN: char[]
  PRIdLEASTN: char[]
  PRIdFASTN: char[]
  PRIdMAX: char[]
  PRIdPTR: char[]
  PRIiN: char[]
  PRIiLEASTN: char[]
  PRIiFASTN: char[]
  PRIiMAX: char[]
  PRIiPTR: char[]
  PRIoN: char[]
  PRIoLEASTN: char[]
  PRIoFASTN: char[]
  PRIoMAX: char[]
  PRIoPTR: char[]
  PRIuN: char[]
  PRIuLEASTN: char[]
  PRIuFASTN: char[]
  PRIuMAX: char[]
  PRIuPTR: char[]
  PRIxN: char[]
  PRIxLEASTN: char[]
  PRIxFASTN: char[]
  PRIxMAX: char[]
  PRIxPTR: char[]
  PRIXN: char[]
  PRIXLEASTN: char[]
  PRIXFASTN: char[]
  PRIXMAX: char[]
  PRIXPTR: char[]
  SCNdN: char[]
  SCNdLEASTN: char[]
  SCNdFASTN: char[]
  SCNdMAX: char[]
  SCNdPTR: char[]
  SCNiN: char[]
  SCNiLEASTN: char[]
  SCNiFASTN: char[]
  SCNiMAX: char[]
  SCNiPTR: char[]
  SCNoN: char[]
  SCNoLEASTN: char[]
  SCNoFASTN: char[]
  SCNoMAX: char[]
  SCNoPTR: char[]
  SCNuN: char[]
  SCNuLEASTN: char[]
  SCNuFASTN: char[]
  SCNuMAX: char[]
  SCNuPTR: char[]
  SCNxN: char[]
  SCNxLEASTN: char[]
  SCNxFASTN: char[]
  SCNxMAX: char[]
  SCNxPTR: char[]

  // limits.h
  CHAR_BIT: int
  CHAR_MAX: int
  CHAR_MIN: int
  INT_MAX: int
  LONG_MAX: int
  MB_LEN_MAX: int
  SCHAR_MAX: int
  SHRT_MAX: int
  SSIZE_MAX: int
  UCHAR_MAX: int
  UINT_MAX: int
  ULONG_MAX: int
  USHRT_MAX: int
  INT_MIN: int
  LONG_MIN: int
  SCHAR_MIN: int
  SHRT_MIN: int
  LLONG_MIN: int
  LLONG_MAX: int
  ULLONG_MAX: int
}

obj builtin {
  // errno.h
  mut errno: int

  // netinet/in.h
  in6addr_any: builtin_in6_addr
  in6addr_loopback: builtin_in6_addr

  // arpa/inet.h
  fn htonl (hostlong: u32) u32
  fn htons (hostshort: u16) u16
  fn ntohl (netlong: u32) u32
  fn ntohs (netshort: u16) u16
  fn inet_addr (cp: char[]) u32
  fn inet_lnaof (in: builtin_in_addr) u32
  fn inet_makeaddr (net: u32, lna: u32) builtin_in_addr
  fn inet_netof (in: builtin_in_addr) u32
  fn inet_network (cp: char[]) u32
  fn inet_ntoa (in: builtin_in_addr) char[]

  // sys/socket.h
  fn accept (socket: int, mut address: ref builtin_sockaddr, mut length: ref u32) int
  fn bind (socket: int, address: ref builtin_sockaddr, length: u32) int
  fn connect (socket: int, address: ref builtin_sockaddr, length: u32) int
  fn getpeername (socket: int, mut address: ref builtin_sockaddr, mut length: ref u32) int
  fn getsockname (socket: int, mut address: ref builtin_sockaddr, mut length: ref u32) int
  fn getsockopt (socket: int, level: int, name: int, mut value: void *, mut length: ref u32) int // todo
  fn listen (socket: int, backlog: int) int
  fn recv (socket: int, mut buffer: void *, bufferLength: u64, flags: int) i64 // todo
  fn recvfrom (
    socket: int,
    mut buffer: void *, // todo
    bufferLength: u64,
    flags: int,
    mut address: ref builtin_sockaddr,
    mut length: ref u32
  ) i64
  fn recvmsg (socket: int, mut message: ref builtin_msghdr, flags: int) i64
  fn send (socket: int, buffer: void *, bufferLength: u64, flags: int) i64 // todo
  fn sendmsg (socket: int, message: ref builtin_msghdr, flags: int) i64
  fn sendto (socket: int, message: void *, messageLength: u64, flags: int, address: ref builtin_sockaddr, length: u32) i64 // todo
  fn setsockopt (socket: int, level: int, name: int, value: void *, length: u32) int // todo
  fn shutdown (socket: int, how: int) int
  fn sockatmark (socket: int) int
  fn socket (domain: int, type: int, protocol: int) int
  fn socketpair (domain: int, type: int, protocol: int, vector: int[]) int

  // sys/uio.h
  fn readv (fd: int, iov: ref builtin_iovec, count: int) i64
  fn writev (fd: int, iov: ref builtin_iovec, count: int) i64

  // assert.h
  fn assert (assertion: any) void

  // ctype.h
  fn isalnum (ch: rune) int
  fn isalpha (ch: rune) int
  fn isascii (ch: rune) int
  fn isblank (ch: rune) int
  fn iscntrl (ch: rune) int
  fn isdigit (ch: rune) int
  fn isgraph (ch: rune) int
  fn islower (ch: rune) int
  fn isprint (ch: rune) int
  fn ispunct (ch: rune) int
  fn isspace (ch: rune) int
  fn isupper (ch: rune) int
  fn isxdigit (ch: rune) int
  fn toascii (ch: rune) int
  fn tolower (ch: rune) int
  fn toupper (ch: rune) int

  // dirent.h
  fn alphasort (a: ref ref builtin_dirent, b: ref ref builtin_dirent) int
  fn closedir (mut handle: ref builtin_DIR) int
  fn dirfd (mut handle: ref builtin_DIR) int
  fn fdopendir (fd: int) ref builtin_DIR
  fn opendir (dir: char[]) ref builtin_DIR
  fn readdir (mut handle: ref builtin_DIR) ref builtin_dirent
  fn rewinddir (mut handle: ref builtin_DIR) void
  fn scandir (
    dir: char[],
    mut namelist: ref (ref builtin_dirent)[],
    filter: (a: ref builtin_dirent) -> int,
    comparator: (a: ref ref builtin_dirent, b: ref ref builtin_dirent) -> int
  ) int
  fn seekdir (mut handle: ref builtin_DIR, location: i64) void
  fn telldir (mut handle: ref builtin_DIR) i64

  // fcntl.h
  fn creat (path: char[], mode: u32) int
  fn fcntl (fd: int, cmd: int, args: any...) int
  fn open (path: char[], flags: int, mode: u32? = nil) int

  // fenv.h
  fn feclearexcept (excepts: int) int
  fn fegetexceptflag (mut flag: ref u32, excepts: int) int
  fn feraiseexcept (excepts: int) int
  fn fesetexceptflag (flag: ref u32, excepts: int) int
  fn fetestexcept (excepts: int) int
  fn fegetround () int
  fn fesetround (round: int) int
  fn fegetenv (mut env: ref builtin_fenv) int
  fn feholdexcept (mut env: ref builtin_fenv) int
  fn fesetenv (env: ref builtin_fenv) int
  fn feupdateenv (env: ref builtin_fenv) int

  // inttypes.h
  fn imaxabs (j: i64) i64
  fn imaxdiv (numer: i64, denom: i64) builtin_imaxdiv
  fn strtoimax (string: char[], mut end: ref char[], base: int) i64
  fn strtoumax (string: char[], mut end: ref char[], base: int) u64
  fn wcstoimax (string: str, mut end: ref str, base: int) i64
  fn wcstoumax (string: str, mut end: ref str, base: int) u64
}

// netinet/in.h

obj builtin_in_addr {
  mut addr: u32
}

obj builtin_sockaddr_in {
  mut family: u8
  mut port: u16
  mut addr: builtin_in_addr
}

obj builtin_in6_addr {
  mut addr: u8[]
}

obj builtin_sockaddr_in6 {
  mut family: u8
  mut port: u16
  mut flowinfo: u32
  mut addr: builtin_in6_addr
  mut scope_id: u32
}

obj builtin_ipv6_mreq {
  mut multiaddr: builtin_in6_addr
  mut interface: u32
}

// sys/socket.h

obj builtin_sockaddr {
  mut family: u8
  mut data: char[]
}

obj builtin_sockaddr_storage {
  mut family: u8
}

obj builtin_msghdr {
  mut name: void * // todo
  mut namelen: u32
  mut iov: ref builtin_iovec
  mut iovlen: int
  mut control: void * // todo
  mut controllen: u32
  mut flags: int
}

obj builtin_cmsghdr {
  mut length: u32
  mut level: int
  mut type: int
}

obj builtin_linger {
  mut onoff: int
  mut linger: int
}

// sys/uio.h

obj builtin_iovec {
  mut base: void * // todo
  mut length: u64
}

// dirent.h

obj builtin_DIR {
}

obj builtin_dirent {
  mut ino: u64
  mut name: char[]
}

// fcntl.h

obj builtin_flock {
  mut type: int
  mut whence: int
  mut start: i64
  mut length: i64
  mut pid: int
}

// fenv.h

obj builtin_fenv {
}

// inttypes.h

obj builtin_imaxdiv {
  mut quot: i64
  mut rem: i64
}

const builtin_constants: builtin_Constants

// math.h
// netdb.h
// pthread.h
// pwd.h
// setjmp.h
// signal.h
// stdarg.h
// stddef.h
// stdint.h
// stdio.h
// stdlib.h
// string.h
// time.h
// uchar.h
// unistd.h
// wchar.h
// wctype.h

// sys/stat.h
// sys/syscall.h
// sys/types.h
// sys/utsname.h
