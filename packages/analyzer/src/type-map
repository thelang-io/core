/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export obj Type {
  name: str
  fields: TypeField[]
  body: str
}

export obj TypeField {
  name: str
  t: ref Type
  mutable: bool
}

export obj TypeMap {
  items: Type[]

  fn add (mut self: ref Self, name: str) {
    self.items.push(Type{name: name})
  }

  fn get (mut self: ref Self, name: str) ref Type {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return item
      }
    }

    throw error_NewError("Type `" + name + "` doesn't exists")
  }

  fn has (mut self: ref Self, name: str) bool {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return true
      }
    }

    return false
  }
}

export fn init () TypeMap {
  mut tm := TypeMap{}

  tm.add("any")
  tm.add("bool")
  tm.add("byte")
  tm.add("char")
  tm.add("float")
  tm.add("f32")
  tm.add("f64")
  tm.add("int")
  tm.add("i8")
  tm.add("i16")
  tm.add("i32")
  tm.add("i64")
  tm.add("str")
  tm.add("u8")
  tm.add("u16")
  tm.add("u32")
  tm.add("u64")
  tm.add("void")

  return tm
}
