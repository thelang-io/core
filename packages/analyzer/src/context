/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import CallExpressionArgument from "the/parser"
import Type, TypeParameter from "./type"

export obj IdentifierContext {
  mut currentType: ref Type
  mut originalType: ref Type
  mut targetType: (ref Type)?
}

export obj ArrayExpressionContext {
  mut t: ref Type
  mut elementType: ref Type
}

export obj AssignmentExpressionContext {
  mut leftType: ref Type
  mut rightType: ref Type
}

export obj BinaryExpressionContext {
  mut leftType: ref Type
  mut rightType: ref Type
}

export obj CallExpressionContextArgument {
  mut argument: CallExpressionArgument
  mut idx: int
  mut t: ref Type
  mut typeParameter: TypeParameter
}

export obj CallExpressionContext {
  mut arguments: CallExpressionContextArgument[]
  mut asynchronous: bool
  mut parameters: TypeParameter[]
  mut returnType: ref Type
  mut t: ref Type
}

export obj ConditionalExpressionContext {
  mut conditionType: ref Type
  mut consequentType: ref Type
  mut alternateType: ref Type
}

export obj IsExpressionContext {
  mut leftType: ref Type
  mut rightType: ref Type
}

export obj UnaryExpressionContext {
  mut operandType: ref Type
}

export obj VariableDeclarationContext {
  mut varType: ref Type
}
