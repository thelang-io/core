import * as Type from "./type"
import TypeMap from "./type-map"
import VarMap from "./var-map"

export fn TypeMap_globals (mut tm: ref TypeMap) {
  tm.createObject("Error", [
    Type.TypeProperty{name: "message", t: tm.get("str"), mutable: false}
    Type.TypeProperty{name: "stack", t: tm.get("str"), mutable: false}
  ])
}

export fn VarMap_globals (mut vm: ref VarMap, mut tm: ref TypeMap) {
  vm.add("NewError", tm.createFunction(false, [
    Type.TypeParameter{name: "message", t: tm.get("str"), mutable: false, required: true, variadic: false}
  ], tm.get("Error")), false)
  vm.add("print", tm.createFunction(false, [
    Type.TypeParameter{name: "items", t: tm.createArray(tm.get("any")), mutable: false, required: false, variadic: true}
    Type.TypeParameter{name: "separator", t: tm.get("str"), mutable: false, required: false, variadic: false}
    Type.TypeParameter{name: "terminator", t: tm.get("str"), mutable: false, required: false, variadic: false}
    Type.TypeParameter{name: "to", t: tm.get("str"), mutable: false, required: false, variadic: false}
  ], tm.get("void")), false)
}

export fn TypeMap_std (mut tm: ref TypeMap) {}

export fn VarMap_std (mut vm: ref VarMap, mut tm: ref TypeMap) {}

export fn AnalyzerFile_stdExports (mut exports: ref Type.NamespaceMember[], mut tm: ref TypeMap, mut vm: ref VarMap) {}
