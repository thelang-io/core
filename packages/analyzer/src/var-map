/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import Var from "./var"
import * as Type from "./type"
import * as TypeMap from "./type-map"

export obj VarMap {
  mut items: Var[]
  mut scope: int

  fn init (mut self: ref Self, tm: ref TypeMap.TypeMap) {
    self.add("NewError", tm.createFunction(false, [
      Type.TypeParameter{name: "message", t: tm.get("str"), mutable: false, required: true, variadic: false}
    ], tm.get("Error")), false)
    self.add("print", tm.createFunction(false, [
      Type.TypeParameter{name: "items", t: tm.createArray(tm.get("any")), mutable: false, required: false, variadic: true}
      Type.TypeParameter{name: "separator", t: tm.get("str"), mutable: false, required: false, variadic: false}
      Type.TypeParameter{name: "terminator", t: tm.get("str"), mutable: false, required: false, variadic: false}
      Type.TypeParameter{name: "to", t: tm.get("str"), mutable: false, required: false, variadic: false}
    ], tm.get("void")), false)
  }

  fn add (mut self: ref Self, name: str, t: ref Type.Type, mutable: bool) {
    self.items.push(Var{
      name: name,
      t: t,
      mutable: mutable,
      scope: self.scope
    })
  }

  fn decrease (mut self: ref Self) {
    len := self.items.len

    loop i := len - 1; i >= 0; i-- {
      if self.items[i].scope < self.scope {
        break
      }

      self.items.remove(i)
    }

    self.scope--
  }

  fn get (mut self: ref Self, name: str) Var {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return item
      }
    }

    throw error_NewError("Variable with this name doesn't exists")
  }

  fn has (mut self: ref Self, name: str) bool {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return true
      }
    }

    return false
  }

  fn increase (mut self: ref Self) {
    self.scope++
  }
}
