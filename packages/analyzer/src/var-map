/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as TypeMap, Type from "./type-map"

export obj Var {
  name: str
  t: Type
  mutable: bool
  scope: int
}

export obj VarMap {
  mut items: Var[]
  mut scope: int

  fn add (mut self: ref Self, name: str, t: Type, mutable: bool) {
    typeString := t.body.str()
    typeName := typeString.slice(0, typeString.find("{"))

    print("var:", name, ":", t.name, typeName) // todo delete

    self.items.push(Var{
      name: name,
      t: t,
      mutable: mutable,
      scope: self.scope
    })
  }

  fn decrease (mut self: ref Self) {
    self.scope--
  }

  fn get (mut self: ref Self, name: str) Var {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return item
      }
    }

    throw error_NewError("Variable with this name doesn't exists")
  }

  fn has (mut self: ref Self, name: str) bool {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return true
      }
    }

    return false
  }

  fn increase (mut self: ref Self) {
    self.scope++
  }
}

export fn init (tm: ref TypeMap.TypeMap) VarMap {
  mut vm := VarMap{}

  vm.add("Error", tm.createObject("Error", [
    TypeMap.TypeProperty{name: "message", t: tm.get("str"), mutable: false},
    TypeMap.TypeProperty{name: "stack", t: tm.get("str"), mutable: false}
  ]), false)

  // todo insert all built-in variables

  return vm
}
