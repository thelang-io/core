/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as TypeMap, Type from "./type-map"

export obj Var {
  name: str
  initialType: ref Type
  currentType: ref Type
  mutable: bool
  constant: bool
  scope: int
}

export obj VarMap {
  items: Var[]
  scope: int

  fn add (mut self: ref Self, name: str, initialType: ref Type, mutable: bool, constant: bool) {
    self.items.push(Var{
      name: name,
      initialType: initialType,
      currentType: initialType,
      mutable: mutable,
      constant: constant,
      scope: self.scope
    })
  }

  fn get (mut self: ref Self, name: str) ref Var {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return item
      }
    }

    throw error_NewError("Variable with this name doesn't exists")
  }

  fn has (mut self: ref Self, name: str) bool {
    loop i := self.items.len - 1; i >= 0; i-- {
      item := self.items[i]

      if item.name == name {
        return true
      }
    }

    return false
  }
}

export fn init (tm: ref TypeMap.TypeMap) VarMap {
  mut vm := VarMap{}

  vm.add("Error", tm.get("str"), false, true)

  return vm
}
