/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export fn E1000 (name: str) str {
  return "E1000 - Redifinition of `" + name + "`"
}

export fn E1001 (name: str) str {
  return "E1001 - Use of undeclaraed type `" + name + "`"
}

export fn E1002 (name: str) str {
  return "E1002 - Use of non-existing property `" + name + "`"
}

export fn E1003 (name: str) str {
  return "E1003 - Use of undeclared variable `" + name + "`"
}

export fn E1004 () str {
  return "E1004 - Unable to deduce type of `nil`"
}

export fn E1005 (initializerType: str, declarationType: str) str {
  return "E1005 - Initializer type `" + initializerType + "` " +
    "mismatch declaration type `" + declarationType + "`"
}

export fn E1006 (t: str) str {
  return "E1006 - Literal `nil` is not assignable to type `" + t + "`"
}

export fn E1007 () str {
  return "E1007 - Unable to deduce array literal type"
}

export fn E1008 (t: str) str {
  return "E1008 - Incompatible array literal element of type `" + t + "`"
}

export fn E1009 (a: str, b: str) str {
  return "E1009 - Type casting is not possible from `" + a + "` to `" + b + "`"
}

export fn E1010 () str {
  return "E1010 - Left-hand side of assignment expression should be a variable, property access or member access"
}

export fn E1011 (name: str) str {
  return "E1011 - Cannot assign to immutable variable `" + name + "`"
}

export fn E1012 (name: str) str {
  return "E1012 - Cannot assign to immutable property `" + name + "`"
}

export fn E1013 () str {
  return "E1013 - Awaited type expected to be asynchronous function"
}

export fn E1014 (t: str) str {
  return "E1014 - Index type expected to be `int` got `" + t + "`"
}

export fn E1015 (t: str) str {
  return "E1015 - No index signature was found on type `" + t + "`"
}

export fn E1016 () str {
  return "E1016 - Unable to deduce map type"
}

export fn E1017 (a: str, b: str) str {
  return "E1017 - Type `" + a + "` is not assignable to `" + b + "`"
}

export fn E1018 (t: str) str {
  return "E1018 - Unexpected `" + t + "` value in conditional. The condition should always be of `bool` type"
}

export fn E1019 (consequentType: str, alternateType: str) str {
  return "E1019 - Incompatible consequent `" + consequentType + "` type and alternate `" + alternateType + "` type"
}
