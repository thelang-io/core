/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as AnalyzerExport from "./analyzer-export"
import * as Parser from "the/parser"
import * as API from "./api"
import * as Hooks from "./hooks"
import * as Type, Var from "./type"
import * as TypeMap from "./type-map"
import * as VarMap from "./var-map"
import * as errors from "./errors"

export obj GuessTypeResult {
  first: ref Type.Type
  second: ref Type.Type
}

export obj TypeCastResult {
  consequent: (ref Type.Type)[str]
  alternate: (ref Type.Type)[str]
}

export obj Analyzer {
  mut errors: str[]
  mut files: AnalyzerFileArray
  mut hooks: Hooks.Hooks
  mut state: AnalyzerState
}

export obj AnalyzerState {
  mut mainFound: bool
}

export obj AnalyzerFileState {
  mut initialized: bool
  mut loopInit: bool
  mut returnType: (ref Type.Type)?
  mut selfType: (ref Type.Type)?
}

export obj AnalyzerFileArray {
  mut items: any[]
  mut len: int

  fn at (mut self: ref Self, index: int) ref AnalyzerFile {
    return ref ((self.items[index] as any) as AnalyzerFile)
  }

  fn last (mut self: ref Self) ref AnalyzerFile {
    return ref ((self.items.last as any) as AnalyzerFile)
  }

  fn push (mut self: ref Self, item: AnalyzerFile) {
    self.items.push(item)
    self.len++
  }
}

export obj AnalyzerFile {
  mut cwd: str
  mut analyzer: ref Analyzer
  mut exports: Type.NamespaceMember[]
  mut reader: Parser.Reader
  mut state: AnalyzerFileState
  mut tc: (ref Type.Type)[str]
  mut tm: TypeMap.TypeMap
  mut vm: VarMap.VarMap

  fn analyze (mut self: ref Self, items: ref Parser.Statement[]) {
    len := items.len

    loop i := 0; i < len; i++ {
      if items[i].isDeclaration() {
        loop j := i; j < len && items[j].isDeclaration(); j++ {
          self.declare(items[j])
        }

        loop j := i; j < len && items[j].isDeclaration(); j++ {
          self.define(items[j])
        }

        self.statement(items[i])

        loop i + 1 < len && items[i + 1].isDeclaration() {
          self.statement(items[++i])
        }
      } else {
        self.statement(items[i])
      }
    }
  }

  fn declare (mut self: ref Self, it: ref Parser.Statement) {
    if it.isEnumDeclaration() {
      statement := it.asEnumDeclaration()

      if self.entityExists(statement.name.name) {
        self.raise(errors.E1000(statement.name.name), statement.name.start, statement.name.end)
      }

      membersLen := statement.members.len
      mut members: str[]

      loop i := 0; i < membersLen; i++ {
        members.push(statement.members[i].name.name)
      }

      t := self.tm.createEnum(statement.name.name, members)
      self.vm.add(statement.name.name, t, false)
    } elif it.isExportDeclaration() {
      statement := it.asExportDeclaration()
      self.declare(ref statement.statement)
    } elif it.isImportDeclaration() {
      statement := it.asImportDeclaration()

      if it.hasParent() {
        self.raise(errors.E1043(), it.start, it.end)
      }

      sourceExpression := statement.source.asStringLiteral()
      source := sourceExpression.value
      mut relativePath := ""
      mut astCwd := self.cwd

      if [".", "/"].contains(source.slice(0, 1)) {
        try {
          if source.slice(0, 1) == "." {
            relativePath = fs_realpathSync(path_dirname(self.reader.path) + path_SEP + source)
          } elif source.slice(0, 1) == "/" {
            relativePath = fs_realpathSync(source)
          }
        } catch err: error_Error {
          self.raise(errors.E1071(source), statement.source.start, statement.source.end)
          return
        }
      } elif source == "std" {
        astCwd = ""
        relativePath = "std"
      } else {
        pathDir := astCwd + path_SEP + ".packages" + path_SEP + source
        mut possibleRelativePath: str?

        try {
          sourceFile := fs_readFileSync(fs_realpathSync(pathDir + path_SEP + "package.yml")).str()
          sourceFileLines := sourceFile.lines()

          loop i := 0; i < sourceFileLines.len; i++ {
            line := sourceFileLines[i]
            if line.slice(0, 5) == "main:" {
              possibleRelativePath = fs_realpathSync(pathDir + path_SEP + line.slice(5).trim())
            }
          }
        } catch err: error_Error {
        }

        if possibleRelativePath == nil {
          self.raise(errors.E1074(source), statement.source.start, statement.source.end)
          return
        }

        astCwd = pathDir
        relativePath = possibleRelativePath as str
      }

      mut existingImport: (ref AnalyzerFile)?

      loop i := 0; i < self.analyzer.files.len; i++ {
        file := self.analyzer.files.at(i)
        if file.reader.path == relativePath {
          existingImport = file
          break
        }
      }

      if existingImport == nil {
        self.analyzer.files.push(AnalyzerFile{cwd: astCwd, analyzer: self.analyzer})
        mut file := self.analyzer.files.last()

        file.tm.init()
        API.TypeMap_globals(ref file.tm)
        API.VarMap_globals(ref file.vm, ref file.tm)

        if source == "std" {
          API.TypeMap_std(ref file.tm)
          API.VarMap_std(ref file.vm, ref file.tm)
          API.AnalyzerFile_stdExports(ref file.exports, ref file.tm, ref file.vm)
        } else {
          mut f := Parser.parse(relativePath)
          Parser.interconnect(ref f)
          file.reader = Parser.Reader_init(f.path == "anonymous" ? f.content : f.path)
          file.analyze(ref f.program.body)
        }

        file.state.initialized = true
        existingImport = file
      } elif !existingImport.state.initialized {
        self.raise(errors.E1075(source), statement.source.start, statement.source.end)
        return
      } elif statement.specifiers.empty {
        return
      }

      definiteImport := existingImport as ref AnalyzerFile

      loop i := 0; i < statement.specifiers.len; i++ {
        specifier := statement.specifiers[i] as Parser.ImportDeclarationSpecifier

        if specifier is Parser.ImportNamespaceSpecifier {
          namespaceSpecifier := specifier
          t := self.tm.createNamespace(namespaceSpecifier.name.name, definiteImport.exports)
          self.vm.add(namespaceSpecifier.name.name, t, true)
          continue
        }

        namedSpecifier := specifier as Parser.ImportSpecifier

        if !AnalyzerExport.has(ref definiteImport.exports, namedSpecifier.imported.name) {
          self.raise(errors.E1072(), namedSpecifier.imported.start, namedSpecifier.imported.end)
          continue
        } elif self.entityExists(namedSpecifier.local.name) {
          self.raise(errors.E1000(namedSpecifier.local.name), namedSpecifier.local.start, namedSpecifier.local.end)
          continue
        }

        mut exportItem := AnalyzerExport.get(ref definiteImport.exports, namedSpecifier.imported.name)

        if exportItem.var != nil {
          self.vm.add(namedSpecifier.local.name, exportItem.var.t, exportItem.var.mutable)
        }

        if exportItem.t != nil && namedSpecifier.local.name != namedSpecifier.imported.name {
          self.tm.createAlias(namedSpecifier.local.name, exportItem.t)
        } elif exportItem.t != nil {
          self.tm.insert(exportItem.t)
        }
      }
    } elif it.isObjectDeclaration() {
      statement := it.asObjectDeclaration()

      if self.entityExists(statement.name.name) {
        self.raise(errors.E1000(statement.name.name), statement.name.start, statement.name.end)
      }

      self.tm.createObject(statement.name.name)
    }
  }

  fn define (mut self: ref Self, it: ref Parser.Statement) {
    if it.isExportDeclaration() {
      statement := it.asExportDeclaration()
      self.define(ref statement.statement)
    } elif it.isFunctionDeclaration() {
      statement := it.asFunctionDeclaration()

      if self.entityExists(statement.name.name) {
        self.raise(errors.E1000(statement.name.name), statement.name.start, statement.name.end)
      }

      self.tm.increase()
      self.vm.increase()
      parameters := self.functionParametersLight(statement.parameters)
      self.vm.decrease()
      self.tm.decrease()
      returnType := statement.returnType == nil ? self.tm.get("void") : self.t(statement.returnType)
      t := self.tm.createFunction(statement.asynchronous, parameters, returnType)

      self.vm.add(statement.name.name, t, false)
    } elif it.isObjectDeclaration() {
      statement := it.asObjectDeclaration()
      initialTmSelf := self.tm.getSelf()
      initialStateSelf := self.state.selfType

      t := self.tm.get(statement.name.name)
      len := statement.body.len

      self.state.selfType = Type.opt(t)
      self.tm.setSelf(Type.opt(t))

      loop i := 0; i < len; i++ {
        self.define(statement.body[i])
      }

      self.state.selfType = initialStateSelf
      self.tm.setSelf(initialTmSelf)
    } elif it.isObjectDeclarationMethod() {
      statement := it.asObjectDeclarationMethod()
      selfType := self.state.selfType as ref Type.Type

      if selfType.has(statement.name.name) {
        self.raise(errors.E1076(statement.name.name), statement.name.start, statement.name.end)
      }

      self.tm.increase()
      self.vm.increase()
      mut parameters := self.functionParametersLight(statement.parameters)
      self.vm.decrease()
      self.tm.decrease()

      mut selfParameter: Type.TypeParameter?

      if (
        !parameters.empty &&
        (Type.match(parameters[0].t, selfType) || Type.match(parameters[0].t, self.tm.createReference(selfType)))
      ) {
        selfParameter = parameters[0]
        parameters.remove(0)
      }

      returnType := statement.returnType == nil ? self.tm.get("void") : self.t(statement.returnType)

      t := self.tm.createMethod(
        statement.asynchronous,
        parameters,
        returnType,
        withSelf: selfParameter != nil,
        selfMutable: selfParameter != nil ? selfParameter.mutable : false,
        selfName: selfParameter != nil ? selfParameter.name != nil ? selfParameter.name : "" : "",
        selfType: selfParameter != nil ? selfParameter.t : selfType
      )

      selfType.properties.push(Type.TypeProperty{
        name: statement.name.name,
        t: t,
        mutable: false
      })
    } elif it.isObjectDeclarationProperty() {
      statement := it.asObjectDeclarationProperty()
      selfType := self.state.selfType as ref Type.Type

      if selfType.has(statement.name.name) {
        self.raise(errors.E1051(statement.name.name), statement.name.start, statement.name.end)
      }

      mut t := self.tm.get("any")

      if statement.t != nil {
        statementType := statement.t

        self.guard(() -> void {
          initialTC := ref self.tc // todo remove after v1
          t = self.t(statementType)
        })
      }

      selfType.properties.push(Type.TypeProperty{
        name: statement.name.name,
        t: t,
        mutable: statement.mutable
      })
    } elif it.isTypeAliasDeclaration() {
      statement := it.asTypeAliasDeclaration()

      if self.entityExists(statement.name.name) {
        self.raise(errors.E1000(statement.name.name), statement.name.start, statement.name.end)
      }

      self.tm.createAlias(statement.name.name, self.t(statement.t))
    }
  }

  fn e (
    mut self: ref Self,
    it: Parser.Expression,
    targetType: (ref Type.Type)? = nil,
    withMutable := false,
    withMutableNext := false,
    withoutTypeCast := false
  ) ref Type.Type {
    if it.isIdentifier() {
      expression := it.asIdentifier()

      if !self.vm.has(expression.name) {
        self.raise(errors.E1003(expression.name), it.start, it.end)
        return targetType == nil ? self.tm.get("any") : targetType
      }

      var := self.vm.get(expression.name)

      if withMutable && !var.mutable {
        self.raise(errors.E1011(expression.name), it.start, it.end)
      }

      if targetType != nil {
        if Type.match(targetType, var.t) {
          return var.t
        }
      } elif withoutTypeCast {
        return var.t
      }

      code := Parser.stringifyExpression(it)
      currentType := self.tc.has(code) ? self.tc.get(code) : var.t

      // todo test hooks
      if self.analyzer.hooks.onIdentifier != nil {
        self.analyzer.hooks.onIdentifier(ref it, Hooks.IdentifierContext{
          currentType: currentType,
          originalType: var.t
        })
      }

      return currentType
    } elif it.isBooleanLiteral() {
      return self.tm.get("bool")
    } elif it.isCharacterLiteral() {
      return self.tm.get("char")
    } elif it.isFloatingPointLiteral() {
      expression := it.asFloatingPointLiteral()
      definiteTargetType := Type.unwrap(targetType == nil ? self.tm.get("float") : targetType, withOptional: true)
      t := Type.unwrap(definiteTargetType.isFloat() ? definiteTargetType : self.tm.get("float"), withOptional: true)

      try {
        if Type.match(t, self.tm.get("f32")) {
          expression.value.toF32()
        } else {
          expression.value.toF64()
        }
      } catch err: error_Error {
        self.raise(errors.E1030(t.toString()), it.start, it.end)
      }

      return t
    } elif it.isIntegerLiteral() {
      expression := it.asIntegerLiteral()
      definiteTargetType := Type.unwrap(targetType == nil ? self.tm.get("int") : targetType, withOptional: true)
      t := Type.unwrap(definiteTargetType.isInt() ? definiteTargetType : self.tm.get("int"), withOptional: true)

      try {
        if Type.match(t, self.tm.get("i8")) {
          expression.value.toI8()
        } elif Type.match(t, self.tm.get("i16")) {
          expression.value.toI16()
        } elif Type.match(t, self.tm.get("i32")) {
          expression.value.toI32()
        } elif Type.match(t, self.tm.get("i64")) {
          expression.value.toI64()
        } elif Type.match(t, self.tm.get("u8")) {
          expression.value.toU8()
        } elif Type.match(t, self.tm.get("u16")) {
          expression.value.toU16()
        } elif Type.match(t, self.tm.get("u32")) {
          expression.value.toU32()
        } elif Type.match(t, self.tm.get("u64")) {
          expression.value.toU64()
        }
      } catch err: error_Error {
        self.raise(errors.E1029(t.toString()), it.start, it.end)
      }

      return t
    } elif it.isNilLiteral() {
      if targetType == nil {
        self.raise(errors.E1004(), it.start, it.end)
        return self.tm.createOptional(self.tm.get("any"))
      }

      t := Type.unwrap(targetType as ref Type.Type)

      if t.isOptional() {
        return t
      }

      self.raise(errors.E1006(t.toString()), it.start, it.end)
      return targetType as ref Type.Type
    } elif it.isStringLiteral() {
      return self.tm.get("str")
    } elif it.isArray() {
      expression := it.asArray()
      mut elementType: (ref Type.Type)?

      if targetType != nil {
        t := Type.unwrap(targetType, withOptional: true)

        if t.isArray() {
          t := t.asArray()
          elementType = Type.opt(t.elementType)
        }
      }

      if expression.elements.empty {
        if elementType == nil {
          self.raise(errors.E1007(), it.start, it.end)
          return self.tm.createArray(self.tm.get("any"))
        }
      }

      elementsLen := expression.elements.len
      elementTypeForced := elementType != nil

      loop i := 0; i < elementsLen; i++ {
        element := expression.elements[i]
        t := self.e(element, elementType)

        if elementType == nil {
          elementType = t
        } elif !Type.similarTo(t, elementType) {
          if elementTypeForced {
            self.raise(errors.E1008(t.toString(), elementType.toString()), element.start, element.end)
          } else {
            elementType = self.tm.unionAdd(elementType, t)
          }
        }
      }

      return self.tm.createArray(elementType as ref Type.Type)
    } elif it.isAs() {
      expression := it.asAs()
      expressionType := self.e(expression.expression, withMutable: withMutable || withMutableNext)
      t := self.t(expression.t)

      if !expressionType.canBe(t) {
        self.raise(errors.E1009(expressionType.toString(), t.toString()), it.start, it.end)
      }

      return t
    } elif it.isAssignment() {
      expression := it.asAssignment()

      guessTypeResult := self.guessType((operandType: (ref Type.Type)?) -> ref Type.Type {
        initialTC := ref self.tc // todo remove after v1
        return self.e(expression.left, operandType, withMutable: true, withoutTypeCast: true)
      }, (operandType: (ref Type.Type)?) -> ref Type.Type {
        initialTC := ref self.tc // todo remove after v1
        return self.e(expression.right, operandType)
      })

      leftType := Type.unwrap(guessTypeResult.first, withReference: false)
      rightType := Type.unwrap(guessTypeResult.second, withReference: false)

      if !self.operands(expression.operator, leftType, rightType) {
        self.raise(
          errors.E1027(expression.operator.val, leftType.toString()),
          expression.operator.start,
          expression.operator.end
        )
      }

      if !expression.left.isAccess() {
        self.raise(errors.E1010(), expression.left.start, expression.left.end)
      } elif (
        Type.match(leftType, self.tm.get("any")) ||
        (leftType.isOptional() && !rightType.isOptional()) ||
        (leftType.isUnion() && leftType.hasType(rightType))
      ) {
        code := Parser.stringifyExpression(expression.left)
        self.tc.set(code, rightType)
      }

      return leftType.isReference() && !rightType.isReference() ? Type.unwrap(leftType) : leftType
    } elif it.isAwait() {
      expression := it.asAwait()
      expressionType := Type.unwrap(self.e(expression.expression))
      parentNode := it.parentNode()

      if !parentNode.hasAsyncParent() {
        self.raise(errors.E1069(), it.start, it.end)
      }

      if expressionType.isFunction() {
        t := expressionType.asFunction()

        if !t.asynchronous {
          self.raise(errors.E1013(), expression.expression.start, expression.expression.end)
        }

        return t.returnType
      } else {
        self.raise(errors.E1013(), expression.expression.start, expression.expression.end)
        return self.tm.get("any")
      }
    } elif it.isBinary() {
      initialTC := self.tc
      expression := it.asBinary()
      mut leftTypeCastResult: TypeCastResult?

      guessTypeResult := self.guessType((operandType: (ref Type.Type)?) -> ref Type.Type {
        initialTC := ref self.tc // todo remove after v1

        if leftTypeCastResult == nil && expression.operator.t == .OpAmpAmp {
          leftTypeCastResult = self.typeCast(expression.left)
        }

        return Type.unwrap(self.e(expression.left, operandType))
      }, (operandType: (ref Type.Type)?) -> ref Type.Type {
        initialTC := ref self.tc // todo remove after v1

        if leftTypeCastResult == nil {
          return Type.unwrap(self.e(expression.right, operandType))
        }

        definiteLeftTypeCastResult := leftTypeCastResult as TypeCastResult
        self.tc.merge(definiteLeftTypeCastResult.consequent)
        result := Type.unwrap(self.e(expression.right, operandType))
        self.tc = initialTC

        return result
      })

      leftType := guessTypeResult.first
      rightType := guessTypeResult.second

      if !self.operands(expression.operator, leftType, rightType) {
        self.raise(
          errors.E1026(expression.operator.val, leftType.toString(), rightType.toString()),
          expression.operator.start,
          expression.operator.end
        )
      }

      if (
        expression.operator.t == .OpEqEq ||
        expression.operator.t == .OpExclEq ||
        expression.operator.t == .OpGt ||
        expression.operator.t == .OpGtEq ||
        expression.operator.t == .OpLt ||
        expression.operator.t == .OpLtEq
      ) {
        return self.tm.get("bool")
      } elif Type.match(leftType, self.tm.get("str")) && Type.match(rightType, self.tm.get("str")) {
        return self.tm.get("str")
      } elif leftType.isNumber() && rightType.isNumber() {
        return Type.largest(leftType, rightType)
      }

      return leftType
    } elif it.isCall() {
      initialErrorsLen := self.analyzer.errors.len
      expression := it.asCall()
      calleeType := Type.unwrap(self.e(expression.callee))
      mut asynchronous: bool
      mut parameters: Type.TypeParameter[]
      mut returnType := self.tm.get("void")

      if calleeType.isFunction() {
        t := calleeType.asFunction()
        asynchronous = t.asynchronous
        parameters = t.parameters
        returnType = t.returnType
      } elif calleeType.isMethod() {
        t := calleeType.asMethod()
        asynchronous = t.asynchronous
        parameters = t.parameters
        returnType = t.returnType

        if t.withSelf && t.selfMutable && t.selfType.isReference() {
          self.analyzer.errors = self.analyzer.errors.slice(0, initialErrorsLen)
          self.e(expression.callee, withMutableNext: true)
        }
      } else {
        self.raise(errors.E1031(calleeType.toString()), expression.callee.start, expression.callee.end)
        return self.tm.get("void")
      }

      argumentsLen := expression.arguments.len
      parametersLen := parameters.len
      mut passedParameters: str[]
      mut hasNamed := false
      mut isVariadic := false
      mut variadicParameter: Type.TypeParameter?
      mut parameterIdx := 0

      loop i := 0; i < argumentsLen; i++ {
        argument := expression.arguments[i]
        mut parameter: Type.TypeParameter?

        if argument.name != nil {
          if passedParameters.contains(argument.name.name) {
            self.raise(errors.E1032(argument.name.name), argument.name.start, argument.name.end)
            break
          }

          loop j := 0; j < parametersLen; j++ {
            typeParameter := parameters[j]

            if typeParameter.name != nil {
              if typeParameter.name == argument.name.name {
                parameter = typeParameter as Type.TypeParameter
                break
              }
            }
          }

          if parameter == nil {
            self.raise(errors.E1032(argument.name.name), argument.name.start, argument.name.end)
            break
          } elif parameter.variadic {
            self.raise(errors.E1033(argument.name.name), argument.name.start, argument.name.end)
            break
          }

          hasNamed = true
          isVariadic = false
          variadicParameter = nil
        } elif hasNamed {
          self.raise(errors.E1034(), argument.expression.start, argument.expression.end)
          break
        } elif isVariadic {
          parameter = variadicParameter
        } elif parameterIdx >= parametersLen {
          self.raise(errors.E1032(), argument.expression.start, argument.expression.end)
          break
        } else {
          parameter = parameters[parameterIdx]
        }

        definiteParameter := parameter as Type.TypeParameter

        if !isVariadic && definiteParameter.variadic {
          isVariadic = true
          variadicParameter = definiteParameter
        }

        mut parameterType := definiteParameter.t

        if definiteParameter.variadic {
          t := parameterType.asArray()
          parameterType = t.elementType
        }

        t := Type.unwrap(self.e(argument.expression, Type.opt(parameterType)), withReference: false)

        if !Type.similarTo(t, parameterType) {
          self.raise(
            errors.E1035(t.toString(), parameterType.toString()),
            argument.expression.start,
            argument.expression.end
          )
        }

        if !isVariadic {
          if definiteParameter.name != nil {
            passedParameters.push(definiteParameter.name)
          }

          parameterIdx++
        }
      }

      loop ; parameterIdx < parametersLen; parameterIdx++ {
        parameter := parameters[parameterIdx]

        if parameter.required && parameter.name != nil {
          self.raise(errors.E1036(parameter.name), it.start, it.end)
        } elif parameter.required {
          self.raise(errors.E1037(), it.start, it.end)
        }
      }

      return asynchronous ? calleeType : returnType
    } elif it.isClosure() {
      expression := it.asClosure()
      initialStateReturnType := self.state.returnType

      self.tm.increase()
      self.vm.increase()
      parameters := self.functionParameters(expression.parameters)
      returnType := self.t(expression.returnType)
      self.state.returnType = returnType

      if !Type.match(returnType, self.tm.get("void")) && !expression.body.isDeadEnd() {
        self.raise(errors.E1061(), expression.returnType.start, expression.returnType.end)
      }

      self.statement(expression.body)
      self.state.returnType = initialStateReturnType
      self.vm.decrease()
      self.tm.decrease()

      return self.tm.createFunction(expression.asynchronous, parameters, returnType)
    } elif it.isConditional() {
      initialTC := self.tc
      expression := it.asConditional()
      typeCastResult := self.typeCast(expression.condition)
      conditionType := Type.unwrap(self.e(expression.condition))

      if !Type.match(conditionType, self.tm.get("bool")) {
        self.raise(errors.E1018(conditionType.toString()), expression.condition.start, expression.condition.end)
      }

      guessTypeResult := self.guessType((operandType: (ref Type.Type)?) -> ref Type.Type {
        self.tc.merge(typeCastResult.consequent)
        result := Type.unwrap(self.e(expression.consequent, operandType, withMutable: withMutable || withMutableNext))
        self.tc = initialTC

        return result
      }, (operandType: (ref Type.Type)?) -> ref Type.Type {
        self.tc.merge(typeCastResult.alternate)
        result := Type.unwrap(self.e(expression.alternate, operandType, withMutable: withMutable || withMutableNext))
        self.tc = initialTC

        return result
      })

      consequentType := guessTypeResult.first
      alternateType := guessTypeResult.second

      if consequentType.isNumber() && alternateType.isNumber() {
        return Type.largest(consequentType, alternateType)
      } elif !Type.similarTo(consequentType, alternateType) && !Type.similarTo(alternateType, consequentType) {
        self.raise(
          errors.E1019(consequentType.toString(), alternateType.toString()),
          expression.consequent.start,
          expression.alternate.end
        )
      }

      return Type.similarTo(alternateType, consequentType) ? consequentType : alternateType
    } elif it.isElementAccess() {
      expression := it.asElementAccess()
      expressionType := Type.unwrap(self.e(expression.expression, withMutable: withMutable || withMutableNext))
      argumentType := Type.unwrap(self.e(expression.argument))

      if !Type.similarTo(argumentType, self.tm.get("i32")) {
        self.raise(errors.E1014(argumentType.toString()), expression.argument.start, expression.argument.end)
      }

      mut t := self.tm.createReference(self.tm.get("any"))

      if expressionType.isArray() {
        arrayType := expressionType.asArray()
        t = self.tm.createReference(arrayType.elementType)
      } elif Type.match(expressionType, self.tm.get("str")) {
        t = self.tm.createReference(self.tm.get("rune"))
      } else {
        self.raise(errors.E1015(argumentType.toString()), expression.expression.start, expression.expression.end)
      }

      if targetType != nil {
        if Type.match(targetType, t) {
          return t
        }
      } elif withoutTypeCast {
        return t
      }

      code := Parser.stringifyExpression(it)
      return self.tc.has(code) ? self.tc.get(code) : t
    } elif it.isIs() {
      expression := it.asIs()
      expressionType := self.e(expression.expression, withMutable: withMutable || withMutableNext)
      t := self.t(expression.t)

      if !expressionType.canBe(t) {
        self.raise(errors.E1009(
          expressionType.toString(), t.toString()),
          expression.expression.start,
          expression.expression.end
        )
      }

      return self.tm.get("bool")
    } elif it.isMap() {
      expression := it.asMap()
      mut t: (ref Type.Type)?

      if targetType != nil {
        maybeMapType := Type.unwrap(targetType, withOptional: true)

        if maybeMapType.isMap() {
          t = maybeMapType
        }
      }

      if expression.elements.empty && t == nil {
        self.raise(errors.E1016(), it.start, it.end)
        return self.tm.createMap(self.tm.get("any"), self.tm.get("any"))
      } elif expression.elements.empty {
        return t
      }

      mut keyType: (ref Type.Type)?
      mut valueType: (ref Type.Type)?

      if t != nil {
        mapType := t.asMap()
        keyType = Type.opt(mapType.keyType)
        valueType = Type.opt(mapType.valueType)
      }

      keyTypeForced := keyType != nil
      valueTypeForced := valueType != nil
      elementsLen := expression.elements.len

      loop i := 0; i < elementsLen; i++ {
        element := expression.elements[i]
        elementKeyType := self.e(element.key, keyType)
        elementValueType := self.e(element.value, valueType)

        if keyType == nil {
          keyType = elementKeyType
        } elif !Type.similarTo(elementKeyType, keyType) && keyTypeForced {
          self.raise(errors.E1005(elementKeyType.toString(), keyType.toString()), element.key.start, element.key.end)
        } elif !Type.similarTo(elementKeyType, keyType) {
          keyType = self.tm.unionAdd(keyType, elementKeyType)
        }

        if valueType == nil {
          valueType = elementValueType
        } elif !Type.similarTo(elementValueType, valueType) && valueTypeForced {
          self.raise(
            errors.E1005(elementValueType.toString(), valueType.toString()),
            element.value.start,
            element.value.end
          )
        } elif !Type.similarTo(elementValueType, valueType) {
          valueType = self.tm.unionAdd(valueType, elementValueType)
        }
      }

      return self.tm.createMap(keyType as ref Type.Type, valueType as ref Type.Type)
    } elif it.isMemberAccess() {
      expression := it.asMemberAccess()
      mut t: (ref Type.Type)?

      if targetType != nil {
        maybeEnumType := Type.unwrap(targetType)

        if maybeEnumType.isEnum() {
          t = maybeEnumType
        }
      }

      if t == nil {
        self.raise(errors.E1020(), it.start, it.end)
        return self.tm.get("any")
      } elif !t.hasEnumerator(expression.name.name) {
        self.raise(errors.E1021(expression.name.name), it.start, it.end)
      }

      return t as ref Type.Type
    } elif it.isObject() {
      expression := it.asObject()
      t := self.t(expression.id)
      propertiesLen := expression.properties.len
      mut propertyNames: str[]

      loop i := 0; i < propertiesLen; i++ {
        property := expression.properties[i]

        if !t.has(property.name.name) {
          self.raise(errors.E1002(property.name.name, t.toString()), property.name.start, property.name.end)
          self.e(property.value)
        } else {
          p := t.get(property.name.name)
          propertyType := self.e(property.value, Type.opt(p.t))

          if !Type.similarTo(propertyType, p.t) {
            self.raise(errors.E1005(propertyType.toString(), p.t.toString()), property.value.start, property.value.end)
          }

          propertyNames.push(property.name.name)
        }
      }

      typePropertiesLen := t.properties.len

      loop i := 0; i < typePropertiesLen; i++ {
        property := t.properties[i]

        if !property.builtin && property.t.isRequired() && !propertyNames.contains(property.name) {
          self.raise(errors.E1041(property.name, property.t.toString()), expression.id.start, expression.id.end)
        }
      }

      return t
    } elif it.isParenthesized() {
      expression := it.asParenthesized()
      return self.e(expression.expression, targetType, withMutable: withMutable || withMutableNext)
    } elif it.isPropertyAccess() {
      expression := it.asPropertyAccess()
      t := Type.unwrap(self.e(expression.expression, withMutable: withMutable || withMutableNext))

      if t.has(expression.name.name) {
        property := t.get(expression.name.name)

        if withMutable && !property.mutable {
          self.raise(errors.E1012(expression.name.name), it.start, it.end)
        }

        if targetType != nil {
          if Type.match(targetType, property.t) {
            return property.t
          }
        } elif withoutTypeCast {
          return property.t
        }

        code := Parser.stringifyExpression(it)
        return self.tc.has(code) ? self.tc.get(code) : property.t
      } elif t.isEnum() {
        if !t.hasEnumerator(expression.name.name) {
          self.raise(errors.E1021(expression.name.name), expression.name.start, expression.name.end)
        }
        return t
      } elif t.isNamespace() {
        namespaceType := t.asNamespace()

        if AnalyzerExport.has(ref namespaceType.members, expression.name.name) {
          member := AnalyzerExport.get(ref namespaceType.members, expression.name.name)

          if member.var != nil {
            if withMutable && !member.var.mutable {
              self.raise(errors.E1011(expression.name.name), it.start, it.end)
            }

            if targetType != nil {
              if Type.match(targetType, member.var.t) {
                return member.var.t
              }
            } elif withoutTypeCast {
              return member.var.t
            }

            code := Parser.stringifyExpression(it)
            return self.tc.has(code) ? self.tc.get(code) : member.var.t
          }
        }

        self.raise(
          errors.E1073(Parser.stringifyExpression(expression.expression), expression.name.name),
          expression.name.start,
          expression.name.end
        )
        return targetType == nil ? self.tm.get("any") : targetType
      }

      self.raise(errors.E1002(expression.name.name, t.toString()), expression.name.start, expression.name.end)
      return targetType == nil ? self.tm.get("any") : targetType
    } elif it.isReference() {
      expression := it.asReference()
      return self.tm.createReference(self.e(expression.expression, withMutable: withMutable || withMutableNext))
    } elif it.isUnary() {
      expression := it.asUnary()

      if expression.operator.t == .OpExcl {
        operandType := Type.unwrap(self.e(expression.operand))

        if (
          !Type.match(operandType, self.tm.get("bool")) &&
          !Type.match(operandType, self.tm.get("byte")) &&
          !operandType.isNumber()
        ) {
          self.raise(
            errors.E1025(expression.operator.val, operandType.toString()),
            expression.operator.start,
            expression.operator.end
          )
        }

        return self.tm.get("bool")
      } elif expression.operator.t == .OpMinusMinus || expression.operator.t == .OpPlusPlus {
        operandType := Type.unwrap(self.e(expression.operand, withMutable: true))

        if !expression.operand.isAccess() {
          self.raise(errors.E1024(), expression.operator.start, expression.operator.end)
        } elif !operandType.isNumber() {
          self.raise(
            errors.E1025(expression.operator.val, operandType.toString()),
            expression.operator.start,
            expression.operator.end
          )
        }

        return operandType
      } elif expression.operator.t == .OpMinus {
        operandType := Type.unwrap(self.e(expression.operand, targetType))

        if !operandType.isSignedInt() && !operandType.isFloat() {
          self.raise(
            errors.E1025(expression.operator.val, operandType.toString()),
            expression.operator.start,
            expression.operator.end
          )
        }

        return operandType
      } elif expression.operator.t == .OpPlus {
        operandType := Type.unwrap(self.e(expression.operand, targetType))

        if !operandType.isNumber() {
          self.raise(
            errors.E1025(expression.operator.val, operandType.toString()),
            expression.operator.start,
            expression.operator.end
          )
        }

        return operandType
      } elif expression.operator.t == .OpTilde {
        operandType := Type.unwrap(self.e(expression.operand, targetType))

        if !operandType.isInt() {
          self.raise(
            errors.E1025(expression.operator.val, operandType.toString()),
            expression.operator.start,
            expression.operator.end
          )
        }

        return operandType
      } else {
        return Type.unwrap(self.e(expression.operand, targetType))
      }
    }

    throw error_NewError("Tried analyzing unknown expression")
  }

  fn eNice (mut self: ref Self, it: Parser.Expression) ref Type.Type {
    initialErrorsLen := self.analyzer.errors.len
    result := self.e(it)

    if self.analyzer.errors.len != initialErrorsLen {
      self.analyzer.errors = self.analyzer.errors.slice(0, initialErrorsLen)
    }

    return result
  }

  fn entityExists (self: ref Self, name: str) bool {
    return self.tm.has(name, global: false) || self.vm.has(name, global: false)
  }

  fn functionParameters (mut self: ref Self, parameters: Parser.FunctionParameter[]) Type.TypeParameter[] {
    mut parameterNames: str[]
    mut result: Type.TypeParameter[]
    parametersLen := parameters.len

    loop i := 0; i < parametersLen; i++ {
      parameter := parameters[i]

      if parameterNames.contains(parameter.name.name) {
        self.raise(errors.E1054(parameter.name.name), parameter.name.start, parameter.name.end)
      }

      mut t := parameter.t == nil ? self.e(parameter.initializer as Parser.Expression) : self.t(parameter.t)

      if Type.match(t, self.tm.get("void")) {
        if parameter.t == nil {
          initializer := parameter.initializer as Parser.Expression
          self.raise(errors.E1017(), initializer.start, initializer.end)
        } else {
          self.raise(errors.E1017(), parameter.t.start, parameter.t.end)
        }
      }

      if parameter.variadic {
        t = self.tm.createArray(t)

        if parameter.initializer != nil {
          self.raise(errors.E1028(), parameter.initializer.start, parameter.initializer.end)
        }
      }

      if parameter.t != nil && parameter.initializer != nil {
        initializerType := self.e(parameter.initializer, Type.opt(t))

        if !Type.similarTo(initializerType, t) {
          self.raise(
            errors.E1005(initializerType.toString(), t.toString()),
            parameter.initializer.start,
            parameter.initializer.end
          )
        }
      }

      parameterNames.push(parameter.name.name)
      self.vm.add(parameter.name.name, t, parameter.mutable)

      result.push(Type.TypeParameter{
        name: parameter.name.name,
        t: t,
        mutable: parameter.mutable,
        required: parameter.initializer == nil && !parameter.variadic,
        variadic: parameter.variadic
      })
    }

    return result
  }

  fn functionParametersLight (mut self: ref Self, parameters: Parser.FunctionParameter[]) Type.TypeParameter[] {
    mut parameterNames: str[]
    mut result: Type.TypeParameter[]
    parametersLen := parameters.len

    loop i := 0; i < parametersLen; i++ {
      parameter := parameters[i]

      mut t := parameter.t == nil
        ? self.e(parameter.initializer as Parser.Expression)
        : self.t(parameter.t)

      if parameter.variadic {
        t = self.tm.createArray(t)
      }

      self.vm.add(parameter.name.name, t, parameter.mutable)

      result.push(Type.TypeParameter{
        name: parameter.name.name,
        t: t,
        mutable: parameter.mutable,
        required: parameter.initializer == nil && !parameter.variadic,
        variadic: parameter.variadic
      })
    }

    return result
  }

  fn guard (mut self: ref Self, cb: () -> void) bool {
    initialErrorsLen := self.analyzer.errors.len
    cb()
    failed := self.analyzer.errors.len != initialErrorsLen

    if failed {
      self.analyzer.errors = self.analyzer.errors.slice(0, initialErrorsLen)
    }

    return failed
  }

  fn guessType (
    mut self: ref Self,
    cb1: ((ref Type.Type)?) -> ref Type.Type,
    cb2: ((ref Type.Type)?) -> ref Type.Type
  ) GuessTypeResult {
    initialErrorsLen := self.analyzer.errors.len
    mut targetType: (ref Type.Type)? = nil
    mut firstType := cb1(targetType)
    firstTypeFailed := self.analyzer.errors.len != initialErrorsLen

    if firstTypeFailed {
      self.analyzer.errors = self.analyzer.errors.slice(0, initialErrorsLen)
    } else {
      targetType = firstType
    }

    secondType := cb2(targetType)
    secondTypeFailed := self.analyzer.errors.len != initialErrorsLen

    if !secondTypeFailed {
      targetType = secondType
    }

    if firstTypeFailed {
      firstType = cb1(targetType)
    }

    return GuessTypeResult{
      first: firstType,
      second: secondType
    }
  }

  fn operands (mut self: ref Self, op: Parser.Token, type1: ref Type.Type, type2: ref Type.Type) bool {
    t1 := Type.unwrap(type1)
    t2 := Type.unwrap(type2)

    if Type.match(t1, self.tm.get("void")) || Type.match(t2, self.tm.get("void")) {
      return false
    }

    if op.t == .OpGt || op.t == .OpGtEq || op.t == .OpLt || op.t == .OpLtEq {
      if (
        !(
          t1.isNumber() ||
          Type.match(t1, self.tm.get("byte")) ||
          Type.match(t1, self.tm.get("char")) ||
          Type.match(t1, self.tm.get("rune")) ||
          Type.match(t1, self.tm.get("str"))
        ) ||
        !(
          t2.isNumber() ||
          Type.match(t2, self.tm.get("byte")) ||
          Type.match(t2, self.tm.get("char")) ||
          Type.match(t2, self.tm.get("rune")) ||
          Type.match(t2, self.tm.get("str"))
        ) ||
        (!Type.similarTo(t1, t2) && !Type.similarTo(t2, t1))
      ) {
        return false
      }
    } elif op.t == .OpPlus || op.t == .OpPlusEq {
      if (
        !(t1.isNumber() || Type.match(t1, self.tm.get("byte")) || Type.match(t1, self.tm.get("str"))) ||
        !(t2.isNumber() || Type.match(t2, self.tm.get("byte")) || Type.match(t2, self.tm.get("str"))) ||
        (!Type.similarTo(t1, t2) && !Type.similarTo(t2, t1))
      ) {
        return false
      }
    } elif (
      op.t == .OpMinus || op.t == .OpMinusEq ||
      op.t == .OpPercent || op.t == .OpPercentEq ||
      op.t == .OpSlash || op.t == .OpSlashEq ||
      op.t == .OpStar || op.t == .OpStarEq
    ) {
      if (
        !(t1.isNumber() || Type.match(t1, self.tm.get("byte"))) ||
        !(t2.isNumber() || Type.match(t2, self.tm.get("byte")))
      ) {
        return false
      }
    } elif op.t == .OpAmpAmp || op.t == .OpAmpAmpEq || op.t == .OpPipePipe || op.t == .OpPipePipeEq {
      if (
        !(t1.isNumber() || Type.match(t1, self.tm.get("bool")) || Type.match(t1, self.tm.get("byte"))) ||
        !(t2.isNumber() || Type.match(t2, self.tm.get("bool")) || Type.match(t2, self.tm.get("byte")))
      ) {
        return false
      }
    } elif (
      op.t == .OpAmp || op.t == .OpAmpEq ||
      op.t == .OpCaret || op.t == .OpCaretEq ||
      op.t == .OpLShift || op.t == .OpLShiftEq ||
      op.t == .OpPipe || op.t == .OpPipeEq ||
      op.t == .OpRShift || op.t == .OpRShiftEq
    ) {
      if !t1.isInt() || !t2.isInt() {
        return false
      }
    }

    return true
  }

  fn raise (mut self: ref Self, message: str, start: int, end: int) {
    error := Parser.Reader_error(ref self.reader, "AnalyzeError", message, start, end)
    self.analyzer.errors.push(error)
  }

  fn statement (mut self: ref Self, it: Parser.Statement) {
    if it.isBlock() {
      statement := it.asBlock()

      self.tm.increase()
      self.vm.increase()
      self.analyze(ref statement.body)
      self.vm.decrease()
      self.tm.decrease()
    } elif it.isBreak() {
      if !it.hasLoopParent() {
        self.raise(errors.E1050("Break"), it.start, it.end)
      }
    } elif it.isContinue() {
      if !it.hasLoopParent() {
        self.raise(errors.E1050("Continue"), it.start, it.end)
      }
    } elif it.isEnumDeclaration() {
      statement := it.asEnumDeclaration()
      membersLen := statement.members.len
      mut members: str[]

      loop i := 0; i < membersLen; i++ {
        member := statement.members[i]

        if members.contains(member.name.name) {
          self.raise(errors.E1052(member.name.name), member.name.start, member.name.end)
        } else {
          members.push(member.name.name)
        }

        if member.initializer == nil {
          continue
        }

        initializer := member.initializer as Parser.Expression
        memberType := self.e(initializer, Type.opt(self.tm.get("int")))

        if !Type.match(memberType, self.tm.get("int")) {
          self.raise(errors.E1053(memberType.toString()), initializer.start, initializer.end)
        }
      }
    } elif it.isExportDeclaration() {
      statement := it.asExportDeclaration()

      if it.hasParent() {
        self.raise(errors.E1044(), it.start, it.end)
      }

      self.statement(statement.statement)
      mut exportIdentifier := Parser.Identifier{}

      if statement.statement.isEnumDeclaration() {
        innerStatement := statement.statement.asEnumDeclaration()
        exportIdentifier = innerStatement.name
      } elif statement.statement.isFunctionDeclaration() {
        innerStatement := statement.statement.asFunctionDeclaration()
        exportIdentifier = innerStatement.name
      } elif statement.statement.isObjectDeclaration() {
        innerStatement := statement.statement.asObjectDeclaration()
        exportIdentifier = innerStatement.name
      } elif statement.statement.isTypeAliasDeclaration() {
        innerStatement := statement.statement.asTypeAliasDeclaration()
        exportIdentifier = innerStatement.name
      } elif statement.statement.isVariableDeclaration() {
        innerStatement := statement.statement.asVariableDeclaration()
        exportIdentifier = innerStatement.name
      } else {
        self.raise(errors.E1066(), it.start, it.end)
        return
      }

      if AnalyzerExport.has(ref self.exports, exportIdentifier.name) {
        self.raise(errors.E1067(exportIdentifier.name), exportIdentifier.start, exportIdentifier.end)
        return
      }

      if !self.entityExists(exportIdentifier.name) {
        return
      }

      mut exportType: (ref Type.Type)?
      mut exportVar: Var?

      if self.tm.has(exportIdentifier.name) {
        exportType = self.tm.get(exportIdentifier.name)
      }

      if self.vm.has(exportIdentifier.name) {
        exportVar = self.vm.get(exportIdentifier.name)
      }

      self.exports.push(Type.NamespaceMember{name: exportIdentifier.name, t: exportType, var: exportVar})
    } elif it.isExportNamedDeclaration() {
      statement := it.asExportNamedDeclaration()

      if it.hasParent() {
        self.raise(errors.E1044(), it.start, it.end)
      }

      if !Parser.validObjExprId(statement.expression) {
        self.raise(errors.E1068(), statement.expression.start, statement.expression.end)
        return
      }

      parserType := Parser.expressionToType(statement.expression)
      mut exportName := ""

      if statement.expression.isIdentifier() {
        expression := statement.expression.asIdentifier()
        exportName = expression.name
      } elif statement.expression.isPropertyAccess() {
        expression := statement.expression.asPropertyAccess()
        exportName = expression.name.name
      }

      if AnalyzerExport.has(ref self.exports, exportName) {
        self.raise(errors.E1067(exportName), statement.expression.start, statement.expression.end)
        return
      }

      mut exportType: (ref Type.Type)?
      mut exportVar: Var?

      guardFailed := self.guard(() -> void {
        initialTC := ref self.tc // todo remove after v1
        exportType = Type.opt(self.t(parserType))
      })

      if guardFailed && !statement.expression.isIdentifier() {
        self.raise(errors.E1068(), statement.expression.start, statement.expression.end)
      } elif guardFailed {
        id := statement.expression.asIdentifier()
        self.e(statement.expression)

        if self.vm.has(id.name) {
          exportVar = self.vm.get(id.name)
        }
      }

      if exportType == nil && exportVar == nil {
        return
      }

      self.exports.push(Type.NamespaceMember{name: exportName, t: exportType, var: exportVar})
    } elif it.isExpression() {
      statement := it.asExpression()
      self.e(statement.expression)

      if !it.hasParent() {
        self.raise(errors.E1049(), it.start, it.end)
      }
    } elif it.isFunctionDeclaration() {
      statement := it.asFunctionDeclaration()
      initialStateReturnType := self.state.returnType
      var := self.vm.get(statement.name.name)

      if !var.t.isFunction() {
        return
      }

      t := var.t.asFunction()

      self.tm.increase()
      self.vm.increase()
      self.functionParameters(statement.parameters)
      self.state.returnType = Type.opt(t.returnType)

      if statement.body != nil {
        if (
          !Type.match(t.returnType, self.tm.get("void")) &&
          !statement.body.isDeadEnd() &&
          statement.returnType != nil
        ) {
          returnType := statement.returnType
          self.raise(errors.E1061(), returnType.start, returnType.end)
        }

        self.statement(statement.body)
      }

      self.state.returnType = initialStateReturnType
      self.vm.decrease()
      self.tm.decrease()
    } elif it.isIf() {
      initialTC := self.tc
      statement := it.asIf()

      if !it.hasParent() {
        self.raise(errors.E1045(), it.start, it.end)
      }

      typeCastResult := self.typeCast(statement.condition)
      conditionType := Type.unwrap(self.e(statement.condition, Type.opt(self.tm.get("bool"))))

      if !Type.match(conditionType, self.tm.get("bool")) {
        self.raise(errors.E1018(conditionType.toString()), statement.condition.start, statement.condition.end)
      }

      self.tc.merge(typeCastResult.consequent)
      self.statement(statement.consequent)
      afterConsequentTC := self.tc
      self.tc = initialTC
      self.tc.merge(typeCastResult.alternate)

      if statement.alternate != nil {
        self.statement(statement.alternate)

        if statement.alternate.isDeadEnd() && !statement.consequent.isDeadEnd() {
          self.tc = afterConsequentTC
        } elif statement.alternate.isDeadEnd() || !statement.consequent.isDeadEnd() {
          self.tc = initialTC
        }
      } elif !statement.consequent.isDeadEnd() {
        self.tc = initialTC
      }
    } elif it.isLoop() {
      initialTC := self.tc
      statement := it.asLoop()
      initialLoopInit := self.state.loopInit

      if !it.hasParent() {
        self.raise(errors.E1046(), it.start, it.end)
      }

      self.tm.increase()
      self.vm.increase()

      if statement.initializer != nil {
        initializer := statement.initializer

        if initializer.isVariableDeclaration() {
          initializerStatement := initializer.asVariableDeclaration()

          if initializerStatement.mutable {
            self.raise(errors.E1059(), initializerStatement.name.start, initializerStatement.name.end)
          }
        }

        self.state.loopInit = true
        self.statement(initializer)
        self.state.loopInit = initialLoopInit
      }

      if statement.condition != nil {
        typeCastResult := self.typeCast(statement.condition)

        conditionType := Type.unwrap(self.e(statement.condition, Type.opt(self.tm.get("bool"))))

        if !Type.match(self.tm.get("bool"), conditionType) {
          self.raise(errors.E1060(conditionType.toString()), statement.condition.start, statement.condition.end)
        }

        self.tc.merge(typeCastResult.consequent)
      }

      if statement.update != nil {
        self.e(statement.update)
      }

      self.statement(statement.body)
      self.vm.decrease()
      self.tm.decrease()

      self.tc = initialTC
    } elif it.isMainDeclaration() {
      statement := it.asMainDeclaration()
      initialReturnType := self.state.returnType

      if it.hasParent() {
        self.raise(errors.E1042(), it.start, it.end)
      }

      if self.analyzer.state.mainFound {
        self.raise(errors.E1070(), it.start, it.end)
      }

      self.state.returnType = Type.opt(self.tm.get("void"))
      self.statement(statement.body)
      self.state.returnType = initialReturnType
      self.analyzer.state.mainFound = true
    } elif it.isObjectDeclaration() {
      statement := it.asObjectDeclaration()
      initialTmSelf := self.tm.getSelf()
      initialStateSelf := self.state.selfType
      t := self.tm.get(statement.name.name)

      self.state.selfType = Type.opt(t)
      self.tm.setSelf(Type.opt(t))
      self.analyze(ref statement.body)
      self.state.selfType = initialStateSelf
      self.tm.setSelf(initialTmSelf)
    } elif it.isObjectDeclarationMethod() {
      statement := it.asObjectDeclarationMethod()
      initialStateReturnType := self.state.returnType
      selfType := self.state.selfType as ref Type.Type
      property := selfType.get(statement.name.name)

      if !property.t.isMethod() {
        return
      }

      t := property.t.asMethod()

      self.tm.increase()
      self.vm.increase()
      self.functionParameters(statement.parameters)
      self.state.returnType = Type.opt(t.returnType)

      if statement.body != nil {
        if (
          !Type.match(t.returnType, self.tm.get("void")) &&
          !statement.body.isDeadEnd() &&
          statement.returnType != nil
        ) {
          self.raise(errors.E1061(), statement.returnType.start, statement.returnType.end)
        }

        self.statement(statement.body)
      }

      self.state.returnType = initialStateReturnType
      self.vm.decrease()
      self.tm.decrease()
    } elif it.isObjectDeclarationProperty() {
      statement := it.asObjectDeclarationProperty()
      selfType := self.state.selfType as ref Type.Type

      propertyType := statement.t == nil
        ? self.e(statement.initializer as Parser.Expression, withMutable: statement.mutable)
        : self.t(statement.t)

      if Type.match(propertyType, self.tm.get("void")) {
        if statement.t == nil {
          initializer := statement.initializer as Parser.Expression
          self.raise(errors.E1017(), initializer.start, initializer.end)
        } else {
          self.raise(errors.E1017(), statement.t.start, statement.t.end)
        }
      }

      if statement.initializer != nil {
        self.raise(errors.E1056(), statement.initializer.start, statement.initializer.end)
      }
    } elif it.isReturn() {
      statement := it.asReturn()

      if !it.hasFunctionOrMainParent() {
        self.raise(errors.E1057(), it.start, it.end)
      }

      returnType := statement.expression == nil
        ? self.tm.get("void")
        : self.e(statement.expression, self.state.returnType)

      if self.state.returnType != nil {
        if !Type.similarTo(returnType, self.state.returnType) {
          if statement.expression == nil {
            self.raise(errors.E1005(returnType.toString(), self.state.returnType.toString()), it.start, it.end)
          } else {
            self.raise(errors.E1005(returnType.toString(), self.state.returnType.toString()), statement.expression.start, statement.expression.end)
          }
        }
      }
    } elif it.isThrow() {
      statement := it.asThrow()

      if !it.hasParent() {
        self.raise(errors.E1047(), it.start, it.end)
      }

      t := self.e(statement.expression)

      if !t.isErrorLike() {
        self.raise(errors.E1062(), statement.expression.start, statement.expression.end)
      }
    } elif it.isTry() {
      statement := it.asTry()

      if !it.hasParent() {
        self.raise(errors.E1048(), it.start, it.end)
      }

      self.tm.increase()
      self.vm.increase()
      self.statement(statement.body)
      self.vm.decrease()
      self.tm.decrease()
      handlersLen := statement.handlers.len

      loop i := 0; i < handlersLen; i++ {
        handler := statement.handlers[i]
        self.tm.increase()
        self.vm.increase()

        parameterStatement := handler.parameter.asVariableDeclaration()

        if parameterStatement.mutable {
          self.raise(errors.E1055(), parameterStatement.name.start, parameterStatement.name.end)
        }

        self.statement(handler.parameter)
        var := self.vm.get(parameterStatement.name.name)

        if !var.t.isErrorLike() {
          self.raise(errors.E1065(), parameterStatement.name.start, parameterStatement.name.end)
        }

        self.statement(handler.body)
        self.vm.decrease()
        self.tm.decrease()
      }
    } elif it.isVariableDeclaration() {
      statement := it.asVariableDeclaration()

      if self.entityExists(statement.name.name) {
        self.raise(errors.E1000(statement.name.name), statement.name.start, statement.name.end)
      }

      varType := statement.t == nil
        ? self.e(statement.initializer as Parser.Expression, withMutable: statement.mutable)
        : self.t(statement.t)

      if Type.match(varType, self.tm.get("void")) {
        if statement.t == nil {
          initializer := statement.initializer as Parser.Expression
          self.raise(errors.E1017(), initializer.start, initializer.end)
        } else {
          self.raise(errors.E1017(), statement.t.start, statement.t.end)
        }
      }

      if statement.t != nil && statement.initializer != nil {
        initializerType := self.e(statement.initializer, Type.opt(varType), withMutable: statement.mutable)

        if !Type.similarTo(initializerType, varType) {
          self.raise(
            errors.E1005(initializerType.toString(), varType.toString()),
            statement.initializer.start,
            statement.initializer.end
          )
        }
      }

      if statement.initializer == nil && varType.isRequired() {
        self.raise(errors.E1040(statement.name.name, varType.toString()), statement.name.start, statement.name.end)
      }

      self.vm.add(statement.name.name, varType, statement.mutable || self.state.loopInit)

      if statement.constant && it.hasParent() {
        parent := it.parent()

        if !parent.isExportDeclaration() {
          self.raise(errors.E1038(), statement.name.start, statement.name.end)
        }
      } elif !statement.constant && !statement.mutable && !it.hasParent() {
        self.raise(errors.E1039(), statement.name.start, statement.name.end)
      } elif !statement.constant && !statement.mutable {
        parent := it.parent()

        if parent.isExportDeclaration() {
          self.raise(errors.E1039(), statement.name.start, statement.name.end)
        }
      }
    }
  }

  fn t (mut self: ref Self, it: Parser.Type) ref Type.Type {
    if it.isArray() {
      t := it.asArray()
      elementType := self.t(t.elementType)

      if Type.match(elementType, self.tm.get("void")) {
        self.raise(errors.E1063(), t.elementType.start, t.elementType.end)
      }

      return self.tm.createArray(elementType)
    } elif it.isFunction() {
      t := it.asFunction()
      mut parameterNames: str[]
      mut parameters: Type.TypeParameter[]
      parametersLen := t.parameters.len

      loop i := 0; i < parametersLen; i++ {
        parameter := t.parameters[i]

        if parameter.name != nil {
          if parameterNames.contains(parameter.name.name) {
            self.raise(errors.E1054(parameter.name.name), parameter.name.start, parameter.name.end)
          } else {
            parameterNames.push(parameter.name.name)
          }
        }

        mut t := self.t(parameter.t)

        if Type.match(t, self.tm.get("void")) {
          self.raise(errors.E1017(), parameter.t.start, parameter.t.end)
        }

        if parameter.variadic {
          t = self.tm.createArray(t)
        }

        parameters.push(Type.TypeParameter{
          name: parameter.name == nil ? nil : parameter.name.name,
          t: parameter.variadic ? self.tm.createArray(self.t(parameter.t)) : self.t(parameter.t),
          mutable: parameter.mutable,
          required: !parameter.variadic,
          variadic: parameter.variadic
        })
      }

      return self.tm.createFunction(t.asynchronous, parameters, self.t(t.returnType))
    } elif it.isIdentifier() {
      t := it.asIdentifier()

      if !self.tm.has(t.name.name) {
        self.raise(errors.E1001(t.name.name), t.name.start, t.name.end)
        return self.tm.get("any")
      }

      return self.tm.get(t.name.name)
    } elif it.isMap() {
      t := it.asMap()
      keyType := self.t(t.keyType)
      valueType := self.t(t.valueType)

      if Type.match(keyType, self.tm.get("void")) {
        self.raise(errors.E1063(), t.keyType.start, t.keyType.end)
      }

      if Type.match(valueType, self.tm.get("void")) {
        self.raise(errors.E1063(), t.valueType.start, t.valueType.end)
      }

      return self.tm.createMap(keyType, valueType)
    } elif it.isMember() {
      t := it.asMember()
      leftType := self.t(t.t)

      if !leftType.isNamespace() {
        self.raise(errors.E1022(leftType.toString()), t.t.start, t.t.end)
        return self.tm.get("any")
      }

      leftNamespace := leftType.asNamespace()

      if AnalyzerExport.has(ref leftNamespace.members, t.name.name) {
        member := AnalyzerExport.get(ref leftNamespace.members, t.name.name)

        if member.t != nil {
          return member.t
        }
      }

      self.raise(errors.E1023(leftType.toString(), t.name.name), t.name.start, t.name.end)
      return self.tm.get("any")
    } elif it.isOptional() {
      t := it.asOptional()
      underlyingType := self.t(t.t)

      if Type.match(underlyingType, self.tm.get("void")) {
        self.raise(errors.E1063(), t.t.start, t.t.end)
      }

      return self.tm.createOptional(underlyingType)
    } elif it.isParenthesized() {
      t := it.asParenthesized()
      return self.t(t.t)
    } elif it.isReference() {
      t := it.asReference()
      underlyingType := self.t(t.t)

      if Type.match(underlyingType, self.tm.get("void")) {
        self.raise(errors.E1063(), t.t.start, t.t.end)
      }

      return self.tm.createReference(underlyingType)
    } elif it.isUnion() {
      t := it.asUnion()
      mut types: (ref Type.Type)[]
      typesLen := t.types.len

      loop i := 0; i < typesLen; i++ {
        parserType := t.types[i] as Parser.Type
        subType := self.t(parserType)

        if Type.match(subType, self.tm.get("void")) {
          self.raise(errors.E1063(), parserType.start, parserType.end)
        }

        types.push(subType)
      }

      return self.tm.createUnion(types)
    }

    throw error_NewError("Tried analyzing unknown type")
  }

  fn typeCast (mut self: ref Self, it: Parser.Expression) TypeCastResult {
    initialTC := self.tc
    mut consequent: (ref Type.Type)[str]
    mut alternate: (ref Type.Type)[str]

    if it.isAssignment() {
      expression := it.asAssignment()

      if expression.operator.t == .OpEq {
        if expression.left.isAccess() {
          leftType := Type.unwrap(self.eNice(expression.left))

          if Type.match(leftType, self.tm.get("any")) || leftType.isOptional() || leftType.isUnion() {
            rightType := Type.unwrap(self.eNice(expression.right))
            code := Parser.stringifyExpression(expression.left)
            consequent.set(code, rightType)
          }
        }
      }
    } elif it.isBinary() {
      expression := it.asBinary()

      if expression.operator.t == .OpAmpAmp || expression.operator.t == .OpPipePipe {
        leftTypeCastResult := self.typeCast(expression.left)

        if expression.operator.t == .OpAmpAmp {
          self.tc.merge(leftTypeCastResult.consequent)
        }

        rightTypeCastResult := self.typeCast(expression.right)
        self.tc = initialTC

        if expression.operator.t == .OpAmpAmp {
          consequent.merge(leftTypeCastResult.consequent)
          consequent.merge(rightTypeCastResult.consequent)
        } else {
          rightTypeCastConsequentKeys := rightTypeCastResult.consequent.keys

          loop i := 0; i < rightTypeCastConsequentKeys.len; i++ {
            name := rightTypeCastConsequentKeys[i]

            if !leftTypeCastResult.consequent.has(name) {
              continue
            }

            t1 := leftTypeCastResult.consequent.get(name)
            t2 := rightTypeCastResult.consequent.get(name)

            if !Type.match(t1, t2) {
              consequent.set(name, self.tm.createUnion([t1, t2]))
            } else {
              consequent.set(name, t2)
            }
          }
        }

        rightTypeCastAlternateKeys := rightTypeCastResult.alternate.keys

        loop i := 0; i < rightTypeCastAlternateKeys.len; i++ {
          name := rightTypeCastAlternateKeys[i]

          if !leftTypeCastResult.alternate.has(name) {
            continue
          }

          t1 := leftTypeCastResult.alternate.get(name)
          t2 := rightTypeCastResult.alternate.get(name)

          if !Type.match(t1, t2) {
            continue
          }

          alternate.set(name, t2)
        }
      } elif expression.operator.t == .OpEqEq || expression.operator.t == .OpExclEq {
        if (
          (expression.left.isAccess() && expression.right.isNilLiteral()) ||
          (expression.right.isAccess() && expression.left.isNilLiteral())
        ) {
          left := expression.left.isAccess() ? expression.left : expression.right
          leftType := Type.unwrap(self.eNice(left))

          if leftType.isOptional() {
            code := Parser.stringifyExpression(left)
            t := leftType.asOptional()

            if expression.operator.t == .OpEqEq {
              alternate.set(code, t.t)
            } else {
              consequent.set(code, t.t)
            }
          }
        }
      }
    } elif it.isIs() {
      expression := it.asIs()

      if expression.expression.isAccess() {
        expressionType := Type.unwrap(self.eNice(expression.expression))

        if Type.match(expressionType, self.tm.get("any")) || expressionType.isOptional() || expressionType.isUnion() {
          t := self.t(expression.t)
          code := Parser.stringifyExpression(expression.expression)
          consequent.set(code, t)

          if expressionType.isUnion() {
            alternate.set(code, self.tm.unionSub(expressionType, t))
          }
        }
      }
    }

    self.tc = initialTC

    return TypeCastResult{
      consequent: consequent,
      alternate: alternate
    }
  }
}

export fn analyze (f: ref Parser.File, hooks := Hooks.Hooks{}) str[] { // todo update docs
  if f.hasErrors {
    return f.errors
  }

  mut analyzer := Analyzer{hooks: hooks}

  analyzer.files.push(AnalyzerFile{
    cwd: process_cwd(),
    analyzer: ref analyzer,
    reader: Parser.Reader_init(f.path == "anonymous" ? f.content : f.path),
  })

  mut file := analyzer.files.last()

  file.tm.init()
  API.TypeMap_globals(ref file.tm)
  API.VarMap_globals(ref file.vm, ref file.tm)
  file.analyze(ref f.program.body)

  return analyzer.errors
}
