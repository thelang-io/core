fn test (a: int..., i := 10, j := 20, o := 30) int { return 10 }
const a := test()
const b := test(1)
const c := test(o: 1)
const d := test(1, 2)
const e := test(1, i: 2)
const f := test(i: 1, j: 2)
===== out =====
FunctionDeclaration(asynchronous=false name=test return=int)
  FunctionParameter(name=a type=int mutable=false variadic=true)
  FunctionParameter(name=i mutable=false variadic=false)
    IntegerLiteral(initial=int value=10)
  FunctionParameter(name=j mutable=false variadic=false)
    IntegerLiteral(initial=int value=20)
  FunctionParameter(name=o mutable=false variadic=false)
    IntegerLiteral(initial=int value=30)
  ReturnStatement()
    IntegerLiteral(initial=int value=10)
VariableDeclaration(name=a mutable=false constant=true context:varType=int)
  CallExpression(initial=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
VariableDeclaration(name=b mutable=false constant=true context:varType=int)
  CallExpression(initial=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument()
      IntegerLiteral(initial=int value=1)
VariableDeclaration(name=c mutable=false constant=true context:varType=int)
  CallExpression(initial=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(name=o)
      IntegerLiteral(initial=int value=1)
VariableDeclaration(name=d mutable=false constant=true context:varType=int)
  CallExpression(initial=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument()
      IntegerLiteral(initial=int value=1)
    CallExpressionArgument()
      IntegerLiteral(initial=int value=2)
VariableDeclaration(name=e mutable=false constant=true context:varType=int)
  CallExpression(initial=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument()
      IntegerLiteral(initial=int value=1)
    CallExpressionArgument(name=i)
      IntegerLiteral(initial=int value=2)
VariableDeclaration(name=f mutable=false constant=true context:varType=int)
  CallExpression(initial=int)
    Identifier(initial=(a: int..., i: int, j: int, o: int) -> int name=test)
    CallExpressionArgument(name=i)
      IntegerLiteral(initial=int value=1)
    CallExpressionArgument(name=j)
      IntegerLiteral(initial=int value=2)
