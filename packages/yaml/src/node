/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

type YAMLNode = YAMLNodeMap | YAMLNodeMapping | YAMLNodeScalar | YAMLNodeSeq

obj YAMLNodeMap {
  mappings: YAMLNodeMapping[]
}

obj YAMLNodeMapping {
  key: YAMLNode
  value: YAMLNode?
}

obj YAMLNodeScalar {
  value: str
}

obj YAMLNodeSeq {
  items: YAMLNode[]
}

fn YAMLNode_stringify (node: YAMLNode, indent := 0) str {
  mut result := ""

  if node is YAMLNodeMap {
    loop i := 0; i < node.mappings.len; i++ {
      n1: YAMLNodeMapping = node.mappings[i]
      n: YAMLNode = n1
      result += YAMLNode_stringify(n, indent + 2)
    }
  }

  if node is YAMLNodeMapping {
    result += ' '.repeat(indent) + YAMLNode_stringify(node.key) + ":"

    if node.value != nil {
      val := node.value
      isValComplex := (val is YAMLNodeMap) || (val is YAMLNodeSeq)
      result += (isValComplex ? os_EOL : " ") + YAMLNode_stringify(val)
      result += isValComplex ? "" : os_EOL
    } else {
      result += os_EOL
    }
  }

  if node is YAMLNodeScalar {
    result += node.value
  }

  if node is YAMLNodeSeq {
    loop i := 0; i < node.items.len; i++ {
      result += ' '.repeat(indent + 2) + "- "
      result += YAMLNode_stringify(node.items[i], indent + 2).trimStart()
      result += os_EOL
    }
  }

  return result
}
