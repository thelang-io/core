/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import Node, NodeMap, NodeMapping, NodeScalar, NodeSeq from "./types"

export fn Node_stringify (node: Node, indent := 0) str {
  mut result := ""

  if node is NodeMap {
    loop i := 0; i < node.mappings.len; i++ {
      n: Node = node.mappings[i] as NodeMapping
      result += Node_stringify(n, indent + 2)
    }
  }

  if node is NodeMapping {
    result += ' '.repeat(indent) + Node_stringify(node.key) + ":"

    if node.value != nil {
      val := node.value
      isValComplex := (val is NodeMap) || (val is NodeSeq)
      result += (isValComplex ? os_EOL : " ") + Node_stringify(val)
      result += isValComplex ? "" : os_EOL
    } else {
      result += os_EOL
    }
  }

  if node is NodeScalar {
    result += node.value
  }

  if node is NodeSeq {
    loop i := 0; i < node.items.len; i++ {
      result += ' '.repeat(indent + 2) + "- "
      result += Node_stringify(node.items[i], indent + 2).trimStart()
      result += os_EOL
    }
  }

  return result
}
