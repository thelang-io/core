/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

// Implementation of: https://openwall.info/wiki/people/solar/software/public-domain-source-code/md5

fn F (x: u32, y: u32, z: u32) u32 {
  return z ^ (x & (y ^ z))
}

fn G (x: u32, y: u32, z: u32) u32 {
  return y ^ (z & (x ^ y))
}

fn H (x: u32, y: u32, z: u32) u32 {
  return (x ^ y) ^ z
}

fn H2 (x: u32, y: u32, z: u32) u32 {
  return x ^ (y ^ z)
}

fn I (x: u32, y: u32, z: u32) u32 {
  return y ^ (x | ~z)
}

fn step (f: (u32, u32, u32) -> u32, a: u32, b: u32, c: u32, d: u32, x: u32, t: u32, s: u32) u32 {
  r := a + f(b, c, d) + x + t
  return ((r << s) | ((r & 0xffffffff) >> (32 - s))) + b
}

export obj MD5 {
  mut buffer: byte[]
  mut block: u32[]

  mut low: u32
  mut high: u32

  mut a: u32
  mut b: u32
  mut c: u32
  mut d: u32

  fn init (mut self: ref Self) {
    self._normalize()
    self.block = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    self.low = 0
    self.high = 0

    self.a = 0x67452301
    self.b = 0xefcdab89
    self.c = 0x98badcfe
    self.d = 0x10325476
  }

  fn update (mut self: ref Self, data: byte[]) {
    mut d := data
    mut l := d.len

    savedLow := self.low
    self.low = (savedLow + l) & 0x1fffffff

    if self.low < savedLow {
      self.high++
    }

    self.high += l >> 29
    used: int = savedLow & 0x3f

    if used {
      available := 64 - used

      if l < available {
        self._copy(used, d)
        return
      }

      self._copy(used, d)
      d = d.slice(available)
      l -= available
      self.buffer = self._body(self.buffer, 64)
      self._normalize()
    }

    if l >= 64 {
      d = self._body(d, l & ~0x3f)
      l &= 0x3f
    }

    self._copy(0, d)
  }

  fn value (mut self: ref Self) byte[] {
    mut used: int = self.low & 0x3f
    self.buffer[used++] = 0x80
    mut available := 64 - used

    if available < 8 {
      self._fill(used, available)
      self.buffer = self._body(self.buffer, 64)
      self._normalize()
      used = 0
      available = 64
    }

    self._fill(used, available - 8)
    self.low <<= 3

    self.buffer[56] = self.low
    self.buffer[57] = self.low >> 8
    self.buffer[58] = self.low >> 16
    self.buffer[59] = self.low >> 24
    self.buffer[60] = self.high
    self.buffer[61] = self.high >> 8
    self.buffer[62] = self.high >> 16
    self.buffer[63] = self.high >> 24

    self.buffer = self._body(self.buffer, 64)

    result: byte[] = [
      self.a,
      self.a >> 8,
      self.a >> 16,
      self.a >> 24,
      self.b,
      self.b >> 8,
      self.b >> 16,
      self.b >> 24,
      self.c,
      self.c >> 8,
      self.c >> 16,
      self.c >> 24,
      self.d,
      self.d >> 8,
      self.d >> 16,
      self.d >> 24,
    ]

    self._reset()
    return result
  }

  fn _body (mut self: ref Self, data: byte[], len: int) byte[] {
    mut d := data
    mut l := len

    loop {
      savedA := self.a
      savedB := self.b
      savedC := self.c
      savedD := self.d

      self._updateBlock(d)

      self.a = step(F, self.a, self.b, self.c, self.d, self.block[0], 0xd76aa478, 7)
      self.d = step(F, self.d, self.a, self.b, self.c, self.block[1], 0xe8c7b756, 12)
      self.c = step(F, self.c, self.d, self.a, self.b, self.block[2], 0x242070db, 17)
      self.b = step(F, self.b, self.c, self.d, self.a, self.block[3], 0xc1bdceee, 22)
      self.a = step(F, self.a, self.b, self.c, self.d, self.block[4], 0xf57c0faf, 7)
      self.d = step(F, self.d, self.a, self.b, self.c, self.block[5], 0x4787c62a, 12)
      self.c = step(F, self.c, self.d, self.a, self.b, self.block[6], 0xa8304613, 17)
      self.b = step(F, self.b, self.c, self.d, self.a, self.block[7], 0xfd469501, 22)
      self.a = step(F, self.a, self.b, self.c, self.d, self.block[8], 0x698098d8, 7)
      self.d = step(F, self.d, self.a, self.b, self.c, self.block[9], 0x8b44f7af, 12)
      self.c = step(F, self.c, self.d, self.a, self.b, self.block[10], 0xffff5bb1, 17)
      self.b = step(F, self.b, self.c, self.d, self.a, self.block[11], 0x895cd7be, 22)
      self.a = step(F, self.a, self.b, self.c, self.d, self.block[12], 0x6b901122, 7)
      self.d = step(F, self.d, self.a, self.b, self.c, self.block[13], 0xfd987193, 12)
      self.c = step(F, self.c, self.d, self.a, self.b, self.block[14], 0xa679438e, 17)
      self.b = step(F, self.b, self.c, self.d, self.a, self.block[15], 0x49b40821, 22)

      self.a = step(G, self.a, self.b, self.c, self.d, self.block[1], 0xf61e2562, 5)
      self.d = step(G, self.d, self.a, self.b, self.c, self.block[6], 0xc040b340, 9)
      self.c = step(G, self.c, self.d, self.a, self.b, self.block[11], 0x265e5a51, 14)
      self.b = step(G, self.b, self.c, self.d, self.a, self.block[0], 0xe9b6c7aa, 20)
      self.a = step(G, self.a, self.b, self.c, self.d, self.block[5], 0xd62f105d, 5)
      self.d = step(G, self.d, self.a, self.b, self.c, self.block[10], 0x02441453, 9)
      self.c = step(G, self.c, self.d, self.a, self.b, self.block[15], 0xd8a1e681, 14)
      self.b = step(G, self.b, self.c, self.d, self.a, self.block[4], 0xe7d3fbc8, 20)
      self.a = step(G, self.a, self.b, self.c, self.d, self.block[9], 0x21e1cde6, 5)
      self.d = step(G, self.d, self.a, self.b, self.c, self.block[14], 0xc33707d6, 9)
      self.c = step(G, self.c, self.d, self.a, self.b, self.block[3], 0xf4d50d87, 14)
      self.b = step(G, self.b, self.c, self.d, self.a, self.block[8], 0x455a14ed, 20)
      self.a = step(G, self.a, self.b, self.c, self.d, self.block[13], 0xa9e3e905, 5)
      self.d = step(G, self.d, self.a, self.b, self.c, self.block[2], 0xfcefa3f8, 9)
      self.c = step(G, self.c, self.d, self.a, self.b, self.block[7], 0x676f02d9, 14)
      self.b = step(G, self.b, self.c, self.d, self.a, self.block[12], 0x8d2a4c8a, 20)

      self.a = step(H, self.a, self.b, self.c, self.d, self.block[5], 0xfffa3942, 4)
      self.d = step(H2, self.d, self.a, self.b, self.c, self.block[8], 0x8771f681, 11)
      self.c = step(H, self.c, self.d, self.a, self.b, self.block[11], 0x6d9d6122, 16)
      self.b = step(H2, self.b, self.c, self.d, self.a, self.block[14], 0xfde5380c, 23)
      self.a = step(H, self.a, self.b, self.c, self.d, self.block[1], 0xa4beea44, 4)
      self.d = step(H2, self.d, self.a, self.b, self.c, self.block[4], 0x4bdecfa9, 11)
      self.c = step(H, self.c, self.d, self.a, self.b, self.block[7], 0xf6bb4b60, 16)
      self.b = step(H2, self.b, self.c, self.d, self.a, self.block[10], 0xbebfbc70, 23)
      self.a = step(H, self.a, self.b, self.c, self.d, self.block[13], 0x289b7ec6, 4)
      self.d = step(H2, self.d, self.a, self.b, self.c, self.block[0], 0xeaa127fa, 11)
      self.c = step(H, self.c, self.d, self.a, self.b, self.block[3], 0xd4ef3085, 16)
      self.b = step(H2, self.b, self.c, self.d, self.a, self.block[6], 0x04881d05, 23)
      self.a = step(H, self.a, self.b, self.c, self.d, self.block[9], 0xd9d4d039, 4)
      self.d = step(H2, self.d, self.a, self.b, self.c, self.block[12], 0xe6db99e5, 11)
      self.c = step(H, self.c, self.d, self.a, self.b, self.block[15], 0x1fa27cf8, 16)
      self.b = step(H2, self.b, self.c, self.d, self.a, self.block[2], 0xc4ac5665, 23)

      self.a = step(I, self.a, self.b, self.c, self.d, self.block[0], 0xf4292244, 6)
      self.d = step(I, self.d, self.a, self.b, self.c, self.block[7], 0x432aff97, 10)
      self.c = step(I, self.c, self.d, self.a, self.b, self.block[14], 0xab9423a7, 15)
      self.b = step(I, self.b, self.c, self.d, self.a, self.block[5], 0xfc93a039, 21)
      self.a = step(I, self.a, self.b, self.c, self.d, self.block[12], 0x655b59c3, 6)
      self.d = step(I, self.d, self.a, self.b, self.c, self.block[3], 0x8f0ccc92, 10)
      self.c = step(I, self.c, self.d, self.a, self.b, self.block[10], 0xffeff47d, 15)
      self.b = step(I, self.b, self.c, self.d, self.a, self.block[1], 0x85845dd1, 21)
      self.a = step(I, self.a, self.b, self.c, self.d, self.block[8], 0x6fa87e4f, 6)
      self.d = step(I, self.d, self.a, self.b, self.c, self.block[15], 0xfe2ce6e0, 10)
      self.c = step(I, self.c, self.d, self.a, self.b, self.block[6], 0xa3014314, 15)
      self.b = step(I, self.b, self.c, self.d, self.a, self.block[13], 0x4e0811a1, 21)
      self.a = step(I, self.a, self.b, self.c, self.d, self.block[4], 0xf7537e82, 6)
      self.d = step(I, self.d, self.a, self.b, self.c, self.block[11], 0xbd3af235, 10)
      self.c = step(I, self.c, self.d, self.a, self.b, self.block[2], 0x2ad7d2bb, 15)
      self.b = step(I, self.b, self.c, self.d, self.a, self.block[9], 0xeb86d391, 21)

      self.a += savedA
      self.b += savedB
      self.c += savedC
      self.d += savedD

      d = d.slice(64)
      l -= 64

      if l <= 0 {
        break
      }
    }

    return d
  }

  fn _copy (mut self: ref Self, position: int, data: byte[]) {
    bl := self.buffer.len
    dl := data.len
    l := position + dl > bl ? bl - position : dl

    loop i := 0; i < l; i++ {
      self.buffer[position + i] = data[i]
    }
  }

  fn _fill (mut self: ref Self, start: int, end: int) {
    loop i := start; i < end; i++ {
      self.buffer[i] = 0
    }
  }

  fn _normalize (mut self: ref Self) {
    l := self.buffer.len
    loop i := 0; i < 64 - l; i++ {
      self.buffer.push(0)
    }
  }

  fn _reset (mut self: ref Self) {
    self.buffer = []
    self.block = []

    self.low = 0
    self.high = 0

    self.a = 0
    self.b = 0
    self.c = 0
    self.d = 0
  }

  fn _updateBlock (mut self: ref Self, data: byte[]) {
    self._updateBlockItem(data, 0)
    self._updateBlockItem(data, 1)
    self._updateBlockItem(data, 2)
    self._updateBlockItem(data, 3)
    self._updateBlockItem(data, 4)
    self._updateBlockItem(data, 5)
    self._updateBlockItem(data, 6)
    self._updateBlockItem(data, 7)
    self._updateBlockItem(data, 8)
    self._updateBlockItem(data, 9)
    self._updateBlockItem(data, 10)
    self._updateBlockItem(data, 11)
    self._updateBlockItem(data, 12)
    self._updateBlockItem(data, 13)
    self._updateBlockItem(data, 14)
    self._updateBlockItem(data, 15)
  }

  fn _updateBlockItem (mut self: ref Self, data: byte[], n: int) {
    self.block[n] =
      data[n * 4] | (data[n * 4 + 1] << 8) | (data[n * 4 + 2] << 16) | (data[n * 4 + 3] << 24)
  }
}

export fn md5 (data: byte[]) byte[] {
  mut algorithm := MD5{}
  algorithm.init()
  algorithm.update(data)
  return algorithm.value()
}
