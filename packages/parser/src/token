/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

fn escapeVal (val: str, xml := false) str {
  mut result := ""

  loop i := 0; i < val.len; i++ {
    ch := val[i]

    if ch == '\f' {
      result += "\\f"
    } elif ch == '\n' {
      result += "\\n"
    } elif ch == '\r' {
      result += "\\r"
    } elif ch == '\t' {
      result += "\\t"
    } elif ch == '\v' {
      result += "\\v"
    } elif ch == '"' && xml {
      result += "\\\""
    } else {
      result += ch.str()
    }
  }

  return result
}

export fn associativity (t: t.TokenType, unary := false) t.TokenAssociativity {
  if (
    (unary && (t == .OpExcl || t == .OpMinus || t == .OpPlus || t == .OpTilde)) ||
    t == .OpAmpEq ||
    t == .OpAmpAmpEq ||
    t == .OpCaretEq ||
    t == .OpEq ||
    t == .OpLShiftEq ||
    t == .OpMinusEq ||
    t == .OpPercentEq ||
    t == .OpPipeEq ||
    t == .OpPipePipeEq ||
    t == .OpPlusEq ||
    t == .OpRShiftEq ||
    t == .OpSlashEq ||
    t == .OpStarEq ||
    t == .OpColon || t == .OpQn
  ) {
    return .Right
  } elif (
    t == .OpDot || t == .OpLBrack || t == .OpRBrack ||
    t == .OpPercent || t == .OpSlash || t == .OpStar ||
    t == .OpMinus || t == .OpPlus ||
    t == .OpLShift || t == .OpRShift ||
    t == .OpGt || t == .OpGtEq || t == .OpLt || t == .OpLtEq ||
    t == .OpEqEq || t == .OpExclEq ||
    t == .OpAmp || t == .OpCaret || t == .OpPipe ||
    t == .OpAmpAmp || t == .OpPipePipe ||
    t == .OpComma
  ) {
    return .Left
  }

  return .None
}

export fn isCharEsc (ch: char) bool {
  return
    ch == '0' ||
    ch == 'b' ||
    ch == 'f' ||
    ch == 'n' ||
    ch == 'r' ||
    ch == 't' ||
    ch == 'v' ||
    ch == '"' ||
    ch == '\'' ||
    ch == '\\'
}

export fn isId (ch: char) bool {
  return ch.isLetterOrDigit || ch == '_'
}

export fn isIdStart (ch: char) bool {
  return ch.isLetter || ch == '_'
}

export fn isIntBin (ch: char) bool {
  return ch == '0' || ch == '1'
}

export fn isIntDec (ch: char) bool {
  return ch.isDigit
}

export fn isIntHex (ch: char) bool {
  return
    ch.isDigit ||
    ch == 'A' || ch == 'a' ||
    ch == 'B' || ch == 'b' ||
    ch == 'C' || ch == 'c' ||
    ch == 'D' || ch == 'd' ||
    ch == 'E' || ch == 'e' ||
    ch == 'F' || ch == 'f'
}

export fn isIntOct (ch: char) bool {
  return
    ch == '0' ||
    ch == '1' ||
    ch == '2' ||
    ch == '3' ||
    ch == '4' ||
    ch == '5' ||
    ch == '6' ||
    ch == '7'
}

export fn isNotNewLine (ch: char) bool {
  return ch != '\n'
}

export fn isStrEsc (ch: char) bool {
  return isCharEsc(ch) || ch == '{'
}

export fn isWhitespace (ch: char) bool {
  return
    ch == ' ' ||
    ch == '\f' ||
    ch == '\n' ||
    ch == '\r' ||
    ch == '\t' ||
    ch == '\v'
}

export fn precedence (t: t.TokenType, unary := false) int {
  if t == .OpLBrace || t == .OpRBrace || t == .OpLPar || t == .OpRPar {
    return 18
  } elif t == .OpDot || t == .OpLBrack || t == .OpRBrack {
    return 17
  } elif t == .OpMinusMinus || t == .OpPlusPlus {
    return 16
  } elif t == .KwAwait || t == .KwRef {
    return 15
  } elif unary && (t == .OpExcl || t == .OpMinus || t == .OpPlus || t == .OpTilde) {
    return 14
  } elif t == .OpPercent || t == .OpSlash || t == .OpStar {
    return 12
  } elif t == .OpMinus || t == .OpPlus {
    return 11
  } elif t == .OpLShift || t == .OpRShift {
    return 10
  } elif (
    t == .KwAs || t == .KwIs ||
    t == .OpGt || t == .OpGtEq ||
    t == .OpLt || t == .OpLtEq
  ) {
    return 9
  } elif t == .OpEqEq || t == .OpExclEq {
    return 8
  } elif t == .OpAmp {
    return 7
  } elif t == .OpCaret {
    return 6
  } elif t == .OpPipe {
    return 5
  } elif t == .OpAmpAmp {
    return 4
  } elif t == .OpPipePipe {
    return 3
  } elif (
    t == .OpAmpEq ||
    t == .OpAmpAmpEq ||
    t == .OpCaretEq ||
    t == .OpEq ||
    t == .OpLShiftEq ||
    t == .OpMinusEq ||
    t == .OpPercentEq ||
    t == .OpPipeEq ||
    t == .OpPipePipeEq ||
    t == .OpPlusEq ||
    t == .OpRShiftEq ||
    t == .OpSlashEq ||
    t == .OpStarEq ||
    t == .OpColon || t == .OpQn ||
    t == .OpArrow
  ) {
    return 2
  } elif t == .OpComma {
    return 1
  }

  throw error_NewError("Tried precedence on unknown token")
}

export fn toStr (tk: t.Token) str {
  val := escapeVal(tk.val)
  return tk.t.rawValue +
    "(start=" + tk.start.str() + " end=" + tk.end.str() + ")" +
    (val.empty ? "" : " " + val)
}

export fn toXML (tk: t.Token) str {
  return
    "<Token" +
    " type=\"" + tk.t.rawValue + "\"" +
    " val=\"" + escapeVal(tk.val, true) + "\"" +
    " start=\"" + tk.start.str() + "\"" +
    " end=\"" + tk.end.str() + "\"" +
    " />"
}

export fn typeToIntegerLiteralType (tokenType: t.TokenType) t.IntegerLiteralType {
  if tokenType == .LitIntBin { return .Binary }
  elif tokenType == .LitIntDec { return .Decimal }
  elif tokenType == .LitIntHex { return .Hexadecimal }
  else { return .Octal }
}
