/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

fn escapeVal (val: str, xml := false) str {
  mut result := ""

  loop i := 0; i < val.len; i++ {
    ch := val[i]

    if ch == '\f' {
      result += "\\f"
    } elif ch == '\n' {
      result += "\\n"
    } elif ch == '\r' {
      result += "\\r"
    } elif ch == '\t' {
      result += "\\t"
    } elif ch == '\v' {
      result += "\\v"
    } elif ch == '"' && xml {
      result += "\\\""
    } else {
      result += ch.str()
    }
  }

  return result
}

export fn isCharEsc (ch: char) bool {
  return
    ch == '0' ||
    ch == 'b' ||
    ch == 'f' ||
    ch == 'n' ||
    ch == 'r' ||
    ch == 't' ||
    ch == 'v' ||
    ch == '"' ||
    ch == '\'' ||
    ch == '\\'
}

export fn isId (ch: char) bool {
  return ch.isLetterOrDigit || ch == '_'
}

export fn isIdStart (ch: char) bool {
  return ch.isLetter || ch == '_'
}

export fn isIntBin (ch: char) bool {
  return ch == '0' || ch == '1'
}

export fn isIntDec (ch: char) bool {
  return ch.isDigit
}

export fn isIntHex (ch: char) bool {
  return
    ch.isDigit ||
    ch == 'A' || ch == 'a' ||
    ch == 'B' || ch == 'b' ||
    ch == 'C' || ch == 'c' ||
    ch == 'D' || ch == 'd' ||
    ch == 'E' || ch == 'e' ||
    ch == 'F' || ch == 'f'
}

export fn isIntOct (ch: char) bool {
  return
    ch == '0' ||
    ch == '1' ||
    ch == '2' ||
    ch == '3' ||
    ch == '4' ||
    ch == '5' ||
    ch == '6' ||
    ch == '7'
}

export fn isNotNewLine (ch: char) bool {
  return ch != '\n'
}

export fn isStrEsc (ch: char) bool {
  return isCharEsc(ch) || ch == '{'
}

export fn isWhitespace (ch: char) bool {
  return
    ch == ' ' ||
    ch == '\f' ||
    ch == '\n' ||
    ch == '\r' ||
    ch == '\t' ||
    ch == '\v'
}

export fn toStr (tk: t.Token) str {
  val := escapeVal(tk.val)
  loc := "(" + tk.start.str() + "-" + tk.end.str() + ")"

  return tk.t.rawValue + loc + (val.empty ? "" : ": " + val)
}

export fn toXML (tk: t.Token) str {
  return
    "<Token" +
    " type=\"" + tk.t.rawValue + "\"" +
    " val=\"" + escapeVal(tk.val, true) + "\"" +
    " start=\"" + tk.start.str() + "\"" +
    " end=\"" + tk.end.str() + "\"" +
    " />"
}
