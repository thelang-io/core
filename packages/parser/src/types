/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export type Expression =
  CallExpression |
  Identifier |
  NumericLiteral |
  ParenthesizedExpression |
  StringLiteral

export obj CallExpression {
  start: int
  end: int
  callee: Expression
  arguments: Expression[]
}

export obj Identifier {
  start: int
  end: int
  name: str
}

export enum NumericLiteralType {
  Binary,
  Decimal,
  Hexadecimal,
  Octal
}

export obj NumericLiteral {
  start: int
  end: int
  t: NumericLiteralType
  value: str
}

export obj ParenthesizedExpression {
  start: int
  end: int
  expression: Expression
}

export obj StringLiteral {
  start: int
  end: int
  raw: str
  value: str
}

export type Statement =
  BlockStatement |
  EmptyStatement |
  ExpressionStatement |
  FunctionDeclaration |
  ImportDeclaration |
  MainDeclaration

export obj BlockStatement {
  start: int
  end: int
  body: Statement[]
}

export obj EmptyStatement {
  start: int
  end: int
}

export obj ExpressionStatement {
  start: int
  end: int
  expression: Expression
}

export obj FunctionDeclaration {
  start: int
  end: int
  id: Expression
}

export obj ImportSpecifier {
  start: int
  end: int
  imported: Expression
  local: Expression
}

export obj ImportNamespaceSpecifier {
  start: int
  end: int
  local: Expression
}

export type ImportDeclarationSpecifier = ImportSpecifier | ImportNamespaceSpecifier

export obj ImportDeclaration {
  start: int
  end: int
  specifiers: ImportDeclarationSpecifier[]
  source: Expression
}

export obj MainDeclaration {
  start: int
  end: int
  body: Statement
}

export obj File {
  path: str
  errors: str[]
  hasErrors: bool
  mut program: Program
}

export obj Location {
  mut line: int
  mut col: int
}

export obj Program {
  body: Statement[]
}

export enum TokenAssociativity {
  None,
  Left,
  Right,
}

export enum TokenType {
  Unknown,
  Eof,
  Id,
  Whitespace,

  CommentBlock,
  CommentLine,

  LitChar,
  LitFloat,
  LitIntBin,
  LitIntDec,
  LitIntHex,
  LitIntOct,
  LitStr,

  KwAs,
  KwAsync,
  KwAwait,
  KwBreak,
  KwCatch,
  KwConst,
  KwContinue,
  KwElif,
  KwElse,
  KwEnum,
  KwExport,
  KwFalse,
  KwFn,
  KwFrom,
  KwIf,
  KwImport,
  KwIs,
  KwLoop,
  KwMain,
  KwMut,
  KwNil,
  KwObj,
  KwRef,
  KwReturn,
  KwThrow,
  KwTrue,
  KwTry,
  KwType,

  OpAmp,
  OpAmpEq,
  OpAmpAmp,
  OpAmpAmpEq,
  OpArrow,
  OpAt,
  OpBacktick,
  OpBackslash,
  OpCaret,
  OpCaretEq,
  OpColon,
  OpColonEq,
  OpComma,
  OpDot,
  OpDollar,
  OpEllipsis,
  OpEq,
  OpEqEq,
  OpExcl,
  OpExclEq,
  OpGt,
  OpGtEq,
  OpHash,
  OpLBrace,
  OpLBrack,
  OpLPar,
  OpLShift,
  OpLShiftEq,
  OpLt,
  OpLtEq,
  OpMinus,
  OpMinusEq,
  OpMinusMinus,
  OpPipe,
  OpPipeEq,
  OpPipePipe,
  OpPipePipeEq,
  OpPercent,
  OpPercentEq,
  OpPlus,
  OpPlusEq,
  OpPlusPlus,
  OpQn,
  OpRBrace,
  OpRBrack,
  OpRPar,
  OpRShift,
  OpRShiftEq,
  OpSemi,
  OpSlash,
  OpSlashEq,
  OpStar,
  OpStarEq,
  OpTilde,
}

export obj TokenizerState {
  mut idx: int
  mut pos: int
  mut ch: char
  mut handled: bool
}
