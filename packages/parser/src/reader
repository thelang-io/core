/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

export obj Reader {
  path: str
  content: str
  contentLen: int
  mut pos: int

  fn eof (self: ref Self) bool {
    return self.pos >= self.contentLen
  }

  fn lookahead (mut self: ref Self, check: char) bool {
    if check == '\n' && os_NAME == "Windows" && self.content.slice(self.pos, self.pos + 2) == "\r\n" {
      self.pos += 2
      return true
    } elif self.pos < self.contentLen && self.content[self.pos] == check {
      self.pos += 1
      return true
    }

    return false
  }

  fn next (mut self: ref Self) char {
    if self.eof() {
      throw error_NewError("Tried next on Reader eof")
    } elif os_NAME == "Windows" && self.content.slice(self.pos, self.pos + 2) == "\r\n" {
      self.pos++
    }

    return self.content[self.pos++]
  }

  fn seek (mut self: ref Self, pos: int) {
    self.pos = pos
  }

  fn slice (self: ref Self, start: int, end: int) str {
    return self.content.slice(start, end)
  }

  fn walk (mut self: ref Self, match: (char) -> bool) {
    loop !self.eof() {
      pos := self.pos
      ch := self.next()

      if !match(ch) {
        self.seek(pos)
        break
      }
    }
  }
}

export fn init (pathOrCode: str) Reader {
  if (
    pathOrCode.slice(0, 2) != "./" &&
    !(pathOrCode.slice(0, 1) == "/" && pathOrCode.slice(0, 2) != "//" && pathOrCode.slice(0, 2) != "/*") &&
    pathOrCode.slice(1, 3) != ":\\"
  ) {
    return Reader{path: "anonymous", content: pathOrCode, contentLen: pathOrCode.len}
  }

  mut p: str

  try {
    p = fs_realpathSync(pathOrCode)
  } catch err: error_Error {
    throw t.ParserError{message: "Path `" + pathOrCode + "` doesn't exists"}
  }

  if !fs_isFileSync(p) {
    throw t.ParserError{message: "Path `" + pathOrCode + "` is not a file"}
  }

  content := fs_readFileSync(p).str()
  return Reader{path: p, content: content, contentLen: content.len}
}

export fn locate (reader: ref Reader, pos: int) t.Location {
  if pos == 0 {
    return t.Location{line: 1, col: 1}
  }

  lines := reader.content.lines(keepLineBreaks: true)
  mut curPos := 0

  loop i := 0; i < lines.len; i++ {
    line := lines[i]

    if curPos + line.len > pos {
      return t.Location{line: i + 1, col: pos - curPos + 1}
    }

    curPos += line.len
  }

  return t.Location{line: lines.len, col: lines[-1].len + 1}
}
