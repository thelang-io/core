/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

export obj Reader {
  path: str
  content: str
  contentLen: int
  mut pos: int

  fn eof (self: ref Self) bool {
    return self.pos >= self.contentLen
  }

  fn lookahead (mut self: ref Self, check: char) bool {
    if self.pos < self.contentLen && self.content[self.pos] == check {
      self.pos += 1
      return true
    }

    return false
  }

  fn next (mut self: ref Self) char {
    if self.eof() {
      throw error_NewError("Tried next on Reader eof")
    }

    return self.content[self.pos++]
  }

  fn seek (mut self: ref Self, pos: int) {
    self.pos = pos
  }

  fn slice (self: ref Self, start: int, end: int) str {
    return self.content.slice(start, end)
  }

  fn walk (mut self: ref Self, match: (char) -> bool) {
    loop !self.eof() {
      pos := self.pos
      ch := self.next()

      if !match(ch) {
        self.seek(pos)
        break
      }
    }
  }
}

export fn init (pathOrCode: str) Reader {
  if (
    pathOrCode.slice(0, 2) != "./" &&
    !(pathOrCode.slice(0, 1) == "/" && pathOrCode.slice(0, 2) != "//" && pathOrCode.slice(0, 2) != "/*") &&
    pathOrCode.slice(1, 3) != ":\\"
  ) {
    actualContent := pathOrCode.replace("\r\n", "\n")
    return Reader{path: "anonymous", content: actualContent, contentLen: actualContent.len}
  }

  mut p: str

  try {
    p = fs_realpathSync(pathOrCode)
  } catch err: error_Error {
    throw t.ParserError{message: "Path `" + pathOrCode + "` doesn't exists"}
  }

  if !fs_isFileSync(p) {
    throw t.ParserError{message: "Path `" + pathOrCode + "` is not a file"}
  }

  content := fs_readFileSync(p).str().replace("\r\n", "\n")
  return Reader{path: p, content: content, contentLen: content.len}
}

export fn error (mut reader: ref Reader, errorType: str, message: str, start: int, end: int) str {
  startLoc := locate(reader, start)
  endLoc := locate(reader, end)
  lines := reader.content.lines()

  mut errorLines: str[]
  mut errorLinesNumbers: int[]

  if startLoc.line != 1 {
    errorLines.push(lines[startLoc.line - 2])
    errorLinesNumbers.push(startLoc.line - 1)
  }

  errorLines.push(lines[startLoc.line - 1])
  errorLinesNumbers.push(startLoc.line)

  if startLoc.line == endLoc.line && (startLoc.col == endLoc.col || startLoc.col + 1 == endLoc.col) {
    errorLines.push(' '.repeat(startLoc.col - 1) + "^")
  } elif startLoc.line == endLoc.line {
    errorLines.push(' '.repeat(startLoc.col - 1) + '~'.repeat(endLoc.col - startLoc.col))
  } else {
    errorLine := lines[startLoc.line - 1]
    errorLines.push(' '.repeat(startLoc.col - 1) + '~'.repeat(errorLine.len - startLoc.col + 1))
  }

  errorLinesNumbers.push(startLoc.line)

  if startLoc.line != lines.len && !lines[startLoc.line].empty {
    errorLines.push(lines[startLoc.line])
    errorLinesNumbers.push(startLoc.line + 1)
  }

  gutterLen := errorLinesNumbers[-1].str().len + 1

  mut error := reader.path + ":" + startLoc.line.str() + ":" +
    startLoc.col.str() + ": " + errorType + ": " + message + os_EOL

  mut prevLineNum := 0

  loop i := 0; i < errorLinesNumbers.len; i++ {
    errorLineNum := errorLinesNumbers[i]

    if prevLineNum == errorLineNum {
      error += ' '.repeat(gutterLen)
    } else {
      errorLineNumLen := errorLineNum.str().len
      error += errorLineNum.str() + ' '.repeat(gutterLen - errorLineNumLen)
    }

    error += "| " + errorLines[i] + os_EOL
    prevLineNum = errorLineNum
  }

  return error
}

export fn locate (reader: ref Reader, pos: int) t.Location {
  if pos == 0 {
    return t.Location{line: 1, col: 1}
  }

  lines := reader.content.lines(keepLineBreaks: true)
  mut curPos := 0

  loop i := 0; i < lines.len; i++ {
    line := lines[i]

    if curPos + line.len > pos {
      return t.Location{line: i + 1, col: pos - curPos + 1}
    }

    curPos += line.len
  }

  return t.Location{line: lines.len, col: lines[-1].len + 1}
}
