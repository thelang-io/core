/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

export fn create (body: t.ExpressionBody, start: int, end: int) t.Expression {
  return t.Expression{body: body, start: start, end: end}
}

export fn dummy () t.Expression {
  return create(t.DummyExpression{}, 0, 0)
}

export fn dummyIdentifier () t.Identifier {
  return t.Identifier{start: 0, end: 0, name: ""}
}

export fn endsWithObjExpr (self: t.Expression) bool {
  if self.isAssignment() {
    selfBody := self.asAssignment()
    return endsWithObjExpr(selfBody.right)
  } elif self.isAwait() {
    selfBody := self.asAwait()
    return endsWithObjExpr(selfBody.expression)
  } elif self.isBinary() {
    selfBody := self.asBinary()
    return endsWithObjExpr(selfBody.right)
  } elif self.isConditional() {
    selfBody := self.asConditional()
    return endsWithObjExpr(selfBody.alternate)
  } elif self.isReference() {
    selfBody := self.asReference()
    return endsWithObjExpr(selfBody.expression)
  } elif self.isUnary() {
    selfBody := self.asUnary()
    if selfBody.prefix {
      return endsWithObjExpr(selfBody.operand)
    }
  }

  return self.isObject()
}

export fn extractLastObjExpr (self: t.Expression) t.ObjectExpression {
  if self.isAssignment() {
    selfBody := self.asAssignment()
    return extractLastObjExpr(selfBody.right)
  } elif self.isAwait() {
    selfBody := self.asAwait()
    return extractLastObjExpr(selfBody.expression)
  } elif self.isBinary() {
    selfBody := self.asBinary()
    return extractLastObjExpr(selfBody.right)
  } elif self.isConditional() {
    selfBody := self.asConditional()
    return extractLastObjExpr(selfBody.alternate)
  } elif self.isObject() {
    return self.asObject()
  } elif self.isReference() {
    selfBody := self.asReference()
    return extractLastObjExpr(selfBody.expression)
  } elif self.isUnary() {
    selfBody := self.asUnary()

    if selfBody.prefix {
      return extractLastObjExpr(selfBody.operand)
    }
  }

  throw error_NewError("Unable to extract last object expression")
}

export fn subtractLastObjExpr (self: t.Expression) t.Expression {
  if self.isAssignment() {
    selfBody := self.asAssignment()
    return create(t.AssignmentExpression{
      left: selfBody.left,
      operator: selfBody.operator,
      right: subtractLastObjExpr(selfBody.right)
    }, self.start, self.end)
  } elif self.isAwait() {
    selfBody := self.asAwait()
    return create(t.AwaitExpression{
      expression: subtractLastObjExpr(selfBody.expression)
    }, self.start, self.end)
  } elif self.isBinary() {
    selfBody := self.asBinary()
    return create(t.BinaryExpression{
      left: selfBody.left,
      operator: selfBody.operator,
      right: subtractLastObjExpr(selfBody.right)
    }, self.start, self.end)
  } elif self.isConditional() {
    selfBody := self.asConditional()
    return create(t.ConditionalExpression{
      condition: selfBody.condition,
      consequent: selfBody.consequent,
      alternate: subtractLastObjExpr(selfBody.alternate)
    }, self.start, self.end)
  } elif self.isObject() {
    selfBody := self.asObject()
    return typeToExpression(selfBody.id)
  } elif self.isReference() {
    selfBody := self.asReference()
    return create(t.ReferenceExpression{
      expression: subtractLastObjExpr(selfBody.expression)
    }, self.start, self.end)
  } elif self.isUnary() {
    selfBody := self.asUnary()
    if selfBody.prefix {
      return create(t.UnaryExpression{
        operator: selfBody.operator,
        operand: subtractLastObjExpr(selfBody.operand),
        prefix: selfBody.prefix
      }, self.start, self.end)
    }
  }

  return self
}

export fn toType (self: t.Expression) t.Type {
  if self.isIdentifier() {
    selfBody := self.asIdentifier()

    return t.Type{
      body: t.IdentifierType{name: selfBody},
      start: self.start,
      end: self.end
    }
  } elif self.isPropertyAccess() {
    selfBody := self.asPropertyAccess()

    return t.Type{
      body: t.MemberType{t: toType(selfBody.expression), name: selfBody.name},
      start: self.start,
      end: self.end
    }
  }

  throw error_NewError("Unable to transform expression to type")
}

export fn typeToExpression (self: t.Type) t.Expression {
  if self.isIdentifier() {
    selfBody := self.asIdentifier()

    return t.Expression{
      body: selfBody.name,
      start: self.start,
      end: self.end
    }
  } elif self.isMember() {
    selfBody := self.asMember()

    return t.Expression{
      body: t.PropertyAccessExpression{expression: typeToExpression(selfBody.t), name: selfBody.name},
      start: self.start,
      end: self.end
    }
  }

  throw error_NewError("Unable to transform type to expression")
}

export fn validObjExprId (self: t.Expression) bool {
  if self.isIdentifier() {
    return true
  } elif self.isPropertyAccess() {
    selfBody := self.asPropertyAccess()
    return validObjExprId(selfBody.expression)
  }

  return false
}
