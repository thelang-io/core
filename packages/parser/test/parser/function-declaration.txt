fn test () void
async fn test () void
fn test (a: int) int
fn test (mut a: int = 2, b := 3, c: int...) int

fn test () {}
async fn test () {}
fn test (a: int) int {}
fn test (mut a: int = 2, b := 3, c: int...) int {
  a = b + c
  return 1 + 2
}
===== out =====
Program
  FunctionDeclaration(start=0, end=15)
    name
      Identifier(start=3 end=7) test
    returnType
      IdentifierType(start=11 end=15)
        Identifier(start=11 end=15) void
  FunctionDeclaration(start=15, end=37 async)
    name
      Identifier(start=25 end=29) test
    returnType
      IdentifierType(start=33 end=37)
        Identifier(start=33 end=37) void
  FunctionDeclaration(start=37, end=58)
    name
      Identifier(start=41 end=45) test
    parameters
      FunctionParameter
        name
          Identifier(start=47 end=48) a
        type
          IdentifierType(start=50 end=53)
            Identifier(start=50 end=53) int
    returnType
      IdentifierType(start=55 end=58)
        Identifier(start=55 end=58) int
  FunctionDeclaration(start=58, end=106)
    name
      Identifier(start=62 end=66) test
    parameters
      FunctionParameter(mut)
        name
          Identifier(start=72 end=73) a
        type
          IdentifierType(start=75 end=78)
            Identifier(start=75 end=78) int
        initializer
          IntegerLiteral(start=81, end=82 type=Decimal) 2
      FunctionParameter
        name
          Identifier(start=84 end=85) b
        initializer
          IntegerLiteral(start=89, end=90 type=Decimal) 3
      FunctionParameter(variadic)
        name
          Identifier(start=92 end=93) c
        type
          IdentifierType(start=95 end=98)
            Identifier(start=95 end=98) int
    returnType
      IdentifierType(start=103 end=106)
        Identifier(start=103 end=106) int
  FunctionDeclaration(start=106, end=121)
    name
      Identifier(start=111 end=115) test
    body
      BlockStatement(start=119, end=121)
  FunctionDeclaration(start=121, end=141 async)
    name
      Identifier(start=131 end=135) test
    body
      BlockStatement(start=139, end=141)
  FunctionDeclaration(start=141, end=165)
    name
      Identifier(start=145 end=149) test
    parameters
      FunctionParameter
        name
          Identifier(start=151 end=152) a
        type
          IdentifierType(start=154 end=157)
            Identifier(start=154 end=157) int
    returnType
      IdentifierType(start=159 end=162)
        Identifier(start=159 end=162) int
    body
      BlockStatement(start=163, end=165)
  FunctionDeclaration(start=165, end=244)
    name
      Identifier(start=169 end=173) test
    parameters
      FunctionParameter(mut)
        name
          Identifier(start=179 end=180) a
        type
          IdentifierType(start=182 end=185)
            Identifier(start=182 end=185) int
        initializer
          IntegerLiteral(start=188, end=189 type=Decimal) 2
      FunctionParameter
        name
          Identifier(start=191 end=192) b
        initializer
          IntegerLiteral(start=196, end=197 type=Decimal) 3
      FunctionParameter(variadic)
        name
          Identifier(start=199 end=200) c
        type
          IdentifierType(start=202 end=205)
            Identifier(start=202 end=205) int
    returnType
      IdentifierType(start=210 end=213)
        Identifier(start=210 end=213) int
    body
      BlockStatement(start=214, end=244)
        ExpressionStatement(start=218, end=227)
          AssignmentExpression(start=218, end=227)
            left
              Identifier(start=218 end=219) a
            op
              OpEq(start=220 end=221) =
            right
              BinaryExpression(start=222, end=227)
                left
                  Identifier(start=222 end=223) b
                op
                  OpPlus(start=224 end=225) +
                right
                  Identifier(start=226 end=227) c
        ReturnStatement(start=230, end=242)
          BinaryExpression(start=237, end=242)
            left
              IntegerLiteral(start=237, end=238 type=Decimal) 1
            op
              OpPlus(start=239 end=240) +
            right
              IntegerLiteral(start=241, end=242 type=Decimal) 2
  EofStatement(start=244, end=244)
