a := async
b := (a) + (1);
async () -> void {};
fn();
c: async[];
d: (ref int);
import * amount;
import / amount;
loop {
  if true {}
}
loop {
  "test" + "test"
}
===== out =====
Program
  VariableDeclaration(start=0, end=10)
    name
      Identifier(start=0 end=1) a
    initializer
      Identifier(start=5 end=10) async
  VariableDeclaration(start=11, end=26)
    name
      Identifier(start=11 end=12) b
    initializer
      BinaryExpression(start=16, end=25)
        left
          ParenthesizedExpression(start=16, end=19)
            Identifier(start=17 end=18) a
        op
          OpPlus(start=20 end=21) +
        right
          ParenthesizedExpression(start=22, end=25)
            IntegerLiteral(start=23, end=24 type=Decimal) 1
  ExpressionStatement(start=27, end=47)
    ClosureExpression(start=27, end=46 async)
      returnType
        IdentifierType(start=39 end=43)
          Identifier(start=39 end=43) void
      body
        BlockStatement(start=44, end=46)
  ExpressionStatement(start=48, end=53)
    CallExpression(start=48, end=52)
      callee
        Identifier(start=48 end=50) fn
  VariableDeclaration(start=54, end=65)
    name
      Identifier(start=54 end=55) c
    type
      ArrayType(start=57 end=64)
        IdentifierType(start=57 end=62)
          Identifier(start=57 end=62) async
  VariableDeclaration(start=66, end=79)
    name
      Identifier(start=66 end=67) d
    type
      ParenthesizedType(start=69 end=78)
        ReferenceType(start=70 end=77)
          IdentifierType(start=74 end=77)
            Identifier(start=74 end=77) int
  ExpressionStatement(start=80, end=96)
    BinaryExpression(start=80, end=95)
      left
        Identifier(start=80 end=86) import
      op
        OpStar(start=87 end=88) *
      right
        Identifier(start=89 end=95) amount
  ExpressionStatement(start=97, end=113)
    BinaryExpression(start=97, end=112)
      left
        Identifier(start=97 end=103) import
      op
        OpSlash(start=104 end=105) /
      right
        Identifier(start=106 end=112) amount
  LoopStatement(start=114, end=135)
    body
      BlockStatement(start=119, end=135)
        IfStatement(start=123, end=133)
          condition
            BooleanLiteral(start=126, end=130) true
          consequent
            BlockStatement(start=131, end=133)
  LoopStatement(start=136, end=162)
    body
      BlockStatement(start=141, end=162)
        ExpressionStatement(start=145, end=160)
          BinaryExpression(start=145, end=160)
            left
              StringLiteral(start=145, end=151) test
            op
              OpPlus(start=152 end=153) +
            right
              StringLiteral(start=154, end=160) test
  EofStatement(start=162, end=162)
