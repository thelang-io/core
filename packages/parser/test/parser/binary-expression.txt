a & b
a && b
a ^ b
a == b
a != b
a > b
a >= b
a << b
a < b
a <= b
a - b
a % b
a | b
a || b
a + b
a >> b
a * b
===== out =====
Program
  ExpressionStatement(start=0, end=5)
    BinaryExpression(start=0, end=5)
      left
        Identifier(start=0 end=1) a
      op
        OpAmp(start=2 end=3) &
      right
        Identifier(start=4 end=5) b
  ExpressionStatement(start=6, end=12)
    BinaryExpression(start=6, end=12)
      left
        Identifier(start=6 end=7) a
      op
        OpAmpAmp(start=8 end=10) &&
      right
        Identifier(start=11 end=12) b
  ExpressionStatement(start=13, end=18)
    BinaryExpression(start=13, end=18)
      left
        Identifier(start=13 end=14) a
      op
        OpCaret(start=15 end=16) ^
      right
        Identifier(start=17 end=18) b
  ExpressionStatement(start=19, end=25)
    BinaryExpression(start=19, end=25)
      left
        Identifier(start=19 end=20) a
      op
        OpEqEq(start=21 end=23) ==
      right
        Identifier(start=24 end=25) b
  ExpressionStatement(start=26, end=32)
    BinaryExpression(start=26, end=32)
      left
        Identifier(start=26 end=27) a
      op
        OpExclEq(start=28 end=30) !=
      right
        Identifier(start=31 end=32) b
  ExpressionStatement(start=33, end=38)
    BinaryExpression(start=33, end=38)
      left
        Identifier(start=33 end=34) a
      op
        OpGt(start=35 end=36) >
      right
        Identifier(start=37 end=38) b
  ExpressionStatement(start=39, end=45)
    BinaryExpression(start=39, end=45)
      left
        Identifier(start=39 end=40) a
      op
        OpGtEq(start=41 end=43) >=
      right
        Identifier(start=44 end=45) b
  ExpressionStatement(start=46, end=52)
    BinaryExpression(start=46, end=52)
      left
        Identifier(start=46 end=47) a
      op
        OpLShift(start=48 end=50) <<
      right
        Identifier(start=51 end=52) b
  ExpressionStatement(start=53, end=58)
    BinaryExpression(start=53, end=58)
      left
        Identifier(start=53 end=54) a
      op
        OpLt(start=55 end=56) <
      right
        Identifier(start=57 end=58) b
  ExpressionStatement(start=59, end=65)
    BinaryExpression(start=59, end=65)
      left
        Identifier(start=59 end=60) a
      op
        OpLtEq(start=61 end=63) <=
      right
        Identifier(start=64 end=65) b
  ExpressionStatement(start=66, end=71)
    BinaryExpression(start=66, end=71)
      left
        Identifier(start=66 end=67) a
      op
        OpMinus(start=68 end=69) -
      right
        Identifier(start=70 end=71) b
  ExpressionStatement(start=72, end=77)
    BinaryExpression(start=72, end=77)
      left
        Identifier(start=72 end=73) a
      op
        OpPercent(start=74 end=75) %
      right
        Identifier(start=76 end=77) b
  ExpressionStatement(start=78, end=83)
    BinaryExpression(start=78, end=83)
      left
        Identifier(start=78 end=79) a
      op
        OpPipe(start=80 end=81) |
      right
        Identifier(start=82 end=83) b
  ExpressionStatement(start=84, end=90)
    BinaryExpression(start=84, end=90)
      left
        Identifier(start=84 end=85) a
      op
        OpPipePipe(start=86 end=88) ||
      right
        Identifier(start=89 end=90) b
  ExpressionStatement(start=91, end=96)
    BinaryExpression(start=91, end=96)
      left
        Identifier(start=91 end=92) a
      op
        OpPlus(start=93 end=94) +
      right
        Identifier(start=95 end=96) b
  ExpressionStatement(start=97, end=103)
    BinaryExpression(start=97, end=103)
      left
        Identifier(start=97 end=98) a
      op
        OpRShift(start=99 end=101) >>
      right
        Identifier(start=102 end=103) b
  ExpressionStatement(start=104, end=109)
    BinaryExpression(start=104, end=109)
      left
        Identifier(start=104 end=105) a
      op
        OpStar(start=106 end=107) *
      right
        Identifier(start=108 end=109) b
  EofStatement(start=109, end=109)
