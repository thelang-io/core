p := "test" == test as str
p := z = a = 1
p := z = a = b = 1
p := z = 1 + (a = 3)
p := z = 1 + 2 + (a = 3) + (b = 4)
p := z = 1 + 3 + (a = b = 3)
p := z = a = b()
p := z = a = b = c()
p := z = true ? 1 : a = 1
p := z = true ? 1 : a = b = 1
p := z = a = Test{a: 1}
p := z = a = b = Test{a: 1}
p := z = a = !b
p := z = a = b = !c
p := await test1() + await test2()
p := b = 2 + 1
p := (b = 2) + 1
p := b = 2 + 1 - 1
p := (b = 2) + 1 - 1
p := a + b + 1
p := (a + b) + 1
p := a + b + 1 - 1
p := (a + b) + 1 - 1
p := a + b / 1
p := (a + b) / 1
p := a + b / 1 - 1
p := (a + b) / 1 - 1
p := a() + b()
p := a() + b() + c()
p := a() + (b() + c())
p := true ? 1 : a + b + 1
p := (true ? 1 : a) + b + 1
p := true ? 1 : a + b / 1
p := (true ? 1 : a + b) / 1
p := 1 + 2 + 3
p := (1 + 2) + 3
p := 1 + 2 + 3 + Test{a: 1}
p := (1 + 2 + 3) + Test{a: 1}
p := -a + ~b + c++
p := (-a + ~b) + c++
p := -a + ~b + c++ - --d
p := (-a + ~b + c++) - --d
p := a = b()
p := a = b = c()
p := a + b()
p := a + b + c()
p := false ? 1 : a()
p := !a()
p := () -> void {} == () -> void {}
p := a = true ? 1 : 2
p := a = b = true ? 1 : 2
p := true ? a = 1 : 2
p := true ? a = b = 1 : 2
p := a = false ? 1 : 2 + true ? 3 : 4
p := a = (false ? 1 : 2) + true ? 3 : 4
p := false ? 1 : true ? 2 : 3
p := false ? 1 : a = true ? 2 : 3
p := !false ? ~b : -c
p := !(false ? ~b : -c)
p := true == test is str
p := a = { "a": 1 }
p := a = b = { "a": 1 }
p := a + { "a": 1 }
p := a + b + { "a": 1 }
p := false ? 1 : { "a": 1 }
p := !{ "a": 1 }
p := a = Test{a: 1}
p := a = b = Test{a: 1}
p := a + Test{a: 1}
p := a + b + Test{a: 1}
p := false ? 1 : Test{a: 1}
p := !Test{a: 1}
p := a = b++
p := a = b = c--
p := a = b + c++
p := a = b + c + d++
p := a = false ? 1 : b++
p := a = false ? 1 : false ? 1 : b++
p := a = !i--
p := a = ~!i++
===== out =====
Program
  VariableDeclaration(start=0, end=26)
    name
      Identifier(start=0 end=1) p
    initializer
      BinaryExpression(start=5, end=26)
        left
          StringLiteral(start=5, end=11) test
        op
          OpEqEq(start=12 end=14) ==
        right
          AsExpression(start=15, end=26)
            expression
              Identifier(start=15 end=19) test
            type
              IdentifierType(start=23 end=26)
                Identifier(start=23 end=26) str
  VariableDeclaration(start=26, end=41)
    name
      Identifier(start=27 end=28) p
    initializer
      AssignmentExpression(start=32, end=41)
        left
          Identifier(start=32 end=33) z
        op
          OpEq(start=34 end=35) =
        right
          AssignmentExpression(start=36, end=41)
            left
              Identifier(start=36 end=37) a
            op
              OpEq(start=38 end=39) =
            right
              IntegerLiteral(start=40, end=41 type=Decimal) 1
  VariableDeclaration(start=41, end=60)
    name
      Identifier(start=42 end=43) p
    initializer
      AssignmentExpression(start=47, end=60)
        left
          Identifier(start=47 end=48) z
        op
          OpEq(start=49 end=50) =
        right
          AssignmentExpression(start=51, end=60)
            left
              Identifier(start=51 end=52) a
            op
              OpEq(start=53 end=54) =
            right
              AssignmentExpression(start=55, end=60)
                left
                  Identifier(start=55 end=56) b
                op
                  OpEq(start=57 end=58) =
                right
                  IntegerLiteral(start=59, end=60 type=Decimal) 1
  VariableDeclaration(start=60, end=81)
    name
      Identifier(start=61 end=62) p
    initializer
      AssignmentExpression(start=66, end=81)
        left
          Identifier(start=66 end=67) z
        op
          OpEq(start=68 end=69) =
        right
          BinaryExpression(start=70, end=81)
            left
              IntegerLiteral(start=70, end=71 type=Decimal) 1
            op
              OpPlus(start=72 end=73) +
            right
              ParenthesizedExpression(start=74, end=81)
                AssignmentExpression(start=75, end=80)
                  left
                    Identifier(start=75 end=76) a
                  op
                    OpEq(start=77 end=78) =
                  right
                    IntegerLiteral(start=79, end=80 type=Decimal) 3
  VariableDeclaration(start=81, end=116)
    name
      Identifier(start=82 end=83) p
    initializer
      AssignmentExpression(start=87, end=116)
        left
          Identifier(start=87 end=88) z
        op
          OpEq(start=89 end=90) =
        right
          BinaryExpression(start=91, end=116)
            left
              BinaryExpression(start=91, end=106)
                left
                  BinaryExpression(start=91, end=96)
                    left
                      IntegerLiteral(start=91, end=92 type=Decimal) 1
                    op
                      OpPlus(start=93 end=94) +
                    right
                      IntegerLiteral(start=95, end=96 type=Decimal) 2
                op
                  OpPlus(start=97 end=98) +
                right
                  ParenthesizedExpression(start=99, end=106)
                    AssignmentExpression(start=100, end=105)
                      left
                        Identifier(start=100 end=101) a
                      op
                        OpEq(start=102 end=103) =
                      right
                        IntegerLiteral(start=104, end=105 type=Decimal) 3
            op
              OpPlus(start=107 end=108) +
            right
              ParenthesizedExpression(start=109, end=116)
                AssignmentExpression(start=110, end=115)
                  left
                    Identifier(start=110 end=111) b
                  op
                    OpEq(start=112 end=113) =
                  right
                    IntegerLiteral(start=114, end=115 type=Decimal) 4
  VariableDeclaration(start=116, end=145)
    name
      Identifier(start=117 end=118) p
    initializer
      AssignmentExpression(start=122, end=145)
        left
          Identifier(start=122 end=123) z
        op
          OpEq(start=124 end=125) =
        right
          BinaryExpression(start=126, end=145)
            left
              BinaryExpression(start=126, end=131)
                left
                  IntegerLiteral(start=126, end=127 type=Decimal) 1
                op
                  OpPlus(start=128 end=129) +
                right
                  IntegerLiteral(start=130, end=131 type=Decimal) 3
            op
              OpPlus(start=132 end=133) +
            right
              ParenthesizedExpression(start=134, end=145)
                AssignmentExpression(start=135, end=144)
                  left
                    Identifier(start=135 end=136) a
                  op
                    OpEq(start=137 end=138) =
                  right
                    AssignmentExpression(start=139, end=144)
                      left
                        Identifier(start=139 end=140) b
                      op
                        OpEq(start=141 end=142) =
                      right
                        IntegerLiteral(start=143, end=144 type=Decimal) 3
  VariableDeclaration(start=145, end=162)
    name
      Identifier(start=146 end=147) p
    initializer
      AssignmentExpression(start=151, end=162)
        left
          Identifier(start=151 end=152) z
        op
          OpEq(start=153 end=154) =
        right
          AssignmentExpression(start=155, end=162)
            left
              Identifier(start=155 end=156) a
            op
              OpEq(start=157 end=158) =
            right
              CallExpression(start=159, end=162)
                callee
                  Identifier(start=159 end=160) b
  VariableDeclaration(start=162, end=183)
    name
      Identifier(start=163 end=164) p
    initializer
      AssignmentExpression(start=168, end=183)
        left
          Identifier(start=168 end=169) z
        op
          OpEq(start=170 end=171) =
        right
          AssignmentExpression(start=172, end=183)
            left
              Identifier(start=172 end=173) a
            op
              OpEq(start=174 end=175) =
            right
              AssignmentExpression(start=176, end=183)
                left
                  Identifier(start=176 end=177) b
                op
                  OpEq(start=178 end=179) =
                right
                  CallExpression(start=180, end=183)
                    callee
                      Identifier(start=180 end=181) c
  VariableDeclaration(start=183, end=209)
    name
      Identifier(start=184 end=185) p
    initializer
      AssignmentExpression(start=189, end=209)
        left
          Identifier(start=189 end=190) z
        op
          OpEq(start=191 end=192) =
        right
          ConditionalExpression(start=193, end=209)
            condition
              BooleanLiteral(start=193, end=197) true
            consequent
              IntegerLiteral(start=200, end=201 type=Decimal) 1
            alternate
              AssignmentExpression(start=204, end=209)
                left
                  Identifier(start=204 end=205) a
                op
                  OpEq(start=206 end=207) =
                right
                  IntegerLiteral(start=208, end=209 type=Decimal) 1
  VariableDeclaration(start=209, end=239)
    name
      Identifier(start=210 end=211) p
    initializer
      AssignmentExpression(start=215, end=239)
        left
          Identifier(start=215 end=216) z
        op
          OpEq(start=217 end=218) =
        right
          ConditionalExpression(start=219, end=239)
            condition
              BooleanLiteral(start=219, end=223) true
            consequent
              IntegerLiteral(start=226, end=227 type=Decimal) 1
            alternate
              AssignmentExpression(start=230, end=239)
                left
                  Identifier(start=230 end=231) a
                op
                  OpEq(start=232 end=233) =
                right
                  AssignmentExpression(start=234, end=239)
                    left
                      Identifier(start=234 end=235) b
                    op
                      OpEq(start=236 end=237) =
                    right
                      IntegerLiteral(start=238, end=239 type=Decimal) 1
  VariableDeclaration(start=239, end=263)
    name
      Identifier(start=240 end=241) p
    initializer
      AssignmentExpression(start=245, end=263)
        left
          Identifier(start=245 end=246) z
        op
          OpEq(start=247 end=248) =
        right
          AssignmentExpression(start=249, end=263)
            left
              Identifier(start=249 end=250) a
            op
              OpEq(start=251 end=252) =
            right
              ObjectExpression(start=253, end=263)
                id
                  IdentifierType(start=253 end=257)
                    Identifier(start=253 end=257) Test
                properties
                  ObjectExpressionProperty
                    name
                      Identifier(start=258 end=259) a
                    value
                      IntegerLiteral(start=261, end=262 type=Decimal) 1
  VariableDeclaration(start=263, end=291)
    name
      Identifier(start=264 end=265) p
    initializer
      AssignmentExpression(start=269, end=291)
        left
          Identifier(start=269 end=270) z
        op
          OpEq(start=271 end=272) =
        right
          AssignmentExpression(start=273, end=291)
            left
              Identifier(start=273 end=274) a
            op
              OpEq(start=275 end=276) =
            right
              AssignmentExpression(start=277, end=291)
                left
                  Identifier(start=277 end=278) b
                op
                  OpEq(start=279 end=280) =
                right
                  ObjectExpression(start=281, end=291)
                    id
                      IdentifierType(start=281 end=285)
                        Identifier(start=281 end=285) Test
                    properties
                      ObjectExpressionProperty
                        name
                          Identifier(start=286 end=287) a
                        value
                          IntegerLiteral(start=289, end=290 type=Decimal) 1
  VariableDeclaration(start=291, end=307)
    name
      Identifier(start=292 end=293) p
    initializer
      AssignmentExpression(start=297, end=307)
        left
          Identifier(start=297 end=298) z
        op
          OpEq(start=299 end=300) =
        right
          AssignmentExpression(start=301, end=307)
            left
              Identifier(start=301 end=302) a
            op
              OpEq(start=303 end=304) =
            right
              UnaryExpression(start=305, end=307 prefix)
                operator
                  OpExcl(start=305 end=306) !
                operand
                  Identifier(start=306 end=307) b
  VariableDeclaration(start=307, end=327)
    name
      Identifier(start=308 end=309) p
    initializer
      AssignmentExpression(start=313, end=327)
        left
          Identifier(start=313 end=314) z
        op
          OpEq(start=315 end=316) =
        right
          AssignmentExpression(start=317, end=327)
            left
              Identifier(start=317 end=318) a
            op
              OpEq(start=319 end=320) =
            right
              AssignmentExpression(start=321, end=327)
                left
                  Identifier(start=321 end=322) b
                op
                  OpEq(start=323 end=324) =
                right
                  UnaryExpression(start=325, end=327 prefix)
                    operator
                      OpExcl(start=325 end=326) !
                    operand
                      Identifier(start=326 end=327) c
  VariableDeclaration(start=327, end=362)
    name
      Identifier(start=328 end=329) p
    initializer
      BinaryExpression(start=333, end=362)
        left
          AwaitExpression(start=333, end=346)
            CallExpression(start=339, end=346)
              callee
                Identifier(start=339 end=344) test1
        op
          OpPlus(start=347 end=348) +
        right
          AwaitExpression(start=349, end=362)
            CallExpression(start=355, end=362)
              callee
                Identifier(start=355 end=360) test2
  VariableDeclaration(start=362, end=377)
    name
      Identifier(start=363 end=364) p
    initializer
      AssignmentExpression(start=368, end=377)
        left
          Identifier(start=368 end=369) b
        op
          OpEq(start=370 end=371) =
        right
          BinaryExpression(start=372, end=377)
            left
              IntegerLiteral(start=372, end=373 type=Decimal) 2
            op
              OpPlus(start=374 end=375) +
            right
              IntegerLiteral(start=376, end=377 type=Decimal) 1
  VariableDeclaration(start=377, end=394)
    name
      Identifier(start=378 end=379) p
    initializer
      BinaryExpression(start=383, end=394)
        left
          ParenthesizedExpression(start=383, end=390)
            AssignmentExpression(start=384, end=389)
              left
                Identifier(start=384 end=385) b
              op
                OpEq(start=386 end=387) =
              right
                IntegerLiteral(start=388, end=389 type=Decimal) 2
        op
          OpPlus(start=391 end=392) +
        right
          IntegerLiteral(start=393, end=394 type=Decimal) 1
  VariableDeclaration(start=394, end=413)
    name
      Identifier(start=395 end=396) p
    initializer
      AssignmentExpression(start=400, end=413)
        left
          Identifier(start=400 end=401) b
        op
          OpEq(start=402 end=403) =
        right
          BinaryExpression(start=404, end=413)
            left
              BinaryExpression(start=404, end=409)
                left
                  IntegerLiteral(start=404, end=405 type=Decimal) 2
                op
                  OpPlus(start=406 end=407) +
                right
                  IntegerLiteral(start=408, end=409 type=Decimal) 1
            op
              OpMinus(start=410 end=411) -
            right
              IntegerLiteral(start=412, end=413 type=Decimal) 1
  VariableDeclaration(start=413, end=434)
    name
      Identifier(start=414 end=415) p
    initializer
      BinaryExpression(start=419, end=434)
        left
          BinaryExpression(start=419, end=430)
            left
              ParenthesizedExpression(start=419, end=426)
                AssignmentExpression(start=420, end=425)
                  left
                    Identifier(start=420 end=421) b
                  op
                    OpEq(start=422 end=423) =
                  right
                    IntegerLiteral(start=424, end=425 type=Decimal) 2
            op
              OpPlus(start=427 end=428) +
            right
              IntegerLiteral(start=429, end=430 type=Decimal) 1
        op
          OpMinus(start=431 end=432) -
        right
          IntegerLiteral(start=433, end=434 type=Decimal) 1
  VariableDeclaration(start=434, end=449)
    name
      Identifier(start=435 end=436) p
    initializer
      BinaryExpression(start=440, end=449)
        left
          BinaryExpression(start=440, end=445)
            left
              Identifier(start=440 end=441) a
            op
              OpPlus(start=442 end=443) +
            right
              Identifier(start=444 end=445) b
        op
          OpPlus(start=446 end=447) +
        right
          IntegerLiteral(start=448, end=449 type=Decimal) 1
  VariableDeclaration(start=449, end=466)
    name
      Identifier(start=450 end=451) p
    initializer
      BinaryExpression(start=455, end=466)
        left
          ParenthesizedExpression(start=455, end=462)
            BinaryExpression(start=456, end=461)
              left
                Identifier(start=456 end=457) a
              op
                OpPlus(start=458 end=459) +
              right
                Identifier(start=460 end=461) b
        op
          OpPlus(start=463 end=464) +
        right
          IntegerLiteral(start=465, end=466 type=Decimal) 1
  VariableDeclaration(start=466, end=485)
    name
      Identifier(start=467 end=468) p
    initializer
      BinaryExpression(start=472, end=485)
        left
          BinaryExpression(start=472, end=481)
            left
              BinaryExpression(start=472, end=477)
                left
                  Identifier(start=472 end=473) a
                op
                  OpPlus(start=474 end=475) +
                right
                  Identifier(start=476 end=477) b
            op
              OpPlus(start=478 end=479) +
            right
              IntegerLiteral(start=480, end=481 type=Decimal) 1
        op
          OpMinus(start=482 end=483) -
        right
          IntegerLiteral(start=484, end=485 type=Decimal) 1
  VariableDeclaration(start=485, end=506)
    name
      Identifier(start=486 end=487) p
    initializer
      BinaryExpression(start=491, end=506)
        left
          BinaryExpression(start=491, end=502)
            left
              ParenthesizedExpression(start=491, end=498)
                BinaryExpression(start=492, end=497)
                  left
                    Identifier(start=492 end=493) a
                  op
                    OpPlus(start=494 end=495) +
                  right
                    Identifier(start=496 end=497) b
            op
              OpPlus(start=499 end=500) +
            right
              IntegerLiteral(start=501, end=502 type=Decimal) 1
        op
          OpMinus(start=503 end=504) -
        right
          IntegerLiteral(start=505, end=506 type=Decimal) 1
  VariableDeclaration(start=506, end=521)
    name
      Identifier(start=507 end=508) p
    initializer
      BinaryExpression(start=512, end=521)
        left
          Identifier(start=512 end=513) a
        op
          OpPlus(start=514 end=515) +
        right
          BinaryExpression(start=516, end=521)
            left
              Identifier(start=516 end=517) b
            op
              OpSlash(start=518 end=519) /
            right
              IntegerLiteral(start=520, end=521 type=Decimal) 1
  VariableDeclaration(start=521, end=538)
    name
      Identifier(start=522 end=523) p
    initializer
      BinaryExpression(start=527, end=538)
        left
          ParenthesizedExpression(start=527, end=534)
            BinaryExpression(start=528, end=533)
              left
                Identifier(start=528 end=529) a
              op
                OpPlus(start=530 end=531) +
              right
                Identifier(start=532 end=533) b
        op
          OpSlash(start=535 end=536) /
        right
          IntegerLiteral(start=537, end=538 type=Decimal) 1
  VariableDeclaration(start=538, end=557)
    name
      Identifier(start=539 end=540) p
    initializer
      BinaryExpression(start=544, end=557)
        left
          BinaryExpression(start=544, end=553)
            left
              Identifier(start=544 end=545) a
            op
              OpPlus(start=546 end=547) +
            right
              BinaryExpression(start=548, end=553)
                left
                  Identifier(start=548 end=549) b
                op
                  OpSlash(start=550 end=551) /
                right
                  IntegerLiteral(start=552, end=553 type=Decimal) 1
        op
          OpMinus(start=554 end=555) -
        right
          IntegerLiteral(start=556, end=557 type=Decimal) 1
  VariableDeclaration(start=557, end=578)
    name
      Identifier(start=558 end=559) p
    initializer
      BinaryExpression(start=563, end=578)
        left
          BinaryExpression(start=563, end=574)
            left
              ParenthesizedExpression(start=563, end=570)
                BinaryExpression(start=564, end=569)
                  left
                    Identifier(start=564 end=565) a
                  op
                    OpPlus(start=566 end=567) +
                  right
                    Identifier(start=568 end=569) b
            op
              OpSlash(start=571 end=572) /
            right
              IntegerLiteral(start=573, end=574 type=Decimal) 1
        op
          OpMinus(start=575 end=576) -
        right
          IntegerLiteral(start=577, end=578 type=Decimal) 1
  VariableDeclaration(start=578, end=593)
    name
      Identifier(start=579 end=580) p
    initializer
      BinaryExpression(start=584, end=593)
        left
          CallExpression(start=584, end=587)
            callee
              Identifier(start=584 end=585) a
        op
          OpPlus(start=588 end=589) +
        right
          CallExpression(start=590, end=593)
            callee
              Identifier(start=590 end=591) b
  VariableDeclaration(start=593, end=614)
    name
      Identifier(start=594 end=595) p
    initializer
      BinaryExpression(start=599, end=614)
        left
          BinaryExpression(start=599, end=608)
            left
              CallExpression(start=599, end=602)
                callee
                  Identifier(start=599 end=600) a
            op
              OpPlus(start=603 end=604) +
            right
              CallExpression(start=605, end=608)
                callee
                  Identifier(start=605 end=606) b
        op
          OpPlus(start=609 end=610) +
        right
          CallExpression(start=611, end=614)
            callee
              Identifier(start=611 end=612) c
  VariableDeclaration(start=614, end=637)
    name
      Identifier(start=615 end=616) p
    initializer
      BinaryExpression(start=620, end=637)
        left
          CallExpression(start=620, end=623)
            callee
              Identifier(start=620 end=621) a
        op
          OpPlus(start=624 end=625) +
        right
          ParenthesizedExpression(start=626, end=637)
            BinaryExpression(start=627, end=636)
              left
                CallExpression(start=627, end=630)
                  callee
                    Identifier(start=627 end=628) b
              op
                OpPlus(start=631 end=632) +
              right
                CallExpression(start=633, end=636)
                  callee
                    Identifier(start=633 end=634) c
  VariableDeclaration(start=637, end=663)
    name
      Identifier(start=638 end=639) p
    initializer
      ConditionalExpression(start=643, end=663)
        condition
          BooleanLiteral(start=643, end=647) true
        consequent
          IntegerLiteral(start=650, end=651 type=Decimal) 1
        alternate
          BinaryExpression(start=654, end=663)
            left
              BinaryExpression(start=654, end=659)
                left
                  Identifier(start=654 end=655) a
                op
                  OpPlus(start=656 end=657) +
                right
                  Identifier(start=658 end=659) b
            op
              OpPlus(start=660 end=661) +
            right
              IntegerLiteral(start=662, end=663 type=Decimal) 1
  VariableDeclaration(start=663, end=691)
    name
      Identifier(start=664 end=665) p
    initializer
      BinaryExpression(start=669, end=691)
        left
          BinaryExpression(start=669, end=687)
            left
              ParenthesizedExpression(start=669, end=683)
                ConditionalExpression(start=670, end=682)
                  condition
                    BooleanLiteral(start=670, end=674) true
                  consequent
                    IntegerLiteral(start=677, end=678 type=Decimal) 1
                  alternate
                    Identifier(start=681 end=682) a
            op
              OpPlus(start=684 end=685) +
            right
              Identifier(start=686 end=687) b
        op
          OpPlus(start=688 end=689) +
        right
          IntegerLiteral(start=690, end=691 type=Decimal) 1
  VariableDeclaration(start=691, end=717)
    name
      Identifier(start=692 end=693) p
    initializer
      ConditionalExpression(start=697, end=717)
        condition
          BooleanLiteral(start=697, end=701) true
        consequent
          IntegerLiteral(start=704, end=705 type=Decimal) 1
        alternate
          BinaryExpression(start=708, end=717)
            left
              Identifier(start=708 end=709) a
            op
              OpPlus(start=710 end=711) +
            right
              BinaryExpression(start=712, end=717)
                left
                  Identifier(start=712 end=713) b
                op
                  OpSlash(start=714 end=715) /
                right
                  IntegerLiteral(start=716, end=717 type=Decimal) 1
  VariableDeclaration(start=717, end=745)
    name
      Identifier(start=718 end=719) p
    initializer
      BinaryExpression(start=723, end=745)
        left
          ParenthesizedExpression(start=723, end=741)
            ConditionalExpression(start=724, end=740)
              condition
                BooleanLiteral(start=724, end=728) true
              consequent
                IntegerLiteral(start=731, end=732 type=Decimal) 1
              alternate
                BinaryExpression(start=735, end=740)
                  left
                    Identifier(start=735 end=736) a
                  op
                    OpPlus(start=737 end=738) +
                  right
                    Identifier(start=739 end=740) b
        op
          OpSlash(start=742 end=743) /
        right
          IntegerLiteral(start=744, end=745 type=Decimal) 1
  VariableDeclaration(start=745, end=760)
    name
      Identifier(start=746 end=747) p
    initializer
      BinaryExpression(start=751, end=760)
        left
          BinaryExpression(start=751, end=756)
            left
              IntegerLiteral(start=751, end=752 type=Decimal) 1
            op
              OpPlus(start=753 end=754) +
            right
              IntegerLiteral(start=755, end=756 type=Decimal) 2
        op
          OpPlus(start=757 end=758) +
        right
          IntegerLiteral(start=759, end=760 type=Decimal) 3
  VariableDeclaration(start=760, end=777)
    name
      Identifier(start=761 end=762) p
    initializer
      BinaryExpression(start=766, end=777)
        left
          ParenthesizedExpression(start=766, end=773)
            BinaryExpression(start=767, end=772)
              left
                IntegerLiteral(start=767, end=768 type=Decimal) 1
              op
                OpPlus(start=769 end=770) +
              right
                IntegerLiteral(start=771, end=772 type=Decimal) 2
        op
          OpPlus(start=774 end=775) +
        right
          IntegerLiteral(start=776, end=777 type=Decimal) 3
  VariableDeclaration(start=777, end=805)
    name
      Identifier(start=778 end=779) p
    initializer
      BinaryExpression(start=783, end=805)
        left
          BinaryExpression(start=783, end=792)
            left
              BinaryExpression(start=783, end=788)
                left
                  IntegerLiteral(start=783, end=784 type=Decimal) 1
                op
                  OpPlus(start=785 end=786) +
                right
                  IntegerLiteral(start=787, end=788 type=Decimal) 2
            op
              OpPlus(start=789 end=790) +
            right
              IntegerLiteral(start=791, end=792 type=Decimal) 3
        op
          OpPlus(start=793 end=794) +
        right
          ObjectExpression(start=795, end=805)
            id
              IdentifierType(start=795 end=799)
                Identifier(start=795 end=799) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=800 end=801) a
                value
                  IntegerLiteral(start=803, end=804 type=Decimal) 1
  VariableDeclaration(start=805, end=835)
    name
      Identifier(start=806 end=807) p
    initializer
      BinaryExpression(start=811, end=835)
        left
          ParenthesizedExpression(start=811, end=822)
            BinaryExpression(start=812, end=821)
              left
                BinaryExpression(start=812, end=817)
                  left
                    IntegerLiteral(start=812, end=813 type=Decimal) 1
                  op
                    OpPlus(start=814 end=815) +
                  right
                    IntegerLiteral(start=816, end=817 type=Decimal) 2
              op
                OpPlus(start=818 end=819) +
              right
                IntegerLiteral(start=820, end=821 type=Decimal) 3
        op
          OpPlus(start=823 end=824) +
        right
          ObjectExpression(start=825, end=835)
            id
              IdentifierType(start=825 end=829)
                Identifier(start=825 end=829) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=830 end=831) a
                value
                  IntegerLiteral(start=833, end=834 type=Decimal) 1
  VariableDeclaration(start=835, end=854)
    name
      Identifier(start=836 end=837) p
    initializer
      BinaryExpression(start=841, end=854)
        left
          BinaryExpression(start=841, end=848)
            left
              UnaryExpression(start=841, end=843 prefix)
                operator
                  OpMinus(start=841 end=842) -
                operand
                  Identifier(start=842 end=843) a
            op
              OpPlus(start=844 end=845) +
            right
              UnaryExpression(start=846, end=848 prefix)
                operator
                  OpTilde(start=846 end=847) ~
                operand
                  Identifier(start=847 end=848) b
        op
          OpPlus(start=849 end=850) +
        right
          UnaryExpression(start=851, end=854)
            operand
              Identifier(start=851 end=852) c
            operator
              OpPlusPlus(start=852 end=854) ++
  VariableDeclaration(start=854, end=875)
    name
      Identifier(start=855 end=856) p
    initializer
      BinaryExpression(start=860, end=875)
        left
          ParenthesizedExpression(start=860, end=869)
            BinaryExpression(start=861, end=868)
              left
                UnaryExpression(start=861, end=863 prefix)
                  operator
                    OpMinus(start=861 end=862) -
                  operand
                    Identifier(start=862 end=863) a
              op
                OpPlus(start=864 end=865) +
              right
                UnaryExpression(start=866, end=868 prefix)
                  operator
                    OpTilde(start=866 end=867) ~
                  operand
                    Identifier(start=867 end=868) b
        op
          OpPlus(start=870 end=871) +
        right
          UnaryExpression(start=872, end=875)
            operand
              Identifier(start=872 end=873) c
            operator
              OpPlusPlus(start=873 end=875) ++
  VariableDeclaration(start=875, end=900)
    name
      Identifier(start=876 end=877) p
    initializer
      BinaryExpression(start=881, end=900)
        left
          BinaryExpression(start=881, end=894)
            left
              BinaryExpression(start=881, end=888)
                left
                  UnaryExpression(start=881, end=883 prefix)
                    operator
                      OpMinus(start=881 end=882) -
                    operand
                      Identifier(start=882 end=883) a
                op
                  OpPlus(start=884 end=885) +
                right
                  UnaryExpression(start=886, end=888 prefix)
                    operator
                      OpTilde(start=886 end=887) ~
                    operand
                      Identifier(start=887 end=888) b
            op
              OpPlus(start=889 end=890) +
            right
              UnaryExpression(start=891, end=894)
                operand
                  Identifier(start=891 end=892) c
                operator
                  OpPlusPlus(start=892 end=894) ++
        op
          OpMinus(start=895 end=896) -
        right
          UnaryExpression(start=897, end=900 prefix)
            operator
              OpMinusMinus(start=897 end=899) --
            operand
              Identifier(start=899 end=900) d
  VariableDeclaration(start=900, end=927)
    name
      Identifier(start=901 end=902) p
    initializer
      BinaryExpression(start=906, end=927)
        left
          ParenthesizedExpression(start=906, end=921)
            BinaryExpression(start=907, end=920)
              left
                BinaryExpression(start=907, end=914)
                  left
                    UnaryExpression(start=907, end=909 prefix)
                      operator
                        OpMinus(start=907 end=908) -
                      operand
                        Identifier(start=908 end=909) a
                  op
                    OpPlus(start=910 end=911) +
                  right
                    UnaryExpression(start=912, end=914 prefix)
                      operator
                        OpTilde(start=912 end=913) ~
                      operand
                        Identifier(start=913 end=914) b
              op
                OpPlus(start=915 end=916) +
              right
                UnaryExpression(start=917, end=920)
                  operand
                    Identifier(start=917 end=918) c
                  operator
                    OpPlusPlus(start=918 end=920) ++
        op
          OpMinus(start=922 end=923) -
        right
          UnaryExpression(start=924, end=927 prefix)
            operator
              OpMinusMinus(start=924 end=926) --
            operand
              Identifier(start=926 end=927) d
  VariableDeclaration(start=927, end=940)
    name
      Identifier(start=928 end=929) p
    initializer
      AssignmentExpression(start=933, end=940)
        left
          Identifier(start=933 end=934) a
        op
          OpEq(start=935 end=936) =
        right
          CallExpression(start=937, end=940)
            callee
              Identifier(start=937 end=938) b
  VariableDeclaration(start=940, end=957)
    name
      Identifier(start=941 end=942) p
    initializer
      AssignmentExpression(start=946, end=957)
        left
          Identifier(start=946 end=947) a
        op
          OpEq(start=948 end=949) =
        right
          AssignmentExpression(start=950, end=957)
            left
              Identifier(start=950 end=951) b
            op
              OpEq(start=952 end=953) =
            right
              CallExpression(start=954, end=957)
                callee
                  Identifier(start=954 end=955) c
  VariableDeclaration(start=957, end=970)
    name
      Identifier(start=958 end=959) p
    initializer
      BinaryExpression(start=963, end=970)
        left
          Identifier(start=963 end=964) a
        op
          OpPlus(start=965 end=966) +
        right
          CallExpression(start=967, end=970)
            callee
              Identifier(start=967 end=968) b
  VariableDeclaration(start=970, end=987)
    name
      Identifier(start=971 end=972) p
    initializer
      BinaryExpression(start=976, end=987)
        left
          BinaryExpression(start=976, end=981)
            left
              Identifier(start=976 end=977) a
            op
              OpPlus(start=978 end=979) +
            right
              Identifier(start=980 end=981) b
        op
          OpPlus(start=982 end=983) +
        right
          CallExpression(start=984, end=987)
            callee
              Identifier(start=984 end=985) c
  VariableDeclaration(start=987, end=1008)
    name
      Identifier(start=988 end=989) p
    initializer
      ConditionalExpression(start=993, end=1008)
        condition
          BooleanLiteral(start=993, end=998) false
        consequent
          IntegerLiteral(start=1001, end=1002 type=Decimal) 1
        alternate
          CallExpression(start=1005, end=1008)
            callee
              Identifier(start=1005 end=1006) a
  VariableDeclaration(start=1008, end=1018)
    name
      Identifier(start=1009 end=1010) p
    initializer
      UnaryExpression(start=1014, end=1018 prefix)
        operator
          OpExcl(start=1014 end=1015) !
        operand
          CallExpression(start=1015, end=1018)
            callee
              Identifier(start=1015 end=1016) a
  VariableDeclaration(start=1018, end=1054)
    name
      Identifier(start=1019 end=1020) p
    initializer
      BinaryExpression(start=1023, end=1054)
        left
          ClosureExpression(start=1023, end=1037)
            returnType
              IdentifierType(start=1030 end=1034)
                Identifier(start=1030 end=1034) void
            body
              BlockStatement(start=1035, end=1037)
        op
          OpEqEq(start=1038 end=1040) ==
        right
          ClosureExpression(start=1040, end=1054)
            returnType
              IdentifierType(start=1047 end=1051)
                Identifier(start=1047 end=1051) void
            body
              BlockStatement(start=1052, end=1054)
  VariableDeclaration(start=1054, end=1076)
    name
      Identifier(start=1055 end=1056) p
    initializer
      AssignmentExpression(start=1060, end=1076)
        left
          Identifier(start=1060 end=1061) a
        op
          OpEq(start=1062 end=1063) =
        right
          ConditionalExpression(start=1064, end=1076)
            condition
              BooleanLiteral(start=1064, end=1068) true
            consequent
              IntegerLiteral(start=1071, end=1072 type=Decimal) 1
            alternate
              IntegerLiteral(start=1075, end=1076 type=Decimal) 2
  VariableDeclaration(start=1076, end=1102)
    name
      Identifier(start=1077 end=1078) p
    initializer
      AssignmentExpression(start=1082, end=1102)
        left
          Identifier(start=1082 end=1083) a
        op
          OpEq(start=1084 end=1085) =
        right
          AssignmentExpression(start=1086, end=1102)
            left
              Identifier(start=1086 end=1087) b
            op
              OpEq(start=1088 end=1089) =
            right
              ConditionalExpression(start=1090, end=1102)
                condition
                  BooleanLiteral(start=1090, end=1094) true
                consequent
                  IntegerLiteral(start=1097, end=1098 type=Decimal) 1
                alternate
                  IntegerLiteral(start=1101, end=1102 type=Decimal) 2
  VariableDeclaration(start=1102, end=1124)
    name
      Identifier(start=1103 end=1104) p
    initializer
      ConditionalExpression(start=1108, end=1124)
        condition
          BooleanLiteral(start=1108, end=1112) true
        consequent
          AssignmentExpression(start=1115, end=1120)
            left
              Identifier(start=1115 end=1116) a
            op
              OpEq(start=1117 end=1118) =
            right
              IntegerLiteral(start=1119, end=1120 type=Decimal) 1
        alternate
          IntegerLiteral(start=1123, end=1124 type=Decimal) 2
  VariableDeclaration(start=1124, end=1150)
    name
      Identifier(start=1125 end=1126) p
    initializer
      ConditionalExpression(start=1130, end=1150)
        condition
          BooleanLiteral(start=1130, end=1134) true
        consequent
          AssignmentExpression(start=1137, end=1146)
            left
              Identifier(start=1137 end=1138) a
            op
              OpEq(start=1139 end=1140) =
            right
              AssignmentExpression(start=1141, end=1146)
                left
                  Identifier(start=1141 end=1142) b
                op
                  OpEq(start=1143 end=1144) =
                right
                  IntegerLiteral(start=1145, end=1146 type=Decimal) 1
        alternate
          IntegerLiteral(start=1149, end=1150 type=Decimal) 2
  VariableDeclaration(start=1150, end=1188)
    name
      Identifier(start=1151 end=1152) p
    initializer
      AssignmentExpression(start=1156, end=1188)
        left
          Identifier(start=1156 end=1157) a
        op
          OpEq(start=1158 end=1159) =
        right
          ConditionalExpression(start=1160, end=1188)
            condition
              BooleanLiteral(start=1160, end=1165) false
            consequent
              IntegerLiteral(start=1168, end=1169 type=Decimal) 1
            alternate
              ConditionalExpression(start=1172, end=1188)
                condition
                  BinaryExpression(start=1172, end=1180)
                    left
                      IntegerLiteral(start=1172, end=1173 type=Decimal) 2
                    op
                      OpPlus(start=1174 end=1175) +
                    right
                      BooleanLiteral(start=1176, end=1180) true
                consequent
                  IntegerLiteral(start=1183, end=1184 type=Decimal) 3
                alternate
                  IntegerLiteral(start=1187, end=1188 type=Decimal) 4
  VariableDeclaration(start=1188, end=1228)
    name
      Identifier(start=1189 end=1190) p
    initializer
      AssignmentExpression(start=1194, end=1228)
        left
          Identifier(start=1194 end=1195) a
        op
          OpEq(start=1196 end=1197) =
        right
          ConditionalExpression(start=1198, end=1228)
            condition
              BinaryExpression(start=1198, end=1220)
                left
                  ParenthesizedExpression(start=1198, end=1213)
                    ConditionalExpression(start=1199, end=1212)
                      condition
                        BooleanLiteral(start=1199, end=1204) false
                      consequent
                        IntegerLiteral(start=1207, end=1208 type=Decimal) 1
                      alternate
                        IntegerLiteral(start=1211, end=1212 type=Decimal) 2
                op
                  OpPlus(start=1214 end=1215) +
                right
                  BooleanLiteral(start=1216, end=1220) true
            consequent
              IntegerLiteral(start=1223, end=1224 type=Decimal) 3
            alternate
              IntegerLiteral(start=1227, end=1228 type=Decimal) 4
  VariableDeclaration(start=1228, end=1258)
    name
      Identifier(start=1229 end=1230) p
    initializer
      ConditionalExpression(start=1234, end=1258)
        condition
          BooleanLiteral(start=1234, end=1239) false
        consequent
          IntegerLiteral(start=1242, end=1243 type=Decimal) 1
        alternate
          ConditionalExpression(start=1246, end=1258)
            condition
              BooleanLiteral(start=1246, end=1250) true
            consequent
              IntegerLiteral(start=1253, end=1254 type=Decimal) 2
            alternate
              IntegerLiteral(start=1257, end=1258 type=Decimal) 3
  VariableDeclaration(start=1258, end=1292)
    name
      Identifier(start=1259 end=1260) p
    initializer
      ConditionalExpression(start=1264, end=1292)
        condition
          BooleanLiteral(start=1264, end=1269) false
        consequent
          IntegerLiteral(start=1272, end=1273 type=Decimal) 1
        alternate
          AssignmentExpression(start=1276, end=1292)
            left
              Identifier(start=1276 end=1277) a
            op
              OpEq(start=1278 end=1279) =
            right
              ConditionalExpression(start=1280, end=1292)
                condition
                  BooleanLiteral(start=1280, end=1284) true
                consequent
                  IntegerLiteral(start=1287, end=1288 type=Decimal) 2
                alternate
                  IntegerLiteral(start=1291, end=1292 type=Decimal) 3
  VariableDeclaration(start=1292, end=1314)
    name
      Identifier(start=1293 end=1294) p
    initializer
      ConditionalExpression(start=1298, end=1314)
        condition
          UnaryExpression(start=1298, end=1304 prefix)
            operator
              OpExcl(start=1298 end=1299) !
            operand
              BooleanLiteral(start=1299, end=1304) false
        consequent
          UnaryExpression(start=1307, end=1309 prefix)
            operator
              OpTilde(start=1307 end=1308) ~
            operand
              Identifier(start=1308 end=1309) b
        alternate
          UnaryExpression(start=1312, end=1314 prefix)
            operator
              OpMinus(start=1312 end=1313) -
            operand
              Identifier(start=1313 end=1314) c
  VariableDeclaration(start=1314, end=1338)
    name
      Identifier(start=1315 end=1316) p
    initializer
      UnaryExpression(start=1320, end=1338 prefix)
        operator
          OpExcl(start=1320 end=1321) !
        operand
          ParenthesizedExpression(start=1321, end=1338)
            ConditionalExpression(start=1322, end=1337)
              condition
                BooleanLiteral(start=1322, end=1327) false
              consequent
                UnaryExpression(start=1330, end=1332 prefix)
                  operator
                    OpTilde(start=1330 end=1331) ~
                  operand
                    Identifier(start=1331 end=1332) b
              alternate
                UnaryExpression(start=1335, end=1337 prefix)
                  operator
                    OpMinus(start=1335 end=1336) -
                  operand
                    Identifier(start=1336 end=1337) c
  VariableDeclaration(start=1338, end=1363)
    name
      Identifier(start=1339 end=1340) p
    initializer
      BinaryExpression(start=1344, end=1363)
        left
          BooleanLiteral(start=1344, end=1348) true
        op
          OpEqEq(start=1349 end=1351) ==
        right
          IsExpression(start=1352, end=1363)
            expression
              Identifier(start=1352 end=1356) test
            type
              IdentifierType(start=1360 end=1363)
                Identifier(start=1360 end=1363) str
  VariableDeclaration(start=1363, end=1383)
    name
      Identifier(start=1364 end=1365) p
    initializer
      AssignmentExpression(start=1369, end=1383)
        left
          Identifier(start=1369 end=1370) a
        op
          OpEq(start=1371 end=1372) =
        right
          MapExpression(start=1373, end=1383)
            MapExpressionElement
              key
                StringLiteral(start=1375, end=1378) a
              value
                IntegerLiteral(start=1380, end=1381 type=Decimal) 1
  VariableDeclaration(start=1383, end=1407)
    name
      Identifier(start=1384 end=1385) p
    initializer
      AssignmentExpression(start=1389, end=1407)
        left
          Identifier(start=1389 end=1390) a
        op
          OpEq(start=1391 end=1392) =
        right
          AssignmentExpression(start=1393, end=1407)
            left
              Identifier(start=1393 end=1394) b
            op
              OpEq(start=1395 end=1396) =
            right
              MapExpression(start=1397, end=1407)
                MapExpressionElement
                  key
                    StringLiteral(start=1399, end=1402) a
                  value
                    IntegerLiteral(start=1404, end=1405 type=Decimal) 1
  VariableDeclaration(start=1407, end=1427)
    name
      Identifier(start=1408 end=1409) p
    initializer
      BinaryExpression(start=1413, end=1427)
        left
          Identifier(start=1413 end=1414) a
        op
          OpPlus(start=1415 end=1416) +
        right
          MapExpression(start=1417, end=1427)
            MapExpressionElement
              key
                StringLiteral(start=1419, end=1422) a
              value
                IntegerLiteral(start=1424, end=1425 type=Decimal) 1
  VariableDeclaration(start=1427, end=1451)
    name
      Identifier(start=1428 end=1429) p
    initializer
      BinaryExpression(start=1433, end=1451)
        left
          BinaryExpression(start=1433, end=1438)
            left
              Identifier(start=1433 end=1434) a
            op
              OpPlus(start=1435 end=1436) +
            right
              Identifier(start=1437 end=1438) b
        op
          OpPlus(start=1439 end=1440) +
        right
          MapExpression(start=1441, end=1451)
            MapExpressionElement
              key
                StringLiteral(start=1443, end=1446) a
              value
                IntegerLiteral(start=1448, end=1449 type=Decimal) 1
  VariableDeclaration(start=1451, end=1479)
    name
      Identifier(start=1452 end=1453) p
    initializer
      ConditionalExpression(start=1457, end=1479)
        condition
          BooleanLiteral(start=1457, end=1462) false
        consequent
          IntegerLiteral(start=1465, end=1466 type=Decimal) 1
        alternate
          MapExpression(start=1469, end=1479)
            MapExpressionElement
              key
                StringLiteral(start=1471, end=1474) a
              value
                IntegerLiteral(start=1476, end=1477 type=Decimal) 1
  VariableDeclaration(start=1479, end=1496)
    name
      Identifier(start=1480 end=1481) p
    initializer
      UnaryExpression(start=1485, end=1496 prefix)
        operator
          OpExcl(start=1485 end=1486) !
        operand
          MapExpression(start=1486, end=1496)
            MapExpressionElement
              key
                StringLiteral(start=1488, end=1491) a
              value
                IntegerLiteral(start=1493, end=1494 type=Decimal) 1
  VariableDeclaration(start=1496, end=1516)
    name
      Identifier(start=1497 end=1498) p
    initializer
      AssignmentExpression(start=1502, end=1516)
        left
          Identifier(start=1502 end=1503) a
        op
          OpEq(start=1504 end=1505) =
        right
          ObjectExpression(start=1506, end=1516)
            id
              IdentifierType(start=1506 end=1510)
                Identifier(start=1506 end=1510) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=1511 end=1512) a
                value
                  IntegerLiteral(start=1514, end=1515 type=Decimal) 1
  VariableDeclaration(start=1516, end=1540)
    name
      Identifier(start=1517 end=1518) p
    initializer
      AssignmentExpression(start=1522, end=1540)
        left
          Identifier(start=1522 end=1523) a
        op
          OpEq(start=1524 end=1525) =
        right
          AssignmentExpression(start=1526, end=1540)
            left
              Identifier(start=1526 end=1527) b
            op
              OpEq(start=1528 end=1529) =
            right
              ObjectExpression(start=1530, end=1540)
                id
                  IdentifierType(start=1530 end=1534)
                    Identifier(start=1530 end=1534) Test
                properties
                  ObjectExpressionProperty
                    name
                      Identifier(start=1535 end=1536) a
                    value
                      IntegerLiteral(start=1538, end=1539 type=Decimal) 1
  VariableDeclaration(start=1540, end=1560)
    name
      Identifier(start=1541 end=1542) p
    initializer
      BinaryExpression(start=1546, end=1560)
        left
          Identifier(start=1546 end=1547) a
        op
          OpPlus(start=1548 end=1549) +
        right
          ObjectExpression(start=1550, end=1560)
            id
              IdentifierType(start=1550 end=1554)
                Identifier(start=1550 end=1554) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=1555 end=1556) a
                value
                  IntegerLiteral(start=1558, end=1559 type=Decimal) 1
  VariableDeclaration(start=1560, end=1584)
    name
      Identifier(start=1561 end=1562) p
    initializer
      BinaryExpression(start=1566, end=1584)
        left
          BinaryExpression(start=1566, end=1571)
            left
              Identifier(start=1566 end=1567) a
            op
              OpPlus(start=1568 end=1569) +
            right
              Identifier(start=1570 end=1571) b
        op
          OpPlus(start=1572 end=1573) +
        right
          ObjectExpression(start=1574, end=1584)
            id
              IdentifierType(start=1574 end=1578)
                Identifier(start=1574 end=1578) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=1579 end=1580) a
                value
                  IntegerLiteral(start=1582, end=1583 type=Decimal) 1
  VariableDeclaration(start=1584, end=1612)
    name
      Identifier(start=1585 end=1586) p
    initializer
      ConditionalExpression(start=1590, end=1612)
        condition
          BooleanLiteral(start=1590, end=1595) false
        consequent
          IntegerLiteral(start=1598, end=1599 type=Decimal) 1
        alternate
          ObjectExpression(start=1602, end=1612)
            id
              IdentifierType(start=1602 end=1606)
                Identifier(start=1602 end=1606) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=1607 end=1608) a
                value
                  IntegerLiteral(start=1610, end=1611 type=Decimal) 1
  VariableDeclaration(start=1612, end=1629)
    name
      Identifier(start=1613 end=1614) p
    initializer
      UnaryExpression(start=1618, end=1629 prefix)
        operator
          OpExcl(start=1618 end=1619) !
        operand
          ObjectExpression(start=1619, end=1629)
            id
              IdentifierType(start=1619 end=1623)
                Identifier(start=1619 end=1623) Test
            properties
              ObjectExpressionProperty
                name
                  Identifier(start=1624 end=1625) a
                value
                  IntegerLiteral(start=1627, end=1628 type=Decimal) 1
  VariableDeclaration(start=1629, end=1642)
    name
      Identifier(start=1630 end=1631) p
    initializer
      AssignmentExpression(start=1635, end=1642)
        left
          Identifier(start=1635 end=1636) a
        op
          OpEq(start=1637 end=1638) =
        right
          UnaryExpression(start=1639, end=1642)
            operand
              Identifier(start=1639 end=1640) b
            operator
              OpPlusPlus(start=1640 end=1642) ++
  VariableDeclaration(start=1642, end=1659)
    name
      Identifier(start=1643 end=1644) p
    initializer
      AssignmentExpression(start=1648, end=1659)
        left
          Identifier(start=1648 end=1649) a
        op
          OpEq(start=1650 end=1651) =
        right
          AssignmentExpression(start=1652, end=1659)
            left
              Identifier(start=1652 end=1653) b
            op
              OpEq(start=1654 end=1655) =
            right
              UnaryExpression(start=1656, end=1659)
                operand
                  Identifier(start=1656 end=1657) c
                operator
                  OpMinusMinus(start=1657 end=1659) --
  VariableDeclaration(start=1659, end=1676)
    name
      Identifier(start=1660 end=1661) p
    initializer
      AssignmentExpression(start=1665, end=1676)
        left
          Identifier(start=1665 end=1666) a
        op
          OpEq(start=1667 end=1668) =
        right
          BinaryExpression(start=1669, end=1676)
            left
              Identifier(start=1669 end=1670) b
            op
              OpPlus(start=1671 end=1672) +
            right
              UnaryExpression(start=1673, end=1676)
                operand
                  Identifier(start=1673 end=1674) c
                operator
                  OpPlusPlus(start=1674 end=1676) ++
  VariableDeclaration(start=1676, end=1697)
    name
      Identifier(start=1677 end=1678) p
    initializer
      AssignmentExpression(start=1682, end=1697)
        left
          Identifier(start=1682 end=1683) a
        op
          OpEq(start=1684 end=1685) =
        right
          BinaryExpression(start=1686, end=1697)
            left
              BinaryExpression(start=1686, end=1691)
                left
                  Identifier(start=1686 end=1687) b
                op
                  OpPlus(start=1688 end=1689) +
                right
                  Identifier(start=1690 end=1691) c
            op
              OpPlus(start=1692 end=1693) +
            right
              UnaryExpression(start=1694, end=1697)
                operand
                  Identifier(start=1694 end=1695) d
                operator
                  OpPlusPlus(start=1695 end=1697) ++
  VariableDeclaration(start=1697, end=1722)
    name
      Identifier(start=1698 end=1699) p
    initializer
      AssignmentExpression(start=1703, end=1722)
        left
          Identifier(start=1703 end=1704) a
        op
          OpEq(start=1705 end=1706) =
        right
          ConditionalExpression(start=1707, end=1722)
            condition
              BooleanLiteral(start=1707, end=1712) false
            consequent
              IntegerLiteral(start=1715, end=1716 type=Decimal) 1
            alternate
              UnaryExpression(start=1719, end=1722)
                operand
                  Identifier(start=1719 end=1720) b
                operator
                  OpPlusPlus(start=1720 end=1722) ++
  VariableDeclaration(start=1722, end=1759)
    name
      Identifier(start=1723 end=1724) p
    initializer
      AssignmentExpression(start=1728, end=1759)
        left
          Identifier(start=1728 end=1729) a
        op
          OpEq(start=1730 end=1731) =
        right
          ConditionalExpression(start=1732, end=1759)
            condition
              BooleanLiteral(start=1732, end=1737) false
            consequent
              IntegerLiteral(start=1740, end=1741 type=Decimal) 1
            alternate
              ConditionalExpression(start=1744, end=1759)
                condition
                  BooleanLiteral(start=1744, end=1749) false
                consequent
                  IntegerLiteral(start=1752, end=1753 type=Decimal) 1
                alternate
                  UnaryExpression(start=1756, end=1759)
                    operand
                      Identifier(start=1756 end=1757) b
                    operator
                      OpPlusPlus(start=1757 end=1759) ++
  VariableDeclaration(start=1759, end=1773)
    name
      Identifier(start=1760 end=1761) p
    initializer
      AssignmentExpression(start=1765, end=1773)
        left
          Identifier(start=1765 end=1766) a
        op
          OpEq(start=1767 end=1768) =
        right
          UnaryExpression(start=1769, end=1773 prefix)
            operator
              OpExcl(start=1769 end=1770) !
            operand
              UnaryExpression(start=1770, end=1773)
                operand
                  Identifier(start=1770 end=1771) i
                operator
                  OpMinusMinus(start=1771 end=1773) --
  VariableDeclaration(start=1773, end=1788)
    name
      Identifier(start=1774 end=1775) p
    initializer
      AssignmentExpression(start=1779, end=1788)
        left
          Identifier(start=1779 end=1780) a
        op
          OpEq(start=1781 end=1782) =
        right
          UnaryExpression(start=1783, end=1788 prefix)
            operator
              OpTilde(start=1783 end=1784) ~
            operand
              UnaryExpression(start=1784, end=1788 prefix)
                operator
                  OpExcl(start=1784 end=1785) !
                operand
                  UnaryExpression(start=1785, end=1788)
                    operand
                      Identifier(start=1785 end=1786) i
                    operator
                      OpPlusPlus(start=1786 end=1788) ++
  EofStatement(start=1788, end=1788)
