/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as t from "./types"

fn isWhitespaceCharacter (ch: char) bool {
  return ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t'
}

fn tokenizeFraction (code: str, codeLen: int, mut i: ref int) {
  if i + 1 >= codeLen || code[i + 1] != '.' { return }
  i += 1
  loop ; i + 1 < codeLen && code[i + 1].isDigit; i++ {}
}

fn tokenizeExponent (code: str, codeLen: int, mut i: ref int) {
  if i + 1 >= codeLen || (code[i + 1] != 'E' && code[i + 1] != 'e') { return }
  i += 1
  if i + 1 < codeLen && (code[i + 1] == '+' || code[i + 1] == '-') { i += 1 }
  loop ; i + 1 < codeLen && code[i + 1].isDigit; i++ {}
}

export fn tokenize (code: str) t.Token[] {
  codeLen := code.len
  mut result: t.Token[]

  loop i := 0; i < codeLen; i++ {
    start := i
    ch := code[i]

    if ch == ':' {
      result.push(t.Token{t: .Colon, start: start, end: i + 1, val: ch.str()})
    } elif ch == ',' {
      result.push(t.Token{t: .Comma, start: start, end: i + 1, val: ch.str()})
    } elif ch == '{' {
      result.push(t.Token{t: .OpeningBrace, start: start, end: i + 1, val: ch.str()})
    } elif ch == '}' {
      result.push(t.Token{t: .ClosingBrace, start: start, end: i + 1, val: ch.str()})
    } elif ch == '[' {
      result.push(t.Token{t: .OpeningBracket, start: start, end: i + 1, val: ch.str()})
    } elif ch == ']' {
      result.push(t.Token{t: .ClosingBracket, start: start, end: i + 1, val: ch.str()})
    } elif isWhitespaceCharacter(ch) {
      loop ; i + 1 < codeLen && isWhitespaceCharacter(code[i + 1]); i++ {}
      result.push(t.Token{t: .Whitespace, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif ch == '"' {
      loop i + 1 < codeLen {
        i++
        if code[i] == '"' && code[i - 1] != '\\' { break }
      }

      result.push(t.Token{t: .StringLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif i + 3 < codeLen && code.slice(i, i + 4) == "true" {
      i += 3
      result.push(t.Token{t: .BooleanLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif i + 4 < codeLen && code.slice(i, i + 5) == "false" {
      i += 4
      result.push(t.Token{t: .BooleanLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif i + 3 < codeLen && code.slice(i, i + 4) == "null" {
      i += 3
      result.push(t.Token{t: .NullLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif ch == '0' {
      tokenizeFraction(code, codeLen, ref i)
      tokenizeExponent(code, codeLen, ref i)
      result.push(t.Token{t: .NumberLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif ch.isDigit {
      loop ; i + 1 < codeLen && code[i + 1].isDigit; i++ {}
      tokenizeFraction(code, codeLen, ref i)
      tokenizeExponent(code, codeLen, ref i)
      result.push(t.Token{t: .NumberLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif ch == '-' && i + 1 < codeLen && code[i + 1] == '0' {
      i += 1
      tokenizeFraction(code, codeLen, ref i)
      tokenizeExponent(code, codeLen, ref i)
      result.push(t.Token{t: .NumberLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } elif ch == '-' && i + 1 < codeLen && code[i + 1].isDigit {
      i += 1
      loop ; i + 1 < codeLen && code[i + 1].isDigit; i++ {}
      tokenizeFraction(code, codeLen, ref i)
      tokenizeExponent(code, codeLen, ref i)
      result.push(t.Token{t: .NumberLiteral, start: start, end: i + 1, val: code.slice(start, i + 1)})
    } else {
      result.push(t.Token{t: .Unknown, start: start, end: i + 1, val: ch.str()})
    }
  }

  result.push(t.Token{t: .Eof, start: codeLen, end: codeLen, val: ""})
  return result
}
