/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Analyzer from "the/analyzer"
import * as Parser from "the/parser"

export obj Codegen {
  mut analyzer: ref Analyzer.Analyzer

  fn generate (mut self: ref Self) {
  }
}

export fn compile (analyzer: ref Analyzer.Analyzer, executablePath: str) {
  mut generator := Codegen{analyzer: analyzer}
  generator.generate()

  codePath := executablePath + ".c"
  output := "#include <stdio.h>\nint main () { printf(\"Hello, World\\n\"); }"

  fs_writeFileSync(codePath, output.toBuffer())
  process_runSync("clang '" + codePath + "' -O0 -w -o '" + executablePath + "'")
  fs_rmSync(codePath)
}

main {
  inputPathOrCode := "./build/test-file"
  mut analyzer := Analyzer.Analyzer{}

  analyzer.files.push(Analyzer.AnalyzerFile{
    cwd: process_cwd(),
    analyzer: ref analyzer,
    f: Parser.parse(inputPathOrCode),
  })

  mut file := analyzer.files.last()
  Parser.interconnect(ref file.f)
  file.reader = Parser.Reader_init(file.f.path == "anonymous" ? file.f.content : file.f.path)
  file.init()
  file.analyze(ref file.f.program.body)

  if !analyzer.errors.empty {
    throw error_NewError("Failure when analyzing file")
  }

  compile(ref analyzer, "./build/a.out")
  print("Generated code for '" + inputPathOrCode + "'")
}
