/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Analyzer from "the/analyzer"
import * as Parser from "the/parser"
import * as AST from "./ast"

const BUILTIN_ENTITIES := ["print"]

export fn codeName (name: str) str {
  return "__THE_1_" + name
}

export fn typeName (name: str) str {
  return "__THE_0_" + name
}

export fn typeParameterId (parameter: ref Analyzer.TypeParameter) str {
  if parameter.mutable && parameter.required { return "FP5" }
  elif parameter.mutable && parameter.variadic { return "FP6" }
  elif parameter.mutable { return "FP2" }
  elif parameter.required { return "FP3" }
  elif parameter.variadic { return "FP4" }
  else { return "FP1" }
}

export obj APIEntity {
  mut active: bool
  mut statement: AST.CStatement
}

export obj Codegen {
  mut analyzer: ref Analyzer.Analyzer
  mut api: APIEntity[str]
  mut statements: AST.CStatement[]
  mut flags: str[]
  mut mainStatements: AST.CStatement[]

  fn init (mut self: ref Self) {
    mut file := self.analyzer.files.last()
    mut tm := file.tm

    self.api.set("print", APIEntity{
      statement: AST.createFunctionDeclaration(AST.createType("void"), codeName("print"), [
        AST.createFunctionParameter(AST.createType("void *"), "params")
      ], AST.createCompoundStatement([
        AST.createVariableDeclaration(
          AST.createType(self._typeName(tm.createFunction(false, [
            Analyzer.TypeParameter{t: tm.createArray(tm.get("any")), variadic: true}
          ], tm.get("void"))) + "p_t"),
          "p",
          AST.createIdentifier("params")
        )
      ]))
    })
  }

  fn _ (mut self: ref Self, name: str) str {
    if self.api.has(name) {
      mut item := self.api.get(name)
      if !item.active {
        item.active = true
        self.api.set(name, item)
      }

      return codeName(name)
    }

    return ""
  }

  fn generate (mut self: ref Self) {
    mut file := self.analyzer.files.last()
    self.statements = self._generateBlock(ref file.f.program.body)
    self._assemble()
  }

  fn getFlags () str {
    return "-O0 -w"
  }

  fn stringify (self: ref Self) str {
    mut result := ""
    l := self.statements.len

    loop i := 0; i < l; i++ {
      result += self.statements[i].stringify()
    }

    return result
  }

  fn _assemble (mut self: ref Self) {
    apiKeys := self.api.keys

    loop i := 0; i < apiKeys.len; i++ {
      apiKey := apiKeys[i]
      apiValue :=self.api.get(apiKey)

      if !apiValue.active {
        continue
      }

      self.statements.push(apiValue.statement)
    }

    self.statements.push(
      AST.createFunctionDeclaration(
        AST.createType("int"),
        "main",
        [],
        AST.createCompoundStatement(self.mainStatements)
      )
    )
  }

  fn _generateBlock (mut self: ref Self, items: ref Parser.Statement[]) AST.CStatement[] {
    mut result: AST.CStatement[]
    l := items.len

    loop i := 0; i < l; i++ {
      result.push(self._generateStatement(items[i]))
    }

    return result
  }

  fn _generateExpression (mut self: ref Self, item: ref Parser.Expression) AST.CExpression {
    if item.isIdentifier() {
      expression := item.asIdentifier()

      return AST.createIdentifier(
        BUILTIN_ENTITIES.contains(expression.name) ? self._(expression.name) : codeName(expression.name)
      )
    } elif item.isCall() {
      expression := item.asCall()
      return AST.createCallExpression(self._generateExpression(ref expression.callee))
    } elif item.isReference() {
      expression := item.asReference()
      return AST.createUnaryExpression(self._generateExpression(ref expression.expression), "&", prefix: true)
    }

    return AST.createLiteral("NULL")
  }

  fn _generateStatement (mut self: ref Self, item: ref Parser.Statement) AST.CStatement {
    if item.isBlock() {
      statement := item.asBlock()
      return AST.createCompoundStatement(self._generateBlock(ref statement.body))
    } elif item.isExpression() {
      statement := item.asExpression()
      return AST.createExpressionStatement(self._generateExpression(ref statement.expression))
    } elif item.isMainDeclaration() {
      statement := item.asMainDeclaration()
      statementBody := statement.body.asBlock()
      self.mainStatements = self._generateBlock(ref statementBody.body)
      return AST.createEmptyStatement()
    } elif item.isVariableDeclaration() {
      statement := item.asVariableDeclaration()
      context := item.context as Analyzer.VariableDeclarationContext
      t := AST.createType(self._type(context.varType))

      mut initializer: AST.CExpression?

      if statement.initializer != nil {
        initializer = self._generateExpression(ref statement.initializer)
      }

      return AST.createVariableDeclaration(t, codeName(statement.name.name), initializer)
    }

    return AST.createExpressionStatement(AST.createLiteral("NULL2"))
  }

  fn _type (mut self: ref Self, it: ref Analyzer.Type) str {
    if it.isAlias() {
      t := it.asAlias()
      return self._type(t.t)
    } elif (
      it.isEnum() ||
      it.isFunction() ||
      it.isMap() ||
      it.isObject() ||
      it.isOptional() ||
      it.isReference() ||
      it.isUnion()
    ) {
      return self._(self._typeName(it) + "_t") + " "
    } elif it.name == "any" {
      return self._("any_t") + " "
    } elif it.name == "bool" {
      return self._("bool_t") + " "
    } elif it.name == "byte" {
      return self._("uint8_t") + " "
    } elif it.name == "char" {
      return "char "
    } elif it.name == "f32" {
      return "float "
    } elif it.name == "f64" || it.name == "float" {
      return "double "
    } elif it.name == "i8" {
      return self._("int8_t") + " "
    } elif it.name == "i16" {
      return self._("int16_t") + " "
    } elif it.name == "i32" {
      return self._("int32_t") + " "
    } elif it.name == "i64" {
      return self._("int64_t") + " "
    } elif it.name == "str" {
      return self._("str_t") + " "
    } elif it.name == "u8" {
      return self._("uint8_t") + " "
    } elif it.name == "u16" {
      return self._("uint16_t") + " "
    } elif it.name == "u32" {
      return self._("uint32_t") + " "
    } elif it.name == "u64" {
      return self._("uint64_t") + " "
    } elif it.name == "void" {
      return "void "
    }

    throw error_NewError("Failed to generate type for '" + it.name + "'")
  }

  fn _typeName (mut self: ref Self, it: ref Analyzer.Type) str {
    if it.isAlias() {
      t := it.asAlias()
      return self._typeName(t.t)
    } elif it.isArray() {
      t := it.asArray()
      return "arr_" + self._typeName(t.elementType)
    } elif it.isEnum() || it.isObject() {
      return it.name
    } elif it.isFunction() {
      t := it.asFunction()
      mut name := "fn_" + (t.asynchronous ? "a" : "s")

      loop i := 0; i < t.parameters.len; i++ {
        parameter := t.parameters[i]
        name += typeParameterId(parameter) + self._typeName(parameter.t)
      }

      return name + "FR" + self._typeName(t.returnType) + "FE"
    } elif it.isMap() {
      t := it.asMap()
      return "map_" + self._typeName(t.keyType) + "MS" + self._typeName(t.valueType) + "ME"
    } elif it.isMethod() {
      t := it.asMethod()
      mut name := "fn_" + (t.asynchronous ? "a" : "s")

      if t.withSelf {
        name += "FS" + self._typeName(t.selfType)
      }

      loop i := 0; i < t.parameters.len; i++ {
        parameter := t.parameters[i]
        name += typeParameterId(parameter) + self._typeName(parameter.t)
      }

      return name + "FR" + self._typeName(t.returnType) + "FE"
    } elif it.isOptional() {
      t := it.asOptional()
      return "opt_" + self._typeName(t.t)
    } elif it.isReference() {
      t := it.asReference()
      return "ref_" + self._typeName(t.t)
    } elif it.isUnion() {
      t := it.asUnion()
      mut name := ""

      loop i := 0; i < t.types.len; i++ {
        name += i == 0 ? "" : "US"
        name += self._typeName(t.types[i])
      }

      return "union_" + name + "UE"
    }

    throw error_NewError("Failed to generate type name for '" + it.name + "'")
  }
}

export fn compile (analyzer: ref Analyzer.Analyzer, executablePath: str) {
  mut generator := Codegen{analyzer: analyzer}
  generator.init()
  generator.generate()

  codePath := executablePath + ".c"

  fs_writeFileSync(codePath, generator.stringify().toBuffer())
  process_runSync("clang '" + codePath + "' -o '" + executablePath + "' " + generator.getFlags())
  fs_rmSync(codePath)
}

main {
  inputPathOrCode := "./build/test-file"
  mut analyzer := Analyzer.Analyzer{}

  analyzer.files.push(Analyzer.AnalyzerFile{
    cwd: process_cwd(),
    analyzer: ref analyzer,
    f: Parser.parse(inputPathOrCode),
  })

  mut file := analyzer.files.last()
  Parser.interconnect(ref file.f)
  file.reader = Parser.Reader_init(file.f.path == "anonymous" ? file.f.content : file.f.path)
  file.init()
  file.analyze(ref file.f.program.body)

  if !analyzer.errors.empty {
    throw error_NewError("Failure when analyzing file")
  }

  compile(ref analyzer, "./build/a.out")
  print("Generated code for '" + inputPathOrCode + "'")
}
