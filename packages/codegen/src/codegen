/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Analyzer from "the/analyzer"
import * as AST from "the/c"
import * as Parser from "the/parser"

export obj CodegenAPIBuiltin {
  mut theAny: bool
  mut theBool: bool
  mut theByte: bool
  mut theError: bool
  mut theMacro: bool
  mut theSafe: bool
  mut theString: bool
  mut stdbool: bool
  mut stddef: bool
  mut stdint: bool
  mut stdio: bool
  mut stdlib: bool
  mut wchar: bool
}

export obj BlockData {
  mut cleanup: AST.CStatement[]

  fn addCleanup (mut self: ref Self, item: AST.CStatement) {
    self.cleanup.push(item)
  }

  fn getCleanup (mut self: ref Self) AST.CStatement[] {
    mut cleanup := self.cleanup.reverse()
    self.cleanup = []
    return cleanup
  }
}

export obj CodegenEntity {
  mut active: bool
  mut name: str
  mut codeName: str
  mut context: any
  mut generate: (helpers: EntityHelpers, mut tm: ref Analyzer.TypeMap, entity: ref CodegenEntity) -> AST.CStatement
}

export obj EntityHelpers {
  _: (str) -> str
  mut lastTypeId: ref int
  t: (ref Analyzer.Type) -> str
  typeDef: (ref Analyzer.Type) -> str
  typeName: (ref Analyzer.Type) -> str
}

export obj ExpressionHelpers {
  _: (str) -> str
  e: (ref Parser.Expression) -> AST.CExpression
  functionCopy: (ref Analyzer.Type, AST.CExpression) -> AST.CExpression
  functionEq: (ref Analyzer.Type, AST.CExpression, AST.CExpression) -> AST.CExpression
  functionFree: (ref Analyzer.Type, AST.CExpression) -> AST.CExpression
  functionNe: (ref Analyzer.Type, AST.CExpression, AST.CExpression) -> AST.CExpression
  functionRealloc: (ref Analyzer.Type, AST.CExpression, AST.CExpression) -> AST.CExpression
  functionStr: (ref Analyzer.Type, AST.CExpression) -> AST.CExpression
  get: (str) -> ref CodegenEntity
  has: (str) -> bool
  t: (ref Analyzer.Type) -> str
  typeDef: (ref Analyzer.Type) -> str
  typeName: (ref Analyzer.Type) -> str
}

export fn generateIdentifier (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isIdentifier() {
    expression := item.asIdentifier()

    if helpers.has(expression.name) {
      return AST.createIdentifier(helpers._(expression.name))
    } else {
      return AST.createIdentifier(expression.name)
    }
  }

  return nil
}

export fn generateLiteral (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isBooleanLiteral() {
    expression := item.asBooleanLiteral()
    return AST.createLiteral(helpers._(expression.value))
  } elif item.isCharacterLiteral() {
    expression := item.asCharacterLiteral()
    return AST.createLiteral("L'" + expression.value + "'")
  } elif item.isFloatingPointLiteral() {
    expression := item.asFloatingPointLiteral()
    return AST.createLiteral(expression.value)
  } elif item.isIntegerLiteral() {
    expression := item.asIntegerLiteral()
    rawValue := expression.value.replace("O", "").replace("o", "")

    if !rawValue.contains("b") && !rawValue.contains("B") && !rawValue.contains("x") && !rawValue.contains("X") {
      numValue := rawValue.toU64()
      return AST.createLiteral(rawValue + (numValue > 9223372036854775807 ? "U" : ""))
    }

    return AST.createLiteral(rawValue)
  } elif item.isNilLiteral() {
    expression := item.asNilLiteral()
    return AST.createIdentifier(helpers._("NULL"))
  } elif item.isStringLiteral() {
    expression := item.asStringLiteral()
    sanitizedValue := expression.value
      .replace(os_EOL, "\" " + helpers._("THE_EOL") + " \"")
      .replace("\n", "\" " + helpers._("THE_EOL") + " \"")
    rawValue := "L\"" + sanitizedValue + "\""

    if !item.hasParent() && item.hasParentNode() {
      node := item.parentNode()

      if node.isVariableDeclaration() {
        return AST.createCallExpression(
          AST.createIdentifier(helpers._("the_str_alloc")),
          [AST.createLiteral(rawValue)]
        )
      }
    }

    return AST.createLiteral(rawValue)
  }

  return nil
}

export fn generateArrayExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isArray() {
    expression := item.asArray()
    validateContext(item.context is Analyzer.ArrayExpressionContext)
    context := item.context as Analyzer.ArrayExpressionContext
    typeName := helpers.typeName(context.t)
    mut arguments: (AST.CExpression | AST.CType)[] = [AST.createLiteral(expression.elements.len)]

    loop i := 0; i < expression.elements.len; i++ {
      element := expression.elements[i]
      arguments.push(helpers.e(element))
    }

    result := AST.createCallExpression(AST.createIdentifier(helpers._(typeName + "_alloc")), arguments)
    return item.hasParent() ? result : helpers.functionFree(context.t, result)
  }

  return nil
}

export fn generateAssignmentExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isAssignment() {
    expression := item.asAssignment()
    validateContext(item.context is Analyzer.AssignmentExpressionContext)
    context := item.context as Analyzer.AssignmentExpressionContext
    leftType := Analyzer.unwrap(context.leftType, withReference: false)
    rightType := Analyzer.unwrap(context.rightType, withReference: false)
    left := helpers.e(ref expression.left)
    mut right := helpers.e(ref expression.right)

    if expression.operator.t == .OpPlusEq && (leftType.name == "str" || rightType.name == "str") {
      return AST.createAssignmentExpression(
        left,
        "=",
        AST.createCallExpression(AST.createIdentifier(helpers._("the_str_realloc")), [
          left,
          AST.createCallExpression(AST.createIdentifier(helpers._("the_str_concat")), [left, right])
        ])
      )
    } elif !typePrimitive(leftType) || !typePrimitive(rightType) {
      result := helpers.functionRealloc(leftType, left, right)
      return item.hasParent() ? result : helpers.functionCopy(leftType, result)
    } elif expression.operator.t == .OpAmpAmp || expression.operator.t == .OpPipePipe {
      right = AST.createBinaryExpression(left, expression.operator.val, right)
      return AST.createAssignmentExpression(left, "=", right)
    }

    return AST.createAssignmentExpression(left, expression.operator.val, right)
  }

  return nil
}

export fn generateBinaryExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isBinary() {
    expression := item.asBinary()
    validateContext(item.context is Analyzer.BinaryExpressionContext)
    context := item.context as Analyzer.BinaryExpressionContext
    leftType := Analyzer.unwrap(context.leftType, withReference: false)
    rightType := Analyzer.unwrap(context.rightType, withReference: false)
    left := helpers.e(ref expression.left)
    mut right := helpers.e(ref expression.right)

    if (
      (expression.operator.t == .OpEqEq || expression.operator.t == .OpExclEq) &&
      (!typePrimitive(context.leftType) || !typePrimitive(context.rightType))
    ) {
      return expression.operator.t == .OpEqEq ? helpers.functionEq(leftType, left, right) : helpers.functionNe(leftType, left, right)
    } elif leftType.name == "str" && rightType.name == "str" && (
      expression.operator.t == .OpLt ||
      expression.operator.t == .OpLtEq ||
      expression.operator.t == .OpGt ||
      expression.operator.t == .OpGtEq
    ) {
      direction := expression.operator.t == .OpLt
        ? "lt"
        : expression.operator.t == .OpLtEq
          ? "le"
          : expression.operator.t == .OpGt
            ? "gt"
            : "ge"

      return AST.createCallExpression(AST.createIdentifier(helpers._("the_str_" + direction)), [left, right])
    } elif expression.operator.t == .OpPlus && leftType.name == "str" && rightType.name == "str" {
      result := AST.createCallExpression(AST.createIdentifier(helpers._("the_str_concat")), [left, right])
      return item.hasParent() ? result : helpers.functionFree(leftType, result)
    }

    return AST.createBinaryExpression(left, expression.operator.val, right)
  }

  return nil
}

// todo finalize
export fn generateCallExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isCall() {
    expression := item.asCall()
    return AST.createCallExpression(helpers.e(ref expression.callee))
  }

  return nil
}

export fn generateConditionalExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isConditional() {
    expression := item.asConditional()
    validateContext(item.context is Analyzer.ConditionalExpressionContext)
    context := item.context as Analyzer.ConditionalExpressionContext
    alternateType := Analyzer.unwrap(context.alternateType, withReference: false)
    mut alternate := helpers.e(ref expression.alternate)

    if expression.alternate.isAssignment() && !typeSafeForTernaryAlternate(alternateType) {
      alternate = alternate.wrap()
    }

    return AST.createConditionalExpression(
      helpers.e(ref expression.condition),
      helpers.e(ref expression.consequent),
      alternate
    )
  }

  return nil
}

export fn generateIsExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isIs() {
    expression := item.asIs()
    validateContext(item.context is Analyzer.IsExpressionContext)
    context := item.context as Analyzer.IsExpressionContext
    left := AST.createPropertyAccessExpression(helpers.e(ref expression.expression), "t")
    right := AST.createIdentifier(helpers.typeDef(context.rightType))

    return AST.createBinaryExpression(left, "==", right)
  }

  return nil
}

export fn generateParenthesizedExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isParenthesized() {
    expression := item.asParenthesized()
    result := helpers.e(ref expression.expression)
    return result.wrap()
  }

  return nil
}

export fn generateReferenceExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isReference() {
    expression := item.asReference()
    return AST.createUnaryExpression("&", helpers.e(ref expression.expression))
  }

  return nil
}

export fn generateUnaryExpression (helpers: ExpressionHelpers, item: ref Parser.Expression) AST.CExpression? {
  if item.isUnary() {
    expression := item.asUnary()
    validateContext(item.context is Analyzer.UnaryExpressionContext)
    context := item.context as Analyzer.UnaryExpressionContext

    if context.operandType.isFloat() {
      castExpression := AST.createCastExpression(AST.createType(helpers._("bool")), helpers.e(ref expression.operand))

      return AST.createUnaryExpression(
        expression.operator.val,
        castExpression.wrap(),
        postfix: !expression.prefix
      )
    }

    return AST.createUnaryExpression(
      expression.operator.val,
      helpers.e(ref expression.operand),
      postfix: !expression.prefix
    )
  }

  return nil
}

export fn typeParameterId (parameter: ref Analyzer.TypeParameter) str {
  if parameter.mutable && parameter.required { return "FP5" }
  elif parameter.mutable && parameter.variadic { return "FP6" }
  elif parameter.mutable { return "FP2" }
  elif parameter.required { return "FP3" }
  elif parameter.variadic { return "FP4" }
  else { return "FP1" }
}

export fn typePrimitive (it: ref Analyzer.Type) bool {
  return !(
    it.name == "any" ||
    it.name == "str" ||
    it.isArray() ||
    it.isFunction() ||
    it.isMap() ||
    // todo
    // it.isObject() ||
    it.isOptional() ||
    it.isUnion()
  )
}

export fn typeSafeForTernaryAlternate (it: ref Analyzer.Type) bool {
  return it.name == "any" ||
    it.name == "str" ||
    it.isArray() ||
    it.isFunction() ||
    it.isMap() ||
    // todo
    // it.isObj() ||
    it.isOptional() ||
    it.isUnion()
}

export fn typeShouldBeFreed (self: ref Analyzer.Type) bool {
  if self.isAlias() {
    t := self.asAlias()
    return typeShouldBeFreed(t.t)
  } elif self.isUnion() {
    t := self.asUnion()

    loop i := 0; i < t.types.len; i++ {
      subType := t.types[i]

      if typeShouldBeFreed(subType) {
        return true
      }
    }

    return false
  }

  return
    self.name == "any" ||
    self.name == "str" ||
    self.isArray() ||
    self.isFunction() ||
    self.isMap() ||
    self.isOptional()
}

export fn validateContext (valid: bool) {
  if !valid {
    throw error_NewError("Context is not set")
  }
}

export obj Codegen {
  mut analyzer: ref Analyzer.Analyzer
  mut builtin: CodegenAPIBuiltin
  mut blockData: BlockData
  mut entities: CodegenEntity[]
  mut flags: str[]
  mut mainStatements: AST.CStatement[]
  mut globalStatements: AST.CStatement[]
  mut statements: AST.CStatement[]
  mut lastTypeId: int

  fn init (mut self: ref Self) {
  }

  fn generate (mut self: ref Self) {
    mut file := self.analyzer.files.last()
    self.globalStatements = self._generateBlock(ref file.f.program.body)
    self._assemble()
  }

  fn getFlags (self: ref Self) str {
    mut extraFlags: str[]

    if (
      self.builtin.theAny ||
      self.builtin.theBool ||
      self.builtin.theByte ||
      self.builtin.theError ||
      self.builtin.theMacro ||
      self.builtin.theSafe ||
      self.builtin.theString
    ) {
      extraFlags.push("-lthe")
    }

    result := [
      "-O0",
      "-Wall",
      "-Werror",
      "-Wextra",
      "-pedantic-errors",
      "-Wno-gnu-binary-literal",
      "-Wno-strict-prototypes",
      "-Wno-unused-but-set-variable",
      "-Wno-unused-value",
      "-Wno-unused-variable",
    ].concat(extraFlags).join(" ")
    return result.empty ? "" : (" " + result)
  }

  fn stringify (self: ref Self) str {
    mut result := ""
    l := self.statements.len

    loop i := 0; i < l; i++ {
      result += self.statements[i].stringify()
    }

    return result
  }

  fn _ (mut self: ref Self, name: str) str {
    if self._hasEntity(name) {
      mut item := self._getEntity(name)

      if !item.active {
        item.active = true
      }

      return item.codeName
    } elif name == "bool" || name == "true" || name == "false" {
      self.builtin.stdbool = true
    } elif (
      name == "EXIT_FAILURE" ||
      name == "EXIT_SUCCESS" ||
      name == "NULL" ||
      name == "exit" ||
      name == "size_t"
    ) {
      self.builtin.stddef = true
    } elif (
      name == "fprintf" ||
      name == "printf" ||
      name == "snprintf" ||
      name == "sprintf" ||
      name == "stderr" ||
      name == "stdin" ||
      name == "stdout"
    ) {
      self.builtin.stdio = true
    } elif (
      name == "int8_t" ||
      name == "int16_t" ||
      name == "int32_t" ||
      name == "int64_t" ||
      name == "uint8_t" ||
      name == "uint16_t" ||
      name == "uint32_t" ||
      name == "uint64_t"
    ) {
      self.builtin.stdint = true
    } elif name == "wchar_t" {
      self.builtin.wchar = true
    } elif name == "the_any_t" {
      self.builtin.theAny = true
    } elif name == "the_bool_str" {
      self.builtin.theBool = true
    } elif name == "the_byte_str" {
      self.builtin.theByte = true
    } elif name == "THE_EOL" {
      self.builtin.theMacro = true
    } elif ["the_safe_alloc", "the_safe_free", "the_safe_realloc"].contains(name) {
      self.builtin.theSafe = true
    } elif (
      name == "err_stack_t" ||
      name == "err_state_t" ||
      name == "err_state"
    ) {
      self.builtin.theError = true
    } elif ["the_str_t", "the_str_alloc", "the_str_free"].contains(name) {
      self.builtin.theString = true
    } elif ["str_free"].contains(name) {
      return self._("the_str_free")
    } else {
      throw error_NewError("Tried activating unknown entity '" + name + "'")
    }

    return name
  }

  fn _assemble (mut self: ref Self) {
    mut statements: AST.CStatement[]
    mut file := self.analyzer.files.last()
    mut prevActive := 0

    helpers := EntityHelpers{
      _: (name: str) -> str {
        selfRef := ref self // todo remove after v1
        return self._(name)
      },
      lastTypeId: ref self.lastTypeId,
      t: (it: ref Analyzer.Type) -> str {
        selfRef := ref self // todo remove after v1
        return self._type(it)
      },
      typeDef: (it: ref Analyzer.Type) -> str {
        selfRef := ref self // todo remove after v1
        return self._typeDef(it)
      },
      typeName: (it: ref Analyzer.Type) -> str {
        selfRef := ref self // todo remove after v1
        return self._typeName(it)
      }
    }

    loop {
      statements = []
      mut currentActive := 0

      loop i := 0; i < self.entities.len; i++ {
        entity := self.entities[i]

        if !entity.active {
          continue
        }

        statements.push(entity.generate(helpers, ref file.tm, entity))
        currentActive++
      }

      if prevActive == currentActive {
        break
      }

      prevActive = currentActive
    }

    if self.builtin.theAny { self.statements.push(AST.createIncludeDirective("the/any.h")) }
    if self.builtin.theBool { self.statements.push(AST.createIncludeDirective("the/bool.h")) }
    if self.builtin.theByte { self.statements.push(AST.createIncludeDirective("the/byte.h")) }
    if self.builtin.theError { self.statements.push(AST.createIncludeDirective("the/error.h")) }
    if self.builtin.theMacro { self.statements.push(AST.createIncludeDirective("the/macro.h")) }
    if self.builtin.theSafe { self.statements.push(AST.createIncludeDirective("the/safe.h")) }
    if self.builtin.theString { self.statements.push(AST.createIncludeDirective("the/string.h")) }

    if self.builtin.stdbool { self.statements.push(AST.createIncludeDirective("stdbool.h")) }
    if self.builtin.stddef { self.statements.push(AST.createIncludeDirective("stddef.h")) }
    if self.builtin.stdio { self.statements.push(AST.createIncludeDirective("stdio.h")) }
    if self.builtin.stdint { self.statements.push(AST.createIncludeDirective("stdint.h")) }
    if self.builtin.stdlib { self.statements.push(AST.createIncludeDirective("stdlib.h")) }
    if self.builtin.wchar { self.statements.push(AST.createIncludeDirective("wchar.h")) }

    self.statements.merge(statements)

    self.statements.push(
      AST.createFunctionDeclaration(
        AST.createType("int"),
        "main",
        [],
        AST.createCompoundStatement(self.mainStatements)
      )
    )
  }

  fn _defaultInitializerObjectExpression (mut self: ref Self, it: ref Analyzer.Type) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._defaultInitializerObjectExpression(t.t)
    } elif it.name == "any" {
      return AST.createCastExpression(AST.createType(self._("the_any_t")), AST.createInitializerListExpression([
        AST.createLiteral(-1),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL"))
      ]))
    } elif it.name == "bool" {
      return AST.createIdentifier(self._("false"))
    } elif it.name == "char" {
      return AST.createLiteral("'\\0'")
    } elif it.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_alloc")), [
        AST.createLiteral("\"\"")
      ])
    } elif it.isArray() || it.isMap() {
      return AST.createCallExpression(AST.createIdentifier(self._(it.name + "_alloc")), [
        AST.createLiteral(0)
      ])
    // todo
    // } elif it.isObject() {
      // mut args: AST.CExpression[]
      // loop i := 0; i < it.properties.len; i++ {
      //   property := it.properties[i]
      //   if property.builtin || property.t.isMethod() {
      //     continue
      //   }
      //   args.push(self._defaultInitializerObjectExpression(property.t))
      // }
      // return AST.createCallExpression(AST.createIdentifier(self._(it.name + "_alloc")), args)
    } elif it.isOptional() {
      return AST.createIdentifier(self._("NULL"))
    } elif it.isUnion() {
      // todo
    } elif !it.isFunction() && !it.isReference() {
      return AST.createLiteral(0)
    }

    throw error_NewError("Tried default object expressions declaration on unknown type")
  }

  fn _defaultInitializerVariableDeclaration (mut self: ref Self, it: ref Analyzer.Type) AST.CExpression {
    if it.isAlias () {
      t := it.asAlias()
      return self._defaultInitializerVariableDeclaration(t.t)
    } elif it.name == "any" {
      return AST.createInitializerListExpression([
        AST.createLiteral(-1),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL"))
      ])
    } elif it.name == "bool" {
      return AST.createIdentifier(self._("false"))
    } elif it.name == "char" {
      return AST.createLiteral("'\\0'")
    } elif it.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_alloc")), [AST.createLiteral("\"\"")])
    } elif it.isArray() || it.isMap() {
      return AST.createCallExpression(AST.createIdentifier(self._(it.name + "_alloc")), [
        AST.createLiteral(0)
      ])
    // todo
    // } elif it.isObject() {
      // mut args : AST.CExpression[]
      // loop i := 0; i < it.properties.len; i++ {
      //   property := it.properties[i]
      //   if property.builtin || property.t.isMethod() {
      //     continue
      //   }
      //   args.push(self._defaultInitializerObjectExpression(property.t))
      // }
      // return AST.createCallExpression(AST.createIdentifier(self._(it.name + "_alloc")), args)
    } elif it.isOptional() {
      return AST.createIdentifier(self._("NULL"))
    } elif it.isUnion() {
      // todo
    } elif !it.isFunction() && !it.isReference() {
      return AST.createLiteral(0)
    }

    throw error_NewError("Tried default initializer variable declaration on unknown type")
  }

  fn _functionCopy (mut self: ref Self, it: ref Analyzer.Type, expression: AST.CExpression) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionCopy(t.t, expression)
    } elif it.name == "any" {
      return AST.createCallExpression(AST.createIdentifier(self._("any_copy")), [expression])
    } elif it.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("str_copy")), [expression])
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._(typeName + "_copy")), [expression])
    }

    return expression
  }

  fn _functionEq (
    mut self: ref Self,
    it: ref Analyzer.Type,
    left: AST.CExpression,
    right: AST.CExpression,
    reverse := false
  ) AST.CExpression {
    direction := reverse ? "ne" : "eq"

    if it.isAlias() {
      t := it.asAlias()
      return self._functionEq(t.t, left, right, reverse)
    } elif it.name == "any" {
      //   return CodegenASTExprAssign::create(
      //     CodegenASTExprAccess::create(leftExpr, "d"),
      //     reverse ? "!=" : "==",
      //     CodegenASTExprAccess::create(rightExpr, "d")
      //   )
    } elif it.name == "str" {
      //   return CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_("str_" + direction)),
      //     {this->_genCopyFn(type, leftExpr), this->_genCopyFn(type, rightExpr)}
      //   )
    } elif (
      it.isArray() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      //   auto typeInfo = this->_typeInfo(type);
      //   return CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_(typeInfo.typeName + "_" + direction)),
      //     {this->_genCopyFn(typeInfo.type, leftExpr), this->_genCopyFn(typeInfo.type, rightExpr)}
      //   )
    } else {
      //   return CodegenASTExprAssign::create(leftExpr, reverse ? "!=" : "==", rightExpr)
    }
  }

  fn _functionFree (mut self: ref Self, it: ref Analyzer.Type, expression: AST.CExpression) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionFree(t.t, expression)
    } elif it.name == "any" {
      //   result = CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_("any_free")),
      //     {CodegenASTExprCast::create(CodegenASTType::create(this->_("struct any")), result)}
      //   )
    } elif it.name == "str" {
      //   result = CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_("str_free")),
      //     {CodegenASTExprCast::create(CodegenASTType::create(this->_("struct str")), result)}
      //   )
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      //   auto typeInfo = this->_typeInfo(type);
      //   result = CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_(typeInfo.typeName + "_free")),
      //     {CodegenASTExprCast::create(CodegenASTType::create(typeInfo.typeCodeTrimmed), result)}
      //   )
    }

    return expression
  }

  fn _functionNe (
    mut self: ref Self,
    it: ref Analyzer.Type,
    left: AST.CExpression,
    right: AST.CExpression
  ) AST.CExpression {
    return self._functionEq(it, left, right, reverse: true)
  }

  fn _functionRealloc (
    mut self: ref Self,
    it: ref Analyzer.Type,
    left: AST.CExpression,
    right: AST.CExpression
  ) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionRealloc(t.t, left, right)
    } elif it.name == "any" {
      //   result = CodegenASTExprAssign::create(
      //     leftExpr,
      //     "=",
      //     CodegenASTExprCall::create(CodegenASTExprAccess::create(this->_("any_realloc")), {leftExpr, rightExpr})
      //   );
    } elif it.name == "str" {
      //   result = CodegenASTExprAssign::create(
      //     leftExpr,
      //     "=",
      //     CodegenASTExprCall::create(CodegenASTExprAccess::create(this->_("str_realloc")), {leftExpr, rightExpr})
      //   );
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      //   auto typeInfo = this->_typeInfo(type);
      //   result = CodegenASTExprAssign::create(
      //     leftExpr,
      //     "=",
      //     CodegenASTExprCall::create(
      //       CodegenASTExprAccess::create(this->_(typeInfo.typeName + "_realloc")),
      //       {leftExpr, rightExpr}
      //     )
      //   );
    }

    return AST.createIdentifier(self._("NULL"))
  }

  fn _functionStr (
    mut self: ref Self,
    it: ref Analyzer.Type,
    expression: AST.CExpression,
    copy := true,
    escape := true
  ) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionStr(t.t, expression, copy, escape)
    } elif it.name == "any" {
      //   result = CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_("any_str")),
      //     {copy ? this->_genCopyFn(realType, result) : result}
      //   );
    } elif it.name == "str" && escape {
      //   result = CodegenASTExprCall::create(CodegenASTExprAccess::create(this->_("str_escape")), {result});
    } elif it.name == "str" {
      //   result = copy ? this->_genCopyFn(realType, result) : result;
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      //   auto typeInfo = this->_typeInfo(realType);
      //   result = CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_(typeInfo.realTypeName + "_str")),
      //     {copy ? this->_genCopyFn(realType, result) : result}
      //   );
    } elif it.isEnum() {
      //   result = CodegenASTExprCall::create(CodegenASTExprAccess::create(this->_("enum_str")), {result});
    } else {
      //   auto typeInfo = this->_typeInfo(realType);
      //   result = CodegenASTExprCall::create(
      //     CodegenASTExprAccess::create(this->_(typeInfo.realTypeName + "_str")),
      //     {result}
      //   );
    }

    return expression
  }

  fn _generateBlock (mut self: ref Self, items: ref Parser.Statement[]) AST.CStatement[] {
    mut result: AST.CStatement[]
    l := items.len

    loop i := 0; i < l; i++ {
      result.push(self._generateStatement(items[i]))
    }

    return result
  }

  fn _generateExpression (mut self: ref Self, item: ref Parser.Expression) AST.CExpression {
    helpers := ExpressionHelpers{
      _: (name: str) -> str {
        selfRef := ref self // todo remove after v1
        return self._(name)
      },
      e: (item: ref Parser.Expression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._generateExpression(item)
      },
      functionCopy: (it: ref Analyzer.Type, expression: AST.CExpression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._functionCopy(it, expression)
      },
      functionEq: (it: ref Analyzer.Type, left: AST.CExpression, right: AST.CExpression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._functionEq(it, left, right)
      },
      functionFree: (it: ref Analyzer.Type, expression: AST.CExpression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._functionFree(it, expression)
      },
      functionNe: (it: ref Analyzer.Type, left: AST.CExpression, right: AST.CExpression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._functionNe(it, left, right)
      },
      functionRealloc: (it: ref Analyzer.Type, left: AST.CExpression, right: AST.CExpression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._functionRealloc(it, left, right)
      },
      functionStr: (it: ref Analyzer.Type, expression: AST.CExpression) -> AST.CExpression {
        selfRef := ref self // todo remove after v1
        return self._functionStr(it, expression)
      },
      get: (item: str) -> ref CodegenEntity {
        selfRef := ref self // todo remove after v1
        return self._getEntity(item)
      },
      has: (item: str) -> bool {
        selfRef := ref self // todo remove after v1
        return self._hasEntity(item)
      },
      t: (it: ref Analyzer.Type) -> str {
        selfRef := ref self // todo remove after v1
        return self._type(it)
      },
      typeDef: (it: ref Analyzer.Type) -> str {
        selfRef := ref self // todo remove after v1
        return self._typeDef(it)
      },
      typeName: (it: ref Analyzer.Type) -> str {
        selfRef := ref self // todo remove after v1
        return self._typeName(it)
      }
    }

    mut result: AST.CExpression?

    if (
      (result = generateIdentifier(helpers, item)) != nil || // todo test
      (result = generateCallExpression(helpers, item)) != nil || // todo test
      (result = generateLiteral(helpers, item)) != nil ||
      (result = generateParenthesizedExpression(helpers, item)) != nil ||
      (result = generateAssignmentExpression(helpers, item)) != nil ||
      (result = generateBinaryExpression(helpers, item)) != nil ||
      (result = generateConditionalExpression(helpers, item)) != nil ||
      (result = generateReferenceExpression(helpers, item)) != nil ||
      (result = generateUnaryExpression(helpers, item)) != nil
    ) {
      return result
    }

    throw error_NewError("Tried code generation for unknown expression")
  }

  fn _generateStatement (mut self: ref Self, item: ref Parser.Statement) AST.CStatement {
    if item.isBlock() {
      statement := item.asBlock()
      return AST.createCompoundStatement(self._generateBlock(ref statement.body))
    } elif item.isExpression() {
      statement := item.asExpression()
      return AST.createExpressionStatement(self._generateExpression(ref statement.expression))
    } elif item.isMainDeclaration() {
      statement := item.asMainDeclaration()
      statementBody := statement.body.asBlock()

      self.mainStatements = self._generateBlock(ref statementBody.body)
      self.mainStatements.merge(self.blockData.getCleanup())

      return AST.createEmptyStatement()
    } elif item.isVariableDeclaration() {
      statement := item.asVariableDeclaration()
      validateContext(item.context is Analyzer.VariableDeclarationContext)
      context := item.context as Analyzer.VariableDeclarationContext
      typeName := self._typeName(context.varType)
      t := AST.createType(self._type(context.varType))

      if typeShouldBeFreed(context.varType) {
        self.blockData.addCleanup(
          AST.createExpressionStatement(
            AST.createCallExpression(
              AST.createIdentifier(self._(typeName + "_free")),
              [AST.createIdentifier(statement.name.name)]
            )
          )
        )
      }

      initializer := statement.initializer == nil
        ? self._defaultInitializerVariableDeclaration(context.varType)
        : self._generateExpression(ref statement.initializer)

      return AST.createVariableDeclaration(t, statement.name.name, initializer)
    }

    throw error_NewError("Tried code generation for unknown statement")
  }

  fn _getEntity (self: ref Self, name: str) ref CodegenEntity {
    loop i := self.entities.len - 1; i >= 0; i-- {
      entity := self.entities[i]

      if entity.name == name {
        return entity
      }
    }

    throw error_NewError("Entity with name '" + name + "' doesn't exists")
  }

  fn _hasEntity (self: ref Self, name: str) bool {
    loop i := self.entities.len - 1; i >= 0; i-- {
      entity := self.entities[i]

      if entity.name == name {
        return true
      }
    }

    return false
  }

  fn _type (mut self: ref Self, it: ref Analyzer.Type) str {
    if it.isAlias() {
      t := it.asAlias()
      return self._type(t.t)
    } elif it.name == "any" {
      return self._("the_any_t") + " "
    } elif it.name == "bool" {
      return self._("bool") + " "
    } elif it.name == "byte" {
      return "unsigned char "
    } elif it.name == "char" {
      return "char "
    } elif it.name == "f32" {
      return "float "
    } elif it.name == "f64" || it.name == "float" {
      return "double "
    } elif it.name == "i8" {
      return self._("int8_t") + " "
    } elif it.name == "i16" {
      return self._("int16_t") + " "
    } elif it.name == "i32" || it.name == "int" {
      return self._("int32_t") + " "
    } elif it.name == "i64" {
      return self._("int64_t") + " "
    } elif it.name == "isize" {
      return self._("ptrdiff_t") + " "
    } elif it.name == "rune" {
      return self._("wchar_t") + " "
    } elif it.name == "str" {
      return self._("the_str_t") + " "
    } elif it.name == "u8" {
      return self._("uint8_t") + " "
    } elif it.name == "u16" {
      return self._("uint16_t") + " "
    } elif it.name == "u32" {
      return self._("uint32_t") + " "
    } elif it.name == "u64" {
      return self._("uint64_t") + " "
    } elif it.name == "usize" {
      return self._("size_t") + " "
    } elif it.name == "void" {
      return "void "
    } elif it.isOptional() {
      typeName := self._typeName(it)
      name := typeName + "_t"
      if !self._hasEntity(name) { self._typeOptional(it, typeName, name) }
      return self._(name) + " "
    } elif it.isReference() {
      typeName := self._typeName(it)
      name := typeName + "_t"
      if !self._hasEntity(name) { self._typeReference(it, typeName, name) }
      return self._(name) + " "
    } elif (
      it.isArray() ||
      it.isEnum() ||
      it.isFunction() ||
      it.isMap() ||
      it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      return self._(self._typeName(it) + "_t") + " "
    }

    throw error_NewError("Failed to generate type for '" + it.name + "'")
  }

  fn _typeDef (mut self: ref Self, it: ref Analyzer.Type) str {
    typeName := "TYPE_" + self._typeName(it)

    if self._hasEntity(typeName) {
      return typeName
    }

    self.entities.push(CodegenEntity{
      name: typeName,
      codeName: typeName,
      context: it,
      generate: (helpers: EntityHelpers, mut tm: ref Analyzer.TypeMap, entity: ref CodegenEntity) -> AST.CStatement {
        lastTypeId := ++helpers.lastTypeId
        return AST.createDefineDirective(entity.codeName, nil, lastTypeId.str())
      }
    })
  }

  fn _typeName (mut self: ref Self, it: ref Analyzer.Type) str {
    if it.isAlias() {
      t := it.asAlias()
      return self._typeName(t.t)
    } elif it.isArray() {
      t := it.asArray()
      return "arr_" + self._typeName(t.elementType)
    } elif it.isEnum() || it.isObject() {
      return it.name
    } elif it.isFunction() {
      t := it.asFunction()
      mut name := "fn_" + (t.asynchronous ? "a" : "s")

      loop i := 0; i < t.parameters.len; i++ {
        parameter := t.parameters[i]
        name += typeParameterId(parameter) + self._typeName(parameter.t)
      }

      return name + "FR" + self._typeName(t.returnType) + "FE"
    } elif it.isMap() {
      t := it.asMap()
      return "map_" + self._typeName(t.keyType) + "MS" + self._typeName(t.valueType) + "ME"
    } elif it.isMethod() {
      t := it.asMethod()
      mut name := "fn_" + (t.asynchronous ? "a" : "s")

      if t.withSelf {
        name += "FS" + self._typeName(t.selfType)
      }

      loop i := 0; i < t.parameters.len; i++ {
        parameter := t.parameters[i]
        name += typeParameterId(parameter) + self._typeName(parameter.t)
      }

      return name + "FR" + self._typeName(t.returnType) + "FE"
    } elif it.isOptional() {
      t := it.asOptional()
      return "opt_" + self._typeName(t.t)
    } elif it.isReference() {
      t := it.asReference()
      return "ref_" + self._typeName(t.t)
    } elif it.isUnion() {
      t := it.asUnion()
      mut name := ""

      loop i := 0; i < t.types.len; i++ {
        subType := t.types[i] as ref Analyzer.Type
        name += i == 0 ? "" : "US"
        name += self._typeName(subType)
      }

      return "union_" + name + "UE"
    }

    throw error_NewError("Failed to generate type name for '" + it.name + "'")
  }

  fn _typeOptional (mut self: ref Self, it: ref Analyzer.Type, typeName: str, name: str) {
    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: it,
      generate: (helpers: EntityHelpers, mut tm: ref Analyzer.TypeMap, entity: ref CodegenEntity) -> AST.CStatement {
        it := entity.context as ref Analyzer.Type
        t := it.asOptional()
        return AST.createTypedefDeclaration(AST.createType(helpers.t(t.t) + "*"), entity.codeName)
      }
    })

    self.entities.push(CodegenEntity{
      name: typeName + "_alloc",
      codeName: typeName + "_alloc",
      context: it,
      generate: (helpers: EntityHelpers, mut tm: ref Analyzer.TypeMap, entity: ref CodegenEntity) -> AST.CStatement {
        it := entity.context as ref Analyzer.Type
        t := it.asOptional()
        typeName := helpers.typeName(it)
        name := typeName + "_t"
        underlyingCType := AST.createType(helpers.t(t.t))

        return AST.createFunctionDeclaration(AST.createType(helpers._(name)), entity.codeName, [
          AST.createFunctionParameter(underlyingCType, "n")
        ], AST.createCompoundStatement([
          AST.createVariableDeclaration(
            AST.createType(helpers._(name)),
            "r",
            AST.createCallExpression(AST.createIdentifier(helpers._("the_safe_alloc")), [
              AST.createCallExpression(AST.createIdentifier("sizeof"), [underlyingCType])
            ])
          ),
          AST.createExpressionStatement(
            AST.createAssignmentExpression(
              AST.createUnaryExpression("*", AST.createIdentifier("r")),
              "=",
              AST.createIdentifier("n")
            )
          ),
          AST.createReturnStatement(AST.createIdentifier("r"))
        ]))
      }
    })

    self.entities.push(CodegenEntity{
      name: typeName + "_free",
      codeName: typeName + "_free",
      context: it,
      generate: (helpers: EntityHelpers, mut tm: ref Analyzer.TypeMap, entity: ref CodegenEntity) -> AST.CStatement {
        it := entity.context as ref Analyzer.Type
        typeName := helpers.typeName(it)
        name := typeName + "_t"

        return AST.createFunctionDeclaration(AST.createType("void"), entity.codeName, [
          AST.createFunctionParameter(AST.createType(helpers._(name)), "n")
        ], AST.createCompoundStatement([
          AST.createIfStatement(
            AST.createBinaryExpression(AST.createIdentifier("n"), "==", AST.createIdentifier(helpers._("NULL"))),
            AST.createReturnStatement()
          ),
          // todo
          // if shouldBeFreed(underlyingTypeInfo.type) {
          //   self.functionFree(underlyingTypeInfo.type, AST.createUnaryExpression("*", CodegenASTExprAccess::create("n")))
          // }
          AST.createExpressionStatement(
            AST.createCallExpression(AST.createIdentifier(helpers._("the_safe_free")), [AST.createIdentifier("n")])
          )
        ]))
      }
    })
  }

  fn _typeReference (mut self: ref Self, it: ref Analyzer.Type, typeName: str, name: str) {
    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: it,
      generate: (helpers: EntityHelpers, mut tm: ref Analyzer.TypeMap, entity: ref CodegenEntity) -> AST.CStatement {
        it := entity.context as ref Analyzer.Type
        t := it.asReference()
        return AST.createTypedefDeclaration(AST.createType(helpers.t(t.t) + "*"), entity.codeName)
      }
    })
  }
}

export fn compile (analyzer: ref Analyzer.Analyzer, executablePath: str) {
  mut generator := Codegen{analyzer: analyzer}
  generator.init()
  generator.generate()

  codePath := executablePath + ".c"

  fs_writeFileSync(codePath, generator.stringify().toBuffer())
  process_runSync("clang '" + codePath + "' -o '" + executablePath + "' " + generator.getFlags())
  fs_rmSync(codePath)
}
