/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Analyzer from "the/analyzer"
import * as AST from "the/c"
import * as Parser from "the/parser"

// todo error object needs special generation rules to move message and stack properties up front
// todo implement await expression
// todo implement closure expression
// todo implement map expression
// todo implement object expression
// todo implement property access expression

// todo test call expression
// todo test expressions with types other than primitive

export obj CodegenAPIBuiltin {
  mut theAny: bool
  mut theArray: bool
  mut theBool: bool
  mut theByte: bool
  mut theChar: bool
  mut theError: bool
  mut theFn: bool
  mut theGlobals: bool
  mut theMacro: bool
  mut theNumber: bool
  mut theOptional: bool
  mut theReference: bool
  mut theRune: bool
  mut theSafe: bool
  mut theString: bool
  mut theThreadPool: bool
  mut theUnion: bool
  mut stdarg: bool
  mut stdbool: bool
  mut stddef: bool
  mut stdint: bool
  mut stdio: bool
  mut stdlib: bool
  mut wchar: bool
}

export enum BlockDataType {
  Block,
  Fn,
  Loop
}

export obj BlockDataContext {
  t: BlockDataType
  mut label: int
  mut setup: AST.CStatement[]
  mut teardown: AST.CStatement[]
  mut usedBreakVariable: bool
  mut usedContinueVariable: bool
  mut usedReturnVariable: bool
  mut usedValueVariable: bool

  fn empty (self :ref Self) bool {
    return self.setup.empty && self.teardown.empty
  }
}

export obj BlockData {
  mut blocks: BlockDataContext[]
  mut lastBreakVariable: int
  mut lastContinueVariable: int

  fn init (mut self: ref Self) {}

  fn addSetup (mut self: ref Self, item: AST.CStatement) {
    self.blocks.last.setup.push(item)
  }

  fn addTeardown (mut self: ref Self, item: AST.CStatement) {
    self.blocks.last.teardown.push(item)
  }

  fn decrease (mut self: ref Self) BlockDataContext {
    last := self.blocks.pop()

    result := BlockDataContext{
      setup: last.setup,
      teardown: last.teardown.reverse()
    }

    return result
  }

  fn decreaseVariableIndexes (mut self: ref Self) {
    self.lastBreakVariable--
    self.lastContinueVariable--
  }

  fn getBreakVariable (mut self: ref Self) str {
    self.loopUntil(.Loop, (mut block: ref BlockDataContext) -> void {
      block.usedBreakVariable = true
    })

    return "b" + self.lastBreakVariable.str()
  }

  fn getContinueVariable (mut self: ref Self) str {
    self.loopUntil(.Loop, (mut block: ref BlockDataContext) -> void {
      block.usedBreakVariable = true
    })

    return "c" + self.lastBreakVariable.str()
  }

  fn getReturnVariable (mut self: ref Self) str {
    self.loopUntil(.Fn, (mut block: ref BlockDataContext) -> void {
      block.usedReturnVariable = true
    })

    return "r"
  }

  fn getValueVariable (mut self: ref Self) str {
    self.loopUntil(.Fn, (mut block: ref BlockDataContext) -> void {
      block.usedValueVariable = true
    })

    return "v"
  }

  fn hasUntil (self: ref Self, t := BlockDataType.Block) bool {
    loop i := self.blocks.len - 1; i >= 0; i-- {
      block := self.blocks[i]

      if !block.empty() {
        return true
      }

      if block.t == t {
        break
      }
    }

    return false
  }

  fn increase (mut self: ref Self, t := BlockDataType.Block) {
    self.blocks.push(BlockDataContext{t: t})
  }

  fn increaseVariableIndexes (mut self: ref Self) {
    self.lastBreakVariable++
    self.lastContinueVariable++
  }

  fn loopUntil (mut self: ref Self, t: BlockDataType, cb: (mut block: ref BlockDataContext) -> void) {
    loop i := self.blocks.len - 1; i >= 0; i-- {
      mut block := self.blocks[i]
      cb(block)

      if block.t == t {
        break
      }
    }
  }

  fn merge (mut self: ref Self, setup: AST.CStatement[], teardown: AST.CStatement[]) {
    self.blocks.last.setup.merge(setup)
    self.blocks.last.teardown.merge(teardown.reverse())
  }

  fn usedBreakVariable (self: ref Self) bool {
    loop i := self.blocks.len - 1; i >= 0; i-- {
      block := self.blocks[i]

      if block.usedBreakVariable {
        return true
      }

      if block.t == .Loop {
        break
      }
    }

    return false
  }

  fn usedContinueVariable (self: ref Self) bool {
    loop i := self.blocks.len - 1; i >= 0; i-- {
      block := self.blocks[i]

      if block.usedContinueVariable {
        return true
      }

      if block.t == .Loop {
        break
      }
    }

    return false
  }
}

export type GenerateReturnType = AST.CStatement | AST.CStatement[]

export obj CodegenEntity {
  mut active: bool
  mut name: str
  mut codeName: str
  mut context: any
  mut generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType
}

export fn expressionIsBuiltinMethod (item: ref Parser.Expression) bool {
  if item.isPropertyAccess() {
    body := item.asPropertyAccess()
    return ["str"].contains(body.name.name)
  }

  return false
}

export fn expressionShouldBeAllocated (item: ref Parser.Expression) bool {
  if !item.hasParent() && item.hasParentNode() {
    parent := item.parentNode()
    return !parent.isVariableDeclaration()
  } elif item.isParenthesized() {
    expression := item.asParenthesized()
    return expressionShouldBeAllocated(ref expression.expression)
  } elif item.hasParent() {
    mut parent := item.parent()

    loop parent.isParenthesized() {
      if !parent.hasParent() {
        break
      }

      parent = parent.parent()
    }

    if parent.isConditional() {
      return false
    }
  }

  return !item.isIdentifier() && !item.isAssignment()
}

export fn expressionShouldBeFreed (item: ref Parser.Expression) bool {
  if item.hasParent() {
    return false
  } elif item.hasParentNode() {
    parent := item.parentNode()
    return !parent.isVariableDeclaration()
  } else {
    return true
  }
}

export fn statementHasPrecedingNonVarDecl (item: ref Parser.Statement) bool {
  mut it := item

  loop it.hasPrev() {
    it = it.prev()

    if !it.isVariableDeclaration() {
      return true
    }
  }

  return false
}

export fn statementIsMacroInvocation (item: ref AST.CStatement) bool {
  if !item.isExpressionStatement() { return false }
  expression := item.asExpressionStatement()
  return expression.expression.isMacroInvocation()
}

export fn statementIsMacroInvocationDeclare (item: ref AST.CStatement) bool {
  expression := item.asExpressionStatement()
  macroInvocation := expression.expression.asMacroInvocation()
  return macroInvocation.callee.find("DECLARE") != -1
}

export fn typeHasSelfParam (it: ref Analyzer.Type) bool {
  if it.isMethod() {
    t := it.asMethod()
    return t.withSelf
  }

  return false
}

export fn typeParameterId (parameter: ref Analyzer.TypeParameter) str {
  if parameter.mutable && parameter.required { return "FP5" }
  elif parameter.mutable && parameter.variadic { return "FP6" }
  elif parameter.mutable { return "FP2" }
  elif parameter.required { return "FP3" }
  elif parameter.variadic { return "FP4" }
  else { return "FP1" }
}

export fn typePrimitive (it: ref Analyzer.Type) bool {
  return !(
    it.name == "any" ||
    it.name == "str" ||
    it.isArray() ||
    it.isFunction() ||
    it.isMap() ||
    // todo
    // it.isObject() ||
    it.isOptional() ||
    it.isUnion()
  )
}

export fn typeSafeForTernaryAlternate (it: ref Analyzer.Type) bool {
  return !(
    it.name == "any" ||
    it.name == "str" ||
    it.isArray() ||
    it.isFunction() ||
    it.isMap() ||
    // todo
    // it.isObj() ||
    it.isOptional() ||
    it.isUnion()
  )
}

export fn typeSafeForVaArg (mut tm: ref Analyzer.TypeMap, it: ref Analyzer.Type) ref Analyzer.Type {
  return ["i8", "i16", "u8", "u16", "byte", "char"].contains(it.name) ? tm.get("i32") : it
}

export fn typeShouldBeAllocated (self: ref Analyzer.Type) bool {
  if self.isAlias() {
    t := self.asAlias()
    return typeShouldBeAllocated(t.t)
  }

  // todo object
  return (
    self.name == "any" ||
    self.name == "str" ||
    self.isArray() ||
    self.isMap() ||
    self.isOptional() ||
    self.isUnion()
  )
}

export fn typeShouldBeFreed (self: ref Analyzer.Type) bool {
  if self.isAlias() {
    t := self.asAlias()
    return typeShouldBeFreed(t.t)
  } elif self.isUnion() {
    t := self.asUnion()

    loop i := 0; i < t.types.len; i++ {
      subType := t.types[i]

      if typeShouldBeFreed(subType) {
        return true
      }
    }

    return false
  }

  // todo object
  return
    self.name == "any" ||
    self.name == "str" ||
    self.isArray() ||
    self.isFunction() ||
    self.isMap() ||
    self.isOptional()
}

export fn validateContext (valid: bool) {
  if !valid {
    throw error_NewError("Context is not set")
  }
}

export const BUILTIN_ENTITIES := {
  "stdarg": ["va_arg", "va_copy", "va_end", "va_list", "va_start"],
  "stdbool": ["bool", "false", "true"],
  "stddef": [
    "EXIT_FAILURE",
    "NULL",
    "exit",
    "size_t"
  ],
  "stdio": [
    "fprintf",
    "printf",
    "snprintf",
    "sprintf",
    "stderr",
    "stdin",
    "stdout"
  ],
  "stdint": [
    "int8_t",
    "int16_t",
    "int32_t",
    "int64_t",
    "uint8_t",
    "uint16_t",
    "uint32_t",
    "uint64_t"
  ],
  "wchar": ["wchar_t"],
  "theAny": [
    "THE_ANY_DECLARE",
    "THE_ANY_DEFINE",
    "the_any_t",
    "the_any_copy",
    "the_any_eq",
    "the_any_free",
    "the_any_ne",
    "the_any_realloc",
    "the_any_str"
  ],

  "theArray": ["THE_ARRAY_DECLARE", "THE_ARRAY_DEFINE"],
  "theBool": ["the_bool_str"],
  "theByte": ["the_byte_str"],

  "theChar": [
    "the_char_byte",
    "the_char_isDigit",
    "the_char_isLetter",
    "the_char_isLetterOrDigit",
    "the_char_isLower",
    "the_char_isUpper",
    "the_char_isWhitespace",
    "the_char_lower",
    "the_char_repeat",
    "the_char_str",
    "the_char_upper"
  ],

  "theError": [
    "TYPE_Error",
    "the_Error_t",
    "the_err_buf_t",
    "the_err_stack_t",
    "the_err_state",
    "the_err_state_t",
    "the_error_assign",
    "the_error_assign_generic",
    "the_error_buf_decrease",
    "the_error_buf_increase",
    "the_error_stack_pop",
    "the_error_stack_push",
    "the_error_unset",
    "the_Error_alloc",
    "the_Error_free"
  ],

  "theFn": [
    "THE_FUNCTION_DECLARE",
    "THE_FUNCTION_DECLARE_WITH_PARAMS",
    "THE_FUNCTION_DEFINE",
    "THE_FUNCTION_DEFINE_WITH_PARAMS",
    "the_fn_ctx_free_generic"
  ],

  "theGlobals": [
    "the_arr_any_t",
    "the_arr_any_alloc",
    "the_arr_any_at",
    "the_arr_any_clear",
    "the_arr_any_concat",
    "the_arr_any_contains",
    "the_arr_any_copy",
    "the_arr_any_empty",
    "the_arr_any_eq",
    "the_arr_any_filter",
    "the_arr_any_first",
    "the_arr_any_forEach",
    "the_arr_any_free",
    "the_arr_any_join",
    "the_arr_any_last",
    "the_arr_any_merge",
    "the_arr_any_pop",
    "the_arr_any_push",
    "the_arr_any_realloc",
    "the_arr_any_remove",
    "the_arr_any_reverse",
    "the_arr_any_slice",
    "the_arr_any_sort",
    "the_arr_any_str",

    "the_fn_sFP3anyFRboolFE_t",
    "the_fn_sFP3anyFRboolFE_params_t",
    "the_fn_sFP3anyFRboolFE_alloc",
    "the_fn_sFP3anyFRboolFE_copy",
    "the_fn_sFP3anyFRboolFE_eq",
    "the_fn_sFP3anyFRboolFE_free",
    "the_fn_sFP3anyFRboolFE_realloc",
    "the_fn_sFP3anyFRboolFE_str",

    "the_fn_sFP3anyFP3intFRvoidFE_t",
    "the_fn_sFP3anyFP3intFRvoidFE_params_t",
    "the_fn_sFP3anyFP3intFRvoidFE_alloc",
    "the_fn_sFP3anyFP3intFRvoidFE_copy",
    "the_fn_sFP3anyFP3intFRvoidFE_eq",
    "the_fn_sFP3anyFP3intFRvoidFE_free",
    "the_fn_sFP3anyFP3intFRvoidFE_realloc",
    "the_fn_sFP3anyFP3intFRvoidFE_str",

    "the_fn_sFP3anyFP3anyFRintFE_t",
    "the_fn_sFP3anyFP3anyFRintFE_params_t",
    "the_fn_sFP3anyFP3anyFRintFE_alloc",
    "the_fn_sFP3anyFP3anyFRintFE_copy",
    "the_fn_sFP3anyFP3anyFRintFE_eq",
    "the_fn_sFP3anyFP3anyFRintFE_free",
    "the_fn_sFP3anyFP3anyFRintFE_realloc",
    "the_fn_sFP3anyFP3anyFRintFE_str",

    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_t",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_params_t",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_alloc",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_copy",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_eq",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_free",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_realloc",
    "the_fn_sFP4arr_anyFP1strFP1strFP1strFRvoidFE_str",

    "the_print"
  ],

  "theMacro": ["THE_OS_WINDOWS", "THE_OS_MACOS", "THE_OS_LINUX", "THE_EOL", "THE_PATH_SEP"],

  "theNumber": [
    "the_f32_str",
    "the_f64_str",
    "the_float_str",
    "the_i8_str",
    "the_i16_str",
    "the_i32_str",
    "the_i64_str",
    "the_int_str",
    "the_isize_str",
    "the_u8_str",
    "the_u16_str",
    "the_u32_str",
    "the_u64_str",
    "the_usize_str"
  ],

  "theOptional": ["THE_OPTIONAL_DECLARE", "THE_OPTIONAL_DEFINE"],
  "theReference": ["THE_REFERENCE_DECLARE"],

  "theRune": [
    "the_rune_byte",
    "the_rune_isDigit",
    "the_rune_isLetter",
    "the_rune_isLetterOrDigit",
    "the_rune_isLower",
    "the_rune_isUpper",
    "the_rune_isWhitespace",
    "the_rune_lower",
    "the_rune_repeat",
    "the_rune_str",
    "the_rune_upper"
  ],

  "theSafe": [
    "the_safe_alloc",
    "the_safe_calloc",
    "the_safe_free",
    "the_safe_realloc",
    "the_safe_swap"
  ],

  "theThreadPool": ["the_thread_pool_init"],

  "theString": [
    "the_arr_str_t",
    "the_arr_str_alloc",
    "the_arr_str_at",
    "the_arr_str_clear",
    "the_arr_str_concat",
    "the_arr_str_contains",
    "the_arr_str_copy",
    "the_arr_str_empty",
    "the_arr_str_eq",
    "the_arr_str_filter",
    "the_arr_str_first",
    "the_arr_str_forEach",
    "the_arr_str_free",
    "the_arr_str_join",
    "the_arr_str_last",
    "the_arr_str_merge",
    "the_arr_str_pop",
    "the_arr_str_push",
    "the_arr_str_realloc",
    "the_arr_str_remove",
    "the_arr_str_reverse",
    "the_arr_str_slice",
    "the_arr_str_sort",
    "the_arr_str_str",

    "the_fn_sFP3strFRboolFE_t",
    "the_fn_sFP3strFRboolFE_params_t",
    "the_fn_sFP3strFRboolFE_alloc",
    "the_fn_sFP3strFRboolFE_copy",
    "the_fn_sFP3strFRboolFE_eq",
    "the_fn_sFP3strFRboolFE_free",
    "the_fn_sFP3strFRboolFE_realloc",
    "the_fn_sFP3strFRboolFE_str",

    "the_fn_sFP3strFP3intFRvoidFE_t",
    "the_fn_sFP3strFP3intFRvoidFE_params_t",
    "the_fn_sFP3strFP3intFRvoidFE_alloc",
    "the_fn_sFP3strFP3intFRvoidFE_copy",
    "the_fn_sFP3strFP3intFRvoidFE_eq",
    "the_fn_sFP3strFP3intFRvoidFE_free",
    "the_fn_sFP3strFP3intFRvoidFE_realloc",
    "the_fn_sFP3strFP3intFRvoidFE_str",

    "the_fn_sFP3strFP3strFRintFE_t",
    "the_fn_sFP3strFP3strFRintFE_params_t",
    "the_fn_sFP3strFP3strFRintFE_alloc",
    "the_fn_sFP3strFP3strFRintFE_copy",
    "the_fn_sFP3strFP3strFRintFE_eq",
    "the_fn_sFP3strFP3strFRintFE_free",
    "the_fn_sFP3strFP3strFRintFE_realloc",
    "the_fn_sFP3strFP3strFRintFE_str",

    "the_str_t",
    "the_str_empty_val",
    "the_str_alloc",
    "the_str_calloc",
    "the_str_at",
    "the_str_concat",
    "the_str_contains",
    "the_str_copy",
    "the_str_empty",
    "the_str_eq",
    "the_str_escape",
    "the_str_find",
    "the_str_free",
    "the_str_ge",
    "the_str_gt",
    "the_str_le",
    "the_str_lines",
    "the_str_lower",
    "the_str_lowerFirst",
    "the_str_lt",
    "the_str_ne",
    "the_str_not",
    "the_str_realloc",
    "the_str_replace",
    "the_str_slice",
    "the_str_split",
    "the_str_toFloat",
    "the_str_toF32",
    "the_str_toF64",
    "the_str_toIsize",
    "the_str_toI8",
    "the_str_toI16",
    "the_str_toI32",
    "the_str_toI64",
    "the_str_toUsize",
    "the_str_toU8",
    "the_str_toU16",
    "the_str_toU32",
    "the_str_toU64",
    "the_str_trim",
    "the_str_trimEnd",
    "the_str_trimStart",
    "the_str_upper",
    "the_str_upperFirst"
  ],

  "theUnion": ["THE_UNION_DECLARE", "THE_UNION_DEFINE"]
}

export obj Codegen {
  mut analyzer: ref Analyzer.Analyzer
  mut builtin: CodegenAPIBuiltin
  mut blockData: BlockData
  mut entities: CodegenEntity[]
  mut flags: str[]
  mut lastLabelId: int
  mut lastTypeId: int
  mut lastVarId: int
  mut mainStatements: AST.CStatement[]
  mut globalStatements: AST.CStatement[]
  mut returnType: (ref Analyzer.Type)?
  mut statements: AST.CStatement[]
  mut typeDefs: int[str]

  fn init (mut self: ref Self) {
    self.blockData.init()
  }

  fn generate (mut self: ref Self) {
    mut file := self.analyzer.files.last()
    self.globalStatements = self._generateBlock(ref file.f.program.body, preserveData: true)
    self._assemble()
  }

  fn getFlags (self: ref Self) str {
    mut extraFlags: str[]

    if (
      self.builtin.theAny ||
      self.builtin.theArray ||
      self.builtin.theBool ||
      self.builtin.theByte ||
      self.builtin.theChar ||
      self.builtin.theError ||
      self.builtin.theFn ||
      self.builtin.theGlobals ||
      self.builtin.theMacro ||
      self.builtin.theNumber ||
      self.builtin.theOptional ||
      self.builtin.theReference ||
      self.builtin.theRune ||
      self.builtin.theSafe ||
      self.builtin.theString ||
      self.builtin.theThreadPool ||
      self.builtin.theUnion
    ) {
      extraFlags.push("-lthe")
    }

    result := [
      "-O0",
      "-Wall",
      "-Werror",
      "-Wextra",
      "-pedantic-errors",
      "-Wno-gnu-binary-literal",
      "-Wno-strict-prototypes",
      "-Wno-unused-but-set-variable",
      "-Wno-unused-value",
      "-Wno-unused-variable",
    ].concat(extraFlags).join(" ")

    return result.empty ? "" : (" " + result)
  }

  fn stringify (self: ref Self) str {
    mut result := ""
    l := self.statements.len

    loop i := 0; i < l; i++ {
      result += self.statements[i].stringify()
    }

    return result
  }

  fn _ (mut self: ref Self, name: str) str {
    if self._hasEntity(name, withBuiltin: false) {
      mut item := self._getEntity(name)

      if !item.active {
        item.active = true
      }

      return item.codeName
    } elif BUILTIN_ENTITIES.get("stdarg").contains(name) {
      self.builtin.stdarg = true
    } elif BUILTIN_ENTITIES.get("stdbool").contains(name) {
      self.builtin.stdbool = true
    } elif BUILTIN_ENTITIES.get("stddef").contains(name) {
      self.builtin.stddef = true
    } elif BUILTIN_ENTITIES.get("stdio").contains(name) {
      self.builtin.stdio = true
    } elif BUILTIN_ENTITIES.get("stdint").contains(name) {
      self.builtin.stdint = true
    } elif BUILTIN_ENTITIES.get("wchar").contains(name) {
      self.builtin.wchar = true
    } elif BUILTIN_ENTITIES.get("theAny").contains(name) {
      self.builtin.theAny = true
    } elif BUILTIN_ENTITIES.get("theArray").contains(name) {
      self.builtin.theArray = true
    } elif BUILTIN_ENTITIES.get("theBool").contains(name) {
      self.builtin.theBool = true
    } elif BUILTIN_ENTITIES.get("theByte").contains(name) {
      self.builtin.theByte = true
    } elif BUILTIN_ENTITIES.get("theChar").contains(name) {
      self.builtin.theChar = true
    } elif BUILTIN_ENTITIES.get("theError").contains(name) {
      self.builtin.theError = true
    } elif BUILTIN_ENTITIES.get("theFn").contains(name) {
      self.builtin.theFn = true
    } elif BUILTIN_ENTITIES.get("theGlobals").contains(name) {
      self.builtin.theGlobals = true
    } elif BUILTIN_ENTITIES.get("theMacro").contains(name) {
      self.builtin.theMacro = true
    } elif BUILTIN_ENTITIES.get("theNumber").contains(name) {
      self.builtin.theNumber = true
    } elif BUILTIN_ENTITIES.get("theOptional").contains(name) {
      self.builtin.theOptional = true
    } elif BUILTIN_ENTITIES.get("theReference").contains(name) {
      self.builtin.theReference = true
    } elif BUILTIN_ENTITIES.get("theRune").contains(name) {
      self.builtin.theRune = true
    } elif BUILTIN_ENTITIES.get("theSafe").contains(name) {
      self.builtin.theSafe = true
    } elif BUILTIN_ENTITIES.get("theThreadPool").contains(name) {
      self.builtin.theThreadPool = true
    } elif BUILTIN_ENTITIES.get("theString").contains(name) {
      self.builtin.theString = true
    } elif BUILTIN_ENTITIES.get("theUnion").contains(name) {
      self.builtin.theUnion = true
    } else {
      throw error_NewError("Tried activating unknown entity '" + name + "'")
    }

    return name
  }

  fn _allocateExpression (mut self: ref Self, t: ref Analyzer.Type, expression: AST.CExpression) AST.CExpression {
    tmpVar := self._tmpVar()
    tmpVarId := AST.createIdentifier(tmpVar)

    self.blockData.addSetup(
      AST.createVariableDeclaration(AST.createType(self._type(t)), tmpVar, self._defaultInitializerDeclaration(t))
    )

    self.blockData.addTeardown(
      AST.createExpressionStatement(self._functionFree(t, tmpVarId))
    )

    return AST.createAssignmentExpression(tmpVarId, "=", expression)
  }

  fn _assemble (mut self: ref Self) {
    mut prevActive := 0

    loop {
      mut currentActive := 0

      loop i := 0; i < self.entities.len; i++ {
        entity := self.entities[i]

        if !entity.active {
          continue
        }

        entity.generate(self, entity)
        currentActive++
      }

      if prevActive == currentActive {
        break
      }

      prevActive = currentActive
    }

    mut defineStatements: AST.CStatement[]
    mut macroInvocationDeclareStatements: AST.CStatement[]
    mut macroInvocationDefineStatements: AST.CStatement[]
    mut statements: AST.CStatement[]

    loop i := 0; i < self.entities.len; i++ {
      entity := self.entities[i]

      if !entity.active {
        continue
      }

      result := entity.generate(self, entity)
      resultStatements := (result is AST.CStatement) ? [result] : result

      loop j := 0; j < resultStatements.len; j++ {
        item := resultStatements[j]

        if item.isDefineDirective() {
          defineStatements.push(item)
        } elif statementIsMacroInvocation(item) {
          if statementIsMacroInvocationDeclare(item) {
            macroInvocationDeclareStatements.push(item)
          } else {
            macroInvocationDefineStatements.push(item)
          }
        } else {
          statements.push(item)
        }
      }
    }

    if self.builtin.theAny { self.statements.push(AST.createIncludeDirective("the/any.h")) }
    if self.builtin.theArray { self.statements.push(AST.createIncludeDirective("the/array.h")) }
    if self.builtin.theBool { self.statements.push(AST.createIncludeDirective("the/bool.h")) }
    if self.builtin.theByte { self.statements.push(AST.createIncludeDirective("the/byte.h")) }
    if self.builtin.theChar { self.statements.push(AST.createIncludeDirective("the/char.h")) }
    if self.builtin.theError { self.statements.push(AST.createIncludeDirective("the/error.h")) }
    if self.builtin.theFn { self.statements.push(AST.createIncludeDirective("the/fn.h")) }
    if self.builtin.theGlobals { self.statements.push(AST.createIncludeDirective("the/globals.h")) }
    if self.builtin.theMacro { self.statements.push(AST.createIncludeDirective("the/macro.h")) }
    if self.builtin.theNumber { self.statements.push(AST.createIncludeDirective("the/number.h")) }
    if self.builtin.theOptional { self.statements.push(AST.createIncludeDirective("the/optional.h")) }
    if self.builtin.theReference { self.statements.push(AST.createIncludeDirective("the/reference.h")) }
    if self.builtin.theRune { self.statements.push(AST.createIncludeDirective("the/rune.h")) }
    if self.builtin.theSafe { self.statements.push(AST.createIncludeDirective("the/safe.h")) }
    if self.builtin.theString { self.statements.push(AST.createIncludeDirective("the/string.h")) }
    if self.builtin.theThreadPool { self.statements.push(AST.createIncludeDirective("the/thread-pool.h")) }
    if self.builtin.theUnion { self.statements.push(AST.createIncludeDirective("the/union.h")) }

    if self.builtin.stdarg { self.statements.push(AST.createIncludeDirective("stdarg.h")) }
    if self.builtin.stdbool { self.statements.push(AST.createIncludeDirective("stdbool.h")) }
    if self.builtin.stddef { self.statements.push(AST.createIncludeDirective("stddef.h")) }
    if self.builtin.stdio { self.statements.push(AST.createIncludeDirective("stdio.h")) }
    if self.builtin.stdint { self.statements.push(AST.createIncludeDirective("stdint.h")) }
    if self.builtin.stdlib { self.statements.push(AST.createIncludeDirective("stdlib.h")) }
    if self.builtin.wchar { self.statements.push(AST.createIncludeDirective("wchar.h")) }

    self.statements.merge(defineStatements)
    self.statements.merge(macroInvocationDeclareStatements.reverse())
    self.statements.merge(macroInvocationDefineStatements.reverse())
    self.statements.merge(statements)

    blockDataContext := self.blockData.decrease()
    mut finalMainStatements: AST.CStatement[]

    finalMainStatements.merge(blockDataContext.setup)
    finalMainStatements.merge(self.mainStatements)
    finalMainStatements.merge(blockDataContext.teardown)

    self.statements.push(
      AST.createFunctionDeclaration(
        AST.createType("int"),
        "main",
        [AST.createFunctionParameter(AST.createType("void"))],
        AST.createCompoundStatement(finalMainStatements)
      )
    )
  }

  fn _defaultInitializerExpression (mut self: ref Self, it: ref Analyzer.Type) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._defaultInitializerExpression(t.t)
    } elif it.name == "any" {
      return AST.createCastExpression(AST.createType(self._("the_any_t")), AST.createInitializerListExpression([
        AST.createLiteral(-1),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL"))
      ]))
    } elif it.name == "bool" {
      return AST.createIdentifier(self._("false"))
    } elif it.name == "char" {
      return AST.createLiteral("'\\0'")
    } elif it.name == "str" {
      return AST.createIdentifier(self._("the_str_empty_val"))
    } elif it.isArray() || it.isMap() {
      typeName := self._typeName(it)

      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_alloc")), [
        AST.createLiteral(0)
      ])
    // todo
    // } elif it.isObject() {
      // typeName := self._typeName(it)
      // mut args: AST.CExpression[]
      // loop i := 0; i < it.properties.len; i++ {
      //   property := it.properties[i]
      //   if property.builtin || property.t.isMethod() {
      //     continue
      //   }
      //   args.push(self._defaultInitializerExpression(property.t))
      // }
      // return AST.createCallExpression(AST.createIdentifier(self._(typeName + "_alloc")), args)
    } elif it.isOptional() {
      return AST.createIdentifier(self._("NULL"))
    } elif it.isUnion() {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_alloc")), [
        AST.createLiteral(-1)
      ])
    } elif !it.isFunction() && !it.isReference() {
      return AST.createLiteral(0)
    }

    throw error_NewError("Tried default object expressions declaration on unknown type '" + it.toString() + "'")
  }

  fn _defaultInitializerDeclaration (mut self: ref Self, it: ref Analyzer.Type) AST.CExpression {
    if it.isAlias () {
      t := it.asAlias()
      return self._defaultInitializerDeclaration(t.t)
    } elif it.name == "any" {
      return AST.createInitializerListExpression([
        AST.createLiteral(-1),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL")),
        AST.createIdentifier(self._("NULL"))
      ])
    } elif it.name == "bool" {
      return AST.createIdentifier(self._("false"))
    } elif it.name == "char" {
      return AST.createLiteral("'\\0'")
    } elif it.name == "str" {
      return AST.createIdentifier(self._("the_str_empty_val"))
    } elif it.isArray() || it.isMap() {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_alloc")), [
        AST.createLiteral(0)
      ])
    // todo
    // } elif it.isObject() {
      // typeName := self._typeName(it)
      // mut args : AST.CExpression[]
      // loop i := 0; i < it.properties.len; i++ {
      //   property := it.properties[i]
      //   if property.builtin || property.t.isMethod() {
      //     continue
      //   }
      //   args.push(self._defaultInitializerExpression(property.t))
      // }
      // return AST.createCallExpression(AST.createIdentifier(self._(typeName + "_alloc")), args)
    } elif it.isOptional() {
      return AST.createIdentifier(self._("NULL"))
    } elif it.isUnion() {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_alloc")), [
        AST.createLiteral(-1)
      ])
    } elif !it.isFunction() && !it.isReference() {
      return AST.createLiteral(0)
    }

    throw error_NewError("Tried default initializer variable declaration on unknown type '" + it.toString() + "'")
  }

  fn _functionCopy (mut self: ref Self, it: ref Analyzer.Type, expression: AST.CExpression) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionCopy(t.t, expression)
    } elif it.name == "any" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_any_copy")), [expression])
    } elif it.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_copy")), [expression])
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._(typeName + "_copy")), [expression])
    }

    return expression
  }

  fn _functionEq (mut self: ref Self, it: ref Analyzer.Type, left: AST.CExpression, right: AST.CExpression, reverse := false) AST.CExpression {
    direction := reverse ? "ne" : "eq"

    if it.isAlias() {
      t := it.asAlias()
      return self._functionEq(t.t, left, right, reverse)
    } elif it.name == "any" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_any_" + direction)), [left, right])
    } elif it.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_" + direction)), [left, right])
    } elif (
      it.isArray() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._(typeName + "_" + direction)), [left, right])
    } else {
      return AST.createAssignmentExpression(left, reverse ? "!=" : "==", right)
    }
  }

  fn _functionFree (mut self: ref Self, it: ref Analyzer.Type, expression: AST.CExpression) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionFree(t.t, expression)
    } elif it.name == "any" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_any_free")), [expression])
    } elif it.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_free")), [expression])
    } elif it.isArray() {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_free")), [expression])
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_free")), [expression])
    }

    return AST.createCastExpression(AST.createType("void"), expression)
  }

  fn _functionRealloc (mut self: ref Self, it: ref Analyzer.Type, left: AST.CExpression, right: AST.CExpression) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionRealloc(t.t, left, right)
    } elif it.name == "any" {
      return AST.createAssignmentExpression(
        left,
        "=",
        AST.createCallExpression(AST.createIdentifier(self._("the_any_realloc")), [left, right])
      )
    } elif (
      it.isArray() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isUnion()
    ) {
      typeName := self._typeName(it)

      return AST.createAssignmentExpression(
        left,
        "=",
        AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_realloc")), [left, right])
      )
    }

    return AST.createIdentifier(self._("NULL"))
  }

  fn _functionStr (mut self: ref Self, it: ref Analyzer.Type, expression: AST.CExpression, escape := true) AST.CExpression {
    if it.isAlias() {
      t := it.asAlias()
      return self._functionStr(t.t, expression, escape)
    } elif it.name == "any" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_any_str")), [expression])
    } elif it.name == "str" && escape {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_escape")), [expression])
    } elif it.name == "str" && escape {
      return expression
    } elif it.isEnum() {
      return AST.createCallExpression(AST.createIdentifier(self._("the_enum_str")), [expression])
    } else {
      typeName := self._typeName(it)
      return AST.createCallExpression(AST.createIdentifier(self._("the_" + typeName + "_str")), [expression])
    }
  }

  fn _generateBlock (mut self: ref Self, items: ref Parser.Statement[], preserveData := false) AST.CStatement[] {
    self.blockData.increase()
    mut result: AST.CStatement[]
    l := items.len

    loop i := 0; i < l; i++ {
      result.push(self._generateStatement(items[i]))
    }

    if preserveData { return result }
    blockDataContext := self.blockData.decrease()

    mut finalResult: AST.CStatement[]
    finalResult.merge(blockDataContext.setup)
    finalResult.merge(result)
    finalResult.merge(blockDataContext.teardown)

    return finalResult
  }

  fn _generateExpression (mut self: ref Self, item: ref Parser.Expression) AST.CExpression {
    mut result: AST.CExpression?

    if (
      (result = self._generateIdentifier(item)) != nil ||
      (result = self._generateCallExpression(item)) != nil ||
      (result = self._generateLiteral(item)) != nil ||
      (result = self._generateParenthesizedExpression(item)) != nil ||
      (result = self._generateArrayExpression(item)) != nil ||
      (result = self._generateAsExpression(item)) != nil ||
      (result = self._generateAssignmentExpression(item)) != nil ||
      (result = self._generateBinaryExpression(item)) != nil ||
      (result = self._generateConditionalExpression(item)) != nil ||
      (result = self._generateElementAccessExpression(item)) != nil ||
      (result = self._generateIsExpression(item)) != nil ||
      (result = self._generateReferenceExpression(item)) != nil ||
      (result = self._generateUnaryExpression(item)) != nil
    ) {
      typeContext := item.typeContext as Analyzer.TypeContext
      optionalTargetType := typeContext.targetType

      if optionalTargetType == nil {
        return self._wrap(result, item, typeContext.t, typeContext.t, transform: true)
      }

      return self._wrap(result, item, typeContext.t, optionalTargetType as ref Analyzer.Type, transform: true)
    }

    throw error_NewError("Tried code generation for unknown expression '" + Parser.stringifyExpression(item) + "'")
  }

  fn _generateStatement (mut self: ref Self, item: ref Parser.Statement) AST.CStatement {
    mut result: AST.CStatement?

    if (
      (result = self._generateBlockStatement(item)) != nil ||
      (result = self._generateBreakStatement(item)) != nil ||
      (result = self._generateContinueStatement(item)) != nil ||
      (result = self._generateEnumDeclaration(item)) != nil ||
      (result = self._generateExportDeclaration(item)) != nil ||
      (result = self._generateExpressionStatement(item)) != nil ||
      (result = self._generateFunctionDeclaration(item)) != nil ||
      (result = self._generateIfStatement(item)) != nil ||
      (result = self._generateLoopStatement(item)) != nil ||
      (result = self._generateMainDeclaration(item)) != nil ||
      (result = self._generateObjectDeclaration(item)) != nil ||
      (result = self._generateReturnStatement(item)) != nil ||
      (result = self._generateThrowStatement(item)) != nil ||
      (result = self._generateTryStatement(item)) != nil ||
      (result = self._generateVariableDeclaration(item)) != nil
    ) {
      return result
    }

    throw error_NewError("Tried code generation for unknown statement '" + Parser.stringifyStatement(item) + "'")
  }

  fn _generateIdentifier (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isIdentifier() {
      return nil
    }

    validateContext(item.context is Analyzer.IdentifierContext)
    context := item.context as Analyzer.IdentifierContext
    expression := item.asIdentifier()
    mut name := expression.name

    if name == "print" {
      name = self._("the_print")
    } elif self._hasEntity(name) {
      name = self._(name)
    }

    return self._wrap(AST.createIdentifier(name), item, context.originalType, context.currentType)
  }

  fn _generateLiteral (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    mut tm := self._tm()

    if item.isBooleanLiteral() {
      expression := item.asBooleanLiteral()
      return AST.createLiteral(self._(expression.value))
    } elif item.isCharacterLiteral() {
      expression := item.asCharacterLiteral()
      return AST.createLiteral("L'" + expression.value + "'")
    } elif item.isFloatingPointLiteral() {
      expression := item.asFloatingPointLiteral()
      return AST.createLiteral(expression.value)
    } elif item.isIntegerLiteral() {
      expression := item.asIntegerLiteral()
      rawValue := expression.value.replace("O", "").replace("o", "")

      if !rawValue.contains("b") && !rawValue.contains("B") && !rawValue.contains("x") && !rawValue.contains("X") {
        numValue := rawValue.toU64()
        return AST.createLiteral(rawValue + (numValue > 9223372036854775807 ? "U" : ""))
      }

      return AST.createLiteral(rawValue)
    } elif item.isNilLiteral() {
      expression := item.asNilLiteral()
      return AST.createIdentifier(self._("NULL"))
    } elif item.isStringLiteral() {
      expression := item.asStringLiteral()
      sanitizedValue := expression.value
        .replace(os_EOL, "\" " + self._("THE_EOL") + " \"")
        .replace("\n", "\" " + self._("THE_EOL") + " \"")
      rawValue := "L\"" + sanitizedValue + "\""

      return AST.createCallExpression(
        AST.createIdentifier(self._("the_str_alloc")),
        [AST.createLiteral(rawValue)]
      )
    }

    return nil
  }

  fn _generateArrayExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isArray() {
      return nil
    }

    expression := item.asArray()
    validateContext(item.context is Analyzer.ArrayExpressionContext)
    context := item.context as Analyzer.ArrayExpressionContext
    mut arguments: (AST.CExpression | AST.CType)[] = [AST.createLiteral(expression.elements.len)]

    loop i := 0; i < expression.elements.len; i++ {
      element := expression.elements[i]
      arguments.push(self._generateExpression(element))
    }

    return AST.createCallExpression(AST.createIdentifier(self._type(context.t, "_alloc")), arguments)
  }

  fn _generateAsExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isAs() {
      return nil
    }

    expression := item.asAs()
    validateContext(item.context is Analyzer.AsExpressionContext)
    context := item.context as Analyzer.AsExpressionContext

    return self._wrap(self._generateExpression(ref expression.expression), item, context.originalType, context.currentType)
  }

  fn _generateAssignmentExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isAssignment() {
      return nil
    }

    expression := item.asAssignment()
    validateContext(item.context is Analyzer.AssignmentExpressionContext)
    context := item.context as Analyzer.AssignmentExpressionContext
    leftType := Analyzer.unwrap(context.leftType, withReference: false)
    rightType := Analyzer.unwrap(context.rightType, withReference: false)
    left := self._generateExpression(ref expression.left)
    mut right := self._generateExpression(ref expression.right)

    if expression.operator.t == .OpPlusEq && (leftType.name == "str" || rightType.name == "str") {
      return AST.createAssignmentExpression(
        left,
        "=",
        AST.createCallExpression(AST.createIdentifier(self._("the_str_realloc")), [
          left,
          AST.createCallExpression(AST.createIdentifier(self._("the_str_concat")), [left, right])
        ])
      )
    } elif !typePrimitive(leftType) || !typePrimitive(rightType) {
      result := self._functionRealloc(leftType, left, right)
      return item.hasParent() ? result : self._functionCopy(leftType, result)
    } elif expression.operator.t == .OpAmpAmp || expression.operator.t == .OpPipePipe {
      right = AST.createBinaryExpression(left, expression.operator.val, right)
      return AST.createAssignmentExpression(left, "=", right)
    }

    return AST.createAssignmentExpression(left, expression.operator.val, right)
  }

  fn _generateBinaryExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isBinary() {
      return nil
    }

    expression := item.asBinary()
    validateContext(item.context is Analyzer.BinaryExpressionContext)
    context := item.context as Analyzer.BinaryExpressionContext
    leftType := Analyzer.unwrap(context.leftType, withReference: false)
    rightType := Analyzer.unwrap(context.rightType, withReference: false)
    left := self._generateExpression(ref expression.left)
    right := self._generateExpression(ref expression.right)

    if (
      (expression.operator.t == .OpEqEq || expression.operator.t == .OpExclEq) &&
      (!typePrimitive(context.leftType) || !typePrimitive(context.rightType))
    ) {
      return expression.operator.t == .OpEqEq
        ? self._functionEq(leftType, left, right)
        : self._functionEq(leftType, left, right, reverse: true)
    } elif leftType.name == "str" && rightType.name == "str" && (
      expression.operator.t == .OpLt ||
      expression.operator.t == .OpLtEq ||
      expression.operator.t == .OpGt ||
      expression.operator.t == .OpGtEq
    ) {
      operator := expression.operator.t == .OpLt
        ? "lt"
        : expression.operator.t == .OpLtEq
          ? "le"
          : expression.operator.t == .OpGt
            ? "gt"
            : "ge"

      return AST.createCallExpression(AST.createIdentifier(self._("the_str_" + operator)), [left, right])
    } elif expression.operator.t == .OpPlus && leftType.name == "str" && rightType.name == "str" {
      return AST.createCallExpression(AST.createIdentifier(self._("the_str_concat")), [left, right])
    }

    return AST.createBinaryExpression(left, expression.operator.val, right)
  }

  fn _generateCallExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isCall() {
      return nil
    }

    expression := item.asCall()
    validateContext(item.context is Analyzer.CallExpressionContext)
    context := item.context as Analyzer.CallExpressionContext

    if expressionIsBuiltinMethod(ref expression.callee) {
      calleeBody := expression.callee.asPropertyAccess()

      if calleeBody.name.name == "str" {
        calleeExpressionTypeContext := calleeBody.expression.typeContext as Analyzer.TypeContext
        return self._functionStr(calleeExpressionTypeContext.t, self._generateExpression(ref calleeBody.expression))
      }
    }

    calleeExpression := self._generateExpression(ref expression.callee)
    mut paramsArgs: AST.CExpression[]

    if typeHasSelfParam(context.t) {
      paramsArgs.push(calleeExpression)
    }

    loop i := 0; i < context.parameters.len; i++ {
      param := context.parameters[i]

      if param.variadic {
        mut variadicArgs: (AST.CExpression | AST.CType)[]

        loop j := 0; j < context.arguments.len; j++ {
          arg := context.arguments[j]
          if arg.parameterIdx != i { continue }
          variadicArgs.push(self._generateExpression(ref arg.argument.expression))
        }

        mut variadicAllocArgs: (AST.CExpression | AST.CType)[] = [AST.createLiteral(variadicArgs.len)]
        variadicAllocArgs.merge(variadicArgs)
        variadicAllocType := self._type(param.t, "_alloc")

        paramsArgs.push(
          AST.createCallExpression(
            AST.createIdentifier(variadicAllocType),
            variadicAllocArgs
          )
        )

        continue
      }

      mut argIdx := -1

      loop j := 0; j < context.arguments.len; j++ {
        arg := context.arguments[j]

        if arg.parameterIdx == i {
          argIdx = j
          break
        }
      }

      if !param.required {
        paramsArgs.push(AST.createLiteral(argIdx == -1 ? "0" : "1"))
      }

      if argIdx != -1 {
        arg := context.arguments[argIdx]
        paramsArgs.push(self._generateExpression(arg.argument.expression))
      } else {
        paramsArgs.push(self._defaultInitializerExpression(param.t))
      }
    }

    mut args: (AST.CExpression | AST.CType)[] = [
      AST.createPropertyAccessExpression(calleeExpression, "ctx")
    ]

    if !paramsArgs.empty {
      paramsName := self._type(context.t, "_params_t")

      args.push(AST.createCallExpression(AST.createIdentifier(self._("the_safe_calloc")), [
        AST.createUnaryExpression("&", AST.createCastExpression(
          AST.createType(paramsName),
          AST.createInitializerListExpression(paramsArgs)
        )),
        AST.createCallExpression(AST.createIdentifier("sizeof"), [
          AST.createType(paramsName)
        ])
      ]))
    }

    return AST.createCallExpression(AST.createPropertyAccessExpression(calleeExpression, "func"), args)
  }

  fn _generateConditionalExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isConditional() {
      return nil
    }

    expression := item.asConditional()
    validateContext(item.context is Analyzer.ConditionalExpressionContext)
    context := item.context as Analyzer.ConditionalExpressionContext
    alternateType := Analyzer.unwrap(context.alternateType, withReference: false)
    mut alternate := self._generateExpression(ref expression.alternate)

    if alternate.isAssignmentExpression() && !typeSafeForTernaryAlternate(alternateType) {
      alternate = alternate.wrap()
    }

    return AST.createConditionalExpression(
      self._generateExpression(ref expression.condition),
      self._generateExpression(ref expression.consequent),
      alternate
    )
  }

  fn _generateElementAccessExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isElementAccess() {
      return nil
    }

    expression := item.asElementAccess()
    validateContext(item.context is Analyzer.ElementAccessExpressionContext)
    context := item.context as Analyzer.ElementAccessExpressionContext

    return AST.createCallExpression(AST.createIdentifier(self._type(context.t, "_at")), [
      self._generateExpression(ref expression.expression),
      self._generateExpression(ref expression.argument)
    ])
  }

  fn _generateIsExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isIs() {
      return nil
    }

    expression := item.asIs()
    validateContext(item.context is Analyzer.IsExpressionContext)
    context := item.context as Analyzer.IsExpressionContext
    left := AST.createPropertyAccessExpression(self._generateExpression(ref expression.expression), "type")
    right := AST.createIdentifier(self._typeDef(context.rightType))

    return AST.createBinaryExpression(left, "==", right)
  }

  fn _generateParenthesizedExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isParenthesized() {
      return nil
    }

    expression := item.asParenthesized()
    result := self._generateExpression(ref expression.expression)
    return result.wrap()
  }

  fn _generateReferenceExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isReference() {
      return nil
    }

    expression := item.asReference()
    return AST.createUnaryExpression("&", self._generateExpression(ref expression.expression))
  }

  fn _generateUnaryExpression (mut self: ref Codegen, item: ref Parser.Expression) AST.CExpression? {
    if !item.isUnary() {
      return nil
    }

    expression := item.asUnary()
    validateContext(item.context is Analyzer.UnaryExpressionContext)
    context := item.context as Analyzer.UnaryExpressionContext
    mut operand := self._generateExpression(ref expression.operand)

    if context.operandType.isFloat() {
      operand = AST.createCastExpression(AST.createType(self._("bool")), operand)
      operand = operand.wrap()
    }

    return AST.createUnaryExpression(
      expression.operator.val,
      operand,
      postfix: !expression.prefix
    )
  }

  fn _generateBlockStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isBlock() {
      return nil
    }

    statement := item.asBlock()
    return AST.createCompoundStatement(self._generateBlock(ref statement.body))
  }

  fn _generateBreakStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isBreak() {
      return nil
    }

    statement := item.asBreak()

    if !self.blockData.hasUntil(.Loop) {
      return AST.createBreakStatement()
    }

    mut result := AST.createExpressionStatement(
      AST.createAssignmentExpression(
        AST.createIdentifier(self.blockData.getBreakVariable()),
        "=",
        AST.createLiteral(1)
      )
    )

    if item.hasNext() {
      jumpStatement := AST.createGotoStatement(self._label())
      result = AST.createCompoundStatement([result, jumpStatement])
    }

    return result
  }

  fn _generateContinueStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isContinue() {
      return nil
    }

    statement := item.asContinue()

    if !self.blockData.hasUntil(.Loop) {
      return AST.createContinueStatement()
    }

    mut result := AST.createExpressionStatement(
      AST.createAssignmentExpression(
        AST.createIdentifier(self.blockData.getContinueVariable()),
        "=",
        AST.createLiteral(1)
      )
    )

    if item.hasNext() {
      jumpStatement := AST.createGotoStatement(self._label())
      result = AST.createCompoundStatement([result, jumpStatement])
    }

    return result
  }

  fn _generateEnumDeclaration (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isEnumDeclaration() {
      return nil
    }

    statement := item.asEnumDeclaration()

    // todo
    // auto nodeEnumDecl = std::get<ASTNodeEnumDecl>(*node.body);
    // auto members = nodeEnumDecl.members;
    // auto typeName = Codegen::typeName(nodeEnumDecl.type->codeName);
    // auto enumType = std::get<TypeEnum>(nodeEnumDecl.type->body);
    // if (phase != CODEGEN_PHASE_ALLOC && phase != CODEGEN_PHASE_FULL) {
    //   return;
    // }
    // auto cDecl = CodegenASTStmtCompound::create();
    // this->_apiEntity(typeName, CODEGEN_ENTITY_ENUM, [&] (auto &decl, [[maybe_unused]] auto &def) {
    //   auto membersCode = std::string();
    //   for (auto i = static_cast<std::size_t>(0); i < enumType.members.size(); i++) {
    //     auto typeMember = enumType.members[i];
    //     auto member = std::find_if(members.begin(), members.end(), [&] (const auto &it) -> bool {
    //       return it.id == typeMember->name;
    //     });
    //     if (member != members.end()) {
    //       membersCode += "  " + Codegen::name(typeMember->codeName);
    //       if (member->init != std::nullopt) {
    //         auto cInit = this->_nodeExpr(*member->init, member->init->type, node, &cDecl, true);
    //         membersCode += " = " + cInit->str();
    //       }
    //       membersCode += i == enumType.members.size() - 1 ? EOL : "," EOL;
    //     }
    //   }
    //   decl += "enum " + typeName + " {" EOL;
    //   decl += membersCode;
    //   decl += "};";
    //   return 0;
    // });
    // this->_apiEntity(typeName + "_rawValue", CODEGEN_ENTITY_FN, [&] (auto &decl, auto &def) {
    //   auto typeInfo = this->_typeInfo(nodeEnumDecl.type);
    //   decl += "_{struct str} " + typeName + "_rawValue (" + typeInfo.typeCodeTrimmed + ");";
    //   def += "_{struct str} " + typeName + "_rawValue (" + typeInfo.typeCode + "n) {" EOL;
    //   for (const auto &member : enumType.members) {
    //     def += "  if (n == " + Codegen::name(member->codeName) + ")" R"( return _{str_alloc}(")" + member->name + R"(");)" EOL;
    //   }
    //   def += "}";
    //   return 0;
    // });
  }

  fn _generateExportDeclaration (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isExportDeclaration() {
      return nil
    }

    statement := item.asExportDeclaration()

    // todo
    // if (
    //   nodeExportDecl.declaration != std::nullopt &&
    //   !std::holds_alternative<ASTNodeExpr>(*nodeExportDecl.declaration->body)
    // ) {
    //   return this->_node(c, *nodeExportDecl.declaration, phase);
    // }
  }

  fn _generateExpressionStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isExpression() {
      return nil
    }

    statement := item.asExpression()
    return AST.createExpressionStatement(self._generateExpression(ref statement.expression))
  }

  fn _generateFunctionDeclaration (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isFunctionDeclaration() {
      return nil
    }

    statement := item.asFunctionDeclaration()
    // todo
    return nil
  }

  fn _generateIfStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isIf() {
      return nil
    }

    statement := item.asIf()
    condition := self._generateExpression(ref statement.condition)
    consequent := self._generateStatement(ref statement.consequent)
    mut alternate: AST.CStatement?

    if statement.alternate != nil {
      statementAlternate := statement.alternate
      alternate = self._generateStatement(ref statementAlternate)
    }

    return AST.createIfStatement(condition, consequent, alternate)
  }

  fn _generateLoopStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isLoop() {
      return nil
    }

    statement := item.asLoop()

    self.blockData.increase(.Loop)
    self.blockData.increaseVariableIndexes()

    mut variant := statement.initializer == nil && statement.update == nil ? "while" : "for"
    mut initializer: AST.CStatement?
    mut condition: AST.CExpression?
    mut update: AST.CExpression?

    if statement.initializer != nil {
      // todo test if allocation happens during initialization
      initializer = self._generateStatement(ref statement.initializer)
    }

    if statement.condition != nil {
      condition = self._generateExpression(ref statement.condition)
    } elif variant == "while" {
      condition = AST.createLiteral(1)
    }

    if statement.update != nil {
      update = self._generateExpression(ref statement.update)
    }

    mut bodyIsBlock := statement.body.isBlock()
    mut body: AST.CStatement[]

    if bodyIsBlock {
      blockStatement := statement.body.asBlock()
      body = self._generateBlock(ref blockStatement.body)
    } else {
      body.push(self._generateStatement(ref statement.body))
    }

    if self.blockData.usedContinueVariable() {
      body = [
        AST.createVariableDeclaration(
          AST.createType("unsigned char"),
          self.blockData.getContinueVariable(),
          AST.createLiteral(0)
        )
      ].concat(body)
    }

    if self.blockData.usedBreakVariable() {
      body = [
        AST.createVariableDeclaration(
          AST.createType("unsigned char"),
          self.blockData.getBreakVariable(),
          AST.createLiteral(0)
        )
      ].concat(body)
    }

    statementBody := !bodyIsBlock && body.len == 1 ? body[0] : AST.createCompoundStatement(body)

    mut result := variant == "while"
      ? AST.createWhileStatement(condition as AST.CExpression, statementBody)
      : AST.createForStatement(initializer, condition, update, statementBody)

    self.blockData.decreaseVariableIndexes()
    blockDataContext := self.blockData.decrease()

    if !blockDataContext.empty() {
      mut newStatementBody := blockDataContext.setup
      newStatementBody.push(result)
      newStatementBody.merge(blockDataContext.teardown)

      if blockDataContext.usedReturnVariable {
        returnTypeName := self.returnType == nil ? "" : self.returnType.name

        newStatementBody.push(
          AST.createIfStatement(
            AST.createBinaryExpression(
              AST.createIdentifier(self.blockData.getReturnVariable()),
              "==",
              AST.createLiteral(1)
            ),
            self.blockData.hasUntil(.Fn)
              ? AST.createGotoStatement(self._label())
              : returnTypeName == "void"
                ? AST.createReturnStatement()
                : AST.createReturnStatement(AST.createIdentifier(self.blockData.getValueVariable()))
          )
        )
      }

      result = AST.createCompoundStatement(newStatementBody)
    }

    return result
  }

  fn _generateMainDeclaration (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isMainDeclaration() {
      return nil
    }

    statement := item.asMainDeclaration()
    statementBody := statement.body.asBlock()
    self.mainStatements = self._generateBlock(ref statementBody.body, preserveData: true)

    blockDataContext := self.blockData.decrease()
    self.blockData.merge(blockDataContext.setup, blockDataContext.teardown)

    return AST.createEmptyStatement()
  }

  fn _generateObjectDeclaration (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if item.isObjectDeclaration() {
      return nil
    }

    statement := item.asObjectDeclaration()
    // todo
    return nil
  }

  fn _generateReturnStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isReturn() {
      return nil
    }

    statement := item.asReturn()

    // todo
    // if (this->state.cleanUp.hasCleanUp(CODEGEN_CLEANUP_FN) || this->state.cleanUp.returnVarUsed) {
    //   auto parentNotRoot = this->state.cleanUp.parent != nullptr && this->state.cleanUp.parent->type != CODEGEN_CLEANUP_ROOT;
    //   if (parentNotRoot && this->state.cleanUp.hasCleanUp(CODEGEN_CLEANUP_FN)) {
    //     (*c)->append(
    //       CodegenASTExprAssign::create(
    //         CodegenASTExprAccess::create(this->state.cleanUp.currentReturnVar()),
    //         "=",
    //         CodegenASTExprLiteral::create("1")
    //       )->stmt()
    //     );
    //   }
    //   if (nodeReturn.body != std::nullopt) {
    //     (*c)->append(
    //       CodegenASTExprAssign::create(
    //         CodegenASTExprAccess::create(this->state.cleanUp.currentValueVar()),
    //         "=",
    //         this->_nodeExpr(*nodeReturn.body, this->state.returnType, node, c)
    //       )->stmt()
    //     );
    //   }
    //   auto nodeParentFunction = ASTChecker(node.parent).is<ASTNodeFnDecl>() || ASTChecker(node.parent).is<ASTNodeObjDecl>();
    //   auto nodeIsLast = node.parent != nullptr && ASTChecker(node).isLast(this->state.fnDeclBody);
    //   if ((!nodeParentFunction && this->state.cleanUp.empty()) || !nodeIsLast) {
    //     (*c)->append(CodegenASTStmtGoto::create(this->state.cleanUp.currentLabel()));
    //   }
    // } else if (nodeReturn.body != std::nullopt) {
    //   auto cArg = this->_nodeExpr(*nodeReturn.body, this->state.returnType, node, c);
    //   (*c)->append(CodegenASTStmtReturn::create(cArg));
    // } else {
    //   (*c)->append(
    //     ASTChecker(node).insideMain()
    //       ? CodegenASTStmtReturn::create(CodegenASTExprLiteral::create("0"))
    //       : CodegenASTStmtReturn::create()
    //   );
    // }

    return nil
  }

  fn _generateThrowStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isThrow() {
      return nil
    }

    statement := item.asThrow()

    // todo
    // auto argTypeInfo = this->_typeInfo(nodeThrow.arg.type);
    // auto cArg = this->_nodeExpr(nodeThrow.arg, argTypeInfo.type, node, c);
    // auto argNodeExprDef = this->_typeDef(argTypeInfo.type);
    // (*c)->append(
    //   CodegenASTExprCall::create(
    //     CodegenASTExprAccess::create(this->_("error_assign")),
    //     {
    //       this->_genErrState(ASTChecker(node).insideMain(), false),
    //       CodegenASTExprAccess::create(this->_(argNodeExprDef)),
    //       CodegenASTExprCast::create(CodegenASTType::create("void *"), cArg),
    //       CodegenASTExprCast::create(
    //         CodegenASTType::create("void (*) (void *)"),
    //         CodegenASTExprUnary::create("&", CodegenASTExprAccess::create(this->_(argTypeInfo.typeName + "_free")))
    //       ),
    //       CodegenASTExprLiteral::create(std::to_string(node.start.line)),
    //       CodegenASTExprLiteral::create(std::to_string(node.start.col + 1))
    //     }
    //   )->stmt()
    // );
    // (*c)->append(CodegenASTStmtGoto::create(this->state.cleanUp.currentLabel()));

    return nil
  }

  fn _generateTryStatement (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isTry() {
      return nil
    }

    statement := item.asTry()

    // todo
    // auto nodeTry = std::get<ASTNodeTry>(*node.body);
    // auto initialStateCleanUp = this->state.cleanUp;
    // this->state.cleanUp = CodegenCleanUp(CODEGEN_CLEANUP_BLOCK, &initialStateCleanUp);

    // *c = (*c)->append(
    //   CodegenASTStmtSwitch::create(
    //     CodegenASTExprCall::create(
    //       CodegenASTExprAccess::create(this->_("setjmp")),
    //       {
    //         CodegenASTExprAccess::create(
    //           CodegenASTExprCall::create(
    //             CodegenASTExprAccess::create(this->_("error_buf_increase")),
    //             {this->_genErrState(ASTChecker(node).insideMain(), false)}
    //           ),
    //           "buf",
    //           true
    //         )
    //       }
    //     )
    //   )
    // );

    // *c = (*c)->append(
    //   CodegenASTStmtCase::create(CodegenASTExprLiteral::create("0"), CodegenASTStmtCompound::create())
    // );

    // this->varMap.save();

    // auto blockCleanUp = CodegenASTStmtCompound::create({
    //   CodegenASTStmtIf::create(
    //     CodegenASTExprBinary::create(
    //       this->_genErrState(ASTChecker(node).insideMain(), false, "id"),
    //       "!=",
    //       CodegenASTExprLiteral::create("-1")
    //     ),
    //     CodegenASTExprCall::create(
    //       CodegenASTExprAccess::create(this->_("longjmp")),
    //       {
    //         CodegenASTExprAccess::create(
    //           this->_genErrState(ASTChecker(node).insideMain(), false, "buf_last"),
    //           "buf",
    //           true
    //         ),
    //         this->_genErrState(ASTChecker(node).insideMain(), false, "id")
    //       }
    //     )->stmt()
    //   ),
    //   CodegenASTExprCall::create(
    //     CodegenASTExprAccess::create(this->_("error_buf_decrease")),
    //     {this->_genErrState(ASTChecker(node).insideMain(), false)}
    //   )->stmt()
    // });

    // this->_block(c, nodeTry.body, true, blockCleanUp, true);
    // (*c)->append(CodegenASTStmtBreak::create());
    // *c = (*c)->exit()->exit();
    // this->varMap.restore();
    // this->state.cleanUp = initialStateCleanUp;

    // for (const auto &handler : nodeTry.handlers) {
    //   auto handlerVarDecl = std::get<ASTNodeVarDecl>(*handler.param.body);
    //   auto handlerTypeInfo = this->_typeInfo(handlerVarDecl.var->type);
    //   auto handlerDef = this->_typeDef(handlerVarDecl.var->type);
    //   auto handleCodeName = Codegen::name(handlerVarDecl.var->codeName);

    //   *c = (*c)->append(
    //     CodegenASTStmtCase::create(
    //       CodegenASTExprAccess::create(this->_(handlerDef)),
    //       CodegenASTStmtCompound::create()
    //     )
    //   );

    //   (*c)->append(
    //     CodegenASTExprCall::create(
    //       CodegenASTExprAccess::create(this->_("error_buf_decrease")),
    //       {this->_genErrState(ASTChecker(node).insideMain(), false)}
    //     )->stmt()
    //   );

    //   (*c)->append(
    //     CodegenASTExprCall::create(
    //       CodegenASTExprAccess::create(this->_("error_unset")),
    //       {this->_genErrState(ASTChecker(node).insideMain(), false)}
    //     )->stmt()
    //   );

    //   (*c)->append(
    //     CodegenASTStmtVarDecl::create(
    //       CodegenASTType::create(handlerTypeInfo.typeCodeConst),
    //       CodegenASTExprAccess::create(handleCodeName),
    //       CodegenASTExprCast::create(
    //         CodegenASTType::create(handlerTypeInfo.typeCodeTrimmed),
    //         this->_genErrState(ASTChecker(node).insideMain(), false, "ctx")
    //       )
    //     )
    //   );

    //   this->varMap.save();

    //   this->_block(
    //     c,
    //     handler.body,
    //     true,
    //     this->_genFreeFn(handlerTypeInfo.type, CodegenASTExprAccess::create(handleCodeName))->stmt()
    //   );

    //   (*c)->append(CodegenASTStmtBreak::create());
    //   *c = (*c)->exit()->exit();
    //   this->varMap.restore();
    // }

    // *c = (*c)->append(CodegenASTStmtCase::create(nullptr, CodegenASTStmtCompound::create()));

    // (*c)->append(
    //   CodegenASTExprCall::create(
    //     CodegenASTExprAccess::create(this->_("error_buf_decrease")),
    //     {this->_genErrState(ASTChecker(node).insideMain(), false)}
    //   )->stmt()
    // );

    // (*c)->append(CodegenASTStmtGoto::create(this->state.cleanUp.currentLabel()));
    // *c = (*c)->exit()->exit()->exit();

    return nil
  }

  fn _generateVariableDeclaration (mut self: ref Codegen, item: ref Parser.Statement) AST.CStatement? {
    if !item.isVariableDeclaration() {
      return nil
    }

    statement := item.asVariableDeclaration()
    validateContext(item.context is Analyzer.VariableDeclarationContext)
    context := item.context as Analyzer.VariableDeclarationContext
    typeName := self._typeName(context.varType)
    t := AST.createType(self._type(context.varType))
    shouldSplitDeclaration := statementHasPrecedingNonVarDecl(item)

    if typeShouldBeFreed(context.varType) {
      self.blockData.addTeardown(
        AST.createExpressionStatement(
          self._functionFree(context.varType, AST.createIdentifier(statement.name.name))
        )
      )
    }

    initializer := statement.initializer == nil
      ? self._defaultInitializerDeclaration(context.varType)
      : self._generateExpression(ref statement.initializer)

    if shouldSplitDeclaration {
      self.blockData.addSetup(
        AST.createVariableDeclaration(t, statement.name.name)
      )

      return AST.createExpressionStatement(
        AST.createAssignmentExpression(AST.createIdentifier(statement.name.name), "=", initializer)
      )
    } else {
      return AST.createVariableDeclaration(t, statement.name.name, initializer)
    }
  }

  fn _generateAnyType (mut self: ref Codegen, item: ref Analyzer.Type) str {
    typeName := "the_any_" + self._typeName(item)
    name := typeName + "_t"

    if self._hasEntity(name) {
      return name
    }

    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: item,
      generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
        it := entity.context as ref Analyzer.Type
        t := self._type(it)
        typeDef := self._typeDef(it)
        typeName := self._typeName(it)

        return [
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_ANY_DECLARE"), [
            AST.createIdentifier(typeName),
            AST.createType(t)
          ]), terminated: false),
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_ANY_DEFINE"), [
            AST.createIdentifier(self._(typeDef)),
            AST.createIdentifier(typeName),
            AST.createType(self._type(it)),
            self._functionCopy(it, AST.createIdentifier("val")),
            self._functionEq(it, AST.createIdentifier("lhs_val"), AST.createIdentifier("rhs_val")),
            self._functionFree(it, AST.createIdentifier("val")),
            self._functionStr(it, AST.createIdentifier("val"))
          ]), terminated: false)
        ]
      }
    })

    methods := ["alloc"]

    entityCallee := (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
      self._(entity.context as str)
      return AST.createEmptyStatement()
    }

    loop i := 0; i < methods.len; i++ {
      methodName := methods[i] as str

      self.entities.push(CodegenEntity{
        name: typeName + "_" + methodName,
        codeName: typeName + "_" + methodName,
        context: name,
        generate: entityCallee
      })
    }

    return name
  }

  fn _generateArrayType (mut self: ref Codegen, item: ref Analyzer.Type) str {
    typeName := "the_" + self._typeName(item)
    name := typeName + "_t"

    if self._hasEntity(name) {
      return name
    }

    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: item,
      generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
        it := entity.context as ref Analyzer.Type
        t := it.asArray()
        elementTypeName := self._typeName(t.elementType)

        return [
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_ARRAY_DECLARE"), [
            AST.createIdentifier(elementTypeName),
            AST.createType(self._type(t.elementType))
          ]), terminated: false),
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_ARRAY_DEFINE"), [
            AST.createIdentifier(elementTypeName),
            AST.createType(self._type(t.elementType)),
            AST.createType(self._type(typeSafeForVaArg(self._tm(), t.elementType))),
            self._functionCopy(t.elementType, AST.createIdentifier("element")),
            self._functionEq(t.elementType, AST.createIdentifier("lhs_element"), AST.createIdentifier("rhs_element")),
            self._functionFree(t.elementType, AST.createIdentifier("element")),
            self._functionStr(t.elementType, AST.createIdentifier("element"))
          ]), terminated: false)
        ]
      }
    })

    methods := [
      "alloc",
      "at",
      "clear",
      "concat",
      "contains",
      "copy",
      "empty",
      "eq",
      "filter",
      "first",
      "forEach",
      "free",
      "join",
      "last",
      "merge",
      "pop",
      "push",
      "realloc",
      "remove",
      "reverse",
      "slice",
      "sort",
      "str"
    ]

    entityCallee := (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
      self._(entity.context as str)
      return AST.createEmptyStatement()
    }

    loop i := 0; i < methods.len; i++ {
      methodName := methods[i] as str

      self.entities.push(CodegenEntity{
        name: typeName + "_" + methodName,
        codeName: typeName + "_" + methodName,
        context: name,
        generate: entityCallee
      })
    }

    return name
  }

  fn _generateFunctionType (mut self: ref Codegen, item: ref Analyzer.Type) str {
    typeName := "the_" + self._typeName(item)
    name := typeName + "_t"

    if self._hasEntity(name) {
      return name
    }

    itemType := item.asFunction()
    hasParams := !itemType.parameters.empty

    if hasParams {
      self.entities.push(CodegenEntity{
        name: name,
        codeName: name,
        context: item,
        generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
          it := entity.context as ref Analyzer.Type
          t := it.asFunction()
          returnType := self._type(t.returnType)
          returnTypeName := self._typeName(t.returnType)
          mut parametersTypeName := ""
          mut parametersDefinition: AST.CStatement[]

          loop i := 0; i < t.parameters.len; i++ {
            parameter := t.parameters[i]
            parametersTypeName += typeParameterId(parameter) + self._typeName(parameter.t)

            if !parameter.required && !parameter.variadic {
              parametersDefinition.push(AST.createStructureMemberDeclaration(
                AST.createType("unsigned char"),
                "o" + i.str()
              ))
            }

            parametersDefinition.push(AST.createStructureMemberDeclaration(
              AST.createType(self._type(parameter.t)),
              "n" + i.str()
            ))
          }

          return [
            AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_FUNCTION_DECLARE_WITH_PARAMS"), [
              AST.createIdentifier(t.asynchronous ? "a" : "s"),
              AST.createIdentifier(returnTypeName),
              AST.createType(returnType),
              AST.createIdentifier(parametersTypeName),
              AST.createCompoundStatement(parametersDefinition)
            ]), terminated: false),
            AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_FUNCTION_DEFINE_WITH_PARAMS"), [
              AST.createIdentifier(t.asynchronous ? "a" : "s"),
              AST.createIdentifier(returnTypeName),
              AST.createType(returnType),
              AST.createIdentifier(parametersTypeName)
            ]), terminated: false)
          ]
        }
      })
    } else {
      self.entities.push(CodegenEntity{
        name: name,
        codeName: name,
        context: item,
        generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
          it := entity.context as ref Analyzer.Type
          t := it.asFunction()
          returnType := self._type(t.returnType)

          return [
            AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_FUNCTION_DECLARE"), [
              AST.createIdentifier(t.asynchronous ? "a" : "s"),
              AST.createType(returnType)
            ]), terminated: false),
            AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_FUNCTION_DEFINE"), [
              AST.createIdentifier(t.asynchronous ? "a" : "s"),
              AST.createType(returnType)
            ]), terminated: false),
          ]
        }
      })
    }

    methods := ["alloc", "copy", "eq", "free", "realloc", "str"]

    entityCallee := (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
      self._(entity.context as str)
      return AST.createEmptyStatement()
    }

    loop i := 0; i < methods.len; i++ {
      methodName := methods[i] as str

      self.entities.push(CodegenEntity{
        name: typeName + "_" + methodName,
        codeName: typeName + "_" + methodName,
        context: name,
        generate: entityCallee
      })
    }

    if hasParams {
      self.entities.push(CodegenEntity{
        name: typeName + "_params_t",
        codeName: typeName + "_params_t",
        context: name,
        generate: entityCallee
      })
    }

    return name
  }

  fn _generateOptionalType (mut self: ref Codegen, item: ref Analyzer.Type) str {
    typeName := "the_" + self._typeName(item)
    name := typeName + "_t"

    if self._hasEntity(name) {
      return name
    }

    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: item,
      generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
        it := entity.context as ref Analyzer.Type
        t := it.asOptional()
        underlyingType := self._type(t.t)
        underlyingTypeName := self._typeName(t.t)

        return [
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_OPTIONAL_DECLARE"), [
            AST.createIdentifier(underlyingTypeName),
            AST.createType(underlyingType)
          ]), terminated: false),
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_OPTIONAL_DEFINE"), [
            AST.createIdentifier(underlyingTypeName),
            AST.createType(underlyingType),
            self._functionCopy(t.t, AST.createIdentifier("val")),
            self._functionEq(t.t, AST.createIdentifier("lhs_val"), AST.createIdentifier("rhs_val")),
            self._functionFree(t.t, AST.createIdentifier("val")),
            self._functionStr(t.t, AST.createIdentifier("val"))
          ]), terminated: false),
        ]
      }
    })

    methods := ["alloc", "copy", "eq", "free", "realloc", "str"]

    entityCallee := (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
      self._(entity.context as str)
      return AST.createEmptyStatement()
    }

    loop i := 0; i < methods.len; i++ {
      methodName := methods[i] as str

      self.entities.push(CodegenEntity{
        name: typeName + "_" + methodName,
        codeName: typeName + "_" + methodName,
        context: name,
        generate: entityCallee
      })
    }

    return name
  }

  fn _generateReferenceType (mut self: ref Codegen, item: ref Analyzer.Type) str {
    typeName := "the_" + self._typeName(item)
    name := typeName + "_t"

    if self._hasEntity(name) {
      return name
    }

    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: item,
      generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
        it := entity.context as ref Analyzer.Type
        t := it.asReference()

        return AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_REFERENCE_DECLARE"), [
          AST.createIdentifier(self._typeName(t.t)),
          AST.createType(self._type(t.t))
        ]), terminated: false)
      }
    })

    return name
  }

  fn _generateUnionType (mut self: ref Codegen, item: ref Analyzer.Type) str {
    typeName := "the_" + self._typeName(item)
    name := typeName + "_t"

    if self._hasEntity(name) {
      return name
    }

    self.entities.push(CodegenEntity{
      name: name,
      codeName: name,
      context: item,
      generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
        it := entity.context as ref Analyzer.Type
        t := it.asUnion()
        unionName := entity.codeName.slice(10, -4)

        mut structureBlock: AST.CStatement[]
        mut allocBlock: AST.CStatement[]
        mut copyBlock: AST.CStatement[]
        mut eqBlock: AST.CStatement[]
        mut freeBlock: AST.CStatement[]
        mut strBlock: AST.CStatement[]

        loop i := 0; i < t.types.len; i++ {
          subType := t.types[i] as ref Analyzer.Type
          typeDecl := self._type(subType)
          typeDef := self._typeDef(subType)
          typeDefIdx := self.typeDefs.get(typeDef)
          typeProperty := "v" + typeDefIdx.str()

          structureBlock.push(
            AST.createVariableDeclaration(AST.createType(typeDecl), typeProperty)
          )

          allocBlock.push(
            AST.createIfStatement(
              AST.createBinaryExpression(
                AST.createPropertyAccessExpression(AST.createIdentifier("self"), "type"),
                "==",
                AST.createIdentifier(self._(typeDef))
              ),
              AST.createExpressionStatement(
                AST.createAssignmentExpression(
                  AST.createPropertyAccessExpression(
                    AST.createPropertyAccessExpression(
                      AST.createIdentifier("self"),
                      "data"
                    ),
                    typeProperty
                  ),
                  "=",
                  self._functionCopy(
                    subType,
                    AST.createCallExpression(AST.createIdentifier(self._("va_arg")), [
                      AST.createIdentifier("args"),
                      AST.createType(typeDecl)
                    ])
                  )
                )
              )
            )
          )

          copyBlock.push(
            AST.createIfStatement(
              AST.createBinaryExpression(
                AST.createPropertyAccessExpression(AST.createIdentifier("self"), "type"),
                "==",
                AST.createIdentifier(self._(typeDef))
              ),
              AST.createExpressionStatement(
                AST.createAssignmentExpression(
                  AST.createPropertyAccessExpression(
                    AST.createPropertyAccessExpression(AST.createIdentifier("result"), "data"),
                    typeProperty
                  ),
                  "=",
                  self._functionCopy(
                    subType,
                    AST.createPropertyAccessExpression(
                      AST.createPropertyAccessExpression(AST.createIdentifier("self"), "data"),
                      typeProperty
                    )
                  )
                )
              )
            )
          )

          eqBlock.push(
            AST.createIfStatement(
              AST.createBinaryExpression(
                AST.createPropertyAccessExpression(AST.createIdentifier("self"), "type"),
                "==",
                AST.createIdentifier(self._(typeDef))
              ),
              AST.createReturnStatement(
                self._functionEq(
                  subType,
                  AST.createPropertyAccessExpression(
                    AST.createPropertyAccessExpression(AST.createIdentifier("self"), "data"),
                    typeProperty
                  ),
                  AST.createPropertyAccessExpression(
                    AST.createPropertyAccessExpression(AST.createIdentifier("rhs"), "data"),
                    typeProperty
                  )
                )
              )
            )
          )

          if typeShouldBeFreed(subType) {
            freeBlock.push(
              AST.createIfStatement(
                AST.createBinaryExpression(
                  AST.createPropertyAccessExpression(AST.createIdentifier("self"), "type"),
                  "==",
                  AST.createIdentifier(self._(typeDef))
                ),
                AST.createExpressionStatement(
                  self._functionFree(
                    subType,
                    AST.createPropertyAccessExpression(
                      AST.createPropertyAccessExpression(AST.createIdentifier("self"), "data"),
                      typeProperty
                    )
                  )
                )
              )
            )
          }

          strBlock.push(
            AST.createIfStatement(
              AST.createBinaryExpression(
                AST.createPropertyAccessExpression(AST.createIdentifier("self"), "type"),
                "==",
                AST.createIdentifier(self._(typeDef))
              ),
              AST.createReturnStatement(
                self._functionStr(
                  subType,
                  AST.createPropertyAccessExpression(
                    AST.createPropertyAccessExpression(AST.createIdentifier("self"), "data"),
                    typeProperty
                  )
                )
              )
            )
          )
        }

        if freeBlock.empty {
          freeBlock.push(
            AST.createExpressionStatement(
              AST.createCastExpression(AST.createType("void"), AST.createIdentifier("self"))
            )
          )
        }

        return [
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_UNION_DECLARE"), [
            AST.createIdentifier(unionName),
            AST.createCompoundStatement(structureBlock)
          ]), terminated: false),
          AST.createExpressionStatement(AST.createMacroInvocation(self._("THE_UNION_DEFINE"), [
            AST.createIdentifier(unionName),
            AST.createCompoundStatement(allocBlock),
            AST.createCompoundStatement(copyBlock),
            AST.createCompoundStatement(eqBlock),
            AST.createCompoundStatement(freeBlock),
            AST.createCompoundStatement(strBlock)
          ]), terminated: false)
        ]
      }
    })

    methods := ["alloc", "copy", "eq", "free", "realloc", "str"]

    entityCallee := (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
      self._(entity.context as str)
      return AST.createEmptyStatement()
    }

    loop i := 0; i < methods.len; i++ {
      methodName := methods[i] as str

      self.entities.push(CodegenEntity{
        name: typeName + "_" + methodName,
        codeName: typeName + "_" + methodName,
        context: name,
        generate: entityCallee
      })
    }

    return name
  }

  fn _getEntity (self: ref Self, name: str) ref CodegenEntity {
    loop i := self.entities.len - 1; i >= 0; i-- {
      entity := self.entities[i]

      if entity.name == name {
        return entity
      }
    }

    throw error_NewError("Entity with name '" + name + "' doesn't exists")
  }

  fn _hasEntity (self: ref Self, name: str, withBuiltin := true) bool {
    loop i := self.entities.len - 1; i >= 0; i-- {
      entity := self.entities[i]

      if entity.name == name {
        return true
      }
    }

    if withBuiltin {
      builtinEntitiesValues := BUILTIN_ENTITIES.values

      loop i := builtinEntitiesValues.len - 1; i >= 0; i-- {
        entityValues := builtinEntitiesValues[i]

        if entityValues.contains(name) {
          return true
        }
      }
    }

    return false
  }

  fn _label (mut self: ref Self) str {
    self.lastLabelId++
    return "L" + self.lastLabelId.str()
  }

  fn _tm (mut self: ref Self) ref Analyzer.TypeMap {
    mut file := self.analyzer.files.last()
    return ref file.tm
  }

  fn _tmpVar (mut self: ref Self) str {
    self.lastVarId++
    return "__THE_" + self.lastVarId.str()
  }

  fn _type (mut self: ref Self, it: ref Analyzer.Type, postfix := "_t") str {
    if it.isAlias() {
      t := it.asAlias()
      return self._type(t.t)
    } elif it.name == "any" {
      return self._("the_any_t") + " "
    } elif it.name == "bool" {
      return self._("bool") + " "
    } elif it.name == "byte" {
      return "unsigned char "
    } elif it.name == "char" {
      return "char "
    } elif it.name == "f32" {
      return "float "
    } elif it.name == "f64" || it.name == "float" {
      return "double "
    } elif it.name == "i8" {
      return self._("int8_t") + " "
    } elif it.name == "i16" {
      return self._("int16_t") + " "
    } elif it.name == "i32" || it.name == "int" {
      return self._("int32_t") + " "
    } elif it.name == "i64" {
      return self._("int64_t") + " "
    } elif it.name == "isize" {
      return self._("ptrdiff_t") + " "
    } elif it.name == "rune" {
      return self._("wchar_t") + " "
    } elif it.name == "str" {
      return self._("the_str" + postfix) + (postfix.slice(-3) == "_t" ? " " : "")
    } elif it.name == "u8" {
      return self._("uint8_t") + " "
    } elif it.name == "u16" {
      return self._("uint16_t") + " "
    } elif it.name == "u32" {
      return self._("uint32_t") + " "
    } elif it.name == "u64" {
      return self._("uint64_t") + " "
    } elif it.name == "usize" {
      return self._("size_t") + " "
    } elif it.name == "void" {
      return "void "
    } elif (
      it.isArray() ||
      it.isEnum() ||
      it.isFunction() ||
      it.isMap() ||
      // todo
      // it.isObject() ||
      it.isOptional() ||
      it.isReference() ||
      it.isUnion()
    ) {
      if it.isArray() {
        self._generateArrayType(it)
      } elif it.isFunction() {
        self._generateFunctionType(it)
      } elif it.isOptional() {
        self._generateOptionalType(it)
      } elif it.isReference() {
        self._generateReferenceType(it)
      } elif it.isUnion() {
        self._generateUnionType(it)
      }

      return self._("the_" + self._typeName(it) + postfix) + (postfix.slice(-3) == "_t" ? " " : "")
    }

    throw error_NewError("Failed to generate type for '" + it.toString() + "'")
  }

  fn _wrap (
    mut self: ref Self,
    mut expression: AST.CExpression,
    item: ref Parser.Expression,
    t: ref Analyzer.Type,
    targetType: ref Analyzer.Type,
    transform := false
  ) AST.CExpression {
    shouldFree := typeShouldBeFreed(targetType) && expressionShouldBeFreed(item)

    if transform && !shouldFree && typeShouldBeAllocated(t) && expressionShouldBeAllocated(item) {
      expression = self._allocateExpression(t, expression)
    }

    if targetType.name == "any" && t.name != "any" {
      allocAnyType := self._generateAnyType(t).slice(0, -2) + "_alloc"
      expression = AST.createCallExpression(AST.createIdentifier(self._(allocAnyType)), [expression])
    } elif targetType.name != "any" && t.name == "any" {
      typeName := self._generateAnyType(targetType)

      // TODO: throw runtime error if not possible to cast
      innerExpression := AST.createCastExpression(
        AST.createType(self._(typeName)),
        AST.createPropertyAccessExpression(expression, "ctx")
      )

      expression = AST.createUnaryExpression("*", innerExpression.wrap())
    } elif !targetType.isReference() && t.isReference() {
      expression = AST.createUnaryExpression("*", expression)
    } elif targetType.isUnion() && !t.isUnion() {
      allocTargetType := self._type(targetType, "_alloc")
      typeDef := self._typeDef(t)

      expression = AST.createCallExpression(AST.createIdentifier(allocTargetType), [
        AST.createIdentifier(self._(typeDef)),
        expression
      ])
    } elif !targetType.isUnion() && t.isUnion() {
      typeName := self._typeDef(targetType)
      typeDefIdx := self.typeDefs.get(typeName)

      // TODO: throw runtime error if not possible to cast
      expression = AST.createPropertyAccessExpression(
        AST.createPropertyAccessExpression(expression, "data"),
        "v" + typeDefIdx.str()
      )
    }

    if !transform {
      return expression
    }

    typesMatch := Analyzer.match(t, targetType)

    if shouldFree {
      expression = self._functionFree(targetType, expression)
    } elif !typesMatch && typeShouldBeAllocated(targetType) && expressionShouldBeAllocated(item) {
      expression = self._allocateExpression(targetType, expression)
    }

    return expression
  }

  fn _typeDef (mut self: ref Self, it: ref Analyzer.Type) str {
    typeName := "TYPE_" + self._typeName(it)

    if self._hasEntity(typeName) {
      return typeName
    }

    lastTypeId := ++self.lastTypeId
    self.typeDefs.set(typeName, lastTypeId)

    self.entities.push(CodegenEntity{
      name: typeName,
      codeName: typeName,
      context: it,
      generate: (mut self: ref Codegen, entity: ref CodegenEntity) -> GenerateReturnType {
        typeDefIdx := self.typeDefs.get(entity.codeName)
        return AST.createDefineDirective(entity.codeName, nil, typeDefIdx.str())
      }
    })

    return typeName
  }

  fn _typeName (mut self: ref Self, it: ref Analyzer.Type) str {
    if it.isAlias() {
      t := it.asAlias()
      return self._typeName(t.t)
    } elif it.isArray() {
      t := it.asArray()
      return "arr_" + self._typeName(t.elementType)
    } elif it.isEnum() || it.isObject() {
      return it.name
    } elif it.isFunction() {
      t := it.asFunction()
      mut name := "fn_" + (t.asynchronous ? "a" : "s")

      loop i := 0; i < t.parameters.len; i++ {
        parameter := t.parameters[i]
        name += typeParameterId(parameter) + self._typeName(parameter.t)
      }

      return name + "FR" + self._typeName(t.returnType) + "FE"
    } elif it.isMap() {
      t := it.asMap()
      return "map_" + self._typeName(t.keyType) + "MS" + self._typeName(t.valueType) + "ME"
    } elif it.isMethod() {
      t := it.asMethod()
      mut name := "fn_" + (t.asynchronous ? "a" : "s")

      if t.withSelf {
        name += "FS" + self._typeName(t.selfType)
      }

      loop i := 0; i < t.parameters.len; i++ {
        parameter := t.parameters[i]
        name += typeParameterId(parameter) + self._typeName(parameter.t)
      }

      return name + "FR" + self._typeName(t.returnType) + "FE"
    } elif it.isOptional() {
      t := it.asOptional()
      return "opt_" + self._typeName(t.t)
    } elif it.isReference() {
      t := it.asReference()
      return "ref_" + self._typeName(t.t)
    } elif it.isUnion() {
      t := it.asUnion()
      mut name := ""

      loop i := 0; i < t.types.len; i++ {
        subType := t.types[i] as ref Analyzer.Type
        name += i == 0 ? "" : "US"
        name += self._typeName(subType)
      }

      return "union_" + name + "UE"
    }

    throw error_NewError("Failed to generate type name for '" + it.name + "'")
  }
}

export fn compile (analyzer: ref Analyzer.Analyzer, executablePath: str) {
  mut generator := Codegen{analyzer: analyzer}
  generator.init()
  generator.generate()

  codePath := executablePath + ".c"

  fs_writeFileSync(codePath, generator.stringify().toBuffer())
  process_runSync("clang '" + codePath + "' -o '" + executablePath + "' " + generator.getFlags())
  fs_rmSync(codePath)
}
