/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import * as Analyzer from "the/analyzer"
import * as Parser from "the/parser"
import Codegen from "../src/codegen"
import applyRegexTemplate, matchRegex, retrieveFileSections from "./utils"

import Tests, EXPECT_EQ from "the/testing" // TODO: delete when done testing

fn TEST_EXPECT_EQ (test: str, a: str, b: str) {
  EXPECT_EQ(test + os_EOL + a, test + os_EOL + b)
}

fn TEST_EXPECT_REGEX (test: str, a: str, b: str) {
  EXPECT_EQ(test + os_EOL + a, test + os_EOL + applyRegexTemplate(b, a))
}

export fn TEST_Codegen () {
  allFiles := fs_scandirSync("./test/codegen")
  mut files := allFiles

  if !fs_existsSync("./build") {
    fs_mkdirSync("./build")
  }

  mut containsOnly := false

  loop i := 0; i < allFiles.len; i++ {
    file := allFiles[i] as str

    if file.slice(0, 5) == "only-" {
      if !containsOnly {
        files = []
      }

      files.push(file)
      containsOnly = true
    }
  }

  loop i := 0; i < files.len; i++ {
    name := files[i].slice(0, -4)
    fileSections := retrieveFileSections("./test/codegen/" + name + ".txt")
    executablePath := "./build/" + name + ".out"
    codePath := "./build/" + name + ".c"
    print(name)

    mut analyzer := Analyzer.Analyzer{}

    analyzer.files.push(Analyzer.AnalyzerFile{
      cwd: process_cwd(),
      analyzer: ref analyzer,
      f: Parser.parse(fileSections.input),
    })

    mut file := analyzer.files.last()
    Parser.interconnect(ref file.f)
    file.reader = Parser.Reader_init(file.f.content)
    file.init()
    file.analyze(ref file.f.program.body)

    if !analyzer.errors.empty {
      TEST_EXPECT_EQ(name, analyzer.errors.join(os_EOL), "")
      continue
    }

    mut generator := Codegen{analyzer: ref analyzer, sanitize: true}
    generator.init()

    mut generationError := ""

    try {
      generator.generate()
    } catch err: error_Error {
      generationError = err.message
    }

    if !generationError.empty {
      TEST_EXPECT_EQ(name, generationError, "")
      continue
    }

    generatedCode := generator.stringify()

    if fileSections.code != generatedCode {
      TEST_EXPECT_EQ(name, fileSections.code, generatedCode)
      continue
    }

    fs_writeFileSync(codePath, generatedCode.toBuffer())
    mut errorMessage := ""

    try {
      process_runSync("clang '" + codePath + "' -o '" + executablePath + "'" + generator.getFlags())
    } catch err: error_Error {
      errorMessage = err.message
    }

    fs_rmSync(codePath)

    if !errorMessage.empty {
      TEST_EXPECT_EQ(name, errorMessage, "")
      continue
    }

    mut actualOutput := ""

    try {
      sanitizeFlags := generator.getSanitizeFlags()

      sanitizeEnv := os_NAME == "Windows"
        ? "set ASAN_OPTIONS=" + sanitizeFlags + " &&"
        : "ASAN_OPTIONS=" + sanitizeFlags

      actualOutput = process_runSync(sanitizeEnv + " " + executablePath).str()
    } catch err: error_Error {
      actualOutput = err.message
    }

    fs_rmSync(executablePath)

    if actualOutput != fileSections.output {
      TEST_EXPECT_REGEX(name, actualOutput, fileSections.output)
    }
  }
}

main {
  mut tests := Tests{}
  tests.register("Codegen", TEST_Codegen)
  tests.run(process_args)
}
