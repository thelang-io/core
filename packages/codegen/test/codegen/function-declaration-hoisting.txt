fn factorial (n: i64) i64 {
  return n <= 1 ? 1 : n * factorial(n - 1)
}

fn test1 (mut a: int) int {
  if a == 1 {
    return test1(a + 10)
  } elif a == 10 {
    return test2(a + 100)
  } else {
    return 2
  }
}

fn test2 (a: int) int {
  if a == 11 {
    return test1(a - 10)
  } elif a == 101 {
    return test2(a - 100)
  } else {
    return 21
  }
}

main {
  loop i := -1; i < 10; i++ {
    print("factorial(" + i.str() + "):", factorial(i))
  }

  print("test1(0):", test1(0))
  print("test1(1):", test1(1))
  print("test1(2):", test1(2))
  print("test1(10):", test1(10))
  print("test1(11):", test1(11))
  print("test1(12):", test1(12))
  print("test1(20):", test1(20))
  print("test1(21):", test1(21))
  print("test1(22):", test1(22))
  print("test1(100):", test1(100))
  print("test1(101):", test1(101))
  print("test1(102):", test1(102))
  print("test2(0):", test2(0))
  print("test2(1):", test2(1))
  print("test2(2):", test2(2))
  print("test2(10):", test2(10))
  print("test2(11):", test2(11))
  print("test2(12):", test2(12))
  print("test2(20):", test2(20))
  print("test2(21):", test2(21))
  print("test2(22):", test2(22))
  print("test2(100):", test2(100))
  print("test2(101):", test2(101))
  print("test2(102):", test2(102))
}
===== code =====
===== output =====
factorial(-1): 1
factorial(0): 1
factorial(1): 1
factorial(2): 2
factorial(3): 6
factorial(4): 24
factorial(5): 120
factorial(6): 720
factorial(7): 5040
factorial(8): 40320
factorial(9): 362880
test1(0): 2
test1(1): 2
test1(2): 2
test1(10): 21
test1(11): 2
test1(12): 2
test1(20): 2
test1(21): 2
test1(22): 2
test1(100): 2
test1(101): 2
test1(102): 2
test2(0): 21
test2(1): 21
test2(2): 21
test2(10): 21
test2(11): 2
test2(12): 21
test2(20): 21
test2(21): 21
test2(22): 21
test2(100): 21
test2(101): 21
test2(102): 21
