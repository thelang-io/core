/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export obj TestFileSections {
  mut input: str
  mut code: str
  mut output: str
}

export fn applyRegexTemplate (pattern: str, source: str) str {
  sourceLen := source.len
  mut templatePos := 0
  mut sourcePos := 0
  mut result := ""

  loop {
    patternSlice := pattern.slice(templatePos)
    templateStart := patternSlice.find("{{")

    if templateStart == -1 {
      result += patternSlice
      break
    }

    templateSlice := patternSlice.slice(templateStart)
    templateEnd := templateSlice.find("}}")

    if templateEnd == -1 {
      result += patternSlice
      break
    }

    beforeTemplate := patternSlice.slice(0, templateStart)
    template := templateSlice.slice(2, templateEnd).trim()
    result += beforeTemplate
    templatePos += templateStart + templateEnd + 2
    sourcePos += templateStart

    matchLength := matchRegex(source.slice(sourcePos), template)
    result += source.slice(sourcePos, sourcePos + matchLength)
    sourcePos += matchLength
  }

  return result
}

export fn matchRegex (input: str, regex: str) int {
  regexLen := regex.len
  mut regexArr: char[]

  loop i := 0; i < regexLen; i++ {
    regexArr.push(regex[i])
  }

  inputLen := input.len
  mut result := 0

  if input.empty {
    return 0
  }

  loop i := 0; i < regexLen && result < inputLen; i++ {
    if regexArr[i] == '\\' && i != regexLen - 1 && i != inputLen - 1 {
      nextTk := regexArr[i + 1]

      if nextTk == 's' {
        if input[result].isWhitespace {
          result += 1
          i += 1
        } else {
          break
        }
      } else {
        throw error_NewError("Invalid regex '" + regex + "'")
      }
    } else {
      throw error_NewError("Invalid regex '" + regex + "'")
    }
  }

  return result
}

export fn retrieveFileSections (path: str) TestFileSections {
  content := fs_readFileSync(path).str()
  lines := content.lines(keepLineBreaks: true)
  l := lines.len

  mut result := TestFileSections{}
  mut propertyId := 0

  loop i := 0; i < l; i++ {
    line := lines[i]

    if "=====" == line.slice(0, 5) {
      propertyName := line.trim().slice(6, -6)

      if "code" == propertyName {
        propertyId = 1
      } elif "output" == propertyName {
        propertyId = 2
      }

      continue
    }

    if 0 == propertyId {
      result.input += line
    } elif 1 == propertyId {
      result.code += line
    } elif 2 == propertyId {
      result.output += line
    }
  }

  return result
}
